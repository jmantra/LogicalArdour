<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="173" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000"></LuaCallback>
    <LuaCallback lua="Lua 5.3" id="13055" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdICAgID0gXCJFZGl0b3JIb29rXCIsXApcOW5hbWUgICAgICAgID0gXCJhdXRvIHNhdmUgc25hcHNob3RcIixcClw5YXV0aG9yICAgICAgPSBcIkFyZG91ciBUZWFtXCIsXApcOWRlc2NyaXB0aW9uID0gXCJTYXZlIGEgc2Vzc2lvbi1zbmFwc2hvdCBwZXJpb2RpY2FsbHkgKGV2ZXJ5IG1pbnV0ZSkgbmFtZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgZGF0ZS10aW1lXCIsXAp9XApcCi0tIHN1YnNjcmliZSB0byBzaWduYWxzXAotLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0x1YVNpZ25hbC5MdWFTaWduYWxcCmZ1bmN0aW9uIHNpZ25hbHMgKClcClw5cmV0dXJuIEx1YVNpZ25hbC5TZXQoKTphZGQgKHtbTHVhU2lnbmFsLkx1YVRpbWVyU10gPSB0cnVlfSlcCmVuZFwKXAotLSBjcmVhdGUgY2FsbGJhY2sgZnVuY3Rpb25cCmZ1bmN0aW9uIGZhY3RvcnkgKClcClw5bG9jYWwgX2xhc3Rfc25hcHNob3RfdGltZSA9IDAgLS0gcGVyc2lzdGVudCB2YXJpYWJsZVwKXDlsb2NhbCBfc25hcHNob3RfaW50ZXJ2YWwgPSA2MCAqIDEgLS0gMTUgbWludXRlc1wKXApcOS0tIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGludm9rZWQgd2hlbiBzaWduYWwgaXMgZW1pdHRlZCwgZXZlcnkgMTAwbXNcClw5cmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIHJlZiwgLi4uKVwKXApcOVw5bG9jYWwgbm93ID0gb3MudGltZSAoKTsgLS0gdW5peC10aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzBcClwKXDlcOS0tIHNraXAgaW5pdGlhbCBzYXZlIHdoZW4gc2NyaXB0IGlzIGxvYWRlZFwKXDlcOWlmIChfbGFzdF9zbmFwc2hvdF90aW1lID09IDApIHRoZW5cClw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3c7XApcOVw5ZW5kXApcClw5XDktLSBldmVyeSAxNSBtaW5zXApcOVw5aWYgKG5vdyA+IF9sYXN0X3NuYXBzaG90X3RpbWUgKyBfc25hcHNob3RfaW50ZXJ2YWwpIHRoZW5cClwKXDlcOVw5LS0gZG9uJ3Qgc2F2ZSB3aGlsZSByZWNvcmRpbmcsIG1heSBpbnRlcmZlcmUgd2l0aCByZWNvcmRpbmdcClw5XDlcOWlmIFNlc3Npb246YWN0aXZlbHlfcmVjb3JkaW5nKCkgdGhlblwKXDlcOVw5XDktLSBxdWV1ZSAzMCBzZWMgYWZ0ZXIgcmVjLXN0b3BcClw5XDlcOVw5X2xhc3Rfc25hcHNob3RfdGltZSA9IG5vdyAtIF9zbmFwc2hvdF9pbnRlcnZhbCArIDMwXApcOVw5XDlcOXJldHVyblwKXDlcOVw5ZW5kXApcClw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3dcClw5XDlcOS0tIGZvcm1hdCBkYXRlLXRpbWUgKGF2b2lkIGNvbG9uKVwKXDlcOVw5bG9jYWwgc25hcHNob3RfbmFtZSA9IG9zLmRhdGUgKFwiJVktJW0tJWQgJUguJU0uJVNcIiwgbm93KVwKXDlcOVw5LS0gc2F2ZSBzZXNzaW9uIC0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQVJET1VSOlNlc3Npb25cClw5XDlcOVNlc3Npb246c2F2ZV9zdGF0ZSAoXCJiYWNrdXAgXCIgLi4gc25hcHNob3RfbmFtZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSlcClw5XDllbmRcClwKXDllbmRcCmVuZFwKIiAgc1siZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcMTVcMFwwXDAvXDBcMFwwXDBcMFwzXDVcMFwwXDBcMVwwXDBcMEFAXDBcMKxcMFwwXDCmXDBcMFwxJlwwgFwwXDJcMFwwXDBcMTlcMFwwXDBcMFwwXDBcMFwwXDE5PFwwXDBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwyMFwwXDBcMC5cMFwwXDBcMlwxXAomXDBcMFwwhlwwQFwwh0BAXDGkgIBcMMVcMIBcMFwzMYDAXDFcMzBcMFwwgIlcMIBcMMVcMIBcMFw1XDFcMFwxzVwwgVwxIICAXDFcMzBcMFw2gMbAQFwwzFwwwVwx5IBcMFwx4lwwXDBcMFwzMFwwXDGAxVwwXDBcMc7AXDBcMc1AwVwxyVwwgFwwJlwwgFwwiVwwgFwwxlwwQFwwx4DBXDFcMcFcMVwwQFwxXDBcMeSAgFwxXDbBQFwwXDEyXDFCXDKBQVwyXDDAXDGAXDGdwVwxXDPDXDFcMFwwXDNcMlwwXDBDXDJcMFwwJEFcMFwzJlwwgFwwXApcMFwwXDBcNFwzb3NcNFw1dGltZVwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4U2Vzc2lvblw0XDE5YWN0aXZlbHlfcmVjb3JkaW5nXDE5XDMwXDBcMFwwXDBcMFwwXDBcNFw1ZGF0ZVw0XDE4JVktJW0tJWQgJUguJU0uJVNcNFwxMXNhdmVfc3RhdGVcNFw4YmFja3VwIFwzXDBcMFwwXDBcMFwxXDBcMVwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNbImEiXSA9IHt9IHNbImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2F1dG9zYXZlLmx1YSIgICBzWyJuIl0gPSAiYXV0byBzYXZlIHNuYXBzaG90IiAg</LuaCallback>
  </ActionHooks>
</UIScripts>

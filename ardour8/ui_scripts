<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="13055" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbImEiXSA9IHt9IHNbImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2F1dG9zYXZlLmx1YSIgICBzWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwxNVwwXDBcMC9cMFwwXDBcMFwwXDNcNVwwXDBcMFwxXDBcMFwwQUBcMFwwrFwwXDBcMKZcMFwwXDEmXDCAXDBcMlwwXDBcMFwxOVwwXDBcMFwwXDBcMFwwXDBcMTk8XDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDIwXDBcMFwwLlwwXDBcMFwyXDFcCiZcMFwwXDCGXDBAXDCHQEBcMaSAgFwwxVwwgFwwXDMxgMBcMVwzMFwwXDCAiVwwgFwwxVwwgFwwXDVcMVwwXDHNXDCBXDEggIBcMVwzMFwwXDaAxsBAXDDMXDDBXDHkgFwwXDHiXDBcMFwwXDMwXDBcMYDFXDBcMFwxzsBcMFwxzUDBXDHJXDCAXDAmXDCAXDCJXDCAXDDGXDBAXDDHgMFcMVwxwVwxXDBAXDFcMFwx5ICAXDFcNsFAXDBcMTJcMUJcMoFBXDJcMMBcMYBcMZ3BXDFcM8NcMVwwXDBcM1wyXDBcMENcMlwwXDAkQVwwXDMmXDCAXDBcClwwXDBcMFw0XDNvc1w0XDV0aW1lXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDhTZXNzaW9uXDRcMTlhY3RpdmVseV9yZWNvcmRpbmdcMTlcMzBcMFwwXDBcMFwwXDBcMFw0XDVkYXRlXDRcMTglWS0lbS0lZCAlSC4lTS4lU1w0XDExc2F2ZV9zdGF0ZVw0XDhiYWNrdXAgXDNcMFwwXDBcMFwwXDFcMFwxXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc1sicyJdID0gImFyZG91ciB7XApcOVtcInR5cGVcIl0gICAgPSBcIkVkaXRvckhvb2tcIixcClw5bmFtZSAgICAgICAgPSBcImF1dG8gc2F2ZSBzbmFwc2hvdFwiLFwKXDlhdXRob3IgICAgICA9IFwiQXJkb3VyIFRlYW1cIixcClw5ZGVzY3JpcHRpb24gPSBcIlNhdmUgYSBzZXNzaW9uLXNuYXBzaG90IHBlcmlvZGljYWxseSAoZXZlcnkgbWludXRlKSBuYW1lZCBhZnRlciB0aGUgY3VycmVudCBkYXRlLXRpbWVcIixcCn1cClwKLS0gc3Vic2NyaWJlIHRvIHNpZ25hbHNcCi0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jTHVhU2lnbmFsLkx1YVNpZ25hbFwKZnVuY3Rpb24gc2lnbmFscyAoKVwKXDlyZXR1cm4gTHVhU2lnbmFsLlNldCgpOmFkZCAoe1tMdWFTaWduYWwuTHVhVGltZXJTXSA9IHRydWV9KVwKZW5kXApcCi0tIGNyZWF0ZSBjYWxsYmFjayBmdW5jdGlvblwKZnVuY3Rpb24gZmFjdG9yeSAoKVwKXDlsb2NhbCBfbGFzdF9zbmFwc2hvdF90aW1lID0gMCAtLSBwZXJzaXN0ZW50IHZhcmlhYmxlXApcOWxvY2FsIF9zbmFwc2hvdF9pbnRlcnZhbCA9IDYwICogMSAtLSAxNSBtaW51dGVzXApcClw5LS0gY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggaW52b2tlZCB3aGVuIHNpZ25hbCBpcyBlbWl0dGVkLCBldmVyeSAxMDBtc1wKXDlyZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgcmVmLCAuLi4pXApcClw5XDlsb2NhbCBub3cgPSBvcy50aW1lICgpOyAtLSB1bml4LXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MFwKXApcOVw5LS0gc2tpcCBpbml0aWFsIHNhdmUgd2hlbiBzY3JpcHQgaXMgbG9hZGVkXApcOVw5aWYgKF9sYXN0X3NuYXBzaG90X3RpbWUgPT0gMCkgdGhlblwKXDlcOVw5X2xhc3Rfc25hcHNob3RfdGltZSA9IG5vdztcClw5XDllbmRcClwKXDlcOS0tIGV2ZXJ5IDE1IG1pbnNcClw5XDlpZiAobm93ID4gX2xhc3Rfc25hcHNob3RfdGltZSArIF9zbmFwc2hvdF9pbnRlcnZhbCkgdGhlblwKXApcOVw5XDktLSBkb24ndCBzYXZlIHdoaWxlIHJlY29yZGluZywgbWF5IGludGVyZmVyZSB3aXRoIHJlY29yZGluZ1wKXDlcOVw5aWYgU2Vzc2lvbjphY3RpdmVseV9yZWNvcmRpbmcoKSB0aGVuXApcOVw5XDlcOS0tIHF1ZXVlIDMwIHNlYyBhZnRlciByZWMtc3RvcFwKXDlcOVw5XDlfbGFzdF9zbmFwc2hvdF90aW1lID0gbm93IC0gX3NuYXBzaG90X2ludGVydmFsICsgMzBcClw5XDlcOVw5cmV0dXJuXApcOVw5XDllbmRcClwKXDlcOVw5X2xhc3Rfc25hcHNob3RfdGltZSA9IG5vd1wKXDlcOVw5LS0gZm9ybWF0IGRhdGUtdGltZSAoYXZvaWQgY29sb24pXApcOVw5XDlsb2NhbCBzbmFwc2hvdF9uYW1lID0gb3MuZGF0ZSAoXCIlWS0lbS0lZCAlSC4lTS4lU1wiLCBub3cpXApcOVw5XDktLSBzYXZlIHNlc3Npb24gLS0gaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6U2Vzc2lvblwKXDlcOVw5U2Vzc2lvbjpzYXZlX3N0YXRlIChcImJhY2t1cCBcIiAuLiBzbmFwc2hvdF9uYW1lLCBmYWxzZSwgZmFsc2UsIGZhbHNlKVwKXDlcOWVuZFwKXApcOWVuZFwKZW5kXAoiICBzWyJuIl0gPSAiYXV0byBzYXZlIHNuYXBzaG90IiAg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="28502" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000"></LuaCallback>
  </ActionHooks>
</UIScripts>

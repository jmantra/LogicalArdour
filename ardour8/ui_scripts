<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="13055" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE1XDBcMFwwL1wwXDBcMFwwXDBcM1w1XDBcMFwwXDFcMFwwXDBBQFwwXDCsXDBcMFwwplwwXDBcMSZcMIBcMFwyXDBcMFwwXDE5XDBcMFwwXDBcMFwwXDBcMFwxOTxcMFwwXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMjBcMFwwXDAuXDBcMFwwXDJcMVwKJlwwXDBcMIZcMEBcMIdAQFwxpICAXDDFXDCAXDBcMzGAwFwxXDMwXDBcMICJXDCAXDDFXDCAXDBcNVwxXDBcMc1cMIFcMSCAgFwxXDMwXDBcNoDGwEBcMMxcMMFcMeSAXDBcMeJcMFwwXDBcMzBcMFwxgMVcMFwwXDHOwFwwXDHNQMFcMclcMIBcMCZcMIBcMIlcMIBcMMZcMEBcMMeAwVwxXDHBXDFcMEBcMVwwXDHkgIBcMVw2wUBcMFwxMlwxQlwygUFcMlwwwFwxgFwxncFcMVwzw1wxXDBcMFwzXDJcMFwwQ1wyXDBcMCRBXDBcMyZcMIBcMFwKXDBcMFwwXDRcM29zXDRcNXRpbWVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOFNlc3Npb25cNFwxOWFjdGl2ZWx5X3JlY29yZGluZ1wxOVwzMFwwXDBcMFwwXDBcMFwwXDRcNWRhdGVcNFwxOCVZLSVtLSVkICVILiVNLiVTXDRcMTFzYXZlX3N0YXRlXDRcOGJhY2t1cCBcM1wwXDBcMFwwXDBcMVwwXDFcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9hdXRvc2F2ZS5sdWEiICAgc1sibiJdID0gImF1dG8gc2F2ZSBzbmFwc2hvdCIgIHNbInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdICAgID0gXCJFZGl0b3JIb29rXCIsXApcOW5hbWUgICAgICAgID0gXCJhdXRvIHNhdmUgc25hcHNob3RcIixcClw5YXV0aG9yICAgICAgPSBcIkFyZG91ciBUZWFtXCIsXApcOWRlc2NyaXB0aW9uID0gXCJTYXZlIGEgc2Vzc2lvbi1zbmFwc2hvdCBwZXJpb2RpY2FsbHkgKGV2ZXJ5IG1pbnV0ZSkgbmFtZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgZGF0ZS10aW1lXCIsXAp9XApcCi0tIHN1YnNjcmliZSB0byBzaWduYWxzXAotLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0x1YVNpZ25hbC5MdWFTaWduYWxcCmZ1bmN0aW9uIHNpZ25hbHMgKClcClw5cmV0dXJuIEx1YVNpZ25hbC5TZXQoKTphZGQgKHtbTHVhU2lnbmFsLkx1YVRpbWVyU10gPSB0cnVlfSlcCmVuZFwKXAotLSBjcmVhdGUgY2FsbGJhY2sgZnVuY3Rpb25cCmZ1bmN0aW9uIGZhY3RvcnkgKClcClw5bG9jYWwgX2xhc3Rfc25hcHNob3RfdGltZSA9IDAgLS0gcGVyc2lzdGVudCB2YXJpYWJsZVwKXDlsb2NhbCBfc25hcHNob3RfaW50ZXJ2YWwgPSA2MCAqIDEgLS0gMTUgbWludXRlc1wKXApcOS0tIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGludm9rZWQgd2hlbiBzaWduYWwgaXMgZW1pdHRlZCwgZXZlcnkgMTAwbXNcClw5cmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIHJlZiwgLi4uKVwKXApcOVw5bG9jYWwgbm93ID0gb3MudGltZSAoKTsgLS0gdW5peC10aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzBcClwKXDlcOS0tIHNraXAgaW5pdGlhbCBzYXZlIHdoZW4gc2NyaXB0IGlzIGxvYWRlZFwKXDlcOWlmIChfbGFzdF9zbmFwc2hvdF90aW1lID09IDApIHRoZW5cClw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3c7XApcOVw5ZW5kXApcClw5XDktLSBldmVyeSAxNSBtaW5zXApcOVw5aWYgKG5vdyA+IF9sYXN0X3NuYXBzaG90X3RpbWUgKyBfc25hcHNob3RfaW50ZXJ2YWwpIHRoZW5cClwKXDlcOVw5LS0gZG9uJ3Qgc2F2ZSB3aGlsZSByZWNvcmRpbmcsIG1heSBpbnRlcmZlcmUgd2l0aCByZWNvcmRpbmdcClw5XDlcOWlmIFNlc3Npb246YWN0aXZlbHlfcmVjb3JkaW5nKCkgdGhlblwKXDlcOVw5XDktLSBxdWV1ZSAzMCBzZWMgYWZ0ZXIgcmVjLXN0b3BcClw5XDlcOVw5X2xhc3Rfc25hcHNob3RfdGltZSA9IG5vdyAtIF9zbmFwc2hvdF9pbnRlcnZhbCArIDMwXApcOVw5XDlcOXJldHVyblwKXDlcOVw5ZW5kXApcClw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3dcClw5XDlcOS0tIGZvcm1hdCBkYXRlLXRpbWUgKGF2b2lkIGNvbG9uKVwKXDlcOVw5bG9jYWwgc25hcHNob3RfbmFtZSA9IG9zLmRhdGUgKFwiJVktJW0tJWQgJUguJU0uJVNcIiwgbm93KVwKXDlcOVw5LS0gc2F2ZSBzZXNzaW9uIC0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQVJET1VSOlNlc3Npb25cClw5XDlcOVNlc3Npb246c2F2ZV9zdGF0ZSAoXCJiYWNrdXAgXCIgLi4gc25hcHNob3RfbmFtZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSlcClw5XDllbmRcClwKXDllbmRcCmVuZFwKIiAg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="13895" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbImEiXSA9IHt9IHNbImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL3Nlc3Npb250cmFjay5sdWEiICAgc1sibiJdID0gIkxvYWQgZ3VpZGVkIG1lbnUiICBzWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSAgICA9IFwiRWRpdG9ySG9va1wiLFwKXDluYW1lICAgICAgICA9IFwiTG9hZCBndWlkZWQgbWVudVwiLFwKXDlhdXRob3IgICAgICA9IFwiSnVzdGluIEVocmxpY2htYW5cIixcClw5ZGVzY3JpcHRpb24gPSBcIlByZXNlbnQgYSBtZW51IG9uIG5ldyBzZXNzaW9uIHRvIGxvYWQgdXAgZGlmZmVyZW50IHRyYWNrIHRlbXBsYXRlc1wiLFwKfVwKXApcClwKZnVuY3Rpb24gc2lnbmFscyAoKVwKXDlzID0gTHVhU2lnbmFsLlNldCgpXApcOXM6YWRkICh7W0x1YVNpZ25hbC5TZXRTZXNzaW9uXSA9IHRydWV9KVwKXDlyZXR1cm4gc1wKZW5kXApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcClwKXApsb2NhbCBwYXRoICA9IFNlc3Npb246cGF0aCgpXApwcmludChwYXRoKVwKXApcCmxvY2FsIGZ1bmN0aW9uIGdldF9mb2xkZXJfYmlydGhfdGltZShwYXRoKVwKICAgIGxvY2FsIGNvbW1hbmQgPSBcInN0YXQgLWMgJVcgXCIgLi4gcGF0aFwKICAgIGxvY2FsIGhhbmRsZSA9IGlvLnBvcGVuKGNvbW1hbmQpXAogICAgbG9jYWwgcmVzdWx0ID0gaGFuZGxlOnJlYWQoXCIqYVwiKVwKICAgIGhhbmRsZTpjbG9zZSgpXAogICAgcmV0dXJuIHRvbnVtYmVyKHJlc3VsdClcCmVuZFwKXApcCmxvY2FsIGZ1bmN0aW9uIGZvbGRlcl9jcmVhdGVkX2xlc3NfdGhhbl9taW51dGVfYWdvKHBhdGgpXAogICAgbG9jYWwgZm9sZGVyX2JpcnRoX3RpbWUgPSBnZXRfZm9sZGVyX2JpcnRoX3RpbWUocGF0aClcCiAgICBpZiBmb2xkZXJfYmlydGhfdGltZSB0aGVuXAogICAgICAgIGxvY2FsIGN1cnJlbnRfdGltZSA9IG9zLnRpbWUoKVwKICAgICAgICBsb2NhbCBkaWZmZXJlbmNlID0gY3VycmVudF90aW1lIC0gZm9sZGVyX2JpcnRoX3RpbWVcCiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2UgPCA2MCAgLS0gNjAgc2Vjb25kcyA9IDEgbWludXRlXAogICAgZWxzZVwKICAgICAgICByZXR1cm4gZmFsc2UgIC0tIFVuYWJsZSB0byBnZXQgdGhlIGJpcnRoIHRpbWVcCiAgICBlbmRcCmVuZFwKXApcClwKbG9jYWwgaXNfbGVzc190aGFuX21pbnV0ZV9hZ28gPSBmb2xkZXJfY3JlYXRlZF9sZXNzX3RoYW5fbWludXRlX2FnbyhwYXRoKVwKXAppZiBpc19sZXNzX3RoYW5fbWludXRlX2FnbyB0aGVuXAogICAgcHJpbnQoXCJUaGUgZm9sZGVyIHdhcyBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ28uXCIpXApsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAge1wKICAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwiZHJvcGRvd25cIiwgdGl0bGUgPSBcIkNob29zZSBUcmFja1wiLCB2YWx1ZXMgPSB7XAogICAgICBbXCJDaG9vc2UgYSB0cmFjayBUeXBlXCJdID0gMSxcCiAgICAgIFtcIkRydW0gVHJhY2tcIl0gPSB7XAogICAgICAgIFtcIlJlZCBaZXBwbGluXCJdID0gXCJyelwiLCBbXCJCbGFjayBQZWFybFwiXSA9IFwiYnBcIiwgW1wiQmxvbmRlIEJvcFwiXSA9IFwiYm9cIixcCiAgICAgICAgW1wiU3RhbmRhcmQgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcInN0ZFwiLCBbXCJTdGFuZGFyZCAyIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJzdDJcIixcCiAgICAgICAgW1wiRWxlY3Ryb25pYyBEcnVtc1wiXSA9IFwiZWxkXCIsIFtcIlJvb20gRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcInJtZFwiLFwKICAgICAgICBbXCJQb3dlciBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwicHdkXCIsIFtcIkRhbmNlIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJkYWRcIixcCiAgICAgICAgW1wiSmF6eiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwianpkXCIsIFtcIjgwOC84MDkgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcIjgwOFwiLFwKICAgICAgICBbXCJCcnVzaCBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwiYnJkXCIsIFtcIk9yY2hlc3RyYWwgUGVyYyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwib3JwXCIsXAogICAgICAgIFtcIlNvbmlOZWtvIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJzb25cIiwgW1wiQWxlc2lzIERydW1raXRzIChVc2UgQzEgdG8gY2hhbmdlIGtpdHMpIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJhbFwiXAogICAgICB9LFwKICAgICAgW1wiUGxheSBTb2Z0d2FyZSBJbnN0cnVtZW50c1wiXSA9IHtcCiAgICAgICAgW1wiQUNFIEZsdWlkIChUcmFkaXRpb25hbCBJbnN0cnVtZW50cylcIl0gPSBcImFjXCIsIFtcIlp5bmFkZHN1YmZ4IChUcmFkaXRpb25hbCBTeW50aClcIl0gPSBcInphXCIsXAogICAgICAgIFtcIlN1cmdlIFhUIChTeW50aCB3aXRoIGEgTE9UIG9mIHByZXNldHMpXCJdID0gXCJzdFwiLFtcIlNhbXBsdjEgU2FtcGxlclwiXSA9IFwic2FtcFwiXAogICAgICB9LFwKICAgICAgW1wiU2Vzc2lvbiBQbGF5ZXJcIl0gPSB7XAogICAgICAgIFtcIkFDRSBGbHVpZCAoVHJhZGl0aW9uYWwgSW5zdHJ1bWVudHMpXCJdID0gXCJhY3NcIiwgW1wiWnluYWRkc3ViZnggKFRyYWRpdGlvbmFsIFN5bnRoKVwiXSA9IFwiemFzXCIsXAogICAgICAgIFtcIlN1cmdlIFhUIChTeW50aCB3aXRoIGEgTE9UIG9mIHByZXNldHMpXCJdID0gXCJzdHNcIlwKICAgICAgfSxcCiAgICAgIFtcIlJlY29yZCBBdWRpb1wiXSA9IHtcCiAgICAgICAgW1wiVm9jYWxzXCJdID0ge1wKICAgICAgICAgIFtcIkNsYXNzaWNcIl0gPSBcImNsdlwiLCBbXCJCcmlnaHRcIl0gPSBcImJydlwiLCBbXCJDb21wcmVzc2VkXCJdID0gXCJjb3ZcIixcCiAgICAgICAgICBbXCJUZWxlcGhvbmVcIl0gPSBcInRsdlwiLCBbXCJEYW5jZVwiXSA9IFwiZGF2XCIsIFtcIk5hdHVyYWxcIl0gPSBcIm5hdlwiLFwKICAgICAgICAgIFtcIkVkZ2VcIl0gPSBcImVkdlwiLCBbXCJGdXp6XCJdID0gXCJmenZcIiwgW1wiVHViZSBWb2NhbHNcIl0gPSBcInR1YlwiLFwKICAgICAgICAgIFtcIkRlZXBlciBWb2NhbHNcIl0gPSBcImRwXCIsIFtcIlJvYm90IFZvY2Fsc1wiXSA9IFwicm9iXCJcCiAgICAgICAgfSxcCiAgICAgICAgW1wiQmxhbmsgQXVkaW8gVHJhY2tcIl0gPSBcImF1ZGlvXCJcCiAgICAgIH0sXAogICAgICBbXCJSZWNvcmQgR3VpdGFyIG9yIEJhc3NcIl0gPSB7XAogICAgICAgIFtcIkd1aXRhcml4XCJdID0gXCJneFwiLCBbXCJSYXRhdG91aWxsZVwiXSA9IFwicmFcIlwKICAgICAgfVwKICAgIH0sXAogICAgZGVmYXVsdCA9IFwiQ2hvb3NlIGEgdHJhY2sgdHlwZVwiXAogIH1cCn1cClwKXDktLSBGZXRjaCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgPSBBUkRPVVIudXNlcl9jb25maWdfZGlyZWN0b3J5KDgpIC0tIGdldCB0aGUgY29uZmlnIGRpcmVjdG9yeSAodXNpbmcgdmVyc2lvbiA4KVwKXAotLSBQcmludCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApwcmludCh1c2VyX2NvbmZpZ19kaXJlY3RvcnkpXApcClwKXApcClwKLS0gRGVmaW5lIHRoZSBzdWJkaXJlY3RvcnkgeW91IHdhbnQgdG8gY29uY2F0ZW5hdGVcCmxvY2FsIHN1YmRpciA9IFwicm91dGVfdGVtcGxhdGVzXCJcClwKLS0gQ29uY2F0ZW5hdGUgdGhlIGNvbmZpZyBkaXJlY3Rvcnkgd2l0aCB0aGUgc3ViZGlyZWN0b3J5XApsb2NhbCBmdWxsX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIvXCIgLi4gc3ViZGlyXApcCi0tIFByaW50IHRoZSBmdWxsIHBhdGhcClwKXApwcmludCAoZnVsbF9wYXRoKVwKXApcClw5bG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBUcmFja1wiLCBkaWFsb2dfb3B0aW9ucylcClw5bG9jYWwgcnYgPSBvZDpydW4oKVwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicnpcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgY2hvc2UgUmVkIFplcHBsaW5cIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOS0tIGxvY2FsIHRlbXBsYXRlX3BhdGggPSBcIi9ob21lL2ptYW4vdGVtcGxhdGVzL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSZWQgWmVwcGxpblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYnBcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIEJsYWNrIFBlYXJsXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9CbGFjayBQZWFybCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJCbGFjayBQZWFybCBEcnVtIEtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcClwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYm9cIiB0aGVuXApcOVw5cHJpbnQoXCJibG9uZCBib3BcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOS0tbG9jYWwgdGVtcGxhdGVfcGF0aCA9IFwiL2hvbWUvam1hbi90ZW1wbGF0ZXMvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJsb25kZSBCb3AgRHJ1bWtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJhY1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9GbHVpZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQWNlIEZsdWlkIFN5bnRoXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInphXCIgdGhlblwKXDlcOXByaW50KFwiWnluYWRkc3ViZnhcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvemZ4LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJaeW5hZGRzdWJmeFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdFwiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gXCIvaG9tZS9qbWFuL3RlbXBsYXRlcy9TdXJnZSBYVC50ZW1wbGF0ZVwiXApcOVw5IGxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlN1cmdlIFhUXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicmFcIiB0aGVuXApcOVw5cHJpbnQoXCJOQU1cIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvUmF0YXRvdWlsbGUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJhdGF0b3VpbGxlXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJneFwiIHRoZW5cClw5XDlwcmludChcIkd1dGlhcml4XCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5ICBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0d1aXRhcml4LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJHdWl0YXJpeFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJjbHZcIiB0aGVuXApcOVw5cHJpbnQoXCJDbGFzc2ljIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvY2xhc3NpYy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiY2xhc3NpY1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJicnZcIiB0aGVuXApcOVw5cHJpbnQoXCJCcmlnaHQgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9icmlnaHQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcImJyaWdodFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJjb3ZcIiB0aGVuXApcOVw5cHJpbnQoXCJDb21wcmVzc2VkIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvY29tcHJlc3NlZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiY29tcHJlc3NlZFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInRsdlwiIHRoZW5cClw5XDlwcmludChcInRlbGVwaG9uZSBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3RlbGVwaG9uZS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwidGVsZXBob25lXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcClw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZGF2XCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9kYW5jZS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiZGFuY2VcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJuYXZcIiB0aGVuXApcOVw5cHJpbnQoXCJOYXR1cmFsIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvbmF0dXJhbC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwibmF0dXJhbFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RkXCIgdGhlblwKXDlcOXByaW50KFwiU3RhbmRhcmQgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdDJcIiB0aGVuXApcOVw5cHJpbnQoXCJTdGFuZGFyZCAyIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3RhbmRhcmQgMiBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgMiBEcnVtc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZWxkXCIgdGhlblwKXDlcOXByaW50KFwiRWxlY3Ryb25pYyBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0VsZWN0cm9uaWMgRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkVsZWN0cm9uaWMgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicm1kXCIgdGhlblwKXDlcOXByaW50KFwiUm9vbSBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1Jvb20gRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvb20gRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicHdkXCIgdGhlblwKXDlcOXByaW50KFwiUG93ZXIgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiUG93ZXIgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZGFkXCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9EYW5jZSBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRGFuY2UgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwianpkXCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9KYXp6IERydW1zLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJKYXp6IERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImFjc1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9HTSBTZXNzaW9uLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJBY2UgRmx1aWQgU3ludGggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInphc1wiIHRoZW5cClw5XDlwcmludChcIlp5bmFkZHN1YmZ4XCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3phZnggc2Vzc2lvbi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiWnluYWRkc3ViZnggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0c1wiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gXCIvaG9tZS9qbWFuL3RlbXBsYXRlcy9TdXJnZSBYVC50ZW1wbGF0ZVwiXApcOVw5IGxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQgU2Vzc2lvbi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3VyZ2UgWFQgU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImVkdlwiIHRoZW5cClw5XDlwcmludChcIkVkZ2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9FZGdlIFZvY2Fscy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRWRnZSBWb2NhbHNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJmenZcIiB0aGVuXApcOVw5cHJpbnQoXCJGdXp6IFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvRnV6eiBWb2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkZ1enogVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiODA4XCIgdGhlblwKXDlcOXByaW50KFwiODA4IERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi84MDgtZHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIjgwOC84MDkgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRybFwiIHRoZW5cClw5XDlwcmludChcIjgwOCBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvZHJ1bWxhYm9vaC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiZHJ1bWxhYm9vaFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJicmRcIiB0aGVuXApcOVw5cHJpbnQoXCJCcnVzaCBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQnJ1c2ggRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJydXNoIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcIm9ycFwiIHRoZW5cClw5XDlwcmludChcIk9yY2hlc3RyYWwgUGVyY1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvT3JjaGVzdHJhbCBQZXJjLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJPcmNoZXN0cmFsIFBlcmNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzb25cIiB0aGVuXApcOVw5cHJpbnQoXCJTb25pTmVrbyBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvc29uaS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU29uaU5la28gRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYWxcIiB0aGVuXApcOXByaW50KFwiQWxlc2lzIERydW1raXRzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9hbC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQWxlc2lzIERydW1raXRzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJ0dWJcIiB0aGVuXApcOXByaW50KFwiVHViZSBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3R1YmUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlR1YmUgVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZHBcIiB0aGVuXApcOXByaW50KFwiRGVlcGVyIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvZGVlcGVyLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJEZWVwZXIgVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJyb2JcIiB0aGVuXApcOXByaW50KFwiRGVlcGVyIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvcm9ib3Qgdm9jYWxzLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSb2JvdCBWb2NhbHNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYXVkaW9cIiB0aGVuXApcOXByaW50KFwiQXVkaW9cIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2F1ZGlvLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJhdWRpb1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic2FtcFwiIHRoZW5cClw5cHJpbnQoXCJTYW1wbHYxIFNhbXBsZXJcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3NhbXBsZXIudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlNhbXBsdjEgU2FtcGxlclwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcClwKXApcClwKXApcClwKZWxzZVwKICAgIHByaW50KFwiVGhlIGZvbGRlciB3YXMgbm90IGNyZWF0ZWQgbGVzcyB0aGFuIGEgbWludXRlIGFnby5cIilcCmVuZFwKXApcClwKXApcClwKXAplbmQgZW5kXAoiICBzWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwxNlwwXDBcMFlcMlwwXDBcMFwwXDJcM1wwXDBcMCxcMFwwXDAmXDBcMFwxJlwwgFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDE2XDBcMFwwWVwyXDBcMFwxXDFcMjDdXDNcMFwwRlwwQFwwTEDAXDBkgFwwXDGGgEBcMMBcMIBcMKRAXDBcMaxcMFwwXDDsQFwwXDBcMFwxgFwxQFwxgFwwJIFcMFwxXCJcMVwwXDBcMzDA8oBGgUBcMIHBXDBcMGRBXDBcMUtcMYBcMItBXDFcMIpBQYKKQUGDilwxwoPLgVwxXDDKwUKFXDExwlwzXDBcCoLDhlwKXDLEh1wKgsSIXApcMsWJXAqCxYpcClwyxotcCoLGjFwKXDLHjVwKgseOXApcMsiPXAqCyJBcClwyyZFcCoLJklwKXDLKk1wKgsqUylwxXDKGXDExXDJcMVwwXApCS5ZcCsJLl1wKQkyYXArCTJnKXDGClVwxMcJcMFwwXApCTZZcCoJNl1wKwk2YylwxXDKaXDExglwwXDBLwlwyXDBKwk6dSkJPnkrCT59KQlCgSsJQoUpCUaJKwlGjSkJSpErCUqVKQlOmSsJTp1wKQoKcXApCVKjKXDFcMpxcMTGCXDBcMFwKXDLVqVwKgtWqylwxXDKpisGBhIpcMdara0GAXDCGQVZcMIeBVlwzwcFcMjJcMKSBXDBcMcaBQFwwXDBcMlwwXDPkQVwwXDHBXDFcMjNcMFwwXDJcMFwzQUJcMjNcMIBcMoBcM1wyOYJcMlw0RoJAXDCAXDJcMFw0ZEJcMFwxRoJXXDBHwtdcNIFcMlwyXDDAXDKAXDJkgoBcMYxcMthcNKSCXDBcMaJcMlwwXDBcMzBAXDWAx0JBXDVcMzGAw1w1XDMwgFw0gMaCQFwwXDFDXDI0XDDkQlwwXDHAXDJcMFw0XDGDXDI0XDDdXDKDXDVcMUNcM1wwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMVwwxFw1XDMwgFw0gMaCQFwwXDFcM1wyNlww5EJcMFwxwFwyXDBcNFwxQ1wyNlww3Vwyg1w1XDGDXDI2XDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgMRcNVwzMIBcNIDGgkBcMFwxw1wyNlww5EJcMFwxwFwyXDBcNFwxXDNcMjdcMN1cMoNcNVwxQ1wyN1wwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMUDLXDVcMzCAXDSAxoJAXDBcMYNcMjdcMORCXDBcMcBcMlwwXDRcMcNcMjdcMN1cMoNcNVwxg1wyN1wwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMcDLXDVcMzCAXDSAxoJAXDBcMVwzXDI4XDDkQlwwXDHAXDJcMFw0XDFDXDI4XDDdXDKDXDVcMVwzXDI4XDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQMxcNVwzMIBcNIDGgkBcMFwxg1wyOFww5EJcMFwxwFwyXDBcNFwxw1wyOFww3Vwyg1w1XDGDXDI4XDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgNVcNVwzMIBcNIDGgkBcMFwxXDNcMjlcMORCXDBcMcBcMlwwXDRcMUNcMjlcMN1cMoNcNVwxQ1wyMVwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMVww1Vw1XDMwgFw0gMaCQFwwXDGDXDI5XDDkQlwwXDHAXDJcMFw0XDHDXDI5XDDdXDKDXDVcMcNcMjBcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzHAzlw1XDMwgFw0gMaCQFwwXDFcM1wzMFww5EJcMFwxwFwyXDBcNFwxQ1wzMFww3Vwyg1w1XDGDXDMwXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQM9cNVwzMIBcNIDGgkBcMFwxw1wzMFww5EJcMFwxwFwyXDBcNFwxXDNcMzFcMN1cMoNcNVwxQ1wzMVwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMcDPXDVcMzCAXDSAxoJAXDBcMYNcMzFcMORCXDBcMcBcMlwwXDRcMcNcMzFcMN1cMoNcNVwxXDMgXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQNBcNVwzMIBcNIDGgkBcMFwxQyBcMORCXDBcMcBcMlwwXDRcMYMgXDDdXDKDXDVcMcMgXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxwNBcNVwzMIBcNIDGgkBcMFwxXDMhXDDkQlwwXDHAXDJcMFw0XDFDIVww3Vwyg1w1XDGDIVwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMUDRXDVcMzCAXDSAxoJAXDBcMcMhXDDkQlwwXDHAXDJcMFw0XDFcM1wiXDDdXDKDXDVcMUNcIlwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMVwwxVw1XDMwgFw0gMaCQFwwXDGDXCJcMORCXDBcMcBcMlwwXDRcMcNcIlww3Vwyg1w1XDGDXCJcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzGAxVw1XDMwgFw0gMaCQFwwXDFcMyNcMORCXDBcMcBcMlwwXDRcMUMjXDDdXDKDXDVcMVwzI1wwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMVwwxlw1XDMwgFw0gMaCQFwwXDHDXDVcMORCXDBcMcBcMlwwXDRcMYMjXDDdXDKDXDVcMcNcNVwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMYDGXDVcMzCAXDSAxoJAXDBcMcMjXDDkQlwwXDHAXDJcMFw0XDFcMyRcMN1cMoNcNVwxwyNcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFcMMdcNVwzMIBcNIDGgkBcMFwxQyRcMORCXDBcMcBcMlwwXDRcMYMkXDDdXDKDXDVcMUMkXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgMdcNVwzMIBcNIDGgkBcMFwxwyRcMORCXDBcMcBcMlwwXDRcMVwzJVww3Vwyg1w1XDHDJFwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMVwwyFw1XDMwgFw0gMaCQFwwXDHDJFww5EJcMFwxwFwyXDBcNFwxQyVcMN1cMoNcNVwxgyVcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFAzVw1XDMwgFw0gMaCQFwwXDGDXDI3XDDkQlwwXDHAXDJcMFw0XDHDJVww3Vwyg1w1XDFcMyZcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzGAzVw1XDMwgFw0gMaCQFwwXDFcM1wyOFww5EJcMFwxwFwyXDBcNFwxQyZcMN1cMoNcNVwxgyZcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzHAzVw1XDMwgFw0gMaCQFwwXDGDXDI4XDDkQlwwXDHAXDJcMFw0XDHDJlww3Vwyg1w1XDFcMydcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzHA0Vw1XDMwgFw0gMaCQFwwXDFDJ1ww5EJcMFwxwFwyXDBcNFwxgydcMN1cMoNcNVwxQydcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFA0lw1XDMwgFw0gMaCQFwwXDHDJ1ww5EJcMFwxwFwyXDBcNFwxXDMoXDDdXDKDXDVcMcMnXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgMhcNVwzMIBcNIDGgkBcMFwxQyhcMORCXDBcMcBcMlwwXDRcMYMoXDDdXDKDXDVcMcMoXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxXDDpXDVcMzCAXDSAxoJAXDBcMUMoXDDkQlwwXDHAXDJcMFw0XDFDKVww3Vwyg1w1XDGDKVwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMVwwyVw1XDMwgFw0gMaCQFwwXDHDKVww5EJcMFwxwFwyXDBcNFwxXDMqXDDdXDKDXDVcMcMpXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgMlcNVwzMIBcNIDGgkBcMFwxQypcMORCXDBcMcBcMlwwXDRcMYMqXDDdXDKDXDVcMUMqXDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxXDDKXDVcMzCAXDSAxoJAXDBcMcMqXDDkQlwwXDHAXDJcMFw0XDFcMytcMN1cMoNcNVwxwypcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzGAylw1XDMwgFw0gMaCQFwwXDFDK1ww5EJcMFwxwFwyXDBcNFwxgytcMN1cMoNcNVwxQytcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzHA0lw1XDMwgFw0gMaCQFwwXDGDXDE4XDDkQlwwXDHAXDJcMFw0XDHDK1ww3Vwyg1w1XDGDXDE4XDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQNNcNVwzMIBcNIDGgkBcMFwxXDNcMTlcMORCXDBcMcBcMlwwXDRcMVwzLFww3Vwyg1w1XDFcM1wxOVwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMcDTXDVcMzCAXDSAxoJAXDBcMVwzXDE5XDDkQlwwXDHAXDJcMFw0XDFDLFww3Vwyg1w1XDGDXDE5XDBGXDNAXDBMw9hcNsHDXDJcMFw2RFZcMFw3XDRZXDhcN0RZXDhAXDSAXDWAXDRcMFw2xkRWXDDHhNlcOcfE2Vw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQNRcNVwzMIBcNIDGgkBcMFwxgyxcMORCXDBcMcBcMlwwXDRcMcMsXDDdXDKDXDVcMUNcMjBcMEZcM0BcMEzD2Fw2wcNcMlwwXDZEVlwwXDdcNFlcOFw3RFlcOEBcNIBcNYBcNFwwXDbGRFZcMMeE2Vw5x8TZXDlkQ4BcM6JcMlwwXDBcMzBAXDaAx0JBXDVcMzHAzFw1XDMwgFw1gMaCQFwwXDGDXDEyXDDkQlwwXDHAXDJcMFw0XDFcMy1cMN1cMoNcNVwxg1wxMlwwRlwzQFwwTMPYXDbBw1wyXDBcNkRWXDBcN1w0WVw4XDdEWVw4QFw0gFw1gFw0XDBcNsZEVlwwx4TZXDnHxNlcOWRDgFwzXDMwgFwwgEaBQFwwgUEtXDBkQVwwXDEmXDCAXDC2XDBcMFwwXDRcOFNlc3Npb25cNFw1cGF0aFw0XDZwcmludFwyMC9UaGUgZm9sZGVyIHdhcyBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ28uXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcMTNDaG9vc2UgVHJhY2tcNFw3dmFsdWVzXDRcMjBDaG9vc2UgYSB0cmFjayBUeXBlXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDExRHJ1bSBUcmFja1w0XDEyUmVkIFplcHBsaW5cNFwzcnpcNFwxMkJsYWNrIFBlYXJsXDRcM2JwXDRcMTFCbG9uZGUgQm9wXDRcM2JvXDQhU3RhbmRhcmQgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0c3RkXDQjU3RhbmRhcmQgMiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRzdDJcNFwxN0VsZWN0cm9uaWMgRHJ1bXNcNFw0ZWxkXDRcMjlSb29tIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNHJtZFw0XDMwUG93ZXIgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0cHdkXDRcMzBEYW5jZSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRkYWRcNFwyOUphenogRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0anpkXDQgODA4LzgwOSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDAwNDgwOFw0XDMwQnJ1c2ggRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0YnJkXDRcIk9yY2hlc3RyYWwgUGVyYyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRvcnBcNCFTb25pTmVrbyBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRzb25cMjA6QWxlc2lzIERydW1raXRzIChVc2UgQzEgdG8gY2hhbmdlIGtpdHMpIChBQ0UgRmx1aWQgU3ludGgpXDRcM2FsXDRcMjZQbGF5IFNvZnR3YXJlIEluc3RydW1lbnRzXDQkQUNFIEZsdWlkIChUcmFkaXRpb25hbCBJbnN0cnVtZW50cylcNFwzYWNcNCBaeW5hZGRzdWJmeCAoVHJhZGl0aW9uYWwgU3ludGgpXDRcM3phXDQnU3VyZ2UgWFQgKFN5bnRoIHdpdGggYSBMT1Qgb2YgcHJlc2V0cylcNFwzc3RcNFwxNlNhbXBsdjEgU2FtcGxlclw0XDVzYW1wXDRcMTVTZXNzaW9uIFBsYXllclw0XDRhY3NcNFw0emFzXDRcNHN0c1w0XDEzUmVjb3JkIEF1ZGlvXDRcN1ZvY2Fsc1w0XDhDbGFzc2ljXDRcNGNsdlw0XDdCcmlnaHRcNFw0YnJ2XDRcMTFDb21wcmVzc2VkXDRcNGNvdlw0XApUZWxlcGhvbmVcNFw0dGx2XDRcNkRhbmNlXDRcNGRhdlw0XDhOYXR1cmFsXDRcNG5hdlw0XDVFZGdlXDRcNGVkdlw0XDVGdXp6XDRcNGZ6dlw0XDEyVHViZSBWb2NhbHNcNFw0dHViXDRcMTREZWVwZXIgVm9jYWxzXDRcM2RwXDRcMTNSb2JvdCBWb2NhbHNcNFw0cm9iXDRcMThCbGFuayBBdWRpbyBUcmFja1w0XDZhdWRpb1w0XDIyUmVjb3JkIEd1aXRhciBvciBCYXNzXDRcOUd1aXRhcml4XDRcM2d4XDRcMTJSYXRhdG91aWxsZVw0XDNyYVw0XDhkZWZhdWx0XDRcMjBDaG9vc2UgYSB0cmFjayB0eXBlXDRcN0FSRE9VUlw0XDIydXNlcl9jb25maWdfZGlyZWN0b3J5XDE5XDhcMFwwXDBcMFwwXDBcMFw0XDE2cm91dGVfdGVtcGxhdGVzXDRcMi9cNFwKTHVhRGlhbG9nXDRcN0RpYWxvZ1w0XDRydW5cNFwyMllvdSBjaG9zZSBSZWQgWmVwcGxpblw0XDIyL3JlZCB6ZXBwbGluLnRlbXBsYXRlXDRcMjRuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZVw0XDE3UHJlc2VudGF0aW9uSW5mb1w0XAptYXhfb3JkZXJcNFwyMFBsYXlsaXN0RGlzcG9zaXRpb25cNFwxMk5ld1BsYXlsaXN0XDRcMjNZb3UgcGlja2VkIEJsYWNrIFBlYXJsXDRcMzAvQmxhY2sgUGVhcmwgRHJ1bWtpdC50ZW1wbGF0ZVw0XDIxQmxhY2sgUGVhcmwgRHJ1bSBLaXRcNFwKYmxvbmQgYm9wXDRcMjkvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXDRcMTlCbG9uZGUgQm9wIERydW1raXRcNFwxNkFjZSBGbHVpZCBTeW50aFw0XDE2L0ZsdWlkLnRlbXBsYXRlXDRcMTJaeW5hZGRzdWJmeFw0XDE0L3pmeC50ZW1wbGF0ZVw0XDlTdXJnZSBYVFw0XDE5L1N1cmdlIFhULnRlbXBsYXRlXDRcNE5BTVw0XDIyL1JhdGF0b3VpbGxlLnRlbXBsYXRlXDRcOUd1dGlhcml4XDRcMTkvR3VpdGFyaXgudGVtcGxhdGVcNFwxNUNsYXNzaWMgVm9jYWxzXDRcMTgvY2xhc3NpYy50ZW1wbGF0ZVw0XDhjbGFzc2ljXDRcMTRCcmlnaHQgVm9jYWxzXDRcMTcvYnJpZ2h0LnRlbXBsYXRlXDRcN2JyaWdodFw0XDE4Q29tcHJlc3NlZCBWb2NhbHNcNFwyMS9jb21wcmVzc2VkLnRlbXBsYXRlXDRcMTFjb21wcmVzc2VkXDRcMTd0ZWxlcGhvbmUgVm9jYWxzXDRcMjAvdGVsZXBob25lLnRlbXBsYXRlXDRcCnRlbGVwaG9uZVw0XDEzRGFuY2UgVm9jYWxzXDRcMTYvZGFuY2UudGVtcGxhdGVcNFw2ZGFuY2VcNFwxNU5hdHVyYWwgVm9jYWxzXDRcMTgvbmF0dXJhbC50ZW1wbGF0ZVw0XDhuYXR1cmFsXDRcMTVTdGFuZGFyZCBEcnVtc1w0XDI1L1N0YW5kYXJkIERydW1zLnRlbXBsYXRlXDRcMTdTdGFuZGFyZCAyIERydW1zXDRcMjcvU3RhbmRhcmQgMiBEcnVtcy50ZW1wbGF0ZVw0XDI3L0VsZWN0cm9uaWMgRHJ1bXMudGVtcGxhdGVcNFwxMVJvb20gRHJ1bXNcNFwyMS9Sb29tIERydW1zLnRlbXBsYXRlXDRcMTJQb3dlciBEcnVtc1w0XDIyL1Bvd2VyIERydW1zLnRlbXBsYXRlXDRcMTJEYW5jZSBEcnVtc1w0XDIyL0RhbmNlIERydW1zLnRlbXBsYXRlXDRcMjEvSmF6eiBEcnVtcy50ZW1wbGF0ZVw0XDExSmF6eiBEcnVtc1w0XDIxL0dNIFNlc3Npb24udGVtcGxhdGVcNFwyNEFjZSBGbHVpZCBTeW50aCBTZXNzaW9uXDRcMjMvemFmeCBzZXNzaW9uLnRlbXBsYXRlXDRcMjBaeW5hZGRzdWJmeCBTZXNzaW9uXDRcMjcvU3VyZ2UgWFQgU2Vzc2lvbi50ZW1wbGF0ZVw0XDE3U3VyZ2UgWFQgU2Vzc2lvblw0XDEyRWRnZSBWb2NhbHNcNFwyMi9FZGdlIFZvY2Fscy50ZW1wbGF0ZVw0XDEyRnV6eiBWb2NhbHNcNFwyMi9GdXp6IFZvY2Fscy50ZW1wbGF0ZVw0XAo4MDggRHJ1bXNcNFwyMC84MDgtZHJ1bXMudGVtcGxhdGVcNFwwMTQ4MDgvODA5IERydW1zXDRcNGRybFw0XDIxL2RydW1sYWJvb2gudGVtcGxhdGVcNFwxMWRydW1sYWJvb2hcNFwxMkJydXNoIERydW1zXDRcMjIvQnJ1c2ggRHJ1bXMudGVtcGxhdGVcNFwxNk9yY2hlc3RyYWwgUGVyY1w0XDI2L09yY2hlc3RyYWwgUGVyYy50ZW1wbGF0ZVw0XDE1U29uaU5la28gRHJ1bXNcNFwxNS9zb25pLnRlbXBsYXRlXDRcMTZBbGVzaXMgRHJ1bWtpdHNcNFwxMy9hbC50ZW1wbGF0ZVw0XDE1L3R1YmUudGVtcGxhdGVcNFwxNy9kZWVwZXIudGVtcGxhdGVcNFwyMy9yb2JvdCB2b2NhbHMudGVtcGxhdGVcNFw2QXVkaW9cNFwxNi9hdWRpby50ZW1wbGF0ZVw0XDE4L3NhbXBsZXIudGVtcGxhdGVcMDIwM1RoZSBmb2xkZXIgd2FzIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ28uXDFcMFwwXDBcMFwwXDJcMFwwXDBcMFwyM1wwXDBcMFwyOVwwXDBcMFwxXDBcNlwxN1wwXDBcMEFcMFwwXDCAXDBcMFwwXYCAXDCGQEBcMIeAQFwxwFwwgFwwpIBcMFwxzMBAXDFBXDFcMVww5ICAXDFcMTJBQVwxJEFcMFwxXDaBQVwwQFwxgFwxJVwxXDBcMSZcMVwwXDAmXDCAXDBcN1wwXDBcMFw0XDEyc3RhdCAtYyAlVyBcNFwzaW9cNFw2cG9wZW5cNFw1cmVhZFw0XDMqYVw0XDZjbG9zZVw0XDl0b251bWJlclwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAgXDBcMFwwKVwwXDBcMFwxXDBcNVwxOFwwXDBcMEVcMFwwXDCAXDBcMFwwZIBcMFwxYlwwXDBcMFwzMEBcMoCGXDDAXDCHQEBcMaSAgFwwzkBcMFwxYIDAXDFcMzBcMFwwgFwzQVwwXDBcM1wxgFwwJlwxXDBcMVwzMEBcMICDXDBcMFwwplwwXDBcMSZcMIBcMFwzXDBcMFwwXDRcM29zXDRcNXRpbWVcMTk8XDBcMFwwXDBcMFwwXDBcMlwwXDBcMFwxXDJcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIA==</LuaCallback>
  </ActionHooks>
</UIScripts>

<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="9538" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000"></LuaCallback>
  </ActionHooks>
</UIScripts>

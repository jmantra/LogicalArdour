<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3">c2NyaXB0cyA9IHt9IHNjcmlwdHNbMV0gPSB7fSBzY3JpcHRzWzFdWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgPSBcIk5ldyBUcmFjayAtIERpYWxvZyBNZW51XCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKZGVzY3JpcHRpb24gPSBbW1wKQnJpbmdzIHVwIGEgZGlhbG9nIG1lbnUgdG8gc2VsZWN0IHRyYWNrIHR5cGVzIGJhc2VkIG9uIHRlbXBsYXRlc1wKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcImRyb3Bkb3duXCIsIHRpdGxlID0gXCJDaG9vc2UgVHJhY2tcIiwgdmFsdWVzID0ge1wKICAgICAgW1wiQ2hvb3NlIGEgdHJhY2sgVHlwZVwiXSA9IDEsXAogICAgICBbXCJIZWxwXCJdID0ge1wKICAgICAgICBbXCJIb3cgdG8gdXNlIERydW0gVHJhY2tzXCJdID0gXCJkcmhlbHBcIixcCiAgICAgICAgW1wiSG93IHRvIHVzZSBTb2Z0d2FyZSBJbnN0cnVtZW50c1wiXSA9IFwiaW5zdGhlbHBcIixcCiAgICAgICAgW1wiSG93IHRvIHVzZSBBdWRpbyBSZWNvcmRpbmdcIl0gPSBcImF1ZGlvaGVscFwiLFwKICAgICAgICBbXCJIb3cgdG8gdXNlIEd1aXRhci9CYXNzIFJlY29yZGluZ1wiXSA9IFwiZ3VpdGFyaGVscFwiLFwKICAgICAgICBbXCJIb3cgdG8gdXNlIFNlc3Npb24gUGxheWVyc1wiXSA9IFwic2Vzc2lvbmhlbHBcIixcCiAgICAgICAgW1wiSG93IHRvIHVzZSBHZW5lcmF0b3JzXCJdID0gXCJnZW5oZWxwXCIsXAogICAgICAgIFtcIlJlZmVyZW5jZSBNYXRlcmlhbHNcIl0gPSB7XAogICAgICAgICAgW1wiQ2lyY2xlIG9mIEZpZnRoc1wiXSA9IFwiY29maGVscFwiXAogICAgICAgIH1cCiAgICAgIH0sXAogICAgICBbXCJEcnVtbWVyXCJdID0ge1wKICAgICAgICBbXCJSZWQgWmVwcGxpbiAoQVZMIERydW1raXRzKVwiXSA9IFwicnpcIixcCiAgICAgICAgW1wiQmxhY2sgUGVhcmwgKEFWTCBEcnVta2l0cylcIl0gPSBcImJwXCIsXAogICAgICAgIFtcIkJsb25kZSBCb3AgKEFWTCBEcnVta2l0cylcIl0gPSBcImJvXCIsXAogICAgICAgIFtcIlN0YW5kYXJkIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJzdGRcIixcCiAgICAgICAgW1wiU3RhbmRhcmQgMiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwic3QyXCIsXAogICAgICAgIFtcIkVsZWN0cm9uaWMgRHJ1bXMgKEFDRSBGbHVpZCBTWW50aClcIl0gPSBcImVsZFwiLFwKICAgICAgICBbXCJSb29tIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJybWRcIixcCiAgICAgICAgW1wiUG93ZXIgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcInB3ZFwiLFwKICAgICAgICBbXCJEYW5jZSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwiZGFkXCIsXAogICAgICAgIFtcIkphenogRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImp6ZFwiLFwKICAgICAgICBbXCI4MDgvODA5IERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCI4MDhcIixcCiAgICAgICAgW1wiQnJ1c2ggRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImJyZFwiLFwKICAgICAgICBbXCJPcmNoZXN0cmFsIFBlcmMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcIm9ycFwiLFwKICAgICAgICBbXCJTb25pTmVrbyBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwic29uXCIsXAogICAgICAgIFtcIkFsZXNpcyBEcnVta2l0cyAoVXNlIEMxIHRvIGNoYW5nZSBraXRzKSAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwiYWxcIixcCiAgICAgICAgW1wiQnVza21hbidzIEhvbGlkYXkgUGVyY3Vzc2lvbiAoQVZMIERydW1raXRzKVwiXSA9IFwiYnVzXCIsXAogICAgICAgIFtcIkJsb25kZSBCb3AgSG90Um9kIERydW1raXQgKEFWTCBEcnVta2l0cylcIl0gPSBcImhvdFwiLFwKICAgICAgICBbXCJOSU4gRHJ1bWtpdCAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwibmluXCIsXAogICAgICAgICBbXCJNdWxkam9yZCAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwibWpcIixcCiAgICAgICAgICAgW1wiSG91c2VLaXQgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImhvdXNlXCIsXAogICAgICAgICAgIFtcIlBvd2VyS2l0MiAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwicGsyXCIsXAogICAgICAgICAgIFtcIlN0YW5kYXJkMyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwic3RkM1wiLFwKICAgICAgICAgICAgW1wiQW5hbG9nVDlLaXQgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImF0OVwiLFwKICAgICAgICAgICAgW1wiQW5hbG9nVDhLaXQgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImF0OFwiLFwKICAgICAgICBbXCJTdGVwIFNlcXVlbmNpbmdcIl0gPSB7XAogICAgICAgICAgW1wiUmVkIFplcHBsaW5cIl0gPSBcInN0ZXByelwiLFwKICAgICAgICAgIFtcIkJsYWNrIFBlYXJsIERydW1raXRcIl0gPSBcInN0ZXBibGFja1wiLFwKICAgICAgICAgIFtcIkJsb25kZSBCb3BcIl0gPSBcInN0ZXBibG9uZFwiLFwKICAgICAgICAgIFtcIlN0YW5kYXJkIERydW1zXCJdID0gXCJzdGVwc3RkXCIsXAogICAgICAgICAgW1wiU3RhbmRhcmQgMiBEcnVtc1wiXSA9IFwic3RlcHN0MlwiLFwKICAgICAgICAgIFtcIkVsZWN0cm9uaWMgRHJ1bXNcIl0gPSBcInN0ZXBlbFwiLFwKICAgICAgICAgIFtcIlJvb20gRHJ1bXNcIl0gPSBcInN0ZXByb29tXCIsXAogICAgICAgICAgW1wiUG93ZXIgRHJ1bXNcIl0gPSBcInN0ZXBwb3dlclwiLFwKICAgICAgICAgIFtcIkRhbmNlIERydW1zXCJdID0gXCJzdGVwZGFuY2VcIixcCiAgICAgICAgICBbXCJKYXp6IERydW1zXCJdID0gXCJzdGVwamF6elwiLFwKICAgICAgICAgIFtcIjgwOC84MDkgRHJ1bXNcIl0gPSBcInN0ZXA4MDhcIixcCiAgICAgICAgICBbXCJCcnVzaCBEcnVtc1wiXSA9IFwic3RlcGJydXNoXCIsXAogICAgICAgICAgW1wiT3JjaGVzdHJhbCBQZXJjXCJdID0gXCJzdGVwb3JjaFwiLFwKICAgICAgICAgIFtcIlNvbmlOZWtvIERydW1zXCJdID0gXCJzdGVwc29uXCIsXAogICAgICAgICAgW1wiQnVza21hbidzIEhvbGlkYXkgUGVyY3Vzc2lvblwiXSA9IFwic3RlcGJ1c2tcIixcCiAgICAgICAgICBbXCJBbGVzaXMgRHJ1bWtpdHMgKFVzZSBDMSB0byBjaGFuZ2Uga2l0cylcIl0gPSBcInN0ZXBhbFwiLFwKICAgICAgICAgIFtcIkJsb25kZSBCb3AgSG90Um9kIERydW1raXRcIl0gPSBcInN0ZXBob3RcIixcCiAgICAgICAgICBbXCJOSU4gRHJ1bWtpdFwiXSA9IFwic3RlcG5pblwiLFwKICAgICAgICAgIFtcIk11bGRqb3JkXCJdID0gXCJzdGVwbWpcIixcCiAgICAgICAgICBbXCJIb3VzZUtpdFwiXSA9IFwic3RlcGhvdXNlXCIsXAogICAgICAgICAgICBbXCJQb3dlcktpdDJcIl0gPSBcInN0ZXBwazJcIixcCiAgICAgICAgICAgICBbXCJTdGFuZGFyZDNcIl0gPSBcInN0ZXBzdGQzXCIsXAogICAgICAgICAgICAgW1wiQW5hbG9nVDlLaXRcIl0gPSBcInN0ZXBhdDlcIixcCiAgICAgICAgICAgICAgW1wiQW5hbG9nVDhLaXRcIl0gPSBcInN0ZXBhdDhcIixcCiAgICAgICAgfVwKICAgICAgfSxcCiAgICAgIFtcIlBsYXkgU29mdHdhcmUgSW5zdHJ1bWVudHNcIl0gPSB7XAogICAgICAgIFtcIkFDRSBGbHVpZCAoVHJhZGl0aW9uYWwgSW5zdHJ1bWVudHMpXCJdID0gXCJhY1wiLFwKICAgICAgICBbXCJZb3NoaW1pIChUcmFkaXRpb25hbCBTeW50aClcIl0gPSBcInphXCIsXAogICAgICAgIFtcIlN1cmdlIFhUIChTeW50aCB3aXRoIGEgTE9UIG9mIHByZXNldHMpXCJdID0gXCJzdFwiLFwKICAgICAgICBbXCJTYW1wbHYxIFNhbXBsZXJcIl0gPSBcInNhbXBcIlwKICAgICAgfSxcCiAgICAgIFtcIlNlc3Npb24gUGxheWVyXCJdID0ge1wKICAgICAgICBbXCJBQ0UgRmx1aWQgKFRyYWRpdGlvbmFsIEluc3RydW1lbnRzKVwiXSA9IFwiYWNzXCIsXAogICAgICAgIFtcIllvc2hpbWkgKFRyYWRpdGlvbmFsIFN5bnRoKVwiXSA9IFwiemFzXCIsXAogICAgICAgIFtcIlN1cmdlIFhUIChTeW50aCB3aXRoIGEgTE9UIG9mIHByZXNldHMpXCJdID0gXCJzdHNcIlwKICAgICAgfSxcCiAgICAgIFtcIlJlY29yZCBBdWRpb1wiXSA9IHtcCiAgICAgICAgW1wiVm9jYWxzXCJdID0ge1wKICAgICAgICAgIFtcIkNsYXNzaWNcIl0gPSBcImNsdlwiLFwKICAgICAgICAgIFtcIkJyaWdodFwiXSA9IFwiYnJ2XCIsXAogICAgICAgICAgW1wiQ29tcHJlc3NlZFwiXSA9IFwiY292XCIsXAogICAgICAgICAgW1wiVGVsZXBob25lXCJdID0gXCJ0bHZcIixcCiAgICAgICAgICBbXCJEYW5jZVwiXSA9IFwiZGF2XCIsXAogICAgICAgICAgW1wiTmF0dXJhbFwiXSA9IFwibmF2XCIsXAogICAgICAgICAgW1wiRWRnZVwiXSA9IFwiZWR2XCIsXAogICAgICAgICAgW1wiRnV6elwiXSA9IFwiZnp2XCIsXAogICAgICAgICAgW1wiVHViZSBWb2NhbHNcIl0gPSBcInR1YlwiLFwKICAgICAgICAgIFtcIkRlZXBlciBWb2NhbHNcIl0gPSBcImRwXCIsXAogICAgICAgICAgW1wiUm9ib3QgVm9jYWxzXCJdID0gXCJyb2JcIlwKICAgICAgICB9LFwKICAgICAgICBbXCJCbGFuayBBdWRpbyBUcmFja1wiXSA9IFwiYXVkaW9cIlwKICAgICAgfSxcCiAgICAgIFtcIlJlY29yZCBHdWl0YXIgb3IgQmFzc1wiXSA9IHtcCiAgICAgICAgW1wiR3VpdGFyaXhcIl0gPSBcImd4XCIsXAogICAgICAgIFtcIlJhdGF0b3VpbGxlXCJdID0gXCJyYVwiXAogICAgICB9LFwKICAgICAgW1wiR2VuZXJhdG9yc1wiXSA9IHtcCiAgICAgICAgW1wiUmFuZG9tIENob3JkIEdlbmVyYXRvclwiXSA9IHtcCiAgICAgICAgICBbXCJBQ0UgRmx1aWQgU3ludGhcIl0gPSBcImZsdWNob3JkXCIsXAogICAgICAgICAgW1wiU3VyZ2UgWFRcIl0gPSBcInN1cmdlY2hvcmRcIixcCiAgICAgICAgICBbXCJZb3NoaW1pXCJdID0gXCJ5b3NoY2hvcmRcIixcClwKICAgICAgICB9LFwKICAgICAgICBbXCJCYXNzbGluZSBHZW5lcmF0b3JcIl0gPSBcImJhc3NsaW5lX2dlblwiXAogICAgICB9XAogICAgfSxcCiAgICBkZWZhdWx0ID0gXCJDaG9vc2UgYSB0cmFjayB0eXBlXCJcCiAgfVwKfVwKXApcClwKXDktLSBGZXRjaCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgPSBBUkRPVVIudXNlcl9jb25maWdfZGlyZWN0b3J5KDgpIC0tIGdldCB0aGUgY29uZmlnIGRpcmVjdG9yeSAodXNpbmcgdmVyc2lvbiA4KVwKXAotLSBQcmludCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApwcmludCh1c2VyX2NvbmZpZ19kaXJlY3RvcnkpXApcClwKXApcClwKLS0gRGVmaW5lIHRoZSBzdWJkaXJlY3RvcnkgeW91IHdhbnQgdG8gY29uY2F0ZW5hdGVcCmxvY2FsIHN1YmRpciA9IFwicm91dGVfdGVtcGxhdGVzXCJcClwKLS0gQ29uY2F0ZW5hdGUgdGhlIGNvbmZpZyBkaXJlY3Rvcnkgd2l0aCB0aGUgc3ViZGlyZWN0b3J5XApsb2NhbCBmdWxsX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIvXCIgLi4gc3ViZGlyXApcCmxvY2FsIGZ1bmN0aW9uIG9wZW5fdXJsX2luX2Jyb3dzZXIodXJsKVwKICAgIC0tIENyZWF0ZSB0aGUgY29tbWFuZCB3aXRoIHRoZSBnaXZlbiBVUkxcCiAgICBsb2NhbCBjb21tYW5kID0gXCJ4ZGctb3BlbiBcIiAuLiB1cmxcClwKICAgIC0tIENyZWF0ZSBhIHRlbXBvcmFyeSBmaWxlIHRvIHN0b3JlIHRoZSBjb21tYW5kXAogICAgbG9jYWwgZmlsZSA9IGlvLm9wZW4oXCJ5dC5zaFwiLCBcIndcIilcClwKICAgIGlmIG5vdCBmaWxlIHRoZW5cCiAgICAgICAgcHJpbnQoXCJFcnJvcjogRmFpbGVkIHRvIGNyZWF0ZSBmaWxlICd5dC5zaCdcIilcCiAgICBlbHNlXAogICAgICAgIC0tIFdyaXRlIHRoZSBjb21tYW5kIHRvIHRoZSBmaWxlXAogICAgICAgIGZpbGU6d3JpdGUoY29tbWFuZCAuLiBcIlxcblwiKVwKICAgICAgICBmaWxlOmNsb3NlKClcCiAgICAgICAgcHJpbnQoXCJGaWxlICd5dC5zaCcgY3JlYXRlZCBzdWNjZXNzZnVsbHkhXCIpXAogICAgZW5kXApcCiAgICAtLSBNb3ZlIHRoZSBzY3JpcHQgdG8gYSB0ZW1wb3JhcnkgbG9jYXRpb24gYW5kIGV4ZWN1dGUgaXRcCiAgICBvcy5leGVjdXRlKFwibXYgeXQuc2ggL3RtcC95dC5zaFwiKVwKICAgLS0gb3MuZXhlY3V0ZShcIi9iaW4vYmFzaCAvdG1wL3l0LnNoXCIpXAogICAgb3MuZm9ya2V4ZWMoXCIvYmluL2Jhc2hcIiwgXCIvdG1wL3l0LnNoXCIpXAplbmRcClwKZnVuY3Rpb24gY3JlYXRlX3NlcShzdGVtcGxhdGVfcGF0aCwgc3RyYWNrX25hbWUsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUpXAogIC0tIENyZWF0ZSB0aGUgZmlyc3Qgcm91dGUgZnJvbSB0aGUgc3BlY2lmaWVkIHRlbXBsYXRlIGFuZCB0cmFjayBuYW1lXAogIFNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCBzdGVtcGxhdGVfcGF0aCwgc3RyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXAogIC0tIEdldCB0aGUgc2VsZWN0aW9uIGFuZCBwcmludCB0cmFjayBuYW1lc1wKICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgdGhlX25hbWUgPSByOm5hbWUoKVwKICAgIHByaW50KHRoZV9uYW1lKVwKICBlbmRcClwKICAtLSBDcmVhdGUgdGhlIHNlY29uZCByb3V0ZSBmcm9tIHRoZSBzcGVjaWZpZWQgdGVtcGxhdGUgYW5kIHRyYWNrIG5hbWVcCiAgU2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXAogIC0tIEdldCB0aGUgc2VsZWN0aW9uIGFnYWluIGFuZCBjb25uZWN0IE1JREkgaW5wdXQgcG9ydHNcCiAgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19taWRpX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICBsb2NhbCBpbnB1dG1pZGlwb3J0ID0gcjppbnB1dCgpOm1pZGkoMClcCiAgICAgIGlucHV0bWlkaXBvcnQ6Y29ubmVjdCh0aGVfbmFtZSAuLiBcIi9taWRpX291dCAxXCIpXAogICAgZW5kXAogIGVuZFwKZW5kXApcClwKXApwcmludCAoZnVsbF9wYXRoKVwKXApcClw5bG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBUcmFja1wiLCBkaWFsb2dfb3B0aW9ucylcClw5bG9jYWwgcnYgPSBvZDpydW4oKVwKXApcOSAgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYmFzc2xpbmVfZ2VuXCIgdGhlblwKXDlcOXByaW50KFwiWW91IHBpY2tlZCBCYXNzbGluZSBHZW5lcmF0b3JcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0Jhc3NsaW5lLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJCYXNzbGluZVwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKbG9jYWwgc2VzcGF0aCA9IFNlc3Npb246cGF0aCgpXApsb2NhbCBrZXlfZmlsZV9wYXRoID0gc2VzcGF0aCAuLiBcIi9rZXkudHh0XCJcClwKLS0gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIGtleS50eHQgZmlsZVwKbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJyXCIpIC0tIE9wZW4gdGhlIGZpbGUgaW4gcmVhZCBtb2RlXApsb2NhbCBmaWxlX2NvbnRlbnQgPSBcIk5vIGtleSBzZXRcIiAtLSBEZWZhdWx0IHZhbHVlIGlmIHRoZSBmaWxlIGNhbm5vdCBiZSByZWFkXApcCmlmIGZpbGUgdGhlblwKICAgIGZpbGVfY29udGVudCA9IGZpbGU6cmVhZChcIiphXCIpIC0tIFJlYWQgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBmaWxlXAogICAgZmlsZTpjbG9zZSgpIC0tIENsb3NlIHRoZSBmaWxlXAplbHNlXAogICAgcHJpbnQoXCJXYXJuaW5nOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciByZWFkaW5nIGF0IFwiIC4uIGtleV9maWxlX3BhdGgpXAplbmRcClwKbG9jYWwgc2N1cnJlbnRfa2V5X29wdGlvbiA9IFwiU2V0IHRvIGN1cnJlbnQgcHJvamVjdCBrZXk6IFwiIC4uIGZpbGVfY29udGVudFwKbG9jYWwgc2RpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICAgdHlwZSA9IFwiZHJvcGRvd25cIixcCiAgICBrZXkgPSBcInRhcmdldF9rZXlcIixcCiAgICB0aXRsZSA9IFwiQ2hvb3NlIHRoZSBrZXkgeW91IHdhbnQgdGhlIHNlc3Npb24gcGxheWVyIHRvIGZvbGxvd1wiLFwKICAgIHZhbHVlcyA9IHtcCiAgICAgIFtcIkNcIl0gPSAxLCBbXCJDI1wiXSA9IDIsIFtcIkRiXCJdID0gMywgW1wiRFwiXSA9IDQsIFtcIkQjXCJdID0gNSwgW1wiRWJcIl0gPSA2LFwKICAgICAgW1wiRVwiXSA9IDcsIFtcIkZcIl0gPSA4LCBbXCJGI1wiXSA9IDksIFtcIkdiXCJdID0gMTAsIFtcIkdcIl0gPSAxMSwgW1wiRyNcIl0gPSAxMiwgW1wiQWJcIl0gPSAxMyxcCiAgICAgIFtcIkFcIl0gPSAxNCwgW1wiQSNcIl0gPSAxNSwgW1wiQmJcIl0gPSAxNiwgW1wiQlwiXSA9IDE3LFwKICAgICAgW1wiQW1cIl0gPSAxOCwgW1wiQSNtXCJdID0gMTksIFtcIkJibVwiXSA9IDIwLCBbXCJCbVwiXSA9IDIxLCBbXCJDbVwiXSA9IDIyLFwKICAgICAgW1wiQyNtXCJdID0gMjMsIFtcIkRibVwiXSA9IDI0LCBbXCJEbVwiXSA9IDI1LCBbXCJEI21cIl0gPSAyNiwgW1wiRWJtXCJdID0gMjcsXAogICAgICBbXCJFbVwiXSA9IDI4LCBbXCJGbVwiXSA9IDI5LCBbXCJGI21cIl0gPSAzMCwgW1wiR2JtXCJdID0gMzEsIFtcIkdtXCJdID0gMzIsIFtcIkcjbVwiXSA9IDMzLCBbXCJBYm1cIl0gPSAzNCxcCiAgICAgIFtzY3VycmVudF9rZXlfb3B0aW9uXSA9IDM1LFwKICAgICAgW1wiRG8gbm90IGNoYW5nZSBrZXlcIl0gPSAzNlwKICAgIH0sXAogICAgZGVmYXVsdCA9IHNjdXJyZW50X2tleV9vcHRpb25cCiAgfVwKfVwKXApsb2NhbCByZXZlcnNlX2xvb2t1cCA9IHt9XApmb3Igc2tleSwgdmFsdWUgaW4gcGFpcnMoc2RpYWxvZ19vcHRpb25zWzFdLnZhbHVlcykgZG9cCiAgcmV2ZXJzZV9sb29rdXBbdmFsdWVdID0gc2tleVwKZW5kXApcCi0tIENyZWF0ZSBhbmQgcnVuIHRoZSBkaWFsb2dcCmxvY2FsIHNvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJDaG9vc2UgVGFyZ2V0IEtleVwiLCBzZGlhbG9nX29wdGlvbnMpXApsb2NhbCBzcnYgPSBzb2Q6cnVuKClcClwKLS0gRXhpdCBpZiBkaWFsb2cgaXMgY2FuY2VsZWRcCmlmIG5vdCBzcnYgdGhlblwKICBwcmludChcIkRpYWxvZyB3YXMgY2FuY2VsZWQuXCIpXAogIHJldHVyblwKZW5kXApcCmxvY2FsIHNlbGVjdGVkX2tleV92YWx1ZSA9IHNydltcInRhcmdldF9rZXlcIl1cCmxvY2FsIHNrZXkgPSByZXZlcnNlX2xvb2t1cFtzZWxlY3RlZF9rZXlfdmFsdWVdIC0tIEdldCB0aGUga2V5IG5hbWUgZnJvbSB0aGUgdmFsdWVcCmxvY2FsIHNjYWxlID0gXCJcIlwKXAotLSBIYW5kbGUgXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleVwiXAppZiBzZWxlY3RlZF9rZXlfdmFsdWUgPT0gMzUgdGhlblwKICBpZiBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJObyBrZXkgc2V0XCIpIHRoZW5cCiAgICBwcmludChcIk5vIGtleSBpcyBzZXQgaW4gdGhlIGZpbGUuIEV4aXRpbmcgdGhlIHNjcmlwdC5cIilcCiAgICByZXR1cm4gLS0gRXhpdCB0aGUgc2NyaXB0XAogIGVuZFwKICBza2V5ID0gZmlsZV9jb250ZW50Om1hdGNoKFwiXiVhIz9iP20/XCIpIC0tIEV4dHJhY3QgdGhlIGtleVwKZW5kXApcCi0tIERldGVybWluZSBzY2FsZSAobWFqb3Igb3IgbWlub3IpXAppZiBza2V5OmZpbmQoXCJtXCIpIHRoZW5cCiAgc2NhbGUgPSBcIm1pbm9yXCJcCmVsc2VcCiAgc2NhbGUgPSBcIm1ham9yXCJcCmVuZFwKXAotLXNjYWxlID0gc2NhbGU6c3ViKDEsIDEpOnVwcGVyKCkgLi4gc2NhbGU6c3ViKDIpXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5OiBcIiAuLiBza2V5IC4uIFwiIFNjYWxlOiBcIiAuLiBzY2FsZSlcClwKaWYgc2tleTpzdWIoLTEpID09IFwibVwiIHRoZW5cCiAgc2tleSA9IHNrZXk6c3ViKDEsIC0yKSAtLSBFeHRyYWN0IGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBsYXN0IGNoYXJhY3RlclwKZW5kXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5IHdpdGhvdXQgJ20nOiBcIiAuLiBza2V5KVwKLS0gRGVmaW5lIHRoZSBrZXkgdG8gc2VhcmNoIGZvclwKIGRlc2lyZWRfa2V5ID0gc2tleSAtLSBDaGFuZ2UgdGhpcyB0byB0aGUgZGVzaXJlZCBrZXkgKGUuZy4sIFwiQVwiLCBcIkFiXCIsIFwiQSNcIilcClwKXApcCiAgICBsb2NhbCBmaWxlcGF0aCA9IFwiL3RtcC9iYXNzbGluZVwiLi5kZXNpcmVkX2tleS4uc2NhbGUuLlwiLm1pZFwiXApcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKbG9jYWwgY29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL2Jhc3NsaW5lX2dlbmVyYXRvciBcIiAuLiBkZXNpcmVkX2tleS4uXCIgXCIuLnNjYWxlLi5cIiA0IC0tb3V0cHV0IFwiLi5xdW90ZWRmaWxlcGF0aFwKXApvcy5leGVjdXRlKGNvbW1hbmQpXApcCmxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcClwKXDlmaWxlczpwdXNoX2JhY2soZmlsZXBhdGgpXApcClw5bG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClwKXDlcOVw5bG9jYWwgZGVsZXRlX2ZpbGUgPSBcInJtIC1yZiBcIi4uZmlsZXBhdGhcClwKb3MuZXhlY3V0ZShkZWxldGVfZmlsZSlcCmVuZFwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicnpcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIFJlZCBaZXBwbGluIERydW1raXRcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSZWQgWmVwcGxpbiBEcnVta2l0XCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJwazJcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIFJlZCBaZXBwbGluIERydW1raXRcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3Bvd2Vya2l0Mi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiUG93ZXJLaXQyXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZDNcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIFN0YW5kYXJkIDMgS2l0XCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9zdGFuZGFyZDMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlN0YW5kYXJkM2tpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlcOVw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKZmlsZXM6cHVzaF9iYWNrKFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9kcnVtam9ja2V5L0Jhc2ljIEJlYXRzL0Jhc2ljYmVhdF8wMDAxLm1pZFwiKVwKbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClwKXDllbmRcClwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImF0OVwiIHRoZW5cClw5XDlwcmludChcIllvdSBwaWNrZWQgQW5hbG9nVDlLaXRcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2F0OS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQW5hbG9nVDlLaXRcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcClw5ZW5kXApcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJhdDhcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIEFuYWxvZ1Q4S2l0XCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9hdDgudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkFuYWxvZ1Q4S2l0XCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXApcOWVuZFwKXApcClwKXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImJwXCIgdGhlblwKXDlcOXByaW50KFwiWW91IHBpY2tlZCBCbGFjayBQZWFybFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQmxhY2sgUGVhcmwgRHJ1bWtpdC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQmxhY2sgUGVhcmwgRHJ1bWtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlcOVw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKZmlsZXM6cHVzaF9iYWNrKFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9kcnVtam9ja2V5L0Jhc2ljIEJlYXRzL0Jhc2ljYmVhdF8wMDAxLm1pZFwiKVwKbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwibmluXCIgdGhlblwKXDlcOXByaW50KFwiWW91IHBpY2tlZCBOSU4gRHJ1bmtpdFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvTklOIERydW1raXQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIk5JTiBEcnVta2l0XCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcClw5ZW5kXApcClwKXApcClwKXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImJvXCIgdGhlblwKXDlcOXByaW50KFwiYmxvbmQgYm9wXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLWxvY2FsIHRlbXBsYXRlX3BhdGggPSBcIi9ob21lL2ptYW4vdGVtcGxhdGVzL0Jsb25kZSBCb3AgRHJ1bWtpdC50ZW1wbGF0ZVwiXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0Jsb25kZSBCb3AgRHJ1bWtpdC50ZW1wbGF0ZVwiXApcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJCbG9uZGUgQm9wIERydW1raXRcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOVw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKZmlsZXM6cHVzaF9iYWNrKFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9kcnVtam9ja2V5L0Jhc2ljIEJlYXRzL0Jhc2ljYmVhdF8wMDAxLm1pZFwiKVwKbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClw5ZW5kXApcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImhvdXNlXCIgdGhlblwKXDlcOXByaW50KFwiYmxvbmQgYm9wXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLWxvY2FsIHRlbXBsYXRlX3BhdGggPSBcIi9ob21lL2ptYW4vdGVtcGxhdGVzL0Jsb25kZSBCb3AgRHJ1bWtpdC50ZW1wbGF0ZVwiXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0hvdXNlS2l0LnRlbXBsYXRlXCJcClwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkhvdXNlS2l0XCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImFjXCIgdGhlblwKXDlcOXByaW50KFwiQWNlIEZsdWlkIFN5bnRoXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0ZsdWlkLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJBY2UgRmx1aWQgU3ludGhcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiemFcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3NoaW1pXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1lvc2hpbWkudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIllvc2hpbWlcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RcIiB0aGVuXApcOVw5cHJpbnQoXCJTdXJnZSBYVFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5LS0gbG9jYWwgdGVtcGxhdGVfcGF0aCA9IFwiL2hvbWUvam1hbi90ZW1wbGF0ZXMvU3VyZ2UgWFQudGVtcGxhdGVcIlwKXDlcOSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1N1cmdlIFhULnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJTdXJnZSBYVFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInJhXCIgdGhlblwKXDlcOXByaW50KFwiTkFNXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1JhdGF0b3VpbGxlLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSYXRhdG91aWxsZVwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZ3hcIiB0aGVuXApcOVw5cHJpbnQoXCJHdXRpYXJpeFwiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOSAgbG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9HdWl0YXJpeC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiR3VpdGFyaXhcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiY2x2XCIgdGhlblwKXDlcOXByaW50KFwiQ2xhc3NpYyBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2NsYXNzaWMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcImNsYXNzaWNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYnJ2XCIgdGhlblwKXDlcOXByaW50KFwiQnJpZ2h0IFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvYnJpZ2h0LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJicmlnaHRcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiY292XCIgdGhlblwKXDlcOXByaW50KFwiQ29tcHJlc3NlZCBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2NvbXByZXNzZWQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcImNvbXByZXNzZWRcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJ0bHZcIiB0aGVuXApcOVw5cHJpbnQoXCJ0ZWxlcGhvbmUgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi90ZWxlcGhvbmUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcInRlbGVwaG9uZVwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRhdlwiIHRoZW5cClw5XDlwcmludChcIkRhbmNlIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvZGFuY2UudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcImRhbmNlXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwibmF2XCIgdGhlblwKXDlcOXByaW50KFwiTmF0dXJhbCBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL25hdHVyYWwudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIm5hdHVyYWxcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZFwiIHRoZW5cClw5XDlwcmludChcIlN0YW5kYXJkIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3RhbmRhcmQgRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlN0YW5kYXJkIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJtalwiIHRoZW5cClw5XDlwcmludChcIkRydW1sYWJvb2hcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9tdWxkam9yZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiTXVsZGpvcmQgS2l0XCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcClw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdDJcIiB0aGVuXApcOVw5cHJpbnQoXCJTdGFuZGFyZCAyIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3RhbmRhcmQgMiBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgMiBEcnVtc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlcOVw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKZmlsZXM6cHVzaF9iYWNrKFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9kcnVtam9ja2V5L0Jhc2ljIEJlYXRzL0Jhc2ljYmVhdF8wMDAxLm1pZFwiKVwKbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClw5ZW5kXApcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImVsZFwiIHRoZW5cClw5XDlwcmludChcIkVsZWN0cm9uaWMgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9FbGVjdHJvbmljIERydW1zLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJFbGVjdHJvbmljIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXDllbmRcClwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJybWRcIiB0aGVuXApcOVw5cHJpbnQoXCJSb29tIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvUm9vbSBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiUm9vbSBEcnVtc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlcOVw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKZmlsZXM6cHVzaF9iYWNrKFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9kcnVtam9ja2V5L0Jhc2ljIEJlYXRzL0Jhc2ljYmVhdF8wMDAxLm1pZFwiKVwKbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicHdkXCIgdGhlblwKXDlcOXByaW50KFwiUG93ZXIgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiUG93ZXIgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRhZFwiIHRoZW5cClw5XDlwcmludChcIkRhbmNlIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvRGFuY2UgRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkRhbmNlIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXDllbmRcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJqemRcIiB0aGVuXApcOVw5cHJpbnQoXCJEYW5jZSBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0phenogRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkphenogRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImFjc1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9HTSBTZXNzaW9uLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJBY2UgRmx1aWQgU3ludGggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKbG9jYWwgc2VzcGF0aCA9IFNlc3Npb246cGF0aCgpXApsb2NhbCBrZXlfZmlsZV9wYXRoID0gc2VzcGF0aCAuLiBcIi9rZXkudHh0XCJcClwKLS0gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIGtleS50eHQgZmlsZVwKbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJyXCIpIC0tIE9wZW4gdGhlIGZpbGUgaW4gcmVhZCBtb2RlXApsb2NhbCBmaWxlX2NvbnRlbnQgPSBcIk5vIGtleSBzZXRcIiAtLSBEZWZhdWx0IHZhbHVlIGlmIHRoZSBmaWxlIGNhbm5vdCBiZSByZWFkXApcCmlmIGZpbGUgdGhlblwKICAgIGZpbGVfY29udGVudCA9IGZpbGU6cmVhZChcIiphXCIpIC0tIFJlYWQgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBmaWxlXAogICAgZmlsZTpjbG9zZSgpIC0tIENsb3NlIHRoZSBmaWxlXAplbHNlXAogICAgcHJpbnQoXCJXYXJuaW5nOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciByZWFkaW5nIGF0IFwiIC4uIGtleV9maWxlX3BhdGgpXAplbmRcClwKbG9jYWwgc2N1cnJlbnRfa2V5X29wdGlvbiA9IFwiU2V0IHRvIGN1cnJlbnQgcHJvamVjdCBrZXk6IFwiIC4uIGZpbGVfY29udGVudFwKbG9jYWwgc2RpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICAgdHlwZSA9IFwiZHJvcGRvd25cIixcCiAgICBrZXkgPSBcInRhcmdldF9rZXlcIixcCiAgICB0aXRsZSA9IFwiQ2hvb3NlIHRoZSBrZXkgeW91IHdhbnQgdGhlIHNlc3Npb24gcGxheWVyIHRvIGZvbGxvd1wiLFwKICAgIHZhbHVlcyA9IHtcCiAgICAgIFtcIkNcIl0gPSAxLCBbXCJDI1wiXSA9IDIsIFtcIkRiXCJdID0gMywgW1wiRFwiXSA9IDQsIFtcIkQjXCJdID0gNSwgW1wiRWJcIl0gPSA2LFwKICAgICAgW1wiRVwiXSA9IDcsIFtcIkZcIl0gPSA4LCBbXCJGI1wiXSA9IDksIFtcIkdiXCJdID0gMTAsIFtcIkdcIl0gPSAxMSwgW1wiRyNcIl0gPSAxMiwgW1wiQWJcIl0gPSAxMyxcCiAgICAgIFtcIkFcIl0gPSAxNCwgW1wiQSNcIl0gPSAxNSwgW1wiQmJcIl0gPSAxNiwgW1wiQlwiXSA9IDE3LFwKICAgICAgW1wiQW1cIl0gPSAxOCwgW1wiQSNtXCJdID0gMTksIFtcIkJibVwiXSA9IDIwLCBbXCJCbVwiXSA9IDIxLCBbXCJDbVwiXSA9IDIyLFwKICAgICAgW1wiQyNtXCJdID0gMjMsIFtcIkRibVwiXSA9IDI0LCBbXCJEbVwiXSA9IDI1LCBbXCJEI21cIl0gPSAyNiwgW1wiRWJtXCJdID0gMjcsXAogICAgICBbXCJFbVwiXSA9IDI4LCBbXCJGbVwiXSA9IDI5LCBbXCJGI21cIl0gPSAzMCwgW1wiR2JtXCJdID0gMzEsIFtcIkdtXCJdID0gMzIsIFtcIkcjbVwiXSA9IDMzLCBbXCJBYm1cIl0gPSAzNCxcCiAgICAgIFtzY3VycmVudF9rZXlfb3B0aW9uXSA9IDM1LFwKICAgICAgW1wiRG8gbm90IGNoYW5nZSBrZXlcIl0gPSAzNlwKICAgIH0sXAogICAgZGVmYXVsdCA9IHNjdXJyZW50X2tleV9vcHRpb25cCiAgfVwKfVwKXApsb2NhbCByZXZlcnNlX2xvb2t1cCA9IHt9XApmb3Igc2tleSwgdmFsdWUgaW4gcGFpcnMoc2RpYWxvZ19vcHRpb25zWzFdLnZhbHVlcykgZG9cCiAgcmV2ZXJzZV9sb29rdXBbdmFsdWVdID0gc2tleVwKZW5kXApcCi0tIENyZWF0ZSBhbmQgcnVuIHRoZSBkaWFsb2dcCmxvY2FsIHNvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJDaG9vc2UgVGFyZ2V0IEtleVwiLCBzZGlhbG9nX29wdGlvbnMpXApsb2NhbCBzcnYgPSBzb2Q6cnVuKClcClwKLS0gRXhpdCBpZiBkaWFsb2cgaXMgY2FuY2VsZWRcCmlmIG5vdCBzcnYgdGhlblwKICBwcmludChcIkRpYWxvZyB3YXMgY2FuY2VsZWQuXCIpXAogIHJldHVyblwKZW5kXApcCmxvY2FsIHNlbGVjdGVkX2tleV92YWx1ZSA9IHNydltcInRhcmdldF9rZXlcIl1cCmxvY2FsIHNrZXkgPSByZXZlcnNlX2xvb2t1cFtzZWxlY3RlZF9rZXlfdmFsdWVdIC0tIEdldCB0aGUga2V5IG5hbWUgZnJvbSB0aGUgdmFsdWVcCmxvY2FsIHNjYWxlID0gXCJcIlwKXAotLSBIYW5kbGUgXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleVwiXAppZiBzZWxlY3RlZF9rZXlfdmFsdWUgPT0gMzUgdGhlblwKICBpZiBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJObyBrZXkgc2V0XCIpIHRoZW5cCiAgICBwcmludChcIk5vIGtleSBpcyBzZXQgaW4gdGhlIGZpbGUuIEV4aXRpbmcgdGhlIHNjcmlwdC5cIilcCiAgICByZXR1cm4gLS0gRXhpdCB0aGUgc2NyaXB0XAogIGVuZFwKICBza2V5ID0gZmlsZV9jb250ZW50Om1hdGNoKFwiXiVhIz9iP20/XCIpIC0tIEV4dHJhY3QgdGhlIGtleVwKZW5kXApcCi0tIERldGVybWluZSBzY2FsZSAobWFqb3Igb3IgbWlub3IpXAppZiBza2V5OmZpbmQoXCJtXCIpIHRoZW5cCiAgc2NhbGUgPSBcIm1pbm9yXCJcCmVsc2VcCiAgc2NhbGUgPSBcIm1ham9yXCJcCmVuZFwKXApzY2FsZSA9IHNjYWxlOnN1YigxLCAxKTp1cHBlcigpIC4uIHNjYWxlOnN1YigyKVwKXAotLSBQcmludCB0aGUgcmVzdWx0XApwcmludChcIktleTogXCIgLi4gc2tleSAuLiBcIiBTY2FsZTogXCIgLi4gc2NhbGUpXApcCmlmIHNrZXk6c3ViKC0xKSA9PSBcIm1cIiB0aGVuXAogIHNrZXkgPSBza2V5OnN1YigxLCAtMikgLS0gRXh0cmFjdCBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgbGFzdCBjaGFyYWN0ZXJcCmVuZFwKXAotLSBQcmludCB0aGUgcmVzdWx0XApwcmludChcIktleSB3aXRob3V0ICdtJzogXCIgLi4gc2tleSlcCi0tIERlZmluZSB0aGUga2V5IHRvIHNlYXJjaCBmb3JcCiBkZXNpcmVkX2tleSA9IHNrZXkgLS0gQ2hhbmdlIHRoaXMgdG8gdGhlIGRlc2lyZWQga2V5IChlLmcuLCBcIkFcIiwgXCJBYlwiLCBcIkEjXCIpXApcCi0tIERlZmluZSB0aGUgZGlyZWN0b3J5IGNvbnRhaW5pbmcgdGhlIGNob3JkIHByb2dyZXNzaW9uc1wKIGRpcmVjdG9yeSA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9NSURJIFByb2dyZXNzaW9ucy9cIi4uc2NhbGUuLlwiL1wiXApcCi0tIEZ1bmN0aW9uIHRvIGdldCBmaWxlcyBpbiBhIGRpcmVjdG9yeVwKZnVuY3Rpb24gZ2V0X2ZpbGVzX2luX2RpcmVjdG9yeShkaXIpXAogICAgbG9jYWwgZmlsZXMgPSB7fVwKICAgIGZvciBmaWxlIGluIGlvLnBvcGVuKCdscyBcIicgLi4gZGlyIC4uICdcIicpOmxpbmVzKCkgZG9cCiAgICAgICAgaWYgZmlsZTptYXRjaChcIiUubWlkJFwiKSB0aGVuIC0tIENoZWNrIGlmIHRoZSBmaWxlIGVuZHMgd2l0aCAubWlkXAogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZmlsZXMsIGZpbGUpXAogICAgICAgIGVuZFwKICAgIGVuZFwKICAgIHJldHVybiBmaWxlc1wKZW5kXApcCi0tIEZ1bmN0aW9uIHRvIGZpbHRlciBmaWxlcyBieSBrZXlcCmZ1bmN0aW9uIGZpbHRlcl9maWxlc19ieV9rZXkoZmlsZXMsIGZrZXkpXAogICAgbG9jYWwgZmlsdGVyZWRfZmlsZXMgPSB7fVwKICAtLSAgcHJpbnQoXCJGaWx0ZXJpbmcgZmlsZXMgZm9yIGtleTpcIiwga2V5KSAtLSBEZWJ1Z2dpbmcga2V5IGJlaW5nIHNlYXJjaGVkXAogICAgZm9yIF8sIGZpbGUgaW4gaXBhaXJzKGZpbGVzKSBkb1wKICAgICAgIC0tIHByaW50KFwiQ2hlY2tpbmcgZmlsZTpcIiwgZmlsZSkgLS0gRGVidWcgZWFjaCBmaWxlXAogICAgICAgIC0tIE1hdGNoIGZpbGVzIHRoYXQgc3RhcnQgd2l0aCB0aGUgZXhhY3Qga2V5IGZvbGxvd2VkIGJ5IGEgbm9uLXdvcmQgY2hhcmFjdGVyIG9yIGAubWlkYFwKICAgICAgICBpZiBmaWxlOm1hdGNoKFwiXlwiIC4uIGZrZXkgLi4gXCJbJVdfXVwiKSBvciBmaWxlOm1hdGNoKFwiXlwiIC4uIGZrZXkgLi4gXCIlLm1pZCRcIikgdGhlblwKICAgICAgICAgLS0gICBwcmludChcIk1hdGNoZWQgZmlsZTpcIiwgZmlsZSkgLS0gRGVidWcgbWF0Y2hlZCBmaWxlc1wKICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGZpbHRlcmVkX2ZpbGVzLCBmaWxlKVwKICAgICAgICBlbmRcCiAgICBlbmRcCiAgICByZXR1cm4gZmlsdGVyZWRfZmlsZXNcCmVuZFwKXAotLSBGdW5jdGlvbiB0byBwaWNrIGEgcmFuZG9tIGZpbGVcCmZ1bmN0aW9uIHBpY2tfcmFuZG9tX2ZpbGUoZmlsZXMpXAogICAgaWYgI2ZpbGVzID09IDAgdGhlblwKICAgICAgICByZXR1cm4gbmlsIC0tIE5vIGZpbGVzIG1hdGNoZWRcCiAgICBlbmRcCiAgICBtYXRoLnJhbmRvbXNlZWQob3MudGltZSgpKSAtLSBTZWVkIHRoZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvclwKICAgIGxvY2FsIHJhbmRvbV9pbmRleCA9IG1hdGgucmFuZG9tKDEsICNmaWxlcylcCiAgICByZXR1cm4gZmlsZXNbcmFuZG9tX2luZGV4XVwKZW5kXApcCi0tIE1haW4gbG9naWNcCmxvY2FsIGFsbF9maWxlcyA9IGdldF9maWxlc19pbl9kaXJlY3RvcnkoZGlyZWN0b3J5KVwKLS1wcmludChcIkFsbCBmaWxlcyBmb3VuZDpcIikgLS0gRGVidWcgYWxsIGZpbGVzIGluIHRoZSBkaXJlY3RvcnlcCi0tZm9yIF8sIGZpbGUgaW4gaXBhaXJzKGFsbF9maWxlcykgZG8gcHJpbnQoZmlsZSkgZW5kXApcCmxvY2FsIG1hdGNoaW5nX2ZpbGVzID0gZmlsdGVyX2ZpbGVzX2J5X2tleShhbGxfZmlsZXMsIGRlc2lyZWRfa2V5KVwKLS1wcmludChcIk1hdGNoaW5nIGZpbGVzIGZvciBrZXkgXCIgLi4gZGVzaXJlZF9rZXkgLi4gXCI6XCIpXAotLWZvciBfLCBmaWxlIGluIGlwYWlycyhtYXRjaGluZ19maWxlcykgZG8gcHJpbnQoZmlsZSkgZW5kXApcCmxvY2FsIHJhbmRvbV9maWxlID0gcGlja19yYW5kb21fZmlsZShtYXRjaGluZ19maWxlcylcClwKaWYgcmFuZG9tX2ZpbGUgdGhlblwKICAgIHByaW50KFwiUmFuZG9tIHByb2dyZXNzaW9uIGluIGtleSBcIiAuLiBkZXNpcmVkX2tleSAuLiBcIjogXCIgLi4gcmFuZG9tX2ZpbGUpXAogICAgbG9jYWwgZnVsbF9maWxlX3BhdGggPSBkaXJlY3RvcnkgLi4gcmFuZG9tX2ZpbGVcCnByaW50KGZ1bGxfZmlsZV9wYXRoKVwKXDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApcClwKXApcOWZpbGVzOnB1c2hfYmFjayhmdWxsX2ZpbGVfcGF0aClcClwKXDlsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKZWxzZVwKICAgIHByaW50KFwiTm8gcHJvZ3Jlc3Npb25zIGZvdW5kIGZvciBrZXk6IFwiIC4uIGRlc2lyZWRfa2V5KVwKIHNjYWxlID0gc2NhbGU6c3ViKDEsIDEpOmxvd2VyKCkgLi4gc2NhbGU6c3ViKDIpXApcCiAgICBsb2NhbCBmaWxlcGF0aCA9IFwiL3RtcC9jaG9yZFwiLi5kZXNpcmVkX2tleS4uc2NhbGUuLlwiLm1pZFwiXApcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKbG9jYWwgY29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL25ld2Nob3JkIFwiIC4uIGRlc2lyZWRfa2V5Li5cIiBcIi4uc2NhbGUuLlwiIDQgLS1vdXRwdXQgXCIuLnF1b3RlZGZpbGVwYXRoXApcCm9zLmV4ZWN1dGUoY29tbWFuZClcClwKbG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKXApcOWZpbGVzOnB1c2hfYmFjayhmaWxlcGF0aClcClwKXDlsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXApcOVw5XDlsb2NhbCBkZWxldGVfZmlsZSA9IFwicm0gLXJmIFwiLi5maWxlcGF0aFwKXApvcy5leGVjdXRlKGRlbGV0ZV9maWxlKVwKZW5kIGVuZFwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiemFzXCIgdGhlblwKXDlcOXByaW50KFwiWW9zaGltaVwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9Zb3NoIFNlc3Npb24udGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIllvc2hpbWkgU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlsb2NhbCBzZXNwYXRoID0gU2Vzc2lvbjpwYXRoKClcCmxvY2FsIGtleV9maWxlX3BhdGggPSBzZXNwYXRoIC4uIFwiL2tleS50eHRcIlwKXAotLSBSZWFkIHRoZSBjb250ZW50cyBvZiB0aGUga2V5LnR4dCBmaWxlXApsb2NhbCBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcInJcIikgLS0gT3BlbiB0aGUgZmlsZSBpbiByZWFkIG1vZGVcCmxvY2FsIGZpbGVfY29udGVudCA9IFwiTm8ga2V5IHNldFwiIC0tIERlZmF1bHQgdmFsdWUgaWYgdGhlIGZpbGUgY2Fubm90IGJlIHJlYWRcClwKaWYgZmlsZSB0aGVuXAogICAgZmlsZV9jb250ZW50ID0gZmlsZTpyZWFkKFwiKmFcIikgLS0gUmVhZCB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKCkgLS0gQ2xvc2UgdGhlIGZpbGVcCmVsc2VcCiAgICBwcmludChcIldhcm5pbmc6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHJlYWRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCmVuZFwKXApsb2NhbCBzY3VycmVudF9rZXlfb3B0aW9uID0gXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleTogXCIgLi4gZmlsZV9jb250ZW50XApsb2NhbCBzZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgICB0eXBlID0gXCJkcm9wZG93blwiLFwKICAgIGtleSA9IFwidGFyZ2V0X2tleVwiLFwKICAgIHRpdGxlID0gXCJDaG9vc2UgdGhlIGtleSB5b3Ugd2FudCB0aGUgc2Vzc2lvbiBwbGF5ZXIgdG8gZm9sbG93XCIsXAogICAgdmFsdWVzID0ge1wKICAgICAgW1wiQ1wiXSA9IDEsIFtcIkMjXCJdID0gMiwgW1wiRGJcIl0gPSAzLCBbXCJEXCJdID0gNCwgW1wiRCNcIl0gPSA1LCBbXCJFYlwiXSA9IDYsXAogICAgICBbXCJFXCJdID0gNywgW1wiRlwiXSA9IDgsIFtcIkYjXCJdID0gOSwgW1wiR2JcIl0gPSAxMCwgW1wiR1wiXSA9IDExLCBbXCJHI1wiXSA9IDEyLCBbXCJBYlwiXSA9IDEzLFwKICAgICAgW1wiQVwiXSA9IDE0LCBbXCJBI1wiXSA9IDE1LCBbXCJCYlwiXSA9IDE2LCBbXCJCXCJdID0gMTcsXAogICAgICBbXCJBbVwiXSA9IDE4LCBbXCJBI21cIl0gPSAxOSwgW1wiQmJtXCJdID0gMjAsIFtcIkJtXCJdID0gMjEsIFtcIkNtXCJdID0gMjIsXAogICAgICBbXCJDI21cIl0gPSAyMywgW1wiRGJtXCJdID0gMjQsIFtcIkRtXCJdID0gMjUsIFtcIkQjbVwiXSA9IDI2LCBbXCJFYm1cIl0gPSAyNyxcCiAgICAgIFtcIkVtXCJdID0gMjgsIFtcIkZtXCJdID0gMjksIFtcIkYjbVwiXSA9IDMwLCBbXCJHYm1cIl0gPSAzMSwgW1wiR21cIl0gPSAzMiwgW1wiRyNtXCJdID0gMzMsIFtcIkFibVwiXSA9IDM0LFwKICAgICAgW3NjdXJyZW50X2tleV9vcHRpb25dID0gMzUsXAogICAgICBbXCJEbyBub3QgY2hhbmdlIGtleVwiXSA9IDM2XAogICAgfSxcCiAgICBkZWZhdWx0ID0gc2N1cnJlbnRfa2V5X29wdGlvblwKICB9XAp9XApcCmxvY2FsIHJldmVyc2VfbG9va3VwID0ge31cCmZvciBza2V5LCB2YWx1ZSBpbiBwYWlycyhzZGlhbG9nX29wdGlvbnNbMV0udmFsdWVzKSBkb1wKICByZXZlcnNlX2xvb2t1cFt2YWx1ZV0gPSBza2V5XAplbmRcClwKLS0gQ3JlYXRlIGFuZCBydW4gdGhlIGRpYWxvZ1wKbG9jYWwgc29kID0gTHVhRGlhbG9nLkRpYWxvZyhcIkNob29zZSBUYXJnZXQgS2V5XCIsIHNkaWFsb2dfb3B0aW9ucylcCmxvY2FsIHNydiA9IHNvZDpydW4oKVwKXAotLSBFeGl0IGlmIGRpYWxvZyBpcyBjYW5jZWxlZFwKaWYgbm90IHNydiB0aGVuXAogIHByaW50KFwiRGlhbG9nIHdhcyBjYW5jZWxlZC5cIilcCiAgcmV0dXJuXAplbmRcClwKbG9jYWwgc2VsZWN0ZWRfa2V5X3ZhbHVlID0gc3J2W1widGFyZ2V0X2tleVwiXVwKbG9jYWwgc2tleSA9IHJldmVyc2VfbG9va3VwW3NlbGVjdGVkX2tleV92YWx1ZV0gLS0gR2V0IHRoZSBrZXkgbmFtZSBmcm9tIHRoZSB2YWx1ZVwKbG9jYWwgc2NhbGUgPSBcIlwiXApcCi0tIEhhbmRsZSBcIlNldCB0byBjdXJyZW50IHByb2plY3Qga2V5XCJcCmlmIHNlbGVjdGVkX2tleV92YWx1ZSA9PSAzNSB0aGVuXAogIGlmIGZpbGVfY29udGVudDptYXRjaChcIk5vIGtleSBzZXRcIikgdGhlblwKICAgIHByaW50KFwiTm8ga2V5IGlzIHNldCBpbiB0aGUgZmlsZS4gRXhpdGluZyB0aGUgc2NyaXB0LlwiKVwKICAgIHJldHVybiAtLSBFeGl0IHRoZSBzY3JpcHRcCiAgZW5kXAogIHNrZXkgPSBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJeJWEjP2I/bT9cIikgLS0gRXh0cmFjdCB0aGUga2V5XAplbmRcClwKLS0gRGV0ZXJtaW5lIHNjYWxlIChtYWpvciBvciBtaW5vcilcCmlmIHNrZXk6ZmluZChcIm1cIikgdGhlblwKICBzY2FsZSA9IFwibWlub3JcIlwKZWxzZVwKICBzY2FsZSA9IFwibWFqb3JcIlwKZW5kXApcCnNjYWxlID0gc2NhbGU6c3ViKDEsIDEpOnVwcGVyKCkgLi4gc2NhbGU6c3ViKDIpXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5OiBcIiAuLiBza2V5IC4uIFwiIFNjYWxlOiBcIiAuLiBzY2FsZSlcClwKaWYgc2tleTpzdWIoLTEpID09IFwibVwiIHRoZW5cCiAgc2tleSA9IHNrZXk6c3ViKDEsIC0yKSAtLSBFeHRyYWN0IGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBsYXN0IGNoYXJhY3RlclwKZW5kXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5IHdpdGhvdXQgJ20nOiBcIiAuLiBza2V5KVwKLS0gRGVmaW5lIHRoZSBrZXkgdG8gc2VhcmNoIGZvclwKIGRlc2lyZWRfa2V5ID0gc2tleSAtLSBDaGFuZ2UgdGhpcyB0byB0aGUgZGVzaXJlZCBrZXkgKGUuZy4sIFwiQVwiLCBcIkFiXCIsIFwiQSNcIilcClwKLS0gRGVmaW5lIHRoZSBkaXJlY3RvcnkgY29udGFpbmluZyB0aGUgY2hvcmQgcHJvZ3Jlc3Npb25zXAogZGlyZWN0b3J5ID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL01JREkgUHJvZ3Jlc3Npb25zL1wiLi5zY2FsZS4uXCIvXCJcClwKLS0gRnVuY3Rpb24gdG8gZ2V0IGZpbGVzIGluIGEgZGlyZWN0b3J5XApmdW5jdGlvbiBnZXRfZmlsZXNfaW5fZGlyZWN0b3J5KGRpcilcCiAgICBsb2NhbCBmaWxlcyA9IHt9XAogICAgZm9yIGZpbGUgaW4gaW8ucG9wZW4oJ2xzIFwiJyAuLiBkaXIgLi4gJ1wiJyk6bGluZXMoKSBkb1wKICAgICAgICBpZiBmaWxlOm1hdGNoKFwiJS5taWQkXCIpIHRoZW4gLS0gQ2hlY2sgaWYgdGhlIGZpbGUgZW5kcyB3aXRoIC5taWRcCiAgICAgICAgICAgIHRhYmxlLmluc2VydChmaWxlcywgZmlsZSlcCiAgICAgICAgZW5kXAogICAgZW5kXAogICAgcmV0dXJuIGZpbGVzXAplbmRcClwKLS0gRnVuY3Rpb24gdG8gZmlsdGVyIGZpbGVzIGJ5IGtleVwKZnVuY3Rpb24gZmlsdGVyX2ZpbGVzX2J5X2tleShmaWxlcywgZmtleSlcCiAgICBsb2NhbCBmaWx0ZXJlZF9maWxlcyA9IHt9XAogIC0tICBwcmludChcIkZpbHRlcmluZyBmaWxlcyBmb3Iga2V5OlwiLCBrZXkpIC0tIERlYnVnZ2luZyBrZXkgYmVpbmcgc2VhcmNoZWRcCiAgICBmb3IgXywgZmlsZSBpbiBpcGFpcnMoZmlsZXMpIGRvXAogICAgICAgLS0gcHJpbnQoXCJDaGVja2luZyBmaWxlOlwiLCBmaWxlKSAtLSBEZWJ1ZyBlYWNoIGZpbGVcCiAgICAgICAgLS0gTWF0Y2ggZmlsZXMgdGhhdCBzdGFydCB3aXRoIHRoZSBleGFjdCBrZXkgZm9sbG93ZWQgYnkgYSBub24td29yZCBjaGFyYWN0ZXIgb3IgYC5taWRgXAogICAgICAgIGlmIGZpbGU6bWF0Y2goXCJeXCIgLi4gZmtleSAuLiBcIlslV19dXCIpIG9yIGZpbGU6bWF0Y2goXCJeXCIgLi4gZmtleSAuLiBcIiUubWlkJFwiKSB0aGVuXAogICAgICAgICAtLSAgIHByaW50KFwiTWF0Y2hlZCBmaWxlOlwiLCBmaWxlKSAtLSBEZWJ1ZyBtYXRjaGVkIGZpbGVzXAogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZmlsdGVyZWRfZmlsZXMsIGZpbGUpXAogICAgICAgIGVuZFwKICAgIGVuZFwKICAgIHJldHVybiBmaWx0ZXJlZF9maWxlc1wKZW5kXApcCi0tIEZ1bmN0aW9uIHRvIHBpY2sgYSByYW5kb20gZmlsZVwKZnVuY3Rpb24gcGlja19yYW5kb21fZmlsZShmaWxlcylcCiAgICBpZiAjZmlsZXMgPT0gMCB0aGVuXAogICAgICAgIHJldHVybiBuaWwgLS0gTm8gZmlsZXMgbWF0Y2hlZFwKICAgIGVuZFwKICAgIG1hdGgucmFuZG9tc2VlZChvcy50aW1lKCkpIC0tIFNlZWQgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXAogICAgbG9jYWwgcmFuZG9tX2luZGV4ID0gbWF0aC5yYW5kb20oMSwgI2ZpbGVzKVwKICAgIHJldHVybiBmaWxlc1tyYW5kb21faW5kZXhdXAplbmRcClwKLS0gTWFpbiBsb2dpY1wKbG9jYWwgYWxsX2ZpbGVzID0gZ2V0X2ZpbGVzX2luX2RpcmVjdG9yeShkaXJlY3RvcnkpXAotLXByaW50KFwiQWxsIGZpbGVzIGZvdW5kOlwiKSAtLSBEZWJ1ZyBhbGwgZmlsZXMgaW4gdGhlIGRpcmVjdG9yeVwKLS1mb3IgXywgZmlsZSBpbiBpcGFpcnMoYWxsX2ZpbGVzKSBkbyBwcmludChmaWxlKSBlbmRcClwKbG9jYWwgbWF0Y2hpbmdfZmlsZXMgPSBmaWx0ZXJfZmlsZXNfYnlfa2V5KGFsbF9maWxlcywgZGVzaXJlZF9rZXkpXAotLXByaW50KFwiTWF0Y2hpbmcgZmlsZXMgZm9yIGtleSBcIiAuLiBkZXNpcmVkX2tleSAuLiBcIjpcIilcCi0tZm9yIF8sIGZpbGUgaW4gaXBhaXJzKG1hdGNoaW5nX2ZpbGVzKSBkbyBwcmludChmaWxlKSBlbmRcClwKbG9jYWwgcmFuZG9tX2ZpbGUgPSBwaWNrX3JhbmRvbV9maWxlKG1hdGNoaW5nX2ZpbGVzKVwKXAppZiByYW5kb21fZmlsZSB0aGVuXAogICAgcHJpbnQoXCJSYW5kb20gcHJvZ3Jlc3Npb24gaW4ga2V5IFwiIC4uIGRlc2lyZWRfa2V5IC4uIFwiOiBcIiAuLiByYW5kb21fZmlsZSlcCiAgICBsb2NhbCBmdWxsX2ZpbGVfcGF0aCA9IGRpcmVjdG9yeSAuLiByYW5kb21fZmlsZVwKcHJpbnQoZnVsbF9maWxlX3BhdGgpXApcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcClwKXApcClw5ZmlsZXM6cHVzaF9iYWNrKGZ1bGxfZmlsZV9wYXRoKVwKXApcOWxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXAplbHNlXAogICAgcHJpbnQoXCJObyBwcm9ncmVzc2lvbnMgZm91bmQgZm9yIGtleTogXCIgLi4gZGVzaXJlZF9rZXkpXAogc2NhbGUgPSBzY2FsZTpzdWIoMSwgMSk6bG93ZXIoKSAuLiBzY2FsZTpzdWIoMilcClwKICAgIGxvY2FsIGZpbGVwYXRoID0gXCIvdG1wL2Nob3JkXCIuLmRlc2lyZWRfa2V5Li5zY2FsZS4uXCIubWlkXCJcClwKXApsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXApsb2NhbCBjb21tYW5kID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvbmV3Y2hvcmQgXCIgLi4gZGVzaXJlZF9rZXkuLlwiIFwiLi5zY2FsZS4uXCIgNCAtLW91dHB1dCBcIi4ucXVvdGVkZmlsZXBhdGhcClwKb3MuZXhlY3V0ZShjb21tYW5kKVwKXApsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApcClw5ZmlsZXM6cHVzaF9iYWNrKGZpbGVwYXRoKVwKXApcOWxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcClw5XDlcOWxvY2FsIGRlbGV0ZV9maWxlID0gXCJybSAtcmYgXCIuLmZpbGVwYXRoXApcCm9zLmV4ZWN1dGUoZGVsZXRlX2ZpbGUpXAplbmQgZW5kXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdHNcIiB0aGVuXApcOVw5cHJpbnQoXCJTdXJnZSBYVFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5LS0gbG9jYWwgdGVtcGxhdGVfcGF0aCA9IFwiL2hvbWUvam1hbi90ZW1wbGF0ZXMvU3VyZ2UgWFQudGVtcGxhdGVcIlwKXDlcOSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1N1cmdlIFhUIFNlc3Npb24udGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlN1cmdlIFhUIFNlc3Npb25cIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlsb2NhbCBzZXNwYXRoID0gU2Vzc2lvbjpwYXRoKClcClw5XDlsb2NhbCBrZXlfZmlsZV9wYXRoID0gc2VzcGF0aCAuLiBcIi9rZXkudHh0XCJcClwKLS0gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIGtleS50eHQgZmlsZVwKbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJyXCIpIC0tIE9wZW4gdGhlIGZpbGUgaW4gcmVhZCBtb2RlXApsb2NhbCBmaWxlX2NvbnRlbnQgPSBcIk5vIGtleSBzZXRcIiAtLSBEZWZhdWx0IHZhbHVlIGlmIHRoZSBmaWxlIGNhbm5vdCBiZSByZWFkXApcCmlmIGZpbGUgdGhlblwKICAgIGZpbGVfY29udGVudCA9IGZpbGU6cmVhZChcIiphXCIpIC0tIFJlYWQgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBmaWxlXAogICAgZmlsZTpjbG9zZSgpIC0tIENsb3NlIHRoZSBmaWxlXAplbHNlXAogICAgcHJpbnQoXCJXYXJuaW5nOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciByZWFkaW5nIGF0IFwiIC4uIGtleV9maWxlX3BhdGgpXAplbmRcClwKbG9jYWwgc2N1cnJlbnRfa2V5X29wdGlvbiA9IFwiU2V0IHRvIGN1cnJlbnQgcHJvamVjdCBrZXk6IFwiIC4uIGZpbGVfY29udGVudFwKbG9jYWwgc2RpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICAgdHlwZSA9IFwiZHJvcGRvd25cIixcCiAgICBrZXkgPSBcInRhcmdldF9rZXlcIixcCiAgICB0aXRsZSA9IFwiQ2hvb3NlIHRoZSBrZXkgeW91IHdhbnQgdGhlIHNlc3Npb24gcGxheWVyIHRvIGZvbGxvd1wiLFwKICAgIHZhbHVlcyA9IHtcCiAgICAgIFtcIkNcIl0gPSAxLCBbXCJDI1wiXSA9IDIsIFtcIkRiXCJdID0gMywgW1wiRFwiXSA9IDQsIFtcIkQjXCJdID0gNSwgW1wiRWJcIl0gPSA2LFwKICAgICAgW1wiRVwiXSA9IDcsIFtcIkZcIl0gPSA4LCBbXCJGI1wiXSA9IDksIFtcIkdiXCJdID0gMTAsIFtcIkdcIl0gPSAxMSwgW1wiRyNcIl0gPSAxMiwgW1wiQWJcIl0gPSAxMyxcCiAgICAgIFtcIkFcIl0gPSAxNCwgW1wiQSNcIl0gPSAxNSwgW1wiQmJcIl0gPSAxNiwgW1wiQlwiXSA9IDE3LFwKICAgICAgW1wiQW1cIl0gPSAxOCwgW1wiQSNtXCJdID0gMTksIFtcIkJibVwiXSA9IDIwLCBbXCJCbVwiXSA9IDIxLCBbXCJDbVwiXSA9IDIyLFwKICAgICAgW1wiQyNtXCJdID0gMjMsIFtcIkRibVwiXSA9IDI0LCBbXCJEbVwiXSA9IDI1LCBbXCJEI21cIl0gPSAyNiwgW1wiRWJtXCJdID0gMjcsXAogICAgICBbXCJFbVwiXSA9IDI4LCBbXCJGbVwiXSA9IDI5LCBbXCJGI21cIl0gPSAzMCwgW1wiR2JtXCJdID0gMzEsIFtcIkdtXCJdID0gMzIsIFtcIkcjbVwiXSA9IDMzLCBbXCJBYm1cIl0gPSAzNCxcCiAgICAgIFtzY3VycmVudF9rZXlfb3B0aW9uXSA9IDM1LFwKICAgICAgW1wiRG8gbm90IGNoYW5nZSBrZXlcIl0gPSAzNlwKICAgIH0sXAogICAgZGVmYXVsdCA9IHNjdXJyZW50X2tleV9vcHRpb25cCiAgfVwKfVwKXApsb2NhbCByZXZlcnNlX2xvb2t1cCA9IHt9XApmb3Igc2tleSwgdmFsdWUgaW4gcGFpcnMoc2RpYWxvZ19vcHRpb25zWzFdLnZhbHVlcykgZG9cCiAgcmV2ZXJzZV9sb29rdXBbdmFsdWVdID0gc2tleVwKZW5kXApcCi0tIENyZWF0ZSBhbmQgcnVuIHRoZSBkaWFsb2dcCmxvY2FsIHNvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJDaG9vc2UgVGFyZ2V0IEtleVwiLCBzZGlhbG9nX29wdGlvbnMpXApsb2NhbCBzcnYgPSBzb2Q6cnVuKClcClwKLS0gRXhpdCBpZiBkaWFsb2cgaXMgY2FuY2VsZWRcCmlmIG5vdCBzcnYgdGhlblwKICBwcmludChcIkRpYWxvZyB3YXMgY2FuY2VsZWQuXCIpXAogIHJldHVyblwKZW5kXApcCmxvY2FsIHNlbGVjdGVkX2tleV92YWx1ZSA9IHNydltcInRhcmdldF9rZXlcIl1cCmxvY2FsIHNrZXkgPSByZXZlcnNlX2xvb2t1cFtzZWxlY3RlZF9rZXlfdmFsdWVdIC0tIEdldCB0aGUga2V5IG5hbWUgZnJvbSB0aGUgdmFsdWVcCmxvY2FsIHNjYWxlID0gXCJcIlwKXAotLSBIYW5kbGUgXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleVwiXAppZiBzZWxlY3RlZF9rZXlfdmFsdWUgPT0gMzUgdGhlblwKICBpZiBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJObyBrZXkgc2V0XCIpIHRoZW5cCiAgICBwcmludChcIk5vIGtleSBpcyBzZXQgaW4gdGhlIGZpbGUuIEV4aXRpbmcgdGhlIHNjcmlwdC5cIilcCiAgICByZXR1cm4gLS0gRXhpdCB0aGUgc2NyaXB0XAogIGVuZFwKICBza2V5ID0gZmlsZV9jb250ZW50Om1hdGNoKFwiXiVhIz9iP20/XCIpIC0tIEV4dHJhY3QgdGhlIGtleVwKZW5kXApcCi0tIERldGVybWluZSBzY2FsZSAobWFqb3Igb3IgbWlub3IpXAppZiBza2V5OmZpbmQoXCJtXCIpIHRoZW5cCiAgc2NhbGUgPSBcIm1pbm9yXCJcCmVsc2VcCiAgc2NhbGUgPSBcIm1ham9yXCJcCmVuZFwKXApzY2FsZSA9IHNjYWxlOnN1YigxLCAxKTp1cHBlcigpIC4uIHNjYWxlOnN1YigyKVwKXAotLSBQcmludCB0aGUgcmVzdWx0XApwcmludChcIktleTogXCIgLi4gc2tleSAuLiBcIiBTY2FsZTogXCIgLi4gc2NhbGUpXApcCmlmIHNrZXk6c3ViKC0xKSA9PSBcIm1cIiB0aGVuXAogIHNrZXkgPSBza2V5OnN1YigxLCAtMikgLS0gRXh0cmFjdCBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgbGFzdCBjaGFyYWN0ZXJcCmVuZFwKXAotLSBQcmludCB0aGUgcmVzdWx0XApwcmludChcIktleSB3aXRob3V0ICdtJzogXCIgLi4gc2tleSlcCi0tIERlZmluZSB0aGUga2V5IHRvIHNlYXJjaCBmb3JcCiBkZXNpcmVkX2tleSA9IHNrZXkgLS0gQ2hhbmdlIHRoaXMgdG8gdGhlIGRlc2lyZWQga2V5IChlLmcuLCBcIkFcIiwgXCJBYlwiLCBcIkEjXCIpXApcCi0tIERlZmluZSB0aGUgZGlyZWN0b3J5IGNvbnRhaW5pbmcgdGhlIGNob3JkIHByb2dyZXNzaW9uc1wKIGRpcmVjdG9yeSA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9NSURJIFByb2dyZXNzaW9ucy9cIi4uc2NhbGUuLlwiL1wiXApcCi0tIEZ1bmN0aW9uIHRvIGdldCBmaWxlcyBpbiBhIGRpcmVjdG9yeVwKZnVuY3Rpb24gZ2V0X2ZpbGVzX2luX2RpcmVjdG9yeShkaXIpXAogICAgbG9jYWwgZmlsZXMgPSB7fVwKICAgIGZvciBmaWxlIGluIGlvLnBvcGVuKCdscyBcIicgLi4gZGlyIC4uICdcIicpOmxpbmVzKCkgZG9cCiAgICAgICAgaWYgZmlsZTptYXRjaChcIiUubWlkJFwiKSB0aGVuIC0tIENoZWNrIGlmIHRoZSBmaWxlIGVuZHMgd2l0aCAubWlkXAogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZmlsZXMsIGZpbGUpXAogICAgICAgIGVuZFwKICAgIGVuZFwKICAgIHJldHVybiBmaWxlc1wKZW5kXApcCi0tIEZ1bmN0aW9uIHRvIGZpbHRlciBmaWxlcyBieSBrZXlcCmZ1bmN0aW9uIGZpbHRlcl9maWxlc19ieV9rZXkoZmlsZXMsIGZrZXkpXAogICAgbG9jYWwgZmlsdGVyZWRfZmlsZXMgPSB7fVwKICAtLSAgcHJpbnQoXCJGaWx0ZXJpbmcgZmlsZXMgZm9yIGtleTpcIiwga2V5KSAtLSBEZWJ1Z2dpbmcga2V5IGJlaW5nIHNlYXJjaGVkXAogICAgZm9yIF8sIGZpbGUgaW4gaXBhaXJzKGZpbGVzKSBkb1wKICAgICAgIC0tIHByaW50KFwiQ2hlY2tpbmcgZmlsZTpcIiwgZmlsZSkgLS0gRGVidWcgZWFjaCBmaWxlXAogICAgICAgIC0tIE1hdGNoIGZpbGVzIHRoYXQgc3RhcnQgd2l0aCB0aGUgZXhhY3Qga2V5IGZvbGxvd2VkIGJ5IGEgbm9uLXdvcmQgY2hhcmFjdGVyIG9yIGAubWlkYFwKICAgICAgICBpZiBmaWxlOm1hdGNoKFwiXlwiIC4uIGZrZXkgLi4gXCJbJVdfXVwiKSBvciBmaWxlOm1hdGNoKFwiXlwiIC4uIGZrZXkgLi4gXCIlLm1pZCRcIikgdGhlblwKICAgICAgICAgLS0gICBwcmludChcIk1hdGNoZWQgZmlsZTpcIiwgZmlsZSkgLS0gRGVidWcgbWF0Y2hlZCBmaWxlc1wKICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGZpbHRlcmVkX2ZpbGVzLCBmaWxlKVwKICAgICAgICBlbmRcCiAgICBlbmRcCiAgICByZXR1cm4gZmlsdGVyZWRfZmlsZXNcCmVuZFwKXAotLSBGdW5jdGlvbiB0byBwaWNrIGEgcmFuZG9tIGZpbGVcCmZ1bmN0aW9uIHBpY2tfcmFuZG9tX2ZpbGUoZmlsZXMpXAogICAgaWYgI2ZpbGVzID09IDAgdGhlblwKICAgICAgICByZXR1cm4gbmlsIC0tIE5vIGZpbGVzIG1hdGNoZWRcCiAgICBlbmRcCiAgICBtYXRoLnJhbmRvbXNlZWQob3MudGltZSgpKSAtLSBTZWVkIHRoZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvclwKICAgIGxvY2FsIHJhbmRvbV9pbmRleCA9IG1hdGgucmFuZG9tKDEsICNmaWxlcylcCiAgICByZXR1cm4gZmlsZXNbcmFuZG9tX2luZGV4XVwKZW5kXApcCi0tIE1haW4gbG9naWNcCmxvY2FsIGFsbF9maWxlcyA9IGdldF9maWxlc19pbl9kaXJlY3RvcnkoZGlyZWN0b3J5KVwKLS1wcmludChcIkFsbCBmaWxlcyBmb3VuZDpcIikgLS0gRGVidWcgYWxsIGZpbGVzIGluIHRoZSBkaXJlY3RvcnlcCi0tZm9yIF8sIGZpbGUgaW4gaXBhaXJzKGFsbF9maWxlcykgZG8gcHJpbnQoZmlsZSkgZW5kXApcCmxvY2FsIG1hdGNoaW5nX2ZpbGVzID0gZmlsdGVyX2ZpbGVzX2J5X2tleShhbGxfZmlsZXMsIGRlc2lyZWRfa2V5KVwKLS1wcmludChcIk1hdGNoaW5nIGZpbGVzIGZvciBrZXkgXCIgLi4gZGVzaXJlZF9rZXkgLi4gXCI6XCIpXAotLWZvciBfLCBmaWxlIGluIGlwYWlycyhtYXRjaGluZ19maWxlcykgZG8gcHJpbnQoZmlsZSkgZW5kXApcCmxvY2FsIHJhbmRvbV9maWxlID0gcGlja19yYW5kb21fZmlsZShtYXRjaGluZ19maWxlcylcClwKaWYgcmFuZG9tX2ZpbGUgdGhlblwKICAgIHByaW50KFwiUmFuZG9tIHByb2dyZXNzaW9uIGluIGtleSBcIiAuLiBkZXNpcmVkX2tleSAuLiBcIjogXCIgLi4gcmFuZG9tX2ZpbGUpXAogICAgbG9jYWwgZnVsbF9maWxlX3BhdGggPSBkaXJlY3RvcnkgLi4gcmFuZG9tX2ZpbGVcCnByaW50KGZ1bGxfZmlsZV9wYXRoKVwKXDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApcClwKXApcOWZpbGVzOnB1c2hfYmFjayhmdWxsX2ZpbGVfcGF0aClcClwKXDlsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKZWxzZVwKICAgIHByaW50KFwiTm8gcHJvZ3Jlc3Npb25zIGZvdW5kIGZvciBrZXk6IFwiIC4uIGRlc2lyZWRfa2V5KVwKIHNjYWxlID0gc2NhbGU6c3ViKDEsIDEpOmxvd2VyKCkgLi4gc2NhbGU6c3ViKDIpXApcCiAgICBsb2NhbCBmaWxlcGF0aCA9IFwiL3RtcC9jaG9yZFwiLi5kZXNpcmVkX2tleS4uc2NhbGUuLlwiLm1pZFwiXApcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKbG9jYWwgY29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL25ld2Nob3JkIFwiIC4uIGRlc2lyZWRfa2V5Li5cIiBcIi4uc2NhbGUuLlwiIDQgLS1vdXRwdXQgXCIuLnF1b3RlZGZpbGVwYXRoXApcCm9zLmV4ZWN1dGUoY29tbWFuZClcClwKbG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKXApcOWZpbGVzOnB1c2hfYmFjayhmaWxlcGF0aClcClwKXDlsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXApcClwKbG9jYWwgZGVsZXRlX2ZpbGUgPSBcInJtIC1yZiBcIi4uZmlsZXBhdGhcClwKb3MuZXhlY3V0ZShkZWxldGVfZmlsZSlcClwKXApcCmVuZFwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImVkdlwiIHRoZW5cClw5XDlwcmludChcIkVkZ2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9FZGdlIFZvY2Fscy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRWRnZSBWb2NhbHNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJmenZcIiB0aGVuXApcOVw5cHJpbnQoXCJGdXp6IFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvRnV6eiBWb2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkZ1enogVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiODA4XCIgdGhlblwKXDlcOXByaW50KFwiODA4IERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi84MDgtOTA5LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCI4MDgtODA5IERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXDllbmRcClwKXDlcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZHJsXCIgdGhlblwKXDlcOXByaW50KFwiODA4IERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9kcnVtbGFib29oLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJkcnVtbGFib29oXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImJyZFwiIHRoZW5cClw5XDlwcmludChcIkJydXNoIERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9CcnVzaCBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQnJ1c2ggRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcIm9ycFwiIHRoZW5cClw5XDlwcmludChcIk9yY2hlc3RyYWwgUGVyY1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvT3JjaGVzdHJhbCBQZXJjLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJPcmNoZXN0cmFsIFBlcmNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic29uXCIgdGhlblwKXDlcOXByaW50KFwiU29uaU5la28gRHJ1bXNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3NvbmkudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlNvbmlOZWtvIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5XDlsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApmaWxlczpwdXNoX2JhY2soXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXCIpXApsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClw5RWRpdG9yOmRvX2ltcG9ydCAoZmlsZXMsXApcOVw5RWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCBFZGl0aW5nLkltcG9ydFRvVHJhY2ssIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsXApcOVw5QVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSwgQVJET1VSLk1pZGlUZW1wb01hcERpc3Bvc2l0aW9uLlNNRlRlbXBvSWdub3JlLFwKXDlcOXBvcywgQVJET1VSLlBsdWdpbkluZm8oKSwgQVJET1VSLlRyYWNrKCksIGZhbHNlKVwKXDllbmRcClw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJhbFwiIHRoZW5cClw5cHJpbnQoXCJBbGVzaXMgRHJ1bWtpdHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2FsLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJBbGVzaXMgRHJ1bWtpdHNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJ0dWJcIiB0aGVuXApcOXByaW50KFwiVHViZSBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3R1YmUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlR1YmUgVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRwXCIgdGhlblwKXDlwcmludChcIkRlZXBlciBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2RlZXBlci50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRGVlcGVyIFZvY2Fsc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJyb2JcIiB0aGVuXApcOXByaW50KFwiUm9ib3QgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9yb2JvdCB2b2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvYm90IFZvY2Fsc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImF1ZGlvXCIgdGhlblwKXDlwcmludChcIkF1ZGlvXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9hdWRpby50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiYXVkaW9cIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJyb2JcIiB0aGVuXApcOXByaW50KFwiUm9ib3QgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9yb2JvdCB2b2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvYm90IFZvY2Fsc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInNhbXBcIiB0aGVuXApcOXByaW50KFwiU2FtcGx2MSBTYW1wbGVyXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9zYW1wbGVyLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJTYW1wbHYxIFNhbXBsZXJcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYnVzXCIgdGhlblwKXDlwcmludChcIkJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb25cIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0J1c2ttYW4udGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb25cIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5XDlcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcCmZpbGVzOnB1c2hfYmFjayhcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvZHJ1bWpvY2tleS9CYXNpYyBCZWF0cy9CYXNpY2JlYXRfMDAwMS5taWRcIilcCmxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcOWVuZFwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiaG90XCIgdGhlblwKXDlwcmludChcIkJsb25kZSBCb3AgSG90Um9kIERydW1raXRcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2hvdHJvZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQmxvbmRlIEJvcCBIb3RSb2QgRHJ1bWtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlcOVw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKZmlsZXM6cHVzaF9iYWNrKFwiL29wdC9Mb2dpY2FsQXJkb3VyL0RydW0gbG9vcHMsIGNob3JkcywgYW5kIGNob3JkIHByb2dyZXNzaW9ucy9kcnVtam9ja2V5L0Jhc2ljIEJlYXRzL0Jhc2ljYmVhdF8wMDAxLm1pZFwiKVwKbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClw5ZW5kXApcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRyaGVscFwiIHRoZW5cClw5cHJpbnQoXCJEcnVtIEhlbHBcIilcCm9wZW5fdXJsX2luX2Jyb3dzZXIoXCJodHRwczovL3lvdXR1LmJlL0NPbTN5bTZZLXM4XCIpXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJpbnN0aGVscFwiIHRoZW5cClw5cHJpbnQoXCJTb2Z0d2FyZSBJbnN0cnVtZW50cyBIZWxwXCIpXApvcGVuX3VybF9pbl9icm93c2VyKFwiaHR0cHM6Ly95b3V0dS5iZS95b3VyX3NvZnR3YXJlX2luc3RydW1lbnRzX3ZpZGVvXCIpXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJhdWRpb2hlbHBcIiB0aGVuXApcOXByaW50KFwiQXVkaW8gUmVjb3JkaW5nIEhlbHBcIilcCm9wZW5fdXJsX2luX2Jyb3dzZXIoXCJodHRwczovL3lvdXR1LmJlL3lvdXJfYXVkaW9fcmVjb3JkaW5nX3ZpZGVvXCIpXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJndWl0YXJoZWxwXCIgdGhlblwKXDlwcmludChcIkd1aXRhci9CYXNzIFJlY29yZGluZyBIZWxwXCIpXApvcGVuX3VybF9pbl9icm93c2VyKFwiaHR0cHM6Ly95b3V0dS5iZS95b3VyX2d1aXRhcl9yZWNvcmRpbmdfdmlkZW9cIilcClw5ZW5kXApcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInNlc3Npb25oZWxwXCIgdGhlblwKXDlwcmludChcIlNlc3Npb24gUGxheWVycyBIZWxwXCIpXApvcGVuX3VybF9pbl9icm93c2VyKFwiaHR0cHM6Ly95b3V0dS5iZS95b3VyX3Nlc3Npb25fcGxheWVyc192aWRlb1wiKVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZ2VuaGVscFwiIHRoZW5cClw5cHJpbnQoXCJHZW5lcmF0b3JzIEhlbHBcIilcCm9wZW5fdXJsX2luX2Jyb3dzZXIoXCJodHRwczovL3lvdXR1LmJlL3lvdXJfZ2VuZXJhdG9yc192aWRlb1wiKVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiY29maGVscFwiIHRoZW5cClw5cHJpbnQoXCJPcGVuaW5nIENpcmNsZSBvZiBGaWZ0aHMgUmVmZXJlbmNlXCIpXApvcGVuX3VybF9pbl9icm93c2VyKFwiaHR0cHM6Ly9yYW5kc2N1bGxhcmQuY29tL0NpcmNsZU9mRmlmdGhzL1wiKVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RlcHJ6XCIgdGhlblwKXApcClw5Y3JlYXRlX3NlcShcCiAgZnVsbF9wYXRoIC4uIFwiL1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXCIsXAogIFwiU3RlcCBTZXF1ZW5jZXItUmVkIFplcHBsaW5cIixcCiAgZnVsbF9wYXRoIC4uIFwiL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCIsXAogIFwiUmVkIFplcHBsaW5cIlwKKVwKZW5kXApcClwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBibGFja1wiIHRoZW5cClwKY3JlYXRlX3NlcShcCiAgZnVsbF9wYXRoIC4uIFwiL1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXCIsXAogIFwiU3RlcCBTZXF1ZW5jZXItQmxhY2sgUGVhcmwgRHJ1bWtpdFwiLFwKICBmdWxsX3BhdGggLi4gXCIvQmxhY2sgUGVhcmwgRHJ1bWtpdC50ZW1wbGF0ZVwiLFwKICBcIkJsYWNrIFBlYXJsXCJcCilcClw5ZW5kXApcClwKXApcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RlcGJsb25kXCIgdGhlblwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1CbG9uZGUgQm9wIERydW1raXRcIixcCiAgZnVsbF9wYXRoIC4uIFwiL0Jsb25kZSBCb3AgRHJ1bWtpdC50ZW1wbGF0ZVwiLFwKICBcIkJsb25kZSBCb3BcIlwKKVwKXDllbmRcClwKXApcClw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBzdGRcIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLVN0YW5kYXJkIERydW1zXCIsXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVwiLFwKICBcIlN0YW5kYXJkIERydW1zXCJcCilcClw5ZW5kXApcClw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwc3QyXCIgdGhlblwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1TdGFuZGFyZCAyIERydW1zXCIsXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGFuZGFyZCAyIERydW1zLnRlbXBsYXRlXCIsXAogIFwiU3RhbmRhcmQgMiBEcnVtc1wiXAopXApcOWVuZFwKXApcClw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBlbFwiIHRoZW5cClwKY3JlYXRlX3NlcShcCiAgZnVsbF9wYXRoIC4uIFwiL1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXCIsXAogIFwiU3RlcCBTZXF1ZW5jZXItRWxlY3Ryb25pYyBEcnVtc1wiLFwKICBmdWxsX3BhdGggLi4gXCIvRWxlY3Ryb25pYyBEcnVtcy50ZW1wbGF0ZVwiLFwKICBcIkVsZWN0cm9uaWMgRHJ1bXNcIlwKKVwKXDllbmRcClwKXDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RlcHJvb21cIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLVJvb20gRHJ1bXNcIixcCiAgZnVsbF9wYXRoIC4uIFwiL1Jvb20gRHJ1bXMudGVtcGxhdGVcIixcCiAgXCJSb29tIERydW1zXCJcCilcClw5ZW5kXApcClwKXDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RlcHBvd2VyXCIgdGhlblwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1Qb3dlciBEcnVtc1wiLFwKICBmdWxsX3BhdGggLi4gXCIvUG93ZXIgRHJ1bXMudGVtcGxhdGVcIixcCiAgXCJQb3dlciBEcnVtc1wiXAopXAplbmRcClwKXApcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwZGFuY2VcIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLURhbmNlIERydW1zXCIsXAogIGZ1bGxfcGF0aCAuLiBcIi9EYW5jZSBEcnVtcy50ZW1wbGF0ZVwiLFwKICBcIkRhbmNlIERydW1zXCJcCilcCmVuZFwKXApcClwKXDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RlcGphenpcIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLUphenogRHJ1bXNcIixcCiAgZnVsbF9wYXRoIC4uIFwiL0phenogRHJ1bXMudGVtcGxhdGVcIixcCiAgXCJKYXp6IERydW1zXCJcCilcCmVuZFwKXApcClw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXA4MDhcIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLTgwOC05MDkgRHJ1bXNcIixcCiAgZnVsbF9wYXRoIC4uIFwiLzgwOC05MDkudGVtcGxhdGVcIixcCiAgXCI4MDgtOTA5IERydW1zXCJcCilcCmVuZFwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwYnJ1c2hcIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLUJydXNoIERydW1zXCIsXAogIGZ1bGxfcGF0aCAuLiBcIi9CcnVzaCBEcnVtcy50ZW1wbGF0ZVwiLFwKICBcIkJydXNoIERydW1zXCJcCilcCmVuZFwKXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RlcG9yY2hcIiB0aGVuXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLU9yY2hlc3RyYWwgUGVyY1wiLFwKICBmdWxsX3BhdGggLi4gXCIvT3JjaGVzdHJhbCBQZXJjLnRlbXBsYXRlXCIsXAogIFwiT3JjaGVzdHJhbCBQZXJjXCJcCilcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBzb25cIiB0aGVuXApcClwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1Tb25pTmVrb1wiLFwKICBmdWxsX3BhdGggLi4gXCIvc29uaS50ZW1wbGF0ZVwiLFwKICBcIlNvbmlOZWtvIERydW1zXCJcCilcCmVuZFwKLS1CdXNrbWFuJ3MgSG9saWRheSBQZXJjdXNzaW9uXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBidXNrXCIgdGhlblwKXApcClwKY3JlYXRlX3NlcShcCiAgZnVsbF9wYXRoIC4uIFwiL1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXCIsXAogIFwiU3RlcCBTZXF1ZW5jZXItQnVza21hbidzIEhvbGlkYXkgUGVyY3Vzc2lvblwiLFwKICBmdWxsX3BhdGggLi4gXCIvQnVza21hbi50ZW1wbGF0ZVwiLFwKICBcIkJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb25cIlwKKVwKZW5kXApcCi0tL2FsLnRlbXBsYXRlICBBbGVzaXMgRHJ1bWtpdHNcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwYWxcIiB0aGVuXApcClwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1BbGVzaXMgRHJ1bWtpdHNcIixcCiAgZnVsbF9wYXRoIC4uIFwiL2FsLnRlbXBsYXRlXCIsXAogIFwiQWxlc2lzIERydW1raXRzXCJcCilcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBob3RcIiB0aGVuXApcClwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1CbG9uZGUgQm9wIEhvdFJvZCBLaXRcIixcCiAgZnVsbF9wYXRoIC4uIFwiL2hvdHJvZC50ZW1wbGF0ZVwiLFwKICBcIkJsb25kZSBCb3AgSG90Um9kIEtpdFwiXAopXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwbmluXCIgdGhlblwKXApcClwKY3JlYXRlX3NlcShcCiAgZnVsbF9wYXRoIC4uIFwiL1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXCIsXAogIFwiU3RlcCBTZXF1ZW5jZXItTklOIERydW1raXRcIixcCiAgZnVsbF9wYXRoIC4uIFwiL05JTiBEcnVta2l0LnRlbXBsYXRlXCIsXAogIFwiTklOIERydW1raXRcIlwKKVwKZW5kXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBtalwiIHRoZW5cClwKXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLU11bGRqb3JkXCIsXAogIGZ1bGxfcGF0aCAuLiBcIi9tdWxkam9yZC50ZW1wbGF0ZVwiLFwKICBcIk11bGRqb3JkXCJcCilcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBob3VzZVwiIHRoZW5cClwKXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLUhvdXNlS2l0XCIsXAogIGZ1bGxfcGF0aCAuLiBcIi9Ib3VzZUtpdC50ZW1wbGF0ZVwiLFwKICBcIkhvdXNlS2l0XCJcCilcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBwazJcIiB0aGVuXApcClwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1Qb3dlcktpdDJcIixcCiAgZnVsbF9wYXRoIC4uIFwiL3Bvd2Vya2l0Mi50ZW1wbGF0ZVwiLFwKICBcIlBvd2Vya2l0MlwiXAopXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwc3RkM1wiIHRoZW5cClwKXApcCmNyZWF0ZV9zZXEoXAogIGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiLFwKICBcIlN0ZXAgU2VxdWVuY2VyLVN0YW5kYXJkM0tpdFwiLFwKICBmdWxsX3BhdGggLi4gXCIvc3RhbmRhcmQzLnRlbXBsYXRlXCIsXAogIFwiU3RhbmRhcmQzS2l0XCJcCilcCmVuZFwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdGVwYXQ5XCIgdGhlblwKXApcClwKY3JlYXRlX3NlcShcCiAgZnVsbF9wYXRoIC4uIFwiL1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXCIsXAogIFwiU3RlcCBTZXF1ZW5jZXItQW5hbG9nVDlLaXRcIixcCiAgZnVsbF9wYXRoIC4uIFwiL2F0OS50ZW1wbGF0ZVwiLFwKICBcIkFuYWxvZ1Q5S2l0XCJcCilcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0ZXBhdDhcIiB0aGVuXApcClwKXApjcmVhdGVfc2VxKFwKICBmdWxsX3BhdGggLi4gXCIvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcIixcCiAgXCJTdGVwIFNlcXVlbmNlci1BbmFsb2dUOEtpdFwiLFwKICBmdWxsX3BhdGggLi4gXCIvYXQ4LnRlbXBsYXRlXCIsXAogIFwiQW5hbG9nVDhLaXRcIlwKKVwKZW5kXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImZsdWNob3JkXCIgdGhlblwKXDlcOXByaW50KFwiQWNlIEZsdWlkIFN5bnRoXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0ZsdWlkLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJDaG9yZCBHZW5lcmF0aW9uIC0gQUNFIEZsdWlkXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcCmxvY2FsIHNlc3BhdGggPSBTZXNzaW9uOnBhdGgoKVwKbG9jYWwga2V5X2ZpbGVfcGF0aCA9IHNlc3BhdGggLi4gXCIva2V5LnR4dFwiXApcCi0tIFJlYWQgdGhlIGNvbnRlbnRzIG9mIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGZpbGUgPSBpby5vcGVuKGtleV9maWxlX3BhdGgsIFwiclwiKSAtLSBPcGVuIHRoZSBmaWxlIGluIHJlYWQgbW9kZVwKbG9jYWwgZmlsZV9jb250ZW50ID0gXCJObyBrZXkgc2V0XCIgLS0gRGVmYXVsdCB2YWx1ZSBpZiB0aGUgZmlsZSBjYW5ub3QgYmUgcmVhZFwKXAppZiBmaWxlIHRoZW5cCiAgICBmaWxlX2NvbnRlbnQgPSBmaWxlOnJlYWQoXCIqYVwiKSAtLSBSZWFkIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKSAtLSBDbG9zZSB0aGUgZmlsZVwKZWxzZVwKICAgIHByaW50KFwiV2FybmluZzogQ291bGQgbm90IG9wZW4gZmlsZSBmb3IgcmVhZGluZyBhdCBcIiAuLiBrZXlfZmlsZV9wYXRoKVwKZW5kXApcCmxvY2FsIHNjdXJyZW50X2tleV9vcHRpb24gPSBcIlNldCB0byBjdXJyZW50IHByb2plY3Qga2V5OiBcIiAuLiBmaWxlX2NvbnRlbnRcCmxvY2FsIHNkaWFsb2dfb3B0aW9ucyA9IHtcCiAge1wKICAgIHR5cGUgPSBcImRyb3Bkb3duXCIsXAogICAga2V5ID0gXCJ0YXJnZXRfa2V5XCIsXAogICAgdGl0bGUgPSBcIkNob29zZSB0aGUga2V5IHlvdSB3YW50IHRoZSBzZXNzaW9uIHBsYXllciB0byBmb2xsb3dcIixcCiAgICB2YWx1ZXMgPSB7XAogICAgICBbXCJDXCJdID0gMSwgW1wiQyNcIl0gPSAyLCBbXCJEYlwiXSA9IDMsIFtcIkRcIl0gPSA0LCBbXCJEI1wiXSA9IDUsIFtcIkViXCJdID0gNixcCiAgICAgIFtcIkVcIl0gPSA3LCBbXCJGXCJdID0gOCwgW1wiRiNcIl0gPSA5LCBbXCJHYlwiXSA9IDEwLCBbXCJHXCJdID0gMTEsIFtcIkcjXCJdID0gMTIsIFtcIkFiXCJdID0gMTMsXAogICAgICBbXCJBXCJdID0gMTQsIFtcIkEjXCJdID0gMTUsIFtcIkJiXCJdID0gMTYsIFtcIkJcIl0gPSAxNyxcCiAgICAgIFtcIkFtXCJdID0gMTgsIFtcIkEjbVwiXSA9IDE5LCBbXCJCYm1cIl0gPSAyMCwgW1wiQm1cIl0gPSAyMSwgW1wiQ21cIl0gPSAyMixcCiAgICAgIFtcIkMjbVwiXSA9IDIzLCBbXCJEYm1cIl0gPSAyNCwgW1wiRG1cIl0gPSAyNSwgW1wiRCNtXCJdID0gMjYsIFtcIkVibVwiXSA9IDI3LFwKICAgICAgW1wiRW1cIl0gPSAyOCwgW1wiRm1cIl0gPSAyOSwgW1wiRiNtXCJdID0gMzAsIFtcIkdibVwiXSA9IDMxLCBbXCJHbVwiXSA9IDMyLCBbXCJHI21cIl0gPSAzMywgW1wiQWJtXCJdID0gMzQsXAogICAgICBbc2N1cnJlbnRfa2V5X29wdGlvbl0gPSAzNSxcCiAgICAgIFtcIkRvIG5vdCBjaGFuZ2Uga2V5XCJdID0gMzZcCiAgICB9LFwKICAgIGRlZmF1bHQgPSBzY3VycmVudF9rZXlfb3B0aW9uXAogIH1cCn1cClwKbG9jYWwgcmV2ZXJzZV9sb29rdXAgPSB7fVwKZm9yIHNrZXksIHZhbHVlIGluIHBhaXJzKHNkaWFsb2dfb3B0aW9uc1sxXS52YWx1ZXMpIGRvXAogIHJldmVyc2VfbG9va3VwW3ZhbHVlXSA9IHNrZXlcCmVuZFwKXAotLSBDcmVhdGUgYW5kIHJ1biB0aGUgZGlhbG9nXApsb2NhbCBzb2QgPSBMdWFEaWFsb2cuRGlhbG9nKFwiQ2hvb3NlIFRhcmdldCBLZXlcIiwgc2RpYWxvZ19vcHRpb25zKVwKbG9jYWwgc3J2ID0gc29kOnJ1bigpXApcCi0tIEV4aXQgaWYgZGlhbG9nIGlzIGNhbmNlbGVkXAppZiBub3Qgc3J2IHRoZW5cCiAgcHJpbnQoXCJEaWFsb2cgd2FzIGNhbmNlbGVkLlwiKVwKICByZXR1cm5cCmVuZFwKXApsb2NhbCBzZWxlY3RlZF9rZXlfdmFsdWUgPSBzcnZbXCJ0YXJnZXRfa2V5XCJdXApsb2NhbCBza2V5ID0gcmV2ZXJzZV9sb29rdXBbc2VsZWN0ZWRfa2V5X3ZhbHVlXSAtLSBHZXQgdGhlIGtleSBuYW1lIGZyb20gdGhlIHZhbHVlXApsb2NhbCBzY2FsZSA9IFwiXCJcClwKLS0gSGFuZGxlIFwiU2V0IHRvIGN1cnJlbnQgcHJvamVjdCBrZXlcIlwKaWYgc2VsZWN0ZWRfa2V5X3ZhbHVlID09IDM1IHRoZW5cCiAgaWYgZmlsZV9jb250ZW50Om1hdGNoKFwiTm8ga2V5IHNldFwiKSB0aGVuXAogICAgcHJpbnQoXCJObyBrZXkgaXMgc2V0IGluIHRoZSBmaWxlLiBFeGl0aW5nIHRoZSBzY3JpcHQuXCIpXAogICAgcmV0dXJuIC0tIEV4aXQgdGhlIHNjcmlwdFwKICBlbmRcCiAgc2tleSA9IGZpbGVfY29udGVudDptYXRjaChcIl4lYSM/Yj9tP1wiKSAtLSBFeHRyYWN0IHRoZSBrZXlcCmVuZFwKXAotLSBEZXRlcm1pbmUgc2NhbGUgKG1ham9yIG9yIG1pbm9yKVwKaWYgc2tleTpmaW5kKFwibVwiKSB0aGVuXAogIHNjYWxlID0gXCJtaW5vclwiXAplbHNlXAogIHNjYWxlID0gXCJtYWpvclwiXAplbmRcClwKc2NhbGUgPSBzY2FsZTpzdWIoMSwgMSk6dXBwZXIoKSAuLiBzY2FsZTpzdWIoMilcClwKLS0gUHJpbnQgdGhlIHJlc3VsdFwKcHJpbnQoXCJLZXk6IFwiIC4uIHNrZXkgLi4gXCIgU2NhbGU6IFwiIC4uIHNjYWxlKVwKXAppZiBza2V5OnN1YigtMSkgPT0gXCJtXCIgdGhlblwKICBza2V5ID0gc2tleTpzdWIoMSwgLTIpIC0tIEV4dHJhY3QgZXZlcnl0aGluZyBleGNlcHQgdGhlIGxhc3QgY2hhcmFjdGVyXAplbmRcClwKLS0gUHJpbnQgdGhlIHJlc3VsdFwKcHJpbnQoXCJLZXkgd2l0aG91dCAnbSc6IFwiIC4uIHNrZXkpXAotLSBEZWZpbmUgdGhlIGtleSB0byBzZWFyY2ggZm9yXAogZGVzaXJlZF9rZXkgPSBza2V5IC0tIENoYW5nZSB0aGlzIHRvIHRoZSBkZXNpcmVkIGtleSAoZS5nLiwgXCJBXCIsIFwiQWJcIiwgXCJBI1wiKVwKXAotLSBEZWZpbmUgdGhlIGRpcmVjdG9yeSBjb250YWluaW5nIHRoZSBjaG9yZCBwcm9ncmVzc2lvbnNcCiBkaXJlY3RvcnkgPSBcIi9vcHQvTG9naWNhbEFyZG91ci9EcnVtIGxvb3BzLCBjaG9yZHMsIGFuZCBjaG9yZCBwcm9ncmVzc2lvbnMvTUlESSBQcm9ncmVzc2lvbnMvXCIuLnNjYWxlLi5cIi9cIlwKXAotLSBGdW5jdGlvbiB0byBnZXQgZmlsZXMgaW4gYSBkaXJlY3RvcnlcCmZ1bmN0aW9uIGdldF9maWxlc19pbl9kaXJlY3RvcnkoZGlyKVwKICAgIGxvY2FsIGZpbGVzID0ge31cCiAgICBmb3IgZmlsZSBpbiBpby5wb3BlbignbHMgXCInIC4uIGRpciAuLiAnXCInKTpsaW5lcygpIGRvXAogICAgICAgIGlmIGZpbGU6bWF0Y2goXCIlLm1pZCRcIikgdGhlbiAtLSBDaGVjayBpZiB0aGUgZmlsZSBlbmRzIHdpdGggLm1pZFwKICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGZpbGVzLCBmaWxlKVwKICAgICAgICBlbmRcCiAgICBlbmRcCiAgICByZXR1cm4gZmlsZXNcCmVuZFwKXAotLSBGdW5jdGlvbiB0byBmaWx0ZXIgZmlsZXMgYnkga2V5XApmdW5jdGlvbiBmaWx0ZXJfZmlsZXNfYnlfa2V5KGZpbGVzLCBma2V5KVwKICAgIGxvY2FsIGZpbHRlcmVkX2ZpbGVzID0ge31cCiAgLS0gIHByaW50KFwiRmlsdGVyaW5nIGZpbGVzIGZvciBrZXk6XCIsIGtleSkgLS0gRGVidWdnaW5nIGtleSBiZWluZyBzZWFyY2hlZFwKICAgIGZvciBfLCBmaWxlIGluIGlwYWlycyhmaWxlcykgZG9cCiAgICAgICAtLSBwcmludChcIkNoZWNraW5nIGZpbGU6XCIsIGZpbGUpIC0tIERlYnVnIGVhY2ggZmlsZVwKICAgICAgICAtLSBNYXRjaCBmaWxlcyB0aGF0IHN0YXJ0IHdpdGggdGhlIGV4YWN0IGtleSBmb2xsb3dlZCBieSBhIG5vbi13b3JkIGNoYXJhY3RlciBvciBgLm1pZGBcCiAgICAgICAgaWYgZmlsZTptYXRjaChcIl5cIiAuLiBma2V5IC4uIFwiWyVXX11cIikgb3IgZmlsZTptYXRjaChcIl5cIiAuLiBma2V5IC4uIFwiJS5taWQkXCIpIHRoZW5cCiAgICAgICAgIC0tICAgcHJpbnQoXCJNYXRjaGVkIGZpbGU6XCIsIGZpbGUpIC0tIERlYnVnIG1hdGNoZWQgZmlsZXNcCiAgICAgICAgICAgIHRhYmxlLmluc2VydChmaWx0ZXJlZF9maWxlcywgZmlsZSlcCiAgICAgICAgZW5kXAogICAgZW5kXAogICAgcmV0dXJuIGZpbHRlcmVkX2ZpbGVzXAplbmRcClwKLS0gRnVuY3Rpb24gdG8gcGljayBhIHJhbmRvbSBmaWxlXApmdW5jdGlvbiBwaWNrX3JhbmRvbV9maWxlKGZpbGVzKVwKICAgIGlmICNmaWxlcyA9PSAwIHRoZW5cCiAgICAgICAgcmV0dXJuIG5pbCAtLSBObyBmaWxlcyBtYXRjaGVkXAogICAgZW5kXAogICAgbWF0aC5yYW5kb21zZWVkKG9zLnRpbWUoKSkgLS0gU2VlZCB0aGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3JcCiAgICBsb2NhbCByYW5kb21faW5kZXggPSBtYXRoLnJhbmRvbSgxLCAjZmlsZXMpXAogICAgcmV0dXJuIGZpbGVzW3JhbmRvbV9pbmRleF1cCmVuZFwKXAotLSBNYWluIGxvZ2ljXApsb2NhbCBhbGxfZmlsZXMgPSBnZXRfZmlsZXNfaW5fZGlyZWN0b3J5KGRpcmVjdG9yeSlcCi0tcHJpbnQoXCJBbGwgZmlsZXMgZm91bmQ6XCIpIC0tIERlYnVnIGFsbCBmaWxlcyBpbiB0aGUgZGlyZWN0b3J5XAotLWZvciBfLCBmaWxlIGluIGlwYWlycyhhbGxfZmlsZXMpIGRvIHByaW50KGZpbGUpIGVuZFwKXApsb2NhbCBtYXRjaGluZ19maWxlcyA9IGZpbHRlcl9maWxlc19ieV9rZXkoYWxsX2ZpbGVzLCBkZXNpcmVkX2tleSlcCi0tcHJpbnQoXCJNYXRjaGluZyBmaWxlcyBmb3Iga2V5IFwiIC4uIGRlc2lyZWRfa2V5IC4uIFwiOlwiKVwKLS1mb3IgXywgZmlsZSBpbiBpcGFpcnMobWF0Y2hpbmdfZmlsZXMpIGRvIHByaW50KGZpbGUpIGVuZFwKXApsb2NhbCByYW5kb21fZmlsZSA9IHBpY2tfcmFuZG9tX2ZpbGUobWF0Y2hpbmdfZmlsZXMpXApcCmlmIHJhbmRvbV9maWxlIHRoZW5cCiAgICBwcmludChcIlJhbmRvbSBwcm9ncmVzc2lvbiBpbiBrZXkgXCIgLi4gZGVzaXJlZF9rZXkgLi4gXCI6IFwiIC4uIHJhbmRvbV9maWxlKVwKICAgIGxvY2FsIGZ1bGxfZmlsZV9wYXRoID0gZGlyZWN0b3J5IC4uIHJhbmRvbV9maWxlXApwcmludChmdWxsX2ZpbGVfcGF0aClcClw5bG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpO1wKXApcClwKXDlmaWxlczpwdXNoX2JhY2soZnVsbF9maWxlX3BhdGgpXApcClw5bG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcCmVsc2VcCiAgICBwcmludChcIk5vIHByb2dyZXNzaW9ucyBmb3VuZCBmb3Iga2V5OiBcIiAuLiBkZXNpcmVkX2tleSlcCiBzY2FsZSA9IHNjYWxlOnN1YigxLCAxKTpsb3dlcigpIC4uIHNjYWxlOnN1YigyKVwKXAogICAgbG9jYWwgZmlsZXBhdGggPSBcIi90bXAvY2hvcmRcIi4uZGVzaXJlZF9rZXkuLnNjYWxlLi5cIi5taWRcIlwKXApcCmxvY2FsIHF1b3RlZGZpbGVwYXRoID0gJ1wiJyAuLiBmaWxlcGF0aCAuLiAnXCInXApcCmxvY2FsIGNvbW1hbmQgPSBcIi9vcHQvTG9naWNhbEFyZG91ci9uZXdjaG9yZCBcIiAuLiBkZXNpcmVkX2tleS4uXCIgXCIuLnNjYWxlLi5cIiA0IC0tb3V0cHV0IFwiLi5xdW90ZWRmaWxlcGF0aFwKXApvcy5leGVjdXRlKGNvbW1hbmQpXApcCmxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcClwKXDlmaWxlczpwdXNoX2JhY2soZmlsZXBhdGgpXApcClw5bG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcOUVkaXRvcjpkb19pbXBvcnQgKGZpbGVzLFwKXDlcOUVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgRWRpdGluZy5JbXBvcnRUb1RyYWNrLCBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LFwKXDlcOUFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUsIEFSRE9VUi5NaWRpVGVtcG9NYXBEaXNwb3NpdGlvbi5TTUZUZW1wb0lnbm9yZSxcClw5XDlwb3MsIEFSRE9VUi5QbHVnaW5JbmZvKCksIEFSRE9VUi5UcmFjaygpLCBmYWxzZSlcClwKXDlcOVw5bG9jYWwgZGVsZXRlX2ZpbGUgPSBcInJtIC1yZiBcIi4uZmlsZXBhdGhcClwKb3MuZXhlY3V0ZShkZWxldGVfZmlsZSlcCmVuZCBlbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInlvc2hjaG9yZFwiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1lvc2hpbWkudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkNob3JkIEdlbmVyYXRpb24gLSBZb3NoaW1pXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApsb2NhbCBzZXNwYXRoID0gU2Vzc2lvbjpwYXRoKClcCmxvY2FsIGtleV9maWxlX3BhdGggPSBzZXNwYXRoIC4uIFwiL2tleS50eHRcIlwKXAotLSBSZWFkIHRoZSBjb250ZW50cyBvZiB0aGUga2V5LnR4dCBmaWxlXApsb2NhbCBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcInJcIikgLS0gT3BlbiB0aGUgZmlsZSBpbiByZWFkIG1vZGVcCmxvY2FsIGZpbGVfY29udGVudCA9IFwiTm8ga2V5IHNldFwiIC0tIERlZmF1bHQgdmFsdWUgaWYgdGhlIGZpbGUgY2Fubm90IGJlIHJlYWRcClwKaWYgZmlsZSB0aGVuXAogICAgZmlsZV9jb250ZW50ID0gZmlsZTpyZWFkKFwiKmFcIikgLS0gUmVhZCB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKCkgLS0gQ2xvc2UgdGhlIGZpbGVcCmVsc2VcCiAgICBwcmludChcIldhcm5pbmc6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHJlYWRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCmVuZFwKXApsb2NhbCBzY3VycmVudF9rZXlfb3B0aW9uID0gXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleTogXCIgLi4gZmlsZV9jb250ZW50XApsb2NhbCBzZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgICB0eXBlID0gXCJkcm9wZG93blwiLFwKICAgIGtleSA9IFwidGFyZ2V0X2tleVwiLFwKICAgIHRpdGxlID0gXCJDaG9vc2UgdGhlIGtleSB5b3Ugd2FudCB0aGUgc2Vzc2lvbiBwbGF5ZXIgdG8gZm9sbG93XCIsXAogICAgdmFsdWVzID0ge1wKICAgICAgW1wiQ1wiXSA9IDEsIFtcIkMjXCJdID0gMiwgW1wiRGJcIl0gPSAzLCBbXCJEXCJdID0gNCwgW1wiRCNcIl0gPSA1LCBbXCJFYlwiXSA9IDYsXAogICAgICBbXCJFXCJdID0gNywgW1wiRlwiXSA9IDgsIFtcIkYjXCJdID0gOSwgW1wiR2JcIl0gPSAxMCwgW1wiR1wiXSA9IDExLCBbXCJHI1wiXSA9IDEyLCBbXCJBYlwiXSA9IDEzLFwKICAgICAgW1wiQVwiXSA9IDE0LCBbXCJBI1wiXSA9IDE1LCBbXCJCYlwiXSA9IDE2LCBbXCJCXCJdID0gMTcsXAogICAgICBbXCJBbVwiXSA9IDE4LCBbXCJBI21cIl0gPSAxOSwgW1wiQmJtXCJdID0gMjAsIFtcIkJtXCJdID0gMjEsIFtcIkNtXCJdID0gMjIsXAogICAgICBbXCJDI21cIl0gPSAyMywgW1wiRGJtXCJdID0gMjQsIFtcIkRtXCJdID0gMjUsIFtcIkQjbVwiXSA9IDI2LCBbXCJFYm1cIl0gPSAyNyxcCiAgICAgIFtcIkVtXCJdID0gMjgsIFtcIkZtXCJdID0gMjksIFtcIkYjbVwiXSA9IDMwLCBbXCJHYm1cIl0gPSAzMSwgW1wiR21cIl0gPSAzMiwgW1wiRyNtXCJdID0gMzMsIFtcIkFibVwiXSA9IDM0LFwKICAgICAgW3NjdXJyZW50X2tleV9vcHRpb25dID0gMzUsXAogICAgICBbXCJEbyBub3QgY2hhbmdlIGtleVwiXSA9IDM2XAogICAgfSxcCiAgICBkZWZhdWx0ID0gc2N1cnJlbnRfa2V5X29wdGlvblwKICB9XAp9XApcCmxvY2FsIHJldmVyc2VfbG9va3VwID0ge31cCmZvciBza2V5LCB2YWx1ZSBpbiBwYWlycyhzZGlhbG9nX29wdGlvbnNbMV0udmFsdWVzKSBkb1wKICByZXZlcnNlX2xvb2t1cFt2YWx1ZV0gPSBza2V5XAplbmRcClwKLS0gQ3JlYXRlIGFuZCBydW4gdGhlIGRpYWxvZ1wKbG9jYWwgc29kID0gTHVhRGlhbG9nLkRpYWxvZyhcIkNob29zZSBUYXJnZXQgS2V5XCIsIHNkaWFsb2dfb3B0aW9ucylcCmxvY2FsIHNydiA9IHNvZDpydW4oKVwKXAotLSBFeGl0IGlmIGRpYWxvZyBpcyBjYW5jZWxlZFwKaWYgbm90IHNydiB0aGVuXAogIHByaW50KFwiRGlhbG9nIHdhcyBjYW5jZWxlZC5cIilcCiAgcmV0dXJuXAplbmRcClwKbG9jYWwgc2VsZWN0ZWRfa2V5X3ZhbHVlID0gc3J2W1widGFyZ2V0X2tleVwiXVwKbG9jYWwgc2tleSA9IHJldmVyc2VfbG9va3VwW3NlbGVjdGVkX2tleV92YWx1ZV0gLS0gR2V0IHRoZSBrZXkgbmFtZSBmcm9tIHRoZSB2YWx1ZVwKbG9jYWwgc2NhbGUgPSBcIlwiXApcCi0tIEhhbmRsZSBcIlNldCB0byBjdXJyZW50IHByb2plY3Qga2V5XCJcCmlmIHNlbGVjdGVkX2tleV92YWx1ZSA9PSAzNSB0aGVuXAogIGlmIGZpbGVfY29udGVudDptYXRjaChcIk5vIGtleSBzZXRcIikgdGhlblwKICAgIHByaW50KFwiTm8ga2V5IGlzIHNldCBpbiB0aGUgZmlsZS4gRXhpdGluZyB0aGUgc2NyaXB0LlwiKVwKICAgIHJldHVybiAtLSBFeGl0IHRoZSBzY3JpcHRcCiAgZW5kXAogIHNrZXkgPSBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJeJWEjP2I/bT9cIikgLS0gRXh0cmFjdCB0aGUga2V5XAplbmRcClwKLS0gRGV0ZXJtaW5lIHNjYWxlIChtYWpvciBvciBtaW5vcilcCmlmIHNrZXk6ZmluZChcIm1cIikgdGhlblwKICBzY2FsZSA9IFwibWlub3JcIlwKZWxzZVwKICBzY2FsZSA9IFwibWFqb3JcIlwKZW5kXApcCnNjYWxlID0gc2NhbGU6c3ViKDEsIDEpOnVwcGVyKCkgLi4gc2NhbGU6c3ViKDIpXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5OiBcIiAuLiBza2V5IC4uIFwiIFNjYWxlOiBcIiAuLiBzY2FsZSlcClwKaWYgc2tleTpzdWIoLTEpID09IFwibVwiIHRoZW5cCiAgc2tleSA9IHNrZXk6c3ViKDEsIC0yKSAtLSBFeHRyYWN0IGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBsYXN0IGNoYXJhY3RlclwKZW5kXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5IHdpdGhvdXQgJ20nOiBcIiAuLiBza2V5KVwKLS0gRGVmaW5lIHRoZSBrZXkgdG8gc2VhcmNoIGZvclwKIGRlc2lyZWRfa2V5ID0gc2tleSAtLSBDaGFuZ2UgdGhpcyB0byB0aGUgZGVzaXJlZCBrZXkgKGUuZy4sIFwiQVwiLCBcIkFiXCIsIFwiQSNcIilcClwKLS0gRGVmaW5lIHRoZSBkaXJlY3RvcnkgY29udGFpbmluZyB0aGUgY2hvcmQgcHJvZ3Jlc3Npb25zXAogZGlyZWN0b3J5ID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL01JREkgUHJvZ3Jlc3Npb25zL1wiLi5zY2FsZS4uXCIvXCJcClwKLS0gRnVuY3Rpb24gdG8gZ2V0IGZpbGVzIGluIGEgZGlyZWN0b3J5XApmdW5jdGlvbiBnZXRfZmlsZXNfaW5fZGlyZWN0b3J5KGRpcilcCiAgICBsb2NhbCBmaWxlcyA9IHt9XAogICAgZm9yIGZpbGUgaW4gaW8ucG9wZW4oJ2xzIFwiJyAuLiBkaXIgLi4gJ1wiJyk6bGluZXMoKSBkb1wKICAgICAgICBpZiBmaWxlOm1hdGNoKFwiJS5taWQkXCIpIHRoZW4gLS0gQ2hlY2sgaWYgdGhlIGZpbGUgZW5kcyB3aXRoIC5taWRcCiAgICAgICAgICAgIHRhYmxlLmluc2VydChmaWxlcywgZmlsZSlcCiAgICAgICAgZW5kXAogICAgZW5kXAogICAgcmV0dXJuIGZpbGVzXAplbmRcClwKLS0gRnVuY3Rpb24gdG8gZmlsdGVyIGZpbGVzIGJ5IGtleVwKZnVuY3Rpb24gZmlsdGVyX2ZpbGVzX2J5X2tleShmaWxlcywgZmtleSlcCiAgICBsb2NhbCBmaWx0ZXJlZF9maWxlcyA9IHt9XAogIC0tICBwcmludChcIkZpbHRlcmluZyBmaWxlcyBmb3Iga2V5OlwiLCBrZXkpIC0tIERlYnVnZ2luZyBrZXkgYmVpbmcgc2VhcmNoZWRcCiAgICBmb3IgXywgZmlsZSBpbiBpcGFpcnMoZmlsZXMpIGRvXAogICAgICAgLS0gcHJpbnQoXCJDaGVja2luZyBmaWxlOlwiLCBmaWxlKSAtLSBEZWJ1ZyBlYWNoIGZpbGVcCiAgICAgICAgLS0gTWF0Y2ggZmlsZXMgdGhhdCBzdGFydCB3aXRoIHRoZSBleGFjdCBrZXkgZm9sbG93ZWQgYnkgYSBub24td29yZCBjaGFyYWN0ZXIgb3IgYC5taWRgXAogICAgICAgIGlmIGZpbGU6bWF0Y2goXCJeXCIgLi4gZmtleSAuLiBcIlslV19dXCIpIG9yIGZpbGU6bWF0Y2goXCJeXCIgLi4gZmtleSAuLiBcIiUubWlkJFwiKSB0aGVuXAogICAgICAgICAtLSAgIHByaW50KFwiTWF0Y2hlZCBmaWxlOlwiLCBmaWxlKSAtLSBEZWJ1ZyBtYXRjaGVkIGZpbGVzXAogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZmlsdGVyZWRfZmlsZXMsIGZpbGUpXAogICAgICAgIGVuZFwKICAgIGVuZFwKICAgIHJldHVybiBmaWx0ZXJlZF9maWxlc1wKZW5kXApcCi0tIEZ1bmN0aW9uIHRvIHBpY2sgYSByYW5kb20gZmlsZVwKZnVuY3Rpb24gcGlja19yYW5kb21fZmlsZShmaWxlcylcCiAgICBpZiAjZmlsZXMgPT0gMCB0aGVuXAogICAgICAgIHJldHVybiBuaWwgLS0gTm8gZmlsZXMgbWF0Y2hlZFwKICAgIGVuZFwKICAgIG1hdGgucmFuZG9tc2VlZChvcy50aW1lKCkpIC0tIFNlZWQgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXAogICAgbG9jYWwgcmFuZG9tX2luZGV4ID0gbWF0aC5yYW5kb20oMSwgI2ZpbGVzKVwKICAgIHJldHVybiBmaWxlc1tyYW5kb21faW5kZXhdXAplbmRcClwKLS0gTWFpbiBsb2dpY1wKbG9jYWwgYWxsX2ZpbGVzID0gZ2V0X2ZpbGVzX2luX2RpcmVjdG9yeShkaXJlY3RvcnkpXAotLXByaW50KFwiQWxsIGZpbGVzIGZvdW5kOlwiKSAtLSBEZWJ1ZyBhbGwgZmlsZXMgaW4gdGhlIGRpcmVjdG9yeVwKLS1mb3IgXywgZmlsZSBpbiBpcGFpcnMoYWxsX2ZpbGVzKSBkbyBwcmludChmaWxlKSBlbmRcClwKbG9jYWwgbWF0Y2hpbmdfZmlsZXMgPSBmaWx0ZXJfZmlsZXNfYnlfa2V5KGFsbF9maWxlcywgZGVzaXJlZF9rZXkpXAotLXByaW50KFwiTWF0Y2hpbmcgZmlsZXMgZm9yIGtleSBcIiAuLiBkZXNpcmVkX2tleSAuLiBcIjpcIilcCi0tZm9yIF8sIGZpbGUgaW4gaXBhaXJzKG1hdGNoaW5nX2ZpbGVzKSBkbyBwcmludChmaWxlKSBlbmRcClwKbG9jYWwgcmFuZG9tX2ZpbGUgPSBwaWNrX3JhbmRvbV9maWxlKG1hdGNoaW5nX2ZpbGVzKVwKXAppZiByYW5kb21fZmlsZSB0aGVuXAogICAgcHJpbnQoXCJSYW5kb20gcHJvZ3Jlc3Npb24gaW4ga2V5IFwiIC4uIGRlc2lyZWRfa2V5IC4uIFwiOiBcIiAuLiByYW5kb21fZmlsZSlcCiAgICBsb2NhbCBmdWxsX2ZpbGVfcGF0aCA9IGRpcmVjdG9yeSAuLiByYW5kb21fZmlsZVwKcHJpbnQoZnVsbF9maWxlX3BhdGgpXApcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcClwKXApcClw5ZmlsZXM6cHVzaF9iYWNrKGZ1bGxfZmlsZV9wYXRoKVwKXApcOWxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXAplbHNlXAogICAgcHJpbnQoXCJObyBwcm9ncmVzc2lvbnMgZm91bmQgZm9yIGtleTogXCIgLi4gZGVzaXJlZF9rZXkpXAogc2NhbGUgPSBzY2FsZTpzdWIoMSwgMSk6bG93ZXIoKSAuLiBzY2FsZTpzdWIoMilcClwKICAgIGxvY2FsIGZpbGVwYXRoID0gXCIvdG1wL2Nob3JkXCIuLmRlc2lyZWRfa2V5Li5zY2FsZS4uXCIubWlkXCJcClwKXApsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXApsb2NhbCBjb21tYW5kID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvbmV3Y2hvcmQgXCIgLi4gZGVzaXJlZF9rZXkuLlwiIFwiLi5zY2FsZS4uXCIgNCAtLW91dHB1dCBcIi4ucXVvdGVkZmlsZXBhdGhcClwKb3MuZXhlY3V0ZShjb21tYW5kKVwKXApsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApcClw5ZmlsZXM6cHVzaF9iYWNrKGZpbGVwYXRoKVwKXApcOWxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcClw5XDlcOWxvY2FsIGRlbGV0ZV9maWxlID0gXCJybSAtcmYgXCIuLmZpbGVwYXRoXApcCm9zLmV4ZWN1dGUoZGVsZXRlX2ZpbGUpXAplbmQgZW5kXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdXJnZWNob3JkXCIgdGhlblwKXDlcOXByaW50KFwiU3VyZ2UgWFRcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkNob3JkIEdlbmVyYXRpb24gLSBTdXJnZSBYVFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXApsb2NhbCBzZXNwYXRoID0gU2Vzc2lvbjpwYXRoKClcCmxvY2FsIGtleV9maWxlX3BhdGggPSBzZXNwYXRoIC4uIFwiL2tleS50eHRcIlwKXAotLSBSZWFkIHRoZSBjb250ZW50cyBvZiB0aGUga2V5LnR4dCBmaWxlXApsb2NhbCBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcInJcIikgLS0gT3BlbiB0aGUgZmlsZSBpbiByZWFkIG1vZGVcCmxvY2FsIGZpbGVfY29udGVudCA9IFwiTm8ga2V5IHNldFwiIC0tIERlZmF1bHQgdmFsdWUgaWYgdGhlIGZpbGUgY2Fubm90IGJlIHJlYWRcClwKaWYgZmlsZSB0aGVuXAogICAgZmlsZV9jb250ZW50ID0gZmlsZTpyZWFkKFwiKmFcIikgLS0gUmVhZCB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKCkgLS0gQ2xvc2UgdGhlIGZpbGVcCmVsc2VcCiAgICBwcmludChcIldhcm5pbmc6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHJlYWRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCmVuZFwKXApsb2NhbCBzY3VycmVudF9rZXlfb3B0aW9uID0gXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleTogXCIgLi4gZmlsZV9jb250ZW50XApsb2NhbCBzZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgICB0eXBlID0gXCJkcm9wZG93blwiLFwKICAgIGtleSA9IFwidGFyZ2V0X2tleVwiLFwKICAgIHRpdGxlID0gXCJDaG9vc2UgdGhlIGtleSB5b3Ugd2FudCB0aGUgc2Vzc2lvbiBwbGF5ZXIgdG8gZm9sbG93XCIsXAogICAgdmFsdWVzID0ge1wKICAgICAgW1wiQ1wiXSA9IDEsIFtcIkMjXCJdID0gMiwgW1wiRGJcIl0gPSAzLCBbXCJEXCJdID0gNCwgW1wiRCNcIl0gPSA1LCBbXCJFYlwiXSA9IDYsXAogICAgICBbXCJFXCJdID0gNywgW1wiRlwiXSA9IDgsIFtcIkYjXCJdID0gOSwgW1wiR2JcIl0gPSAxMCwgW1wiR1wiXSA9IDExLCBbXCJHI1wiXSA9IDEyLCBbXCJBYlwiXSA9IDEzLFwKICAgICAgW1wiQVwiXSA9IDE0LCBbXCJBI1wiXSA9IDE1LCBbXCJCYlwiXSA9IDE2LCBbXCJCXCJdID0gMTcsXAogICAgICBbXCJBbVwiXSA9IDE4LCBbXCJBI21cIl0gPSAxOSwgW1wiQmJtXCJdID0gMjAsIFtcIkJtXCJdID0gMjEsIFtcIkNtXCJdID0gMjIsXAogICAgICBbXCJDI21cIl0gPSAyMywgW1wiRGJtXCJdID0gMjQsIFtcIkRtXCJdID0gMjUsIFtcIkQjbVwiXSA9IDI2LCBbXCJFYm1cIl0gPSAyNyxcCiAgICAgIFtcIkVtXCJdID0gMjgsIFtcIkZtXCJdID0gMjksIFtcIkYjbVwiXSA9IDMwLCBbXCJHYm1cIl0gPSAzMSwgW1wiR21cIl0gPSAzMiwgW1wiRyNtXCJdID0gMzMsIFtcIkFibVwiXSA9IDM0LFwKICAgICAgW3NjdXJyZW50X2tleV9vcHRpb25dID0gMzUsXAogICAgICBbXCJEbyBub3QgY2hhbmdlIGtleVwiXSA9IDM2XAogICAgfSxcCiAgICBkZWZhdWx0ID0gc2N1cnJlbnRfa2V5X29wdGlvblwKICB9XAp9XApcCmxvY2FsIHJldmVyc2VfbG9va3VwID0ge31cCmZvciBza2V5LCB2YWx1ZSBpbiBwYWlycyhzZGlhbG9nX29wdGlvbnNbMV0udmFsdWVzKSBkb1wKICByZXZlcnNlX2xvb2t1cFt2YWx1ZV0gPSBza2V5XAplbmRcClwKLS0gQ3JlYXRlIGFuZCBydW4gdGhlIGRpYWxvZ1wKbG9jYWwgc29kID0gTHVhRGlhbG9nLkRpYWxvZyhcIkNob29zZSBUYXJnZXQgS2V5XCIsIHNkaWFsb2dfb3B0aW9ucylcCmxvY2FsIHNydiA9IHNvZDpydW4oKVwKXAotLSBFeGl0IGlmIGRpYWxvZyBpcyBjYW5jZWxlZFwKaWYgbm90IHNydiB0aGVuXAogIHByaW50KFwiRGlhbG9nIHdhcyBjYW5jZWxlZC5cIilcCiAgcmV0dXJuXAplbmRcClwKbG9jYWwgc2VsZWN0ZWRfa2V5X3ZhbHVlID0gc3J2W1widGFyZ2V0X2tleVwiXVwKbG9jYWwgc2tleSA9IHJldmVyc2VfbG9va3VwW3NlbGVjdGVkX2tleV92YWx1ZV0gLS0gR2V0IHRoZSBrZXkgbmFtZSBmcm9tIHRoZSB2YWx1ZVwKbG9jYWwgc2NhbGUgPSBcIlwiXApcCi0tIEhhbmRsZSBcIlNldCB0byBjdXJyZW50IHByb2plY3Qga2V5XCJcCmlmIHNlbGVjdGVkX2tleV92YWx1ZSA9PSAzNSB0aGVuXAogIGlmIGZpbGVfY29udGVudDptYXRjaChcIk5vIGtleSBzZXRcIikgdGhlblwKICAgIHByaW50KFwiTm8ga2V5IGlzIHNldCBpbiB0aGUgZmlsZS4gRXhpdGluZyB0aGUgc2NyaXB0LlwiKVwKICAgIHJldHVybiAtLSBFeGl0IHRoZSBzY3JpcHRcCiAgZW5kXAogIHNrZXkgPSBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJeJWEjP2I/bT9cIikgLS0gRXh0cmFjdCB0aGUga2V5XAplbmRcClwKLS0gRGV0ZXJtaW5lIHNjYWxlIChtYWpvciBvciBtaW5vcilcCmlmIHNrZXk6ZmluZChcIm1cIikgdGhlblwKICBzY2FsZSA9IFwibWlub3JcIlwKZWxzZVwKICBzY2FsZSA9IFwibWFqb3JcIlwKZW5kXApcCnNjYWxlID0gc2NhbGU6c3ViKDEsIDEpOnVwcGVyKCkgLi4gc2NhbGU6c3ViKDIpXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5OiBcIiAuLiBza2V5IC4uIFwiIFNjYWxlOiBcIiAuLiBzY2FsZSlcClwKaWYgc2tleTpzdWIoLTEpID09IFwibVwiIHRoZW5cCiAgc2tleSA9IHNrZXk6c3ViKDEsIC0yKSAtLSBFeHRyYWN0IGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBsYXN0IGNoYXJhY3RlclwKZW5kXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiS2V5IHdpdGhvdXQgJ20nOiBcIiAuLiBza2V5KVwKLS0gRGVmaW5lIHRoZSBrZXkgdG8gc2VhcmNoIGZvclwKIGRlc2lyZWRfa2V5ID0gc2tleSAtLSBDaGFuZ2UgdGhpcyB0byB0aGUgZGVzaXJlZCBrZXkgKGUuZy4sIFwiQVwiLCBcIkFiXCIsIFwiQSNcIilcClwKLS0gRGVmaW5lIHRoZSBkaXJlY3RvcnkgY29udGFpbmluZyB0aGUgY2hvcmQgcHJvZ3Jlc3Npb25zXAogZGlyZWN0b3J5ID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL01JREkgUHJvZ3Jlc3Npb25zL1wiLi5zY2FsZS4uXCIvXCJcClwKLS0gRnVuY3Rpb24gdG8gZ2V0IGZpbGVzIGluIGEgZGlyZWN0b3J5XApmdW5jdGlvbiBnZXRfZmlsZXNfaW5fZGlyZWN0b3J5KGRpcilcCiAgICBsb2NhbCBmaWxlcyA9IHt9XAogICAgZm9yIGZpbGUgaW4gaW8ucG9wZW4oJ2xzIFwiJyAuLiBkaXIgLi4gJ1wiJyk6bGluZXMoKSBkb1wKICAgICAgICBpZiBmaWxlOm1hdGNoKFwiJS5taWQkXCIpIHRoZW4gLS0gQ2hlY2sgaWYgdGhlIGZpbGUgZW5kcyB3aXRoIC5taWRcCiAgICAgICAgICAgIHRhYmxlLmluc2VydChmaWxlcywgZmlsZSlcCiAgICAgICAgZW5kXAogICAgZW5kXAogICAgcmV0dXJuIGZpbGVzXAplbmRcClwKLS0gRnVuY3Rpb24gdG8gZmlsdGVyIGZpbGVzIGJ5IGtleVwKZnVuY3Rpb24gZmlsdGVyX2ZpbGVzX2J5X2tleShmaWxlcywgZmtleSlcCiAgICBsb2NhbCBmaWx0ZXJlZF9maWxlcyA9IHt9XAogIC0tICBwcmludChcIkZpbHRlcmluZyBmaWxlcyBmb3Iga2V5OlwiLCBrZXkpIC0tIERlYnVnZ2luZyBrZXkgYmVpbmcgc2VhcmNoZWRcCiAgICBmb3IgXywgZmlsZSBpbiBpcGFpcnMoZmlsZXMpIGRvXAogICAgICAgLS0gcHJpbnQoXCJDaGVja2luZyBmaWxlOlwiLCBmaWxlKSAtLSBEZWJ1ZyBlYWNoIGZpbGVcCiAgICAgICAgLS0gTWF0Y2ggZmlsZXMgdGhhdCBzdGFydCB3aXRoIHRoZSBleGFjdCBrZXkgZm9sbG93ZWQgYnkgYSBub24td29yZCBjaGFyYWN0ZXIgb3IgYC5taWRgXAogICAgICAgIGlmIGZpbGU6bWF0Y2goXCJeXCIgLi4gZmtleSAuLiBcIlslV19dXCIpIG9yIGZpbGU6bWF0Y2goXCJeXCIgLi4gZmtleSAuLiBcIiUubWlkJFwiKSB0aGVuXAogICAgICAgICAtLSAgIHByaW50KFwiTWF0Y2hlZCBmaWxlOlwiLCBmaWxlKSAtLSBEZWJ1ZyBtYXRjaGVkIGZpbGVzXAogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZmlsdGVyZWRfZmlsZXMsIGZpbGUpXAogICAgICAgIGVuZFwKICAgIGVuZFwKICAgIHJldHVybiBmaWx0ZXJlZF9maWxlc1wKZW5kXApcCi0tIEZ1bmN0aW9uIHRvIHBpY2sgYSByYW5kb20gZmlsZVwKZnVuY3Rpb24gcGlja19yYW5kb21fZmlsZShmaWxlcylcCiAgICBpZiAjZmlsZXMgPT0gMCB0aGVuXAogICAgICAgIHJldHVybiBuaWwgLS0gTm8gZmlsZXMgbWF0Y2hlZFwKICAgIGVuZFwKICAgIG1hdGgucmFuZG9tc2VlZChvcy50aW1lKCkpIC0tIFNlZWQgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXAogICAgbG9jYWwgcmFuZG9tX2luZGV4ID0gbWF0aC5yYW5kb20oMSwgI2ZpbGVzKVwKICAgIHJldHVybiBmaWxlc1tyYW5kb21faW5kZXhdXAplbmRcClwKLS0gTWFpbiBsb2dpY1wKbG9jYWwgYWxsX2ZpbGVzID0gZ2V0X2ZpbGVzX2luX2RpcmVjdG9yeShkaXJlY3RvcnkpXAotLXByaW50KFwiQWxsIGZpbGVzIGZvdW5kOlwiKSAtLSBEZWJ1ZyBhbGwgZmlsZXMgaW4gdGhlIGRpcmVjdG9yeVwKLS1mb3IgXywgZmlsZSBpbiBpcGFpcnMoYWxsX2ZpbGVzKSBkbyBwcmludChmaWxlKSBlbmRcClwKbG9jYWwgbWF0Y2hpbmdfZmlsZXMgPSBmaWx0ZXJfZmlsZXNfYnlfa2V5KGFsbF9maWxlcywgZGVzaXJlZF9rZXkpXAotLXByaW50KFwiTWF0Y2hpbmcgZmlsZXMgZm9yIGtleSBcIiAuLiBkZXNpcmVkX2tleSAuLiBcIjpcIilcCi0tZm9yIF8sIGZpbGUgaW4gaXBhaXJzKG1hdGNoaW5nX2ZpbGVzKSBkbyBwcmludChmaWxlKSBlbmRcClwKbG9jYWwgcmFuZG9tX2ZpbGUgPSBwaWNrX3JhbmRvbV9maWxlKG1hdGNoaW5nX2ZpbGVzKVwKXAppZiByYW5kb21fZmlsZSB0aGVuXAogICAgcHJpbnQoXCJSYW5kb20gcHJvZ3Jlc3Npb24gaW4ga2V5IFwiIC4uIGRlc2lyZWRfa2V5IC4uIFwiOiBcIiAuLiByYW5kb21fZmlsZSlcCiAgICBsb2NhbCBmdWxsX2ZpbGVfcGF0aCA9IGRpcmVjdG9yeSAuLiByYW5kb21fZmlsZVwKcHJpbnQoZnVsbF9maWxlX3BhdGgpXApcOWxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKTtcClwKXApcClw5ZmlsZXM6cHVzaF9iYWNrKGZ1bGxfZmlsZV9wYXRoKVwKXApcOWxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXAplbHNlXAogICAgcHJpbnQoXCJObyBwcm9ncmVzc2lvbnMgZm91bmQgZm9yIGtleTogXCIgLi4gZGVzaXJlZF9rZXkpXAogc2NhbGUgPSBzY2FsZTpzdWIoMSwgMSk6bG93ZXIoKSAuLiBzY2FsZTpzdWIoMilcClwKICAgIGxvY2FsIGZpbGVwYXRoID0gXCIvdG1wL2Nob3JkXCIuLmRlc2lyZWRfa2V5Li5zY2FsZS4uXCIubWlkXCJcClwKXApsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXApsb2NhbCBjb21tYW5kID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvbmV3Y2hvcmQgXCIgLi4gZGVzaXJlZF9rZXkuLlwiIFwiLi5zY2FsZS4uXCIgNCAtLW91dHB1dCBcIi4ucXVvdGVkZmlsZXBhdGhcClwKb3MuZXhlY3V0ZShjb21tYW5kKVwKXApsb2NhbCBmaWxlcyA9IEMuU3RyaW5nVmVjdG9yKCk7XApcClw5ZmlsZXM6cHVzaF9iYWNrKGZpbGVwYXRoKVwKXApcOWxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXDlFZGl0b3I6ZG9faW1wb3J0IChmaWxlcyxcClw5XDlFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsIEVkaXRpbmcuSW1wb3J0VG9UcmFjaywgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCxcClw5XDlBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lLCBBUkRPVVIuTWlkaVRlbXBvTWFwRGlzcG9zaXRpb24uU01GVGVtcG9JZ25vcmUsXApcOVw5cG9zLCBBUkRPVVIuUGx1Z2luSW5mbygpLCBBUkRPVVIuVHJhY2soKSwgZmFsc2UpXApcClw5XDlcOWxvY2FsIGRlbGV0ZV9maWxlID0gXCJybSAtcmYgXCIuLmZpbGVwYXRoXApcCm9zLmV4ZWN1dGUoZGVsZXRlX2ZpbGUpXAplbmQgZW5kXApcClwKZW5kIGVuZFwKXApcClwKIiAgc2NyaXB0c1sxXVsiYSJdID0ge30gc2NyaXB0c1sxXVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvbmV3dHJhY2subHVhIiAgIHNjcmlwdHNbMV1bImMiXSA9IHRydWUgc2NyaXB0c1sxXVsiZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcClwwXDBcMLRcOVwwXDBcMFwwXDJcM1wwXDBcMCxcMFwwXDAmXDBcMFwxJlwwgFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXApcMFwwXDC0XDlcMFwwXDFcMSpzXDIyXDBcMEtcMIBcMItAXDFcMIpAQICKQECBilwwwYHLXDBcMlwwysBBg1wxMcFcMVwwXAqBwoRcClwxw4VcCoHDhlwKXDHEh1wKgcSIXApcMcWJS0FcMFwwSsFFi1wKQYGKylwwXDGEXDExQVw1XDBcCoHGjFwKXDHHjVwKgceOXApcMciPXAqByJBcClwxyZFcCoHJklwKXDHKk1wKgcqUXApcMcuVXAqBy5ZcClwxzJdcCoHMmFwKXDHNmVwKgc2aXApcMc6bXAqBzpxcClwxz51cCoHPnlwKXDHQn1wKgdCgXApcMdGhXAqB0aJcClwx0qNLXDFcNVwwSsFSpUpBU6ZKwVOnSkFUqErBVKlKQVWqSsFVq0pBVqxKwVatSkFXrkrBV69KQViwSsFYsUpBWbJKwVmzSkFatErBWrVKQVu2SsFbt0pBXFy4SsFcXLlKQV26SsFdu0pBXrxcCkGBpMpcMFwxjFwxMVwxXDFcMFwKXDHfvVwKgd++XApcMeC/XAqB4MDKXDBcMb1cMTHBXDBcMFwKXDHhvVwKQeG+XAqB4b/KXDCBwVwxMYFcMFwwS8FcMlwwSoHixEpcMePFSoHjxkpcMeTHSoHkyEpcMeXJSoHlykpcMebLSoHmzEpcMefNSoHnzlwKQVwxxFwKXDHoz8pcMIHDXDExgVwwXDBcCsFo0VwKQWnSylwwgdBcMTGBXDBcMEvBXDBcMEpBatRKwWrVSkFr1lwKQYHTXArBa9fKXDBcMdOKwICCikBs2GtAgFwwhoBsXDCHwGxcMcFcMC1cMKSAXDBcMcZAbVwwXDBcMVwwXDHkQFwwXDHBgC1cMFwwXDFcMFwxQcEtXDCAXDGAXDFcMjmBXDFcMmxcMVwwXDCsQVwwXDBcOIBcMdyGQW5cMMBcMVwwXDKkQVwwXDGGgW5cMIfBblwzwVwxXDFcMFwwXDKAXDCkgYBcMcxcMW9cM+SBXDBcMeJcMVwwXDBcMzDAR4BcN0LAXDNcMzHAa1w0XDMwXDBHgFw2Qm5cMEFCL1wwJEJcMFwxXDBcMlwwXDJBgi9cMFwyOUJcMlw0QcIvXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGXDJwXDCMXDJyXDWkglwwXDHAXDJcMFw1XDFDMlww3Vwyg1w1XDaDclwwXDfDclw2QFwzgFw1gVwwMDMzXDAkg4BcMUFDM1wwXCJcM1wwXDBcMzCAXDGAjINzXDZcMcQzXDCkg4BcMUBcM1wwXDeMXDN0XDakQ1wwXDFcMzBcMFwxgIZDblwwwUM0XDBcMFw0gFw13VwzhFw3pENcMFwxgYM0XDDAXDOAXDadw1wzXDfLXDOAXDBcMTFEXDFcMFwKRECAXArEdIFcClw09YFLRFw2XDBKhPDqSsR160pEduxKxHbtSkR37krEd+9KRHjwSlw0bfFKXDT58UqE+fJKXDT680qE+vRKXDT79UqE+/ZKXDT890qE/PhKXDT9+UqE/fpKXDT++0qE/vxKXDT//UqE//6BXDRAXDBKhIT/gURAXDDBhEBcMErEXDRcOYHEQFwwwVw0QVwwSsRcNFw5gURBXDDBhEFcMErEXDRcOYHEQVwwwVw0QlwwSsRcNFw5gURCXDDBhEJcMErEXDRcOYHEQlwwwVw0Q1wwSsRcNFw5gURDXDDBhENcMErEXDRcOYHEQ1wwwVw0RFwwSsRcNFw5gUREXDDBhERcMErEXDRcOYHERFwwwVw0RVwwSsRcNFw5gURFXDDBhEVcMErEXDRcOYHERVwwSoRcNFw3gVw0RlwwwURGXDBKxFw0XDlcCkSEglwKhFwz2OtDgFwwXDExXDRcMFwwQYRGXDBGRFw0XDCHhPBcN4dEQVw5ZFw0XDFcMVwzMFwwXDCAXApcNIVcCmmEXDBcMOpcNP9cMTI3RoRuXDBHxO5cOIHERlwwwFw0gFw3ZISAXDGMXDTvXDikhFwwXDGiRFwwXDBcMzDAXDCAxkRuXDBcMVw1R1ww5ERcMFwxJlwwgFwwx8R0XDlcN8VcNFw4QUVHXDCBxUVcMFwzMYCFXDlcMzCAXDOAXDGGR1wwjFw1hlw2XDFGM1wwpIWAXDGiXDVcMFwwXDMwwFwwgIZFblwwwcVHXDCkRVwwXDEmXDCAXDBcMYZHXDCMXDWGXDZcMVw2SFwwpIWAXDFcMFw1XDBcMTFcMUZIXDCMXDVcNlwKXDGGSFwwpIWAXDGiXDVcMFwwXDMwQFwwgEHFSFwwXDMwXDBcMIBBXDVJXDCGRW5cMMFFSVwwXDBcNlwwXApBhklcMIBcNoBcCt2FhlwxMaRFXDBcMVwxxklcMIxcNVw2XApcMVw2SlwwpIWAXDHBhUhcMFwzMcBcNVwxMVwzMEBcMYBcMcZJXDCMXDVcNlwKXDGGMFwwQUZKXDCkhVwwXDJcMFw1XDBcMTGGRW5cMMGFSlwwXDBcNlwwXArdXDWGXDExpEVcMFwxgcVKXDBcOFwwXDVcMTGBXDVLXDDBxUpcMMbFXDVcMFwwXDaAXApBRktcMJ1FXDZcMTHBhUtcMFwwXDZcMFwxMUGGS1ww3UWGXDExXDHGS1wwQcZKXDBGRlw2XDCBXDZMXDDAXDaAXApcMUdMXDBAXDeAXDExXDI5Rlw3XDEyQYZMXDBGRlw2XDCBxkxcMEeGhlwxMoBcNlwwXDEyZEZcMFwxRkZ1XDCBXDZNXDBHhoZcMTJkhoBcMFwxR01cMIxcNodcMTJcMFw3XDBcMTGkRoBcMYGGTVwwhoZcNlwwwcZNXDCHxlw2XDEzwVw2TlwwpIZcMFwxwUZOXDDGxlw2XDBBh05cMMxGh1wxM0BcN4BcMTKBx05cMIaHXDdcMMFcN09cMIfHXDdcMTXBx05cMMbHXDdcMFwxSE9cMMdcN4hcMTVcNshwXDBBiE9cMFw3SFw4XDE2QchPXDBcN0hcOFwxNkbIcFwwgVw4UFwwR4iIXDE2gUhQXDBHiIhcMTaGyHBcMMGIUFwwh8hcOFwxN8HIUFwwh8hcOFwxN8BcOFwwXDEzXDbJcFwwQVw5UVwwXDdJXDlcMTgkiYBcMEbJcFwwgUlRXDBHiYlcMThkiYBcMINcOVwwXDDkRlwwXDbBhlFcMFwwXDdcMFwxMd1cNodcMTNcMYdMXDBcNlw3XDdcMEHHTFwwXDdHXDdcMTRAXDeAXDEzJEdcMFwx4lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxgEZcNFwzMMBcMTeAXDZCblwwQcJRXDAkQlwwXDFcMFwyXDBcMkFcMlJcMFwyOUJcMlw0QUJSXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGQnVcMMFcMk1cMIfCXDJcNaSCgFwwQUNNXDDMQlwzXDVBg1JcMORCgFwxwYJNXDDGwlwyXDBcMcNNXDDHXDKDXDVcMVwzTlww5IJcMFwxXDFDTlwwXDZcM1wzXDCBg05cMFwxMoNcM1w2gFwzXDBcNcHDTlwwxsNcM1wwXDFcNE9cMMdcM4RcN1wxxE5cMFw2XDRcNFwwQURPXDBcN0RcNFw4RsRwXDCBhE9cMEeEhFw4gcRPXDBHhIRcOIbEcFwwwVw0UFwwh8RcNFw5wURQXDCHxFw0XDnGxHBcMFwxhVBcMMdcNIVcOVwxxVBcMMdcNIVcOVwwXDWAXDVGxXBcMIFcNVFcMEeFhVwKZIWAXDCGxXBcMMFFUVwwh8VcNVwxMaSFgFwww1w1XDBcMCRDXDBcNuJcMVwwXDBcMzCAXDE4gFw3QsBcM1wzMYBQXDRcMzDAXDE3gFw2Qm5cMEHCUVwwJEJcMFwxXDBcMlwwXDJBwlJcMFwyOUJcMlw0QYJcMjhcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxXDBRXDRcMzDAXDE3gFw2Qm5cMEFcMlNcMCRCXDBcMVwwXDJcMFwyQUJTXDBcMjlCXDJcNEGCU1wwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzGAUVw0XDMwwFwxN4BcNkJuXDBBwlNcMCRCXDBcMVwwXDJcMFwyQVwyVFwwXDI5QlwyXDRBglwyOVwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzFcMFJcNFwzMMBcMTeAXDZCblwwQUJUXDAkQlwwXDFcMFwyXDBcMkGCVFwwXDI5QlwyXDRBXDJcMzBcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxXDBHXDRcMzDAXDE3gFw2Qm5cMEHCVFwwJEJcMFwxXDBcMlwwXDJBXDJVXDBcMjlCXDJcNEFcMlwxOVwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzFcME9cNFwzMMBcMTeAXDZCblwwQUJVXDAkQlwwXDFcMFwyXDBcMkGCVVwwXDI5QlwyXDRBXDJcMjdcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxgEdcNFwzMMBcMTeAXDZCblwwQcJVXDAkQlwwXDFcMFwyXDBcMkFcMlZcMFwyOUJcMlw0QUJWXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGQnVcMMFcMk1cMIfCXDJcNaSCgFwwQUNNXDDMQlwzXDVBg1JcMORCgFwxwYJNXDDGwlwyXDBcMcNNXDDHXDKDXDVcMVwzTlww5IJcMFwxXDFDTlwwXDZcM1wzXDCBg05cMFwxMoNcM1w2gFwzXDBcNcHDTlwwxsNcM1wwXDFcNE9cMMdcM4RcN1wxxE5cMFw2XDRcNFwwQURPXDBcN0RcNFw4RsRwXDCBhE9cMEeEhFw4gcRPXDBHhIRcOIbEcFwwwVw0UFwwh8RcNFw5wURQXDCHxFw0XDnGxHBcMFwxhVBcMMdcNIVcOVwxxVBcMMdcNIVcOVwwXDWAXDVGxXBcMIFcNVFcMEeFhVwKZIWAXDCGxXBcMMFFUVwwh8VcNVwxMaSFgFwww1w1XDBcMCRDXDBcNuJcMVwwXDBcMzCAXDE4gFw3QsBcM1wzMVwwUFw0XDMwwFwxN4BcNkJuXDBBwlVcMCRCXDBcMVwwXDJcMFwyQYJWXDBcMjlCXDJcNEFcMlwyOFwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMVwwX1w0XDMwgFw0gFw2Qm5cMEHCVlwwJEJcMFwxXDBcMlwwXDJBXDJXXDBcMjlCXDJcNEHCVlwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwz4lwxXDBcMFwzMEBcNYBcN0LAXDNcMzGAX1w0XDMwgFw0gFw2Qm5cMEFcMitcMCRCXDBcMVwwXDJcMFwyQUJXXDBcMjlCXDJcNEFcMitcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxXDBgXDRcMzCAXDSAXDZCblwwQYIqXDAkQlwwXDFcMFwyXDBcMkGCV1wwXDI5QlwyXDRBgipcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxQGlcNFwzMIBcNIBcNkJuXDBBwldcMCRCXDBcMVwwXDJcMFwyQVwyWFwwXDI5QlwyXDRBXDIpXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMcBoXDRcMzCAXDSAXDZCblwwQUJYXDAkQlwwXDFcMFwyXDBcMkGCWFwwXDI5QlwyXDRBgihcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxgGJcNFwzMIBcNIBcNkJuXDBBwlhcMCRCXDBcMVwwXDJcMFwyQVwyWVwwXDI5QlwyXDRBQllcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxXDBjXDRcMzCAXDSAXDZCblwwQYJZXDAkQlwwXDFcMFwyXDBcMkHCWVwwXDI5QlwyXDRBXDJaXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMYBjXDRcMzCAXDSAXDZCblwwQUJaXDAkQlwwXDFcMFwyXDBcMkGCWlwwXDI5QlwyXDRBwlpcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxXDBkXDRcMzCAXDSAXDZCblwwQVwyW1wwJEJcMFwxXDBcMlwwXDJBQltcMFwyOUJcMlw0QYJbXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMYBkXDRcMzCAXDSAXDZCblwwQcJbXDAkQlwwXDFcMFwyXDBcMkFcMlxcXDBcMjlCXDJcNEFCXFxcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxXDBlXDRcMzCAXDSAXDZCblwwQYJcXFwwJEJcMFwxXDBcMlwwXDJBwlxcXDBcMjlCXDJcNEFcMl1cMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzCAXDE4gFw3QsBcM1wzMVwwSFw0XDMwwFwxN4BcNkJuXDBBXDJcMjBcMCRCXDBcMVwwXDJcMFwyQUJdXDBcMjlCXDJcNEFcMlwyMFwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzGAT1w0XDMwwFwxN4BcNkJuXDBBgl1cMCRCXDBcMVwwXDJcMFwyQcJdXDBcMjlCXDJcNEFcMl5cMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxgEhcNFwzMMBcMTeAXDZCblwwQYJcMjBcMCRCXDBcMVwwXDJcMFwyQUJeXDBcMjlCXDJcNEGCXDIwXDCGXDJwXDCMQnBcNVwxgzBcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGQnVcMMFcMk1cMIfCXDJcNaSCgFwwQUNNXDDMQlwzXDVBg1JcMORCgFwxwYJNXDDGwlwyXDBcMcNNXDDHXDKDXDVcMVwzTlww5IJcMFwxXDFDTlwwXDZcM1wzXDCBg05cMFwxMoNcM1w2gFwzXDBcNcHDTlwwxsNcM1wwXDFcNE9cMMdcM4RcN1wxxE5cMFw2XDRcNFwwQURPXDBcN0RcNFw4RsRwXDCBhE9cMEeEhFw4gcRPXDBHhIRcOIbEcFwwwVw0UFwwh8RcNFw5wURQXDCHxFw0XDnGxHBcMFwxhVBcMMdcNIVcOVwxxVBcMMdcNIVcOVwwXDWAXDVGxXBcMIFcNVFcMEeFhVwKZIWAXDCGxXBcMMFFUVwwh8VcNVwxMaSFgFwww1w1XDBcMCRDXDBcNuJcMVwwXDBcMzCAXDE4gFw3QsBcM1wzMVwwSVw0XDMwwFwxN4BcNkJuXDBBXDJcMjFcMCRCXDBcMVwwXDJcMFwyQYJeXDBcMjlCXDJcNEFcMlwyMVwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzGASVw0XDMwwFwxN4BcNkJuXDBBglwyMVwwJEJcMFwxXDBcMlwwXDJBwl5cMFwyOUJcMlw0QYJcMjFcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxXDBKXDRcMzDAXDE3gFw2Qm5cMEFcMlwyMlwwJEJcMFwxXDBcMlwwXDJBXDJfXDBcMjlCXDJcNEFcMlwyMlwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhkJ1XDDBXDJNXDCHwlwyXDWkgoBcMEFDTVwwzEJcM1w1QYNSXDDkQoBcMcGCTVwwxsJcMlwwXDHDTVwwx1wyg1w1XDFcM05cMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzGASlw0XDMwwFwxN4BcNkJuXDBBglwyMlwwJEJcMFwxXDBcMlwwXDJBQl9cMFwyOUJcMlw0QYJcMjJcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxXDBLXDRcMzDAXDE3gFw2Qm5cMEGCXDIyXDAkQlwwXDFcMFwyXDBcMkGCX1wwXDI5QlwyXDRBXDJcMjNcMIZcMnBcMIxCcFw1XDGDMFwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxXDNOXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMFwwaYBcN0LAXDNcMzFcMGFcNFwzMEBogFw2Qm5cMEHCVlwwJEJcMFwxXDBcMlwwXDJBwl9cMFwyOUJcMlw0QVwyYFwwhlwycFwwjEJwXDVcMYMwXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhlwycFwwjFwyclw1pIJcMFwxwFwyXDBcNVwxQzJcMN1cMoNcNVw2g3JcMFw3w3JcNkBcM4BcNYFcMDAzM1wwJIOAXDFBQzNcMFwiXDNcMFwwXDMwgFwxgIyDc1w2XDHEM1wwpIOAXDFAXDNcMFw3jFwzdFw2pENcMFwxXDMwXDBcMYCGQ25cMMFDNFwwXDBcNIBcNd1cM4RcN6RDXDBcMYGDNFwwwFwzgFw2ncNcM1w3y1wzgFwwXDExRFwxXDBcCkRAgFwKxHSBXApcNPWBS0RcNlwwSoTw6krEdetKRHbsSsR27UpEd+5KxHfvSkR48EpcNG3xSlw0+fFKhPnySlw0+vNKhPr0Slw0+/VKhPv2Slw0/PdKhPz4Slw0/flKhP36Slw0/vtKhP78Slw0//1KhP/+gVw0QFwwSoSE/4FEQFwwwYRAXDBKxFw0XDmBxEBcMMFcNEFcMErEXDRcOYFEQVwwwYRBXDBKxFw0XDmBxEFcMMFcNEJcMErEXDRcOYFEQlwwwYRCXDBKxFw0XDmBxEJcMMFcNENcMErEXDRcOYFEQ1wwwYRDXDBKxFw0XDmBxENcMMFcNERcMErEXDRcOYFERFwwwYREXDBKxFw0XDmBxERcMMFcNEVcMErEXDRcOYFERVwwwYRFXDBKxFw0XDmBxEVcMEqEXDRcN4FcNEZcMMFERlwwSsRcNFw5XApEhIJcCoRcM9jrQ4BcMFwxMVw0XDBcMEGERlwwRkRcNFwwh4TwXDeHREFcOWRcNFwxXDFcMzBcMFwwgFwKXDSFXApphFwwXDDqXDT/XDEyN0aEblwwR8TuXDiBxEZcMMBcNIBcN2SEgFwxjFw071w4pIRcMFwxokRcMFwwXDMwwFwwgMZEblwwXDFcNUdcMOREXDBcMSZcMIBcMMfEdFw5XDfFXDRcOEFFR1wwgcVFXDBcMzGAhVw5XDMwgFwzgFwxhkdcMIxcNYZcNlwxRjNcMKSFgFwxolw1XDBcMFwzMMBcMICGRW5cMMHFR1wwpEVcMFwxJlwwgFwwXDGGR1wwjFw1hlw2XDFcNkhcMKSFgFwxXDBcNVwwXDExXDFGSFwwjFw1XDZcClwxhkhcMKSFgFwxolw1XDBcMFwzMEBcMIBBxUhcMFwzMFwwXDCAQVw1SVwwXDHGSVwwjFw1hlwKXDGGMFwwQYYwXDCkhVwwXDJcMUZgXDCMXDVcNlwxMaSFXDBcMUHGSVwwzEWGXApBxjVcMOSFgFwxXcVcNVwxMYZFblwwwUVJXDBcMFw2XDBcCkGGSVwwgFw2gFwK3YWGXDExpEVcMFwxXDHGSVwwjFw1XDZcClwxXDZKXDCkhYBcMcGFSFwwXDMxwFw1XDExXDMwQFwxgFwxxklcMIxcNVw2XApcMYYwXDBBRkpcMKSFXDBcMlwwXDVcMFwxMYZFblwwwYVKXDBcMFw2XDBcCt1cNYZcMTGkRVwwXDGBxUpcMFw4XDBcNVwxMYGFYFwwwcVgXDBcMFw2gFwKQcYtXDDdRYZcMTFcOMBcNVwxMYFcNWFcMOyFXDBcMFw4wFw1XDExgUVhXDDsxVwwXDBcOMBcNVwxMYGFYVww7Fw1XDFcMFw4wFw1XDExgVw1YVwwhoVcNVwwwYVgXDDGxVw1XDCkhVwwXDHBRWFcMMbFXDVcMFwwXDZcMFwxMUHGSlwwRkZcNlww5IWAXDFcMYZhXDBcNlw2XDZcMEBcNoBcMTEkhlwwXDFcIlw2XDBcMFwzMFwwXDE3gEZGblwwgcZhXDDBxkpcMMbGXDZcMFwxXDdiXDBAXDdcMFwxMp1GXDdcMTNkRlwwXDFBhmBcMEZGXDZcMIBcNlwwXDEyXYaGXDEyhkZuXDDAXDaAXDEypEZcMFwxhkZ1XDDBXDZNXDCHxlw2XDEzpIaAXDBBR01cMMxGXDdcMTNAXDeAXDEy5EaAXDHBhk1cMMbGXDZcMFwxx01cMMdcNodcMTNcMUdiXDDkhlwwXDFcMUdOXDBcNlw3XDdcMIGHTlwwXDEyh1w3XDE0gFw3XDBcMTPBx05cMMbHXDdcMFwxXDhPXDDHXDeIXDE1XDHITlwwXDZcOFw4XDBBSE9cMFw3SFw4XDE2RshwXDCBiE9cMEeIiFwxNoHIT1wwR4iIXDE2hshwXDDBXDhQXDCHyFw4XDE3wUhQXDCHyFw4XDE3xshwXDBcMYlQXDDHXDiJXDE3XDHJUFwwx1w4iVwxN1wwXDmAXDEzRslwXDCBXDlRXDBHiYlcMThkiYBcMIbJcFwwwUlRXDCHyVw5XDE5pImAXDDDXDlcMFwwJEdcMFw2XDMwXDBcMjaARkZuXDCBhmJcMMHGSlwwxsZcNlwwncZcNlwxM2RGXDBcMcHGSVwwTMaGXArBxmJcMFwxx2JcMGSGXDBcMsFcNmNcMEzGhlwxMmSGXDBcMVwxx0lcMIxcNodcClwxxzVcMKSGgFwxXYWGXDEyQUZjXDCBxkpcMIaGXDZcMMBcNoBcClwxR0tcMF1cNodcMTKBhmNcMMBcNoBcMTJcMYdjXDCdXDZcN1wxM8HGY1wwXDHHSlwwXDZcN1w3XDBBXDdMXDCAXDeAXArBR0xcMFwwXDhcMFwxM91cNohcMTNcMVw3ZFwwXDZcN1w3XDBBx0xcMFw3R1w3XDE0QFw3gFwxMyRHXDBcMVw2R3VcMEFcN01cMFw3R1w3XDE0JIeAXDDBR01cMEzHXDdcMTTAXDeAXDEyZEeAXDFBh01cMEZHXDdcMIHHTVwwR4eHXDE0gUdiXDBkh1wwXDGBR05cMIaHXDdcMFwxiE5cMIxcN1w4XDE1XDBcOFwwXDE0QchOXDBGSFw4XDCBXDhPXDBHiIhcMTaByE5cMIaIXDhcMMFIT1wwh8hcOFwxN8bIcFwwXDGJT1wwx1w4iVwxN1wxyU9cMMdcOIlcMTdcNslwXDBBXDlQXDBcN0lcOVwxOEFJUFwwXDdJXDlcMThGyXBcMIGJUFwwR4mJXDE4gclQXDBHiYlcMTiAXDmAXDE0xslwXDBcMVwKUVwwx1w5ilwxOeSJgFwwXDbKcFwwQUpRXDBcN0pcClwyMCSKgFwwQ1wKXDBcMKRHXDBcNoGHUVwwwFw3gFwxMp3HXDdcMTXBXDdkXDDGx1w3XDBcMchMXDDHXDeIXDE1XDBcOFwwXDE15EdcMFwx4lwxXDBcMFwzMMBpgFw3QsBcM1wzMUBhXDRcMzBcMGmAXDZCblwwQVwyK1wwJEJcMFwxXDBcMlwwXDJBQmRcMFwyOUJcMlw0QYJkXDCGXDJwXDCMQnBcNVwxw2JcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGXDJwXDCMXDJyXDWkglwwXDHAXDJcMFw1XDFDMlww3Vwyg1w1XDHDZFwwXDZcM1wzXDBcN8NyXDZAXDOAXDWBXDAwMzNcMCSDgFwxQUMzXDBcIlwzXDBcMFwzMIBcMYCMg3NcNlwxxDNcMKSDgFwxQFwzXDBcN4xcM3RcNqRDXDBcMVwzMFwwXDGAhkNuXDDBQzRcMFwwXDSAXDXdXDOEXDekQ1wwXDGBgzRcMMBcM4BcNp3DXDNcN8tcM4BcMFwxMURcMVwwXApEQIBcCsR0gVwKXDT1gUtEXDZcMIHEYlwwSoSE6krEdetKRHbsSsR27UpEd+5KxHfvSkR48EpcNG3xSlw0+fFKhPnySlw0+vNKhPr0Slw0+/VKhPv2Slw0/PdKhPz4Slw0/flKhP36Slw0/vtKhP78Slw0//1KhP/+gVw0QFwwSoSE/4FEQFwwwYRAXDBKxFw0XDmBxEBcMMFcNEFcMErEXDRcOYFEQVwwwYRBXDBKxFw0XDmBxEFcMMFcNEJcMErEXDRcOYFEQlwwwYRCXDBKxFw0XDmBxEJcMMFcNENcMErEXDRcOYFEQ1wwwYRDXDBKxFw0XDmBxENcMMFcNERcMErEXDRcOYFERFwwwYREXDBKxFw0XDmBxERcMMFcNEVcMErEXDRcOYFERVwwwYRFXDBKxFw0XDmBxEVcMEqEXDRcN4FcNEZcMMFERlwwSsRcNFw5XApEhIJcCoRcM9jrQ4BcMFwxMVw0XDBcMEGERlwwRkRcNFwwgcRiXDCHhIRcN4dEQVw5ZFw0XDFcMVwzMFwwXDCAXApcNIVcCmmEXDBcMOpcNP9cMTI3RoRuXDBHxO5cOIHERlwwwFw0gFw3ZISAXDGMXDTvXDikhFwwXDGiRFwwXDBcMzDAXDCAxkRuXDBcMVw1R1ww5ERcMFwxJlwwgFwwx8R0XDlcN8VcNFw4QUVHXDCBxUVcMFwzMYCFXDlcMzCAXDOAXDFcNmVcMIxcNYZcNlwxRjNcMKSFgFwxolw1XDBcMFwzMMBcMICGRW5cMMHFR1wwpEVcMFwxJlwwgFwwXDFcNmVcMIxcNYZcNlwxXDZIXDCkhYBcMVwwXDVcMFwxMVwxRkhcMIxcNVw2XApcMYZIXDCkhYBcMaJcNVwwXDBcMzBAXDCAQcVIXDBcMzBcMFwwgEFcNUlcMFwxxklcMIxcNYZcClwxxmJcMEHGYlwwpIVcMFwyXDFGYFwwjFw1XDZcMTGkhVwwXDFBxklcMMxFhlwKQcY1XDDkhYBcMV3FXDVcMTGGRW5cMMFFSVwwXDBcNlwwXApBhklcMIBcNoBcCt2FhlwxMaRFXDBcMVwxxklcMIxcNVw2XApcMVw2SlwwpIWAXDHBhUhcMFwzMcBcNVwxMVwzMEBcMYBcMcZJXDCMXDVcNlwKXDHGYlwwQUZKXDCkhVwwXDJcMFw1XDBcMTGGRW5cMMGFSlwwXDBcNlwwXArdXDWGXDExpEVcMFwxgcVKXDBcOFwwXDVcMTGBhWBcMMHFYFwwXDBcNoBcCkHGLVww3UWGXDExXDjAXDVcMTGBXDVhXDDsRVwxXDBcOMBcNVwxMYFFYVww7IVcMVwwXDjAXDVcMTGBhWFcMOzFXDFcMFw4wFw1XDExgVw1YVwwhoVcNVwwwYVgXDDGxVw1XDCkhVwwXDHBRWFcMMbFXDVcMFwwXDZcMFwxMUHGSlwwRkZcNlww5IWAXDFcMYZhXDBcNlw2XDZcMEBcNoBcMTEkhlwwXDFcIlw2XDBcMFwzMFwwXDE3gEZGblwwgcZhXDDBxkpcMMbGXDZcMFwxXDdiXDBAXDdcMFwxMp1GXDdcMTNkRlwwXDFBhmBcMEZGXDZcMIBcNlwwXDEyXYaGXDEyhkZuXDDAXDaAXDEypEZcMFwxhkZ1XDDBXDZNXDCHxlw2XDEzpIaAXDBBR01cMMxGXDdcMTNAXDeAXDEy5EaAXDHBhk1cMMbGXDZcMFwxx01cMMdcNodcMTNcMUdlXDDkhlwwXDFcMUdOXDBcNlw3XDdcMIGHTlwwXDEyh1w3XDE0gFw3XDBcMTPBx05cMMbHXDdcMFwxXDhPXDDHXDeIXDE1XDHITlwwXDZcOFw4XDBBSE9cMFw3SFw4XDE2RshwXDCBiE9cMEeIiFwxNoHIT1wwR4iIXDE2hshwXDDBXDhQXDCHyFw4XDE3wUhQXDCHyFw4XDE3xshwXDBcMYlQXDDHXDiJXDE3XDHJUFwwx1w4iVwxN1wwXDmAXDEzRslwXDCBXDlRXDBHiYlcMThkiYBcMIbJcFwwwUlRXDCHyVw5XDE5pImAXDDDXDlcMFwwJEdcMFw2XDMwXDBcMjaARkZuXDCBhmJcMMHGSlwwxsZcNlwwncZcNlwxM2RGXDBcMcHGSVwwTMaGXArBhmVcMFwxh2VcMGSGXDBcMsFcNmNcMEzGhlwxMmSGXDBcMVwxx0lcMIxcNodcClwxxzVcMKSGgFwxXYWGXDEyQUZjXDCBxkpcMIaGXDZcMMBcNoBcClwxR0tcMF1cNodcMTKBxmVcMMBcNoBcMTJcMcdlXDCdXDZcN1wxM8HGY1wwXDHHSlwwXDZcN1w3XDBBXDdMXDCAXDeAXArBR0xcMFwwXDhcMFwxM91cNohcMTNcMVw3ZlwwXDZcN1w3XDBBx0xcMFw3R1w3XDE0QFw3gFwxMyRHXDBcMVw2R3VcMEFcN01cMFw3R1w3XDE0JIeAXDDBR01cMEzHXDdcMTTAXDeAXDEyZEeAXDFBh01cMEZHXDdcMIHHTVwwR4eHXDE0gUdlXDBkh1wwXDGBR05cMIaHXDdcMFwxiE5cMIxcN1w4XDE1XDBcOFwwXDE0QchOXDBGSFw4XDCBXDhPXDBHiIhcMTaByE5cMIaIXDhcMMFIT1wwh8hcOFwxN8bIcFwwXDGJT1wwx1w4iVwxN1wxyU9cMMdcOIlcMTdcNslwXDBBXDlQXDBcN0lcOVwxOEFJUFwwXDdJXDlcMThGyXBcMIGJUFwwR4mJXDE4gclQXDBHiYlcMTiAXDmAXDE0xslwXDBcMVwKUVwwx1w5ilwxOeSJgFwwXDbKcFwwQUpRXDBcN0pcClwyMCSKgFwwQ1wKXDBcMKRHXDBcNoGHUVwwwFw3gFwxMp3HXDdcMTXBXDdmXDDGx1w3XDBcMchMXDDHXDeIXDE1XDBcOFwwXDE15EdcMFwx4lwxXDBcMFwzMMBpgFw3QsBcM1wzMYBhXDRcMzBcMGmAXDZCblwwQYIqXDAkQlwwXDFcMFwyXDBcMkFCZlwwXDI5QlwyXDRBgmZcMIZcMnBcMIxCcFw1XDGDZVwwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZcMnBcMIxcMnJcNaSCXDBcMcBcMlwwXDVcMUMyXDDdXDKDXDVcMcNmXDBcNlwzXDNcMFw3w3JcNkBcM4BcNYFcMDAzM1wwJIOAXDFBQzNcMFwiXDNcMFwwXDMwgFwxgIyDc1w2XDHEM1wwpIOAXDFAXDNcMFw3jFwzdFw2pENcMFwxXDMwXDBcMYCGQ25cMMFDNFwwXDBcNIBcNd1cM4RcN6RDXDBcMYGDNFwwwFwzgFw2ncNcM1w3y1wzgFwwXDExRFwxXDBcCkRAgFwKxHSBXApcNPWBS0RcNlwwgYRlXDBKhITqSsR160pEduxKxHbtSkR37krEd+9KRHjwSlw0bfFKXDT58UqE+fJKXDT680qE+vRKXDT79UqE+/ZKXDT890qE/PhKXDT9+UqE/fpKXDT++0qE/vxKXDT//UqE//6BXDRAXDBKhIT/gURAXDDBhEBcMErEXDRcOYHEQFwwwVw0QVwwSsRcNFw5gURBXDDBhEFcMErEXDRcOYHEQVwwwVw0QlwwSsRcNFw5gURCXDDBhEJcMErEXDRcOYHEQlwwwVw0Q1wwSsRcNFw5gURDXDDBhENcMErEXDRcOYHEQ1wwwVw0RFwwSsRcNFw5gUREXDDBhERcMErEXDRcOYHERFwwwVw0RVwwSsRcNFw5gURFXDDBhEVcMErEXDRcOYHERVwwSoRcNFw3gVw0RlwwwURGXDBKxFw0XDlcCkSEglwKhFwz2OtDgFwwXDExXDRcMFwwQYRGXDBGRFw0XDCBhGVcMIeEhFw3h0RBXDlkXDRcMVwxXDMwXDBcMIBcClw0hVwKaYRcMFww6lw0/1wxMjdGhG5cMEfE7lw4gcRGXDDAXDSAXDdkhIBcMYxcNO9cOKSEXDBcMaJEXDBcMFwzMMBcMIDGRG5cMFwxXDVHXDDkRFwwXDEmXDCAXDDHxHRcOVw3xVw0XDhBRUdcMIHFRVwwXDMxgIVcOVwzMIBcM4BcMVw2Z1wwjFw1hlw2XDFGM1wwpIWAXDGiXDVcMFwwXDMwwFwwgIZFblwwwcVHXDCkRVwwXDEmXDCAXDBcMVw2Z1wwjFw1hlw2XDFcNkhcMKSFgFwxXDBcNVwwXDExXDFGSFwwjFw1XDZcClwxhkhcMKSFgFwxolw1XDBcMFwzMEBcMIBBxUhcMFwzMFwwXDCAQVw1SVwwXDHGSVwwjFw1hlwKXDGGZVwwQYZlXDCkhVwwXDJcMUZgXDCMXDVcNlwxMaSFXDBcMUHGSVwwzEWGXApBxjVcMOSFgFwxXcVcNVwxMYZFblwwwUVJXDBcMFw2XDBcCkGGSVwwgFw2gFwK3YWGXDExpEVcMFwxXDHGSVwwjFw1XDZcClwxXDZKXDCkhYBcMcGFSFwwXDMxwFw1XDExXDMwQFwxgFwxxklcMIxcNVw2XApcMYZlXDBBRkpcMKSFXDBcMlwwXDVcMFwxMYZFblwwwYVKXDBcMFw2XDBcCt1cNYZcMTGkRVwwXDGBxUpcMFw4XDBcNVwxMYGFYFwwwcVgXDBcMFw2gFwKQcYtXDDdRYZcMTFcOMBcNVwxMYFcNWFcMOxcNVwyXDBcOMBcNVwxMYFFYVww7EVcMlwwXDjAXDVcMTGBhWFcMOyFXDJcMFw4wFw1XDExgVw1YVwwhoVcNVwwwYVgXDDGxVw1XDCkhVwwXDHBRWFcMMbFXDVcMFwwXDZcMFwxMUHGSlwwRkZcNlww5IWAXDFcMYZhXDBcNlw2XDZcMEBcNoBcMTEkhlwwXDFcIlw2XDBcMFwzMFwwXDE3gEZGblwwgcZhXDDBxkpcMMbGXDZcMFwxXDdiXDBAXDdcMFwxMp1GXDdcMTNkRlwwXDFBhmBcMEZGXDZcMIBcNlwwXDEyXYaGXDEyhkZuXDDAXDaAXDEypEZcMFwxhkZ1XDDBXDZNXDCHxlw2XDEzpIaAXDBBR01cMMxGXDdcMTNAXDeAXDEy5EaAXDHBhk1cMMbGXDZcMFwxx01cMMdcNodcMTNcMUdnXDDkhlwwXDFcMUdOXDBcNlw3XDdcMIGHTlwwXDEyh1w3XDE0gFw3XDBcMTPBx05cMMbHXDdcMFwxXDhPXDDHXDeIXDE1XDHITlwwXDZcOFw4XDBBSE9cMFw3SFw4XDE2RshwXDCBiE9cMEeIiFwxNoHIT1wwR4iIXDE2hshwXDDBXDhQXDCHyFw4XDE3wUhQXDCHyFw4XDE3xshwXDBcMYlQXDDHXDiJXDE3XDHJUFwwx1w4iVwxN1wwXDmAXDEzRslwXDCBXDlRXDBHiYlcMThkiYBcMIbJcFwwwUlRXDCHyVw5XDE5pImAXDDDXDlcMFwwJEdcMFw2XDMwXDBcMjaARkZuXDCBhmJcMMHGSlwwxsZcNlwwncZcNlwxM2RGXDBcMcHGSVwwTMaGXArBhmdcMFwxh2dcMGSGXDBcMsFcNmNcMEzGhlwxMmSGXDBcMVwxx0lcMIxcNodcClwxxzVcMKSGgFwxXYWGXDEyQUZjXDCBxkpcMIaGXDZcMMBcNoBcClwxR0tcMF1cNodcMTKBxmdcMMBcNoBcMTJcMcdnXDCdXDZcN1wxM8HGY1wwXDHHSlwwXDZcN1w3XDBBXDdMXDCAXDeAXArBR0xcMFwwXDhcMFwxM91cNohcMTNcMVw3aFwwXDZcN1w3XDBBx0xcMFw3R1w3XDE0QFw3gFwxMyRHXDBcMVw2R3VcMEFcN01cMFw3R1w3XDE0JIeAXDDBR01cMEzHXDdcMTTAXDeAXDEyZEeAXDFBh01cMEZHXDdcMIHHTVwwR4eHXDE0gUdnXDBkh1wwXDGBR05cMIaHXDdcMFwxiE5cMIxcN1w4XDE1XDBcOFwwXDE0QchOXDBGSFw4XDCBXDhPXDBHiIhcMTaByE5cMIaIXDhcMMFIT1wwh8hcOFwxN8bIcFwwXDGJT1wwx1w4iVwxN1wxyU9cMMdcOIlcMTdcNslwXDBBXDlQXDBcN0lcOVwxOEFJUFwwXDdJXDlcMThGyXBcMIGJUFwwR4mJXDE4gclQXDBHiYlcMTiAXDmAXDE0xslwXDBcMVwKUVwwx1w5ilwxOeSJgFwwXDbKcFwwQUpRXDBcN0pcClwyMCSKgFwwQ1wKXDBcMKRHXDBcNoGHUVwwwFw3gFwxMp3HXDdcMTXBXDdoXDDGx1w3XDBcMchMXDDHXDeIXDE1XDBcOFwwXDE15EdcMFwx4lwxXDBcMFwzMEBcNYBcN0LAXDNcMzGAZVw0XDMwgFw0gFw2Qm5cMEFCaFwwJEJcMFwxXDBcMlwwXDJBgmhcMFwyOUJcMlw0QUJoXDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMVwwZlw0XDMwgFw0gFw2Qm5cMEHCaFwwJEJcMFwxXDBcMlwwXDJBXDJpXDBcMjlCXDJcNEHCaFwwhlwycFwwjEJwXDVcMYNnXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwz4lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxgEtcNFwzMMBcMTeAXDZCblwwQUJpXDAkQlwwXDFcMFwyXDBcMkGCaVwwXDI5QlwyXDRBwmlcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxQ2dcMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFw1gFw3QsBcM0FcMmpcMFwzMUBcMlw0XDMwgFw0gFw2Qm5cMEFCaVwwJEJcMFwxXDBcMlwwXDJBQmpcMFwyOUJcMlw0QYJqXDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzFcMExcNFwzMMBcMTeAXDZCblwwQVwyXDI0XDAkQlwwXDFcMFwyXDBcMkHCalwwXDI5QlwyXDRBXDJcMjRcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxQ2dcMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzGATFw0XDMwwFwxN4BcNkJuXDBBglwyNFwwJEJcMFwxXDBcMlwwXDJBXDJrXDBcMjlCXDJcNEGCXDI0XDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGQnVcMMFcMk1cMIfCXDJcNaSCgFwwQUNNXDDMQlwzXDVBg1JcMORCgFwxwYJNXDDGwlwyXDBcMcNNXDDHXDKDXDVcMUNnXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxXDBNXDRcMzDAXDE3gFw2Qm5cMEFcMlwyNVwwJEJcMFwxXDBcMlwwXDJBQmtcMFwyOUJcMlw0QVwyXDI1XDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDOGQnVcMMFcMk1cMIfCXDJcNaSCgFwwQUNNXDDMQlwzXDVBg1JcMORCgFwxwYJNXDDGwlwyXDBcMcNNXDDHXDKDXDVcMUNnXDDkglwwXDFcMUNOXDBcNlwzXDNcMIGDTlwwXDEyg1wzXDaAXDNcMFw1wcNOXDDGw1wzXDBcMVw0T1wwx1wzhFw3XDHETlwwXDZcNFw0XDBBRE9cMFw3RFw0XDhGxHBcMIGET1wwR4SEXDiBxE9cMEeEhFw4hsRwXDDBXDRQXDCHxFw0XDnBRFBcMIfEXDRcOcbEcFwwXDGFUFwwx1w0hVw5XDHFUFwwx1w0hVw5XDBcNYBcNUbFcFwwgVw1UVwwR4WFXApkhYBcMIbFcFwwwUVRXDCHxVw1XDExpIWAXDDDXDVcMFwwJENcMFw24lwxXDBcMFwzMIBcMTiAXDdCwFwzXDMxgE1cNFwzMMBcMTeAXDZCblwwQYJrXDAkQlwwXDFcMFwyXDBcMkHCa1wwXDI5QlwyXDRBgmtcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxQ2dcMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMYBmXDRcMzCAXDSAXDZCblwwQUImXDAkQlwwXDFcMFwyXDBcMkFcMmxcMFwyOUJcMlw0QUImXDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMVwwZ1w0XDMwgFw0gFw2Qm5cMEHCJlwwJEJcMFwxXDBcMlwwXDJBQmxcMFwyOUJcMlw0QcImXDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMYBnXDRcMzCAXDSAXDZCblwwQUInXDAkQlwwXDFcMFwyXDBcMkGCbFwwXDI5QlwyXDRBQidcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzBAXDWAXDdCwFwzXDMxXDBoXDRcMzCAXDSAXDZCblwwQcJsXDAkQlwwXDFcMFwyXDBcMkFcMm1cMFwyOUJcMlw0QVwyKFwwhlwycFwwjEJwXDVcMYNnXDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwz4lwxXDBcMFwzMEBcNYBcN0LAXDNcMzGAZ1w0XDMwgFw0gFw2Qm5cMEFCJ1wwJEJcMFwxXDBcMlwwXDJBgmxcMFwyOUJcMlw0QUInXDCGXDJwXDCMQnBcNVwxg2dcMEbDcFwwR1wz8Vw2R0PxXDaAXDNcMFw0wFwzgFw0XDbEcFwwXDeEcVw4XDfEcVw4pEKAXDPiXDFcMFwwXDMwQFw1gFw3QsBcM1wzMYBgXDRcMzCAXDSAXDZCblwwQUIgXDAkQlwwXDFcMFwyXDBcMkFCbVwwXDI5QlwyXDRBQiBcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM+JcMVwwXDBcMzCAXDE4gFw3QsBcM1wzMVwwTlw0XDMwwFwxN4BcNkJuXDBBglwyNVwwJEJcMFwxXDBcMlwwXDJBgm1cMFwyOUJcMlw0QYJcMjVcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxQ2dcMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwgFwxOIBcN0LAXDNcMzGATlw0XDMwwFwxN4BcNkJuXDBBglwyNlwwJEJcMFwxXDBcMlwwXDJBwm1cMFwyOUJcMlw0QYJcMjZcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZCdVwwwVwyTVwwh8JcMlw1pIKAXDBBQ01cMMxCXDNcNUGDUlww5EKAXDHBgk1cMMbCXDJcMFwxw01cMMdcMoNcNVwxQ2dcMOSCXDBcMVwxQ05cMFw2XDNcM1wwgYNOXDBcMTKDXDNcNoBcM1wwXDXBw05cMMbDXDNcMFwxXDRPXDDHXDOEXDdcMcROXDBcNlw0XDRcMEFET1wwXDdEXDRcOEbEcFwwgYRPXDBHhIRcOIHET1wwR4SEXDiGxHBcMMFcNFBcMIfEXDRcOcFEUFwwh8RcNFw5xsRwXDBcMYVQXDDHXDSFXDlcMcVQXDDHXDSFXDlcMFw1gFw1RsVwXDCBXDVRXDBHhYVcCmSFgFwwhsVwXDDBRVFcMIfFXDVcMTGkhYBcMMNcNVwwXDAkQ1wwXDbiXDFcMFwwXDMwXDBcMoBcN0LAXDNcMzGAQlw0XDMwQFwxgFw2Qm5cMEFcMm5cMCRCXDBcMVwwXDKAXDJBQm5cMCRCXDBcMeJcMVwwXDBcMzBcMFwygFw3QsBcM1wzMVwwQ1w0XDMwQFwxgFw2Qm5cMEGCblwwJEJcMFwxXDBcMoBcMkHCblwwJEJcMFwx4lwxXDBcMFwzMFwwXDKAXDdCwFwzXDMxgENcNFwzMEBcMYBcNkJuXDBBXDJvXDAkQlwwXDFcMFwygFwyQUJvXDAkQlwwXDHiXDFcMFwwXDMwXDBcMoBcN0LAXDNcMzFcMERcNFwzMEBcMYBcNkJuXDBBgm9cMCRCXDBcMVwwXDKAXDJBwm9cMCRCXDBcMeJcMVwwXDBcMzBcMFwygFw3QsBcM1wzMYBEXDRcMzBAXDGAXDZCblwwQVwycFwwJEJcMFwxXDBcMoBcMkFCcFwwJEJcMFwx4lwxXDBcMFwzMFwwXDKAXDdCwFwzXDMxXDBFXDRcMzBAXDGAXDZCblwwQYJwXDAkQlwwXDFcMFwygFwyQcJwXDAkQlwwXDHiXDFcMFwwXDMwXDBcMoBcN0LAXDNcMzHARVw0XDMwQFwxgFw2Qm5cMEFcMnFcMCRCXDBcMVwwXDKAXDJBQnFcMCRCXDBcMeJcMVwwXDBcMzBcMFwzgFw3QsBcM1wzMcBSXDRcMzBAXDKAXDZcMm5cMEBcMlwwXDKBgnFcMF2Cglw0gcJxXDDAXDJcMFwyXDFcM1JcMN1cMoNcNVwxg1wxOFwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzFAU1w0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIFcMnJcMMBcMlwwXDJcMVwzVVww3Vwyg1w1XDFDclwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzHAU1w0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIGCclwwwFwyXDBcMlwxXDNWXDDdXDKDXDVcMYNcMTlcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQFRcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBwnJcMMBcMlwwXDJcMUNdXDDdXDKDXDVcMVwzXDIwXDAkQoBcMuJcMVwwXDBcMzBcMFwzgFw3QsBcM1wzMcBUXDRcMzBAXDKAXDZcMm5cMEBcMlwwXDKBgnFcMF2Cglw0gVwyc1wwwFwyXDBcMlwxQ15cMN1cMoNcNVwxg1wyMFwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzFAVVw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIFCc1wwwFwyXDBcMlwxg15cMN1cMoNcNVwxXDNcMjFcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxwFVcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBgnNcMMBcMlwwXDJcMcNeXDDdXDKDXDVcMYNcMjFcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQFZcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBwnNcMMBcMlwwXDJcMVwzX1ww3Vwyg1w1XDFcM1wyMlwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzHAVlw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIFcMnRcMMBcMlwwXDJcMUNfXDDdXDKDXDVcMYNcMjJcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQFdcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBQnRcMMBcMlwwXDJcMYNfXDDdXDKDXDVcMVwzXDIzXDAkQoBcMuJcMVwwXDBcMzBcMFwzgFw3QsBcM1wzMcBXXDRcMzBAXDKAXDZcMm5cMEBcMlwwXDKBgnFcMF2Cglw0gYJ0XDDAXDJcMFwyXDGDaVww3Vwyg1w1XDHDdFwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzFAWFw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIFcMnVcMMBcMlwwXDJcMcNqXDDdXDKDXDVcMVwzXDI0XDAkQoBcMuJcMVwwXDBcMzBcMFwzgFw3QsBcM1wzMcBYXDRcMzBAXDKAXDZcMm5cMEBcMlwwXDKBgnFcMF2Cglw0gUJ1XDDAXDJcMFwyXDFcM2tcMN1cMoNcNVwxg1wyNFwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzFAWVw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIGCdVwwwFwyXDBcMlwxQ2tcMN1cMoNcNVwxXDNcMjVcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxwFlcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBwnVcMMBcMlwwXDJcMYNtXDDdXDKDXDVcMYNcMjVcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQFpcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBXDJ2XDDAXDJcMFwyXDHDa1ww3Vwyg1w1XDGDa1wwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzHAWlw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIFCdlwwwFwyXDBcMlwxw21cMN1cMoNcNVwxg3ZcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQFtcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBwnZcMMBcMlwwXDJcMYNVXDDdXDKDXDVcMVwzXDI3XDAkQoBcMuJcMVwwXDBcMzBcMFwzgFw3QsBcM1wzMcBbXDRcMzBAXDKAXDZcMm5cMEBcMlwwXDKBgnFcMF2Cglw0gVwyd1wwwFwyXDBcMlwxw11cMN1cMoNcNVwxg1wyN1wwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzFAXFxcNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBQndcMMBcMlwwXDJcMYNWXDDdXDKDXDVcMVwzXDI4XDAkQoBcMuJcMVwwXDBcMzBcMFwzgFw3QsBcM1wzMcBcXFw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIGCd1wwwFwyXDBcMlwxw1JcMN1cMoNcNVwxw3dcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQF1cNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBXDJ4XDDAXDJcMFwyXDFDU1ww3Vwyg1w1XDFDeFwwJEKAXDLiXDFcMFwwXDMwXDBcM4BcN0LAXDNcMzHAXVw0XDMwQFwygFw2XDJuXDBAXDJcMFwygYJxXDBdgoJcNIGCeFwwwFwyXDBcMlwxXDNUXDDdXDKDXDVcMYNcMjlcMCRCgFwy4lwxXDBcMFwzMFwwXDOAXDdCwFwzXDMxQF5cNFwzMEBcMoBcNlwyblwwQFwyXDBcMoGCcVwwXYKCXDSBwnhcMMBcMlwwXDJcMYNUXDDdXDKDXDVcMVwzXDMwXDAkQoBcMuJcMVwwXDBcMzDAaYBcN0LAXDNcMzFAalw0XDMwXDBpgFw2Qm5cMEHCVlwwJEJcMFwxXDBcMlwwXDJBXDJXXDBcMjlCXDJcNEFcMnlcMIZcMnBcMIxCcFw1XDGDZ1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZcMnBcMIxcMnJcNaSCXDBcMcBcMlwwXDVcMUMyXDDdXDKDXDVcMUN5XDBcNlwzXDNcMFw3w3JcNkBcM4BcNYFcMDAzM1wwJIOAXDFBQzNcMFwiXDNcMFwwXDMwgFwxgIyDc1w2XDHEM1wwpIOAXDFAXDNcMFw3jFwzdFw2pENcMFwxXDMwXDBcMYCGQ25cMMFDNFwwXDBcNIBcNd1cM4RcN6RDXDBcMYGDNFwwwFwzgFw2ncNcM1w3y1wzgFwwXDExRFwxXDBcCkRAgFwKxHSBXApcNPWBS0RcNlwwgYRnXDBKhITqSsR160pEduxKxHbtSkR37krEd+9KRHjwSlw0bfFKXDT58UqE+fJKXDT680qE+vRKXDT79UqE+/ZKXDT890qE/PhKXDT9+UqE/fpKXDT++0qE/vxKXDT//UqE//6BXDRAXDBKhIT/gURAXDDBhEBcMErEXDRcOYHEQFwwwVw0QVwwSsRcNFw5gURBXDDBhEFcMErEXDRcOYHEQVwwwVw0QlwwSsRcNFw5gURCXDDBhEJcMErEXDRcOYHEQlwwwVw0Q1wwSsRcNFw5gURDXDDBhENcMErEXDRcOYHEQ1wwwVw0RFwwSsRcNFw5gUREXDDBhERcMErEXDRcOYHERFwwwVw0RVwwSsRcNFw5gURFXDDBhEVcMErEXDRcOYHERVwwSoRcNFw3gVw0RlwwwURGXDBKxFw0XDlcCkSEglwKhFwz2OtDgFwwXDExXDRcMFwwQYRGXDBGRFw0XDCBhGdcMIeEhFw3h0RBXDlkXDRcMVwxXDMwXDBcMIBcClw0hVwKaYRcMFww6lw0/1wxMjdGhG5cMEfE7lw4gcRGXDDAXDSAXDdkhIBcMYxcNO9cOKSEXDBcMaJEXDBcMFwzMMBcMIDGRG5cMFwxXDVHXDDkRFwwXDEmXDCAXDDHxHRcOVw3xVw0XDhBRUdcMIHFRVwwXDMxgIVcOVwzMIBcM4BcMYZ5XDCMXDWGXDZcMUYzXDCkhYBcMaJcNVwwXDBcMzDAXDCAhkVuXDDBxUdcMKRFXDBcMSZcMIBcMFwxhnlcMIxcNYZcNlwxXDZIXDCkhYBcMVwwXDVcMFwxMVwxRkhcMIxcNVw2XApcMYZIXDCkhYBcMaJcNVwwXDBcMzBAXDCAQcVIXDBcMzBcMFwwgEFcNUlcMFwxxklcMIxcNYZcClwxhmdcMEGGZ1wwpIVcMFwyXDFGYFwwjFw1XDZcMTGkhVwwXDFBxklcMMxFhlwKQcY1XDDkhYBcMV3FXDVcMTGGRW5cMMFFSVwwXDBcNlwwXApBhklcMIBcNoBcCt2FhlwxMaRFXDBcMVwxxklcMIxcNVw2XApcMVw2SlwwpIWAXDHBhUhcMFwzMcBcNVwxMVwzMEBcMYBcMcZJXDCMXDVcNlwKXDGGZ1wwQUZKXDCkhVwwXDJcMFw1XDBcMTGGRW5cMMGFSlwwXDBcNlwwXArdXDWGXDExpEVcMFwxgcVKXDBcOFwwXDVcMTGBhWBcMMHFYFwwXDBcNoBcCkHGLVww3UWGXDExXDjAXDVcMTGBXDVhXDDsxVwyXDBcOMBcNVwxMYFFYVww7Fw1XDNcMFw4wFw1XDExgYVhXDDsRVwzXDBcOMBcNVwxMYFcNWFcMIaFXDVcMMGFYFwwxsVcNVwwpIVcMFwxwUVhXDDGxVw1XDBcMFw2XDBcMTFBxkpcMEZGXDZcMOSFgFwxXDGGYVwwXDZcNlw2XDBAXDaAXDExJIZcMFwxXCJcNlwwXDBcMzBcMFwxN4BGRm5cMIHGYVwwwcZKXDDGxlw2XDBcMVw3YlwwQFw3XDBcMTKdRlw3XDEzZEZcMFwxQYZgXDBGRlw2XDCAXDZcMFwxMl2GhlwxMoZGblwwwFw2gFwxMqRGXDBcMYZGdVwwwVw2TVwwh8ZcNlwxM6SGgFwwQUdNXDDMRlw3XDEzQFw3gFwxMuRGgFwxwYZNXDDGxlw2XDBcMcdNXDDHXDaHXDEzXDHHeVww5IZcMFwxXDFHTlwwXDZcN1w3XDCBh05cMFwxModcN1wxNIBcN1wwXDEzwcdOXDDGx1w3XDBcMVw4T1wwx1w3iFwxNVwxyE5cMFw2XDhcOFwwQUhPXDBcN0hcOFwxNkbIcFwwgYhPXDBHiIhcMTaByE9cMEeIiFwxNobIcFwwwVw4UFwwh8hcOFwxN8FIUFwwh8hcOFwxN8bIcFwwXDGJUFwwx1w4iVwxN1wxyVBcMMdcOIlcMTdcMFw5gFwxM0bJcFwwgVw5UVwwR4mJXDE4ZImAXDCGyXBcMMFJUVwwh8lcOVwxOaSJgFwww1w5XDBcMCRHXDBcNlwzMFwwXDI2gEZGblwwgYZiXDDBxkpcMMbGXDZcMJ3GXDZcMTNkRlwwXDHBxklcMEzGhlwKwVw2elwwXDFcN3pcMGSGXDBcMsFcNmNcMEzGhlwxMmSGXDBcMVwxx0lcMIxcNodcClwxxzVcMKSGgFwxXYWGXDEyQUZjXDCBxkpcMIaGXDZcMMBcNoBcClwxR0tcMF1cNodcMTKBRnpcMMBcNoBcMTJcMUd6XDCdXDZcN1wxM8HGY1wwXDHHSlwwXDZcN1w3XDBBXDdMXDCAXDeAXArBR0xcMFwwXDhcMFwxM91cNohcMTNcMYd6XDBcNlw3XDdcMEHHTFwwXDdHXDdcMTRAXDeAXDEzJEdcMFwxXDZHdVwwQVw3TVwwXDdHXDdcMTQkh4BcMMFHTVwwTMdcN1wxNMBcN4BcMTJkR4BcMUGHTVwwRkdcN1wwgcdNXDBHh4dcMTSBx3lcMGSHXDBcMYFHTlwwhodcN1wwXDGITlwwjFw3XDhcMTVcMFw4XDBcMTRByE5cMEZIXDhcMIFcOE9cMEeIiFwxNoHITlwwhohcOFwwwUhPXDCHyFw4XDE3xshwXDBcMYlPXDDHXDiJXDE3XDHJT1wwx1w4iVwxN1w2yXBcMEFcOVBcMFw3SVw5XDE4QUlQXDBcN0lcOVwxOEbJcFwwgYlQXDBHiYlcMTiByVBcMEeJiVwxOIBcOYBcMTTGyXBcMFwxXApRXDDHXDmKXDE55ImAXDBcNspwXDBBSlFcMFw3SlwKXDIwJIqAXDBDXApcMFwwpEdcMFw2gYdRXDDAXDeAXDEyncdcN1wxNcGHelwwxsdcN1wwXDHITFwwx1w3iFwxNVwwXDhcMFwxNeRHXDBcMeJcMVwwXDBcMzDAaYBcN0LAXDNcMzFAa1w0XDMwXDBpgFw2Qm5cMEGCKlwwJEJcMFwxXDBcMlwwXDJBQldcMFwyOUJcMlw0QcJ6XDCGXDJwXDCMQnBcNVwxXDN6XDBGw3BcMEdcM/FcNkdD8Vw2gFwzXDBcNMBcM4BcNFw2xHBcMFw3hHFcOFw3xHFcOKRCgFwzhlwycFwwjFwyclw1pIJcMFwxwFwyXDBcNVwxQzJcMN1cMoNcNVwxXDN7XDBcNlwzXDNcMFw3w3JcNkBcM4BcNYFcMDAzM1wwJIOAXDFBQzNcMFwiXDNcMFwwXDMwgFwxgIyDc1w2XDHEM1wwpIOAXDFAXDNcMFw3jFwzdFw2pENcMFwxXDMwXDBcMYCGQ25cMMFDNFwwXDBcNIBcNd1cM4RcN6RDXDBcMYGDNFwwwFwzgFw2ncNcM1w3y1wzgFwwXDExRFwxXDBcCkRAgFwKxHSBXApcNPWBS0RcNlwwgVw0elwwSoSE6krEdetKRHbsSsR27UpEd+5KxHfvSkR48EpcNG3xSlw0+fFKhPnySlw0+vNKhPr0Slw0+/VKhPv2Slw0/PdKhPz4Slw0/flKhP36Slw0/vtKhP78Slw0//1KhP/+gVw0QFwwSoSE/4FEQFwwwYRAXDBKxFw0XDmBxEBcMMFcNEFcMErEXDRcOYFEQVwwwYRBXDBKxFw0XDmBxEFcMMFcNEJcMErEXDRcOYFEQlwwwYRCXDBKxFw0XDmBxEJcMMFcNENcMErEXDRcOYFEQ1wwwYRDXDBKxFw0XDmBxENcMMFcNERcMErEXDRcOYFERFwwwYREXDBKxFw0XDmBxERcMMFcNEVcMErEXDRcOYFERVwwwYRFXDBKxFw0XDmBxEVcMEqEXDRcN4FcNEZcMMFERlwwSsRcNFw5XApEhIJcCoRcM9jrQ4BcMFwxMVw0XDBcMEGERlwwRkRcNFwwgVw0elwwh4SEXDeHREFcOWRcNFwxXDFcMzBcMFwwgFwKXDSFXApphFwwXDDqXDT/XDEyN0aEblwwR8TuXDiBxEZcMMBcNIBcN2SEgFwxjFw071w4pIRcMFwxokRcMFwwXDMwwFwwgMZEblwwXDFcNUdcMOREXDBcMSZcMIBcMMfEdFw5XDfFXDRcOEFFR1wwgcVFXDBcMzGAhVw5XDMwgFwzgFwxRntcMIxcNYZcNlwxRjNcMKSFgFwxolw1XDBcMFwzMMBcMICGRW5cMMHFR1wwpEVcMFwxJlwwgFwwXDFGe1wwjFw1hlw2XDFcNkhcMKSFgFwxXDBcNVwwXDExXDFGSFwwjFw1XDZcClwxhkhcMKSFgFwxolw1XDBcMFwzMEBcMIBBxUhcMFwzMFwwXDCAQVw1SVwwXDHGSVwwjFw1hlwKXDFcNnpcMEFcNnpcMKSFXDBcMlwxRmBcMIxcNVw2XDExpIVcMFwxQcZJXDDMRYZcCkHGNVww5IWAXDFdxVw1XDExhkVuXDDBRUlcMFwwXDZcMFwKQYZJXDCAXDaAXArdhYZcMTGkRVwwXDFcMcZJXDCMXDVcNlwKXDFcNkpcMKSFgFwxwYVIXDBcMzHAXDVcMTFcMzBAXDGAXDHGSVwwjFw1XDZcClwxXDZ6XDBBRkpcMKSFXDBcMlwwXDVcMFwxMYZFblwwwYVKXDBcMFw2XDBcCt1cNYZcMTGkRVwwXDGBxUpcMFw4XDBcNVwxMYGFYFwwwcVgXDBcMFw2gFwKQcYtXDDdRYZcMTFcOMBcNVwxMYFcNWFcMOyFXDNcMFw4wFw1XDExgUVhXDDsxVwzXDBcOMBcNVwxMYGFYVww7Fw1XDRcMFw4wFw1XDExgVw1YVwwhoVcNVwwwYVgXDDGxVw1XDCkhVwwXDHBRWFcMMbFXDVcMFwwXDZcMFwxMUHGSlwwRkZcNlww5IWAXDFcMYZhXDBcNlw2XDZcMEBcNoBcMTEkhlwwXDFcIlw2XDBcMFwzMFwwXDE3gEZGblwwgcZhXDDBxkpcMMbGXDZcMFwxXDdiXDBAXDdcMFwxMp1GXDdcMTNkRlwwXDFBhmBcMEZGXDZcMIBcNlwwXDEyXYaGXDEyhkZuXDDAXDaAXDEypEZcMFwxhkZ1XDDBXDZNXDCHxlw2XDEzpIaAXDBBR01cMMxGXDdcMTNAXDeAXDEy5EaAXDHBhk1cMMbGXDZcMFwxx01cMMdcNodcMTNcMYd7XDDkhlwwXDFcMUdOXDBcNlw3XDdcMIGHTlwwXDEyh1w3XDE0gFw3XDBcMTPBx05cMMbHXDdcMFwxXDhPXDDHXDeIXDE1XDHITlwwXDZcOFw4XDBBSE9cMFw3SFw4XDE2RshwXDCBiE9cMEeIiFwxNoHIT1wwR4iIXDE2hshwXDDBXDhQXDCHyFw4XDE3wUhQXDCHyFw4XDE3xshwXDBcMYlQXDDHXDiJXDE3XDHJUFwwx1w4iVwxN1wwXDmAXDEzRslwXDCBXDlRXDBHiYlcMThkiYBcMIbJcFwwwUlRXDCHyVw5XDE5pImAXDDDXDlcMFwwJEdcMFw2XDMwXDBcMjaARkZuXDCBhmJcMMHGSlwwxsZcNlwwncZcNlwxM2RGXDBcMcHGSVwwTMaGXArBxntcMFwxx3tcMGSGXDBcMsFcNmNcMEzGhlwxMmSGXDBcMVwxx0lcMIxcNodcClwxxzVcMKSGgFwxXYWGXDEyQUZjXDCBxkpcMIaGXDZcMMBcNoBcClwxR0tcMF1cNodcMTKBXDZ8XDDAXDaAXDEyXDFcN3xcMJ1cNlw3XDEzwcZjXDBcMcdKXDBcNlw3XDdcMEFcN0xcMIBcN4BcCsFHTFwwXDBcOFwwXDEz3Vw2iFwxM1wxR3xcMFw2XDdcN1wwQcdMXDBcN0dcN1wxNEBcN4BcMTMkR1wwXDFcNkd1XDBBXDdNXDBcN0dcN1wxNCSHgFwwwUdNXDBMx1w3XDE0wFw3gFwxMmRHgFwxQYdNXDBGR1w3XDCBx01cMEeHh1wxNIGHe1wwZIdcMFwxgUdOXDCGh1w3XDBcMYhOXDCMXDdcOFwxNVwwXDhcMFwxNEHITlwwRkhcOFwwgVw4T1wwR4iIXDE2gchOXDCGiFw4XDDBSE9cMIfIXDhcMTfGyHBcMFwxiU9cMMdcOIlcMTdcMclPXDDHXDiJXDE3XDbJcFwwQVw5UFwwXDdJXDlcMThBSVBcMFw3SVw5XDE4RslwXDCBiVBcMEeJiVwxOIHJUFwwR4mJXDE4gFw5gFwxNMbJcFwwXDFcClFcMMdcOYpcMTnkiYBcMFw2ynBcMEFKUVwwXDdKXApcMjAkioBcMENcClwwXDCkR1wwXDaBh1FcMMBcN4BcMTKdx1w3XDE1wUd8XDDGx1w3XDBcMchMXDDHXDeIXDE1XDBcOFwwXDE15EdcMFwx4lwxXDBcMFwzMMBpgFw3QsBcM1wzMcBqXDRcMzBcMGmAXDZCblwwQYIqXDAkQlwwXDFcMFwyXDBcMkGCV1wwXDI5QlwyXDRBgnxcMIZcMnBcMIxCcFw1XDHDe1wwRsNwXDBHXDPxXDZHQ/FcNoBcM1wwXDTAXDOAXDRcNsRwXDBcN4RxXDhcN8RxXDikQoBcM4ZcMnBcMIxcMnJcNaSCXDBcMcBcMlwwXDVcMUMyXDDdXDKDXDVcMcN8XDBcNlwzXDNcMFw3w3JcNkBcM4BcNYFcMDAzM1wwJIOAXDFBQzNcMFwiXDNcMFwwXDMwgFwxgIyDc1w2XDHEM1wwpIOAXDFAXDNcMFw3jFwzdFw2pENcMFwxXDMwXDBcMYCGQ25cMMFDNFwwXDBcNIBcNd1cM4RcN6RDXDBcMYGDNFwwwFwzgFw2ncNcM1w3y1wzgFwwXDExRFwxXDBcCkRAgFwKxHSBXApcNPWBS0RcNlwwgcR7XDBKhITqSsR160pEduxKxHbtSkR37krEd+9KRHjwSlw0bfFKXDT58UqE+fJKXDT680qE+vRKXDT79UqE+/ZKXDT890qE/PhKXDT9+UqE/fpKXDT++0qE/vxKXDT//UqE//6BXDRAXDBKhIT/gURAXDDBhEBcMErEXDRcOYHEQFwwwVw0QVwwSsRcNFw5gURBXDDBhEFcMErEXDRcOYHEQVwwwVw0QlwwSsRcNFw5gURCXDDBhEJcMErEXDRcOYHEQlwwwVw0Q1wwSsRcNFw5gURDXDDBhENcMErEXDRcOYHEQ1wwwVw0RFwwSsRcNFw5gUREXDDBhERcMErEXDRcOYHERFwwwVw0RVwwSsRcNFw5gURFXDDBhEVcMErEXDRcOYHERVwwSoRcNFw3gVw0RlwwwURGXDBKxFw0XDlcCkSEglwKhFwz2OtDgFwwXDExXDRcMFwwQYRGXDBGRFw0XDCBxHtcMIeEhFw3h0RBXDlkXDRcMVwxXDMwXDBcMIBcClw0hVwKaYRcMFww6lw0/1wxMjdGhG5cMEfE7lw4gcRGXDDAXDSAXDdkhIBcMYxcNO9cOKSEXDBcMaJEXDBcMFwzMMBcMIDGRG5cMFwxXDVHXDDkRFwwXDEmXDCAXDDHxHRcOVw3xVw0XDhBRUdcMIHFRVwwXDMxgIVcOVwzMIBcM4BcMVw2fVwwjFw1hlw2XDFGM1wwpIWAXDGiXDVcMFwwXDMwwFwwgIZFblwwwcVHXDCkRVwwXDEmXDCAXDBcMVw2fVwwjFw1hlw2XDFcNkhcMKSFgFwxXDBcNVwwXDExXDFGSFwwjFw1XDZcClwxhkhcMKSFgFwxolw1XDBcMFwzMEBcMIBBxUhcMFwzMFwwXDCAQVw1SVwwXDHGSVwwjFw1hlwKXDHGe1wwQcZ7XDCkhVwwXDJcMUZgXDCMXDVcNlwxMaSFXDBcMUHGSVwwzEWGXApBxjVcMOSFgFwxXcVcNVwxMYZFblwwwUVJXDBcMFw2XDBcCkGGSVwwgFw2gFwK3YWGXDExpEVcMFwxXDHGSVwwjFw1XDZcClwxXDZKXDCkhYBcMcGFSFwwXDMxwFw1XDExXDMwQFwxgFwxxklcMIxcNVw2XApcMcZ7XDBBRkpcMKSFXDBcMlwwXDVcMFwxMYZFblwwwYVKXDBcMFw2XDBcCt1cNYZcMTGkRVwwXDGBxUpcMFw4XDBcNVwxMYGFYFwwwcVgXDBcMFw2gFwKQcYtXDDdRYZcMTFcOMBcNVwxMYFcNWFcMOxFXDRcMFw4wFw1XDExgUVhXDDshVw0XDBcOMBcNVwxMYGFYVww7MVcNFwwXDjAXDVcMTGBXDVhXDCGhVw1XDDBhWBcMMbFXDVcMKSFXDBcMcFFYVwwxsVcNVwwXDBcNlwwXDExQcZKXDBGRlw2XDDkhYBcMVwxhmFcMFw2XDZcNlwwQFw2gFwxMSSGXDBcMVwiXDZcMFwwXDMwXDBcMTeARkZuXDCBxmFcMMHGSlwwxsZcNlwwXDFcN2JcMEBcN1wwXDEynUZcN1wxM2RGXDBcMUGGYFwwRkZcNlwwgFw2XDBcMTJdhoZcMTKGRm5cMMBcNoBcMTKkRlwwXDGGRnVcMMFcNk1cMIfGXDZcMTOkhoBcMEFHTVwwzEZcN1wxM0BcN4BcMTLkRoBcMcGGTVwwxsZcNlwwXDHHTVwwx1w2h1wxM1wxR31cMOSGXDBcMVwxR05cMFw2XDdcN1wwgYdOXDBcMTKHXDdcMTSAXDdcMFwxM8HHTlwwxsdcN1wwXDFcOE9cMMdcN4hcMTVcMchOXDBcNlw4XDhcMEFIT1wwXDdIXDhcMTZGyHBcMIGIT1wwR4iIXDE2gchPXDBHiIhcMTaGyHBcMMFcOFBcMIfIXDhcMTfBSFBcMIfIXDhcMTfGyHBcMFwxiVBcMMdcOIlcMTdcMclQXDDHXDiJXDE3XDBcOYBcMTNGyXBcMIFcOVFcMEeJiVwxOGSJgFwwhslwXDDBSVFcMIfJXDlcMTmkiYBcMMNcOVwwXDAkR1wwXDZcMzBcMFwyNoBGRm5cMIGGYlwwwcZKXDDGxlw2XDCdxlw2XDEzZEZcMFwxwcZJXDBMxoZcCsGGfVwwXDGHfVwwZIZcMFwywVw2Y1wwTMaGXDEyZIZcMFwxXDHHSVwwjFw2h1wKXDHHNVwwpIaAXDFdhYZcMTJBRmNcMIHGSlwwhoZcNlwwwFw2gFwKXDFHS1wwXVw2h1wxMoHGfVwwwFw2gFwxMlwxx31cMJ1cNlw3XDEzwcZjXDBcMcdKXDBcNlw3XDdcMEFcN0xcMIBcN4BcCsFHTFwwXDBcOFwwXDEz3Vw2iFwxM1wxXDd+XDBcNlw3XDdcMEHHTFwwXDdHXDdcMTRAXDeAXDEzJEdcMFwxXDZHdVwwQVw3TVwwXDdHXDdcMTQkh4BcMMFHTVwwTMdcN1wxNMBcN4BcMTJkR4BcMUGHTVwwRkdcN1wwgcdNXDBHh4dcMTSBR31cMGSHXDBcMYFHTlwwhodcN1wwXDGITlwwjFw3XDhcMTVcMFw4XDBcMTRByE5cMEZIXDhcMIFcOE9cMEeIiFwxNoHITlwwhohcOFwwwUhPXDCHyFw4XDE3xshwXDBcMYlPXDDHXDiJXDE3XDHJT1wwx1w4iVwxN1w2yXBcMEFcOVBcMFw3SVw5XDE4QUlQXDBcN0lcOVwxOEbJcFwwgYlQXDBHiYlcMTiByVBcMEeJiVwxOIBcOYBcMTTGyXBcMFwxXApRXDDHXDmKXDE55ImAXDBcNspwXDBBSlFcMFw3SlwKXDIwJIqAXDBDXApcMFwwpEdcMFw2gYdRXDDAXDeAXDEyncdcN1wxNcFcN35cMMbHXDdcMFwxyExcMMdcN4hcMTVcMFw4XDBcMTXkR1wwXDEmXDCAXDD5XDFcMFwwXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcMTNDaG9vc2UgVHJhY2tcNFw3dmFsdWVzXDRcMjBDaG9vc2UgYSB0cmFjayBUeXBlXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDVIZWxwXDRcMjNIb3cgdG8gdXNlIERydW0gVHJhY2tzXDRcN2RyaGVscFw0IEhvdyB0byB1c2UgU29mdHdhcmUgSW5zdHJ1bWVudHNcNFw5aW5zdGhlbHBcNFwyN0hvdyB0byB1c2UgQXVkaW8gUmVjb3JkaW5nXDRcCmF1ZGlvaGVscFw0IUhvdyB0byB1c2UgR3VpdGFyL0Jhc3MgUmVjb3JkaW5nXDRcMTFndWl0YXJoZWxwXDRcMjdIb3cgdG8gdXNlIFNlc3Npb24gUGxheWVyc1w0XDEyc2Vzc2lvbmhlbHBcNFwyMkhvdyB0byB1c2UgR2VuZXJhdG9yc1w0XDhnZW5oZWxwXDRcMjBSZWZlcmVuY2UgTWF0ZXJpYWxzXDRcMTdDaXJjbGUgb2YgRmlmdGhzXDRcOGNvZmhlbHBcNFw4RHJ1bW1lclw0XDI3UmVkIFplcHBsaW4gKEFWTCBEcnVta2l0cylcNFwzcnpcNFwyN0JsYWNrIFBlYXJsIChBVkwgRHJ1bWtpdHMpXDRcM2JwXDRcMjZCbG9uZGUgQm9wIChBVkwgRHJ1bWtpdHMpXDRcM2JvXDQhU3RhbmRhcmQgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0c3RkXDQjU3RhbmRhcmQgMiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRzdDJcNCNFbGVjdHJvbmljIERydW1zIChBQ0UgRmx1aWQgU1ludGgpXDRcNGVsZFw0XDI5Um9vbSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRybWRcNFwzMFBvd2VyIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNHB3ZFw0XDMwRGFuY2UgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0ZGFkXDRcMjlKYXp6IERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNGp6ZFw0IDgwOC84MDkgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFwwMDQ4MDhcNFwzMEJydXNoIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNGJyZFw0XCJPcmNoZXN0cmFsIFBlcmMgKEFDRSBGbHVpZCBTeW50aClcNFw0b3JwXDQhU29uaU5la28gRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0c29uXDIwOkFsZXNpcyBEcnVta2l0cyAoVXNlIEMxIHRvIGNoYW5nZSBraXRzKSAoQUNFIEZsdWlkIFN5bnRoKVw0XDNhbFwyMCxCdXNrbWFuJ3MgSG9saWRheSBQZXJjdXNzaW9uIChBVkwgRHJ1bWtpdHMpXDRcNGJ1c1w0KUJsb25kZSBCb3AgSG90Um9kIERydW1raXQgKEFWTCBEcnVta2l0cylcNFw0aG90XDRcMzBOSU4gRHJ1bWtpdCAoQUNFIEZsdWlkIFN5bnRoKVw0XDRuaW5cNFwyN011bGRqb3JkIChBQ0UgRmx1aWQgU3ludGgpXDRcM21qXDRcMjdIb3VzZUtpdCAoQUNFIEZsdWlkIFN5bnRoKVw0XDZob3VzZVw0XDI4UG93ZXJLaXQyIChBQ0UgRmx1aWQgU3ludGgpXDRcNHBrMlw0XDI4U3RhbmRhcmQzIChBQ0UgRmx1aWQgU3ludGgpXDRcNXN0ZDNcNFwzMEFuYWxvZ1Q5S2l0IChBQ0UgRmx1aWQgU3ludGgpXDRcNGF0OVw0XDMwQW5hbG9nVDhLaXQgKEFDRSBGbHVpZCBTeW50aClcNFw0YXQ4XDRcMTZTdGVwIFNlcXVlbmNpbmdcNFwxMlJlZCBaZXBwbGluXDRcN3N0ZXByelw0XDIwQmxhY2sgUGVhcmwgRHJ1bWtpdFw0XApzdGVwYmxhY2tcNFwxMUJsb25kZSBCb3BcNFwKc3RlcGJsb25kXDRcMTVTdGFuZGFyZCBEcnVtc1w0XDhzdGVwc3RkXDRcMTdTdGFuZGFyZCAyIERydW1zXDRcOHN0ZXBzdDJcNFwxN0VsZWN0cm9uaWMgRHJ1bXNcNFw3c3RlcGVsXDRcMTFSb29tIERydW1zXDRcOXN0ZXByb29tXDRcMTJQb3dlciBEcnVtc1w0XApzdGVwcG93ZXJcNFwxMkRhbmNlIERydW1zXDRcCnN0ZXBkYW5jZVw0XDExSmF6eiBEcnVtc1w0XDlzdGVwamF6elw0XDAxNDgwOC84MDkgRHJ1bXNcNFw4c3RlcDgwOFw0XDEyQnJ1c2ggRHJ1bXNcNFwKc3RlcGJydXNoXDRcMTZPcmNoZXN0cmFsIFBlcmNcNFw5c3RlcG9yY2hcNFwxNVNvbmlOZWtvIERydW1zXDRcOHN0ZXBzb25cNFwyOUJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb25cNFw5c3RlcGJ1c2tcNChBbGVzaXMgRHJ1bWtpdHMgKFVzZSBDMSB0byBjaGFuZ2Uga2l0cylcNFw3c3RlcGFsXDRcMjZCbG9uZGUgQm9wIEhvdFJvZCBEcnVta2l0XDRcOHN0ZXBob3RcNFwxMk5JTiBEcnVta2l0XDRcOHN0ZXBuaW5cNFw5TXVsZGpvcmRcNFw3c3RlcG1qXDRcOUhvdXNlS2l0XDRcCnN0ZXBob3VzZVw0XApQb3dlcktpdDJcNFw4c3RlcHBrMlw0XApTdGFuZGFyZDNcNFw5c3RlcHN0ZDNcNFwxMkFuYWxvZ1Q5S2l0XDRcOHN0ZXBhdDlcNFwxMkFuYWxvZ1Q4S2l0XDRcOHN0ZXBhdDhcNFwyNlBsYXkgU29mdHdhcmUgSW5zdHJ1bWVudHNcNCRBQ0UgRmx1aWQgKFRyYWRpdGlvbmFsIEluc3RydW1lbnRzKVw0XDNhY1w0XDI4WW9zaGltaSAoVHJhZGl0aW9uYWwgU3ludGgpXDRcM3phXDQnU3VyZ2UgWFQgKFN5bnRoIHdpdGggYSBMT1Qgb2YgcHJlc2V0cylcNFwzc3RcNFwxNlNhbXBsdjEgU2FtcGxlclw0XDVzYW1wXDRcMTVTZXNzaW9uIFBsYXllclw0XDRhY3NcNFw0emFzXDRcNHN0c1w0XDEzUmVjb3JkIEF1ZGlvXDRcN1ZvY2Fsc1w0XDhDbGFzc2ljXDRcNGNsdlw0XDdCcmlnaHRcNFw0YnJ2XDRcMTFDb21wcmVzc2VkXDRcNGNvdlw0XApUZWxlcGhvbmVcNFw0dGx2XDRcNkRhbmNlXDRcNGRhdlw0XDhOYXR1cmFsXDRcNG5hdlw0XDVFZGdlXDRcNGVkdlw0XDVGdXp6XDRcNGZ6dlw0XDEyVHViZSBWb2NhbHNcNFw0dHViXDRcMTREZWVwZXIgVm9jYWxzXDRcM2RwXDRcMTNSb2JvdCBWb2NhbHNcNFw0cm9iXDRcMThCbGFuayBBdWRpbyBUcmFja1w0XDZhdWRpb1w0XDIyUmVjb3JkIEd1aXRhciBvciBCYXNzXDRcOUd1aXRhcml4XDRcM2d4XDRcMTJSYXRhdG91aWxsZVw0XDNyYVw0XDExR2VuZXJhdG9yc1w0XDIzUmFuZG9tIENob3JkIEdlbmVyYXRvclw0XDE2QUNFIEZsdWlkIFN5bnRoXDRcOWZsdWNob3JkXDRcOVN1cmdlIFhUXDRcMTFzdXJnZWNob3JkXDRcOFlvc2hpbWlcNFwKeW9zaGNob3JkXDRcMTlCYXNzbGluZSBHZW5lcmF0b3JcNFwxM2Jhc3NsaW5lX2dlblw0XDhkZWZhdWx0XDRcMjBDaG9vc2UgYSB0cmFjayB0eXBlXDRcN0FSRE9VUlw0XDIydXNlcl9jb25maWdfZGlyZWN0b3J5XDE5XDhcMFwwXDBcMFwwXDBcMFw0XDZwcmludFw0XDE2cm91dGVfdGVtcGxhdGVzXDRcMi9cNFwxMWNyZWF0ZV9zZXFcNFw2cHJpbnRcNFwKTHVhRGlhbG9nXDRcN0RpYWxvZ1w0XDRydW5cNFwzMFlvdSBwaWNrZWQgQmFzc2xpbmUgR2VuZXJhdG9yXDRcMTkvQmFzc2xpbmUudGVtcGxhdGVcNFw5QmFzc2xpbmVcNFw4U2Vzc2lvblw0XDI0bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGVcMTlcMVwwXDBcMFwwXDBcMFwwXDRcN0FSRE9VUlw0XDE3UHJlc2VudGF0aW9uSW5mb1w0XAptYXhfb3JkZXJcNFwyMFBsYXlsaXN0RGlzcG9zaXRpb25cNFwxMk5ld1BsYXlsaXN0XDRcNXBhdGhcNFw5L2tleS50eHRcNFwzaW9cNFw1b3Blblw0XDJyXDRcMTFObyBrZXkgc2V0XDRcNXJlYWRcNFwzKmFcNFw2Y2xvc2VcMjAtV2FybmluZzogQ291bGQgbm90IG9wZW4gZmlsZSBmb3IgcmVhZGluZyBhdCBcNFwyOVNldCB0byBjdXJyZW50IHByb2plY3Qga2V5OiBcNFwxMXRhcmdldF9rZXlcMDIwNUNob29zZSB0aGUga2V5IHlvdSB3YW50IHRoZSBzZXNzaW9uIHBsYXllciB0byBmb2xsb3dcNFwyQ1w0XDNDI1wxOVwyXDBcMFwwXDBcMFwwXDBcNFwzRGJcMTlcM1wwXDBcMFwwXDBcMFwwXDRcMkRcMTlcNFwwXDBcMFwwXDBcMFwwXDRcM0QjXDE5XDVcMFwwXDBcMFwwXDBcMFw0XDNFYlwxOVw2XDBcMFwwXDBcMFwwXDBcNFwyRVwxOVw3XDBcMFwwXDBcMFwwXDBcNFwyRlw0XDNGI1wxOVw5XDBcMFwwXDBcMFwwXDBcNFwzR2JcMTlcClwwXDBcMFwwXDBcMFwwXDRcMkdcMTlcMTFcMFwwXDBcMFwwXDBcMFw0XDNHI1wxOVwxMlwwXDBcMFwwXDBcMFwwXDRcM0FiXDE5XDEzXDBcMFwwXDBcMFwwXDBcNFwyQVwxOVwxNFwwXDBcMFwwXDBcMFwwXDRcM0EjXDE5XDE1XDBcMFwwXDBcMFwwXDBcNFwzQmJcMTlcMTZcMFwwXDBcMFwwXDBcMFw0XDJCXDE5XDE3XDBcMFwwXDBcMFwwXDBcNFwzQW1cMTlcMThcMFwwXDBcMFwwXDBcMFw0XDRBI21cMTlcMTlcMFwwXDBcMFwwXDBcMFw0XDRCYm1cMTlcMjBcMFwwXDBcMFwwXDBcMFw0XDNCbVwxOVwyMVwwXDBcMFwwXDBcMFwwXDRcM0NtXDE5XDIyXDBcMFwwXDBcMFwwXDBcNFw0QyNtXDE5XDIzXDBcMFwwXDBcMFwwXDBcNFw0RGJtXDE5XDI0XDBcMFwwXDBcMFwwXDBcNFwzRG1cMTlcMjVcMFwwXDBcMFwwXDBcMFw0XDREI21cMTlcMjZcMFwwXDBcMFwwXDBcMFw0XDRFYm1cMTlcMjdcMFwwXDBcMFwwXDBcMFw0XDNFbVwxOVwyOFwwXDBcMFwwXDBcMFwwXDRcM0ZtXDE5XDI5XDBcMFwwXDBcMFwwXDBcNFw0RiNtXDE5XDMwXDBcMFwwXDBcMFwwXDBcNFw0R2JtXDE5XDMxXDBcMFwwXDBcMFwwXDBcNFwzR21cMTkgXDBcMFwwXDBcMFwwXDBcNFw0RyNtXDE5IVwwXDBcMFwwXDBcMFwwXDRcNEFibVwxOVwiXDBcMFwwXDBcMFwwXDBcMTkjXDBcMFwwXDBcMFwwXDBcNFwxOERvIG5vdCBjaGFuZ2Uga2V5XDE5JFwwXDBcMFwwXDBcMFwwXDRcNnBhaXJzXDRcMThDaG9vc2UgVGFyZ2V0IEtleVw0XDIxRGlhbG9nIHdhcyBjYW5jZWxlZC5cNFwxXDRcNm1hdGNoXDIwL05vIGtleSBpcyBzZXQgaW4gdGhlIGZpbGUuIEV4aXRpbmcgdGhlIHNjcmlwdC5cNFwKXiVhIz9iP20/XDRcNWZpbmRcNFwybVw0XDZtaW5vclw0XDZtYWpvclw0XDZLZXk6IFw0XDkgU2NhbGU6IFw0XDRzdWJcMTn//////////1wxOf7/////////XDRcMThLZXkgd2l0aG91dCAnbSc6IFw0XDEyZGVzaXJlZF9rZXlcNFwxNC90bXAvYmFzc2xpbmVcNFw1Lm1pZFw0XDJcIlw0Jy9vcHQvTG9naWNhbEFyZG91ci9iYXNzbGluZV9nZW5lcmF0b3IgXDRcMiBcNFwxMyA0IC0tb3V0cHV0IFw0XDNvc1w0XDhleGVjdXRlXDRcMTNTdHJpbmdWZWN0b3JcNFwKcHVzaF9iYWNrXDRcOVRlbXBvcmFsXDRcCnRpbWVwb3NfdFwxOVwwXDBcMFwwXDBcMFwwXDBcNFw3RWRpdG9yXDRcCmRvX2ltcG9ydFw0XDhFZGl0aW5nXDRcMjBJbXBvcnREaXN0aW5jdEZpbGVzXDRcMTRJbXBvcnRUb1RyYWNrXDRcMTFTcmNRdWFsaXR5XDRcOFNyY0Jlc3RcNFwyME1pZGlUcmFja05hbWVTb3VyY2VcNFwyMFNNRkZpbGVBbmRUcmFja05hbWVcNFwyNE1pZGlUZW1wb01hcERpc3Bvc2l0aW9uXDRcMTVTTUZUZW1wb0lnbm9yZVw0XDExUGx1Z2luSW5mb1w0XDZUcmFja1w0XDhybSAtcmYgXDRcMzFZb3UgcGlja2VkIFJlZCBaZXBwbGluIERydW1raXRcNFwyMi9yZWQgemVwcGxpbi50ZW1wbGF0ZVw0XDIwUmVkIFplcHBsaW4gRHJ1bWtpdFwyMGgvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL2RydW1qb2NrZXkvQmFzaWMgQmVhdHMvQmFzaWNiZWF0XzAwMDEubWlkXDRcMjAvcG93ZXJraXQyLnRlbXBsYXRlXDRcMjZZb3UgcGlja2VkIFN0YW5kYXJkIDMgS2l0XDRcMjAvc3RhbmRhcmQzLnRlbXBsYXRlXDRcMTNTdGFuZGFyZDNraXRcNFwyM1lvdSBwaWNrZWQgQW5hbG9nVDlLaXRcNFwxNC9hdDkudGVtcGxhdGVcNFwyM1lvdSBwaWNrZWQgQW5hbG9nVDhLaXRcNFwxNC9hdDgudGVtcGxhdGVcNFwyM1lvdSBwaWNrZWQgQmxhY2sgUGVhcmxcNFwzMC9CbGFjayBQZWFybCBEcnVta2l0LnRlbXBsYXRlXDRcMjNZb3UgcGlja2VkIE5JTiBEcnVua2l0XDRcMjIvTklOIERydW1raXQudGVtcGxhdGVcNFwKYmxvbmQgYm9wXDRcMjkvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXDRcMTlCbG9uZGUgQm9wIERydW1raXRcNFwxOS9Ib3VzZUtpdC50ZW1wbGF0ZVw0XDE2QWNlIEZsdWlkIFN5bnRoXDRcMTYvRmx1aWQudGVtcGxhdGVcNFwxOC9Zb3NoaW1pLnRlbXBsYXRlXDRcMTkvU3VyZ2UgWFQudGVtcGxhdGVcNFw0TkFNXDRcMjIvUmF0YXRvdWlsbGUudGVtcGxhdGVcNFw5R3V0aWFyaXhcNFwxOS9HdWl0YXJpeC50ZW1wbGF0ZVw0XDE1Q2xhc3NpYyBWb2NhbHNcNFwxOC9jbGFzc2ljLnRlbXBsYXRlXDRcOGNsYXNzaWNcNFwxNEJyaWdodCBWb2NhbHNcNFwxNy9icmlnaHQudGVtcGxhdGVcNFw3YnJpZ2h0XDRcMThDb21wcmVzc2VkIFZvY2Fsc1w0XDIxL2NvbXByZXNzZWQudGVtcGxhdGVcNFwxMWNvbXByZXNzZWRcNFwxN3RlbGVwaG9uZSBWb2NhbHNcNFwyMC90ZWxlcGhvbmUudGVtcGxhdGVcNFwKdGVsZXBob25lXDRcMTNEYW5jZSBWb2NhbHNcNFwxNi9kYW5jZS50ZW1wbGF0ZVw0XDZkYW5jZVw0XDE1TmF0dXJhbCBWb2NhbHNcNFwxOC9uYXR1cmFsLnRlbXBsYXRlXDRcOG5hdHVyYWxcNFwyNS9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVw0XDExRHJ1bWxhYm9vaFw0XDE5L211bGRqb3JkLnRlbXBsYXRlXDRcMTNNdWxkam9yZCBLaXRcNFwyNy9TdGFuZGFyZCAyIERydW1zLnRlbXBsYXRlXDRcMjcvRWxlY3Ryb25pYyBEcnVtcy50ZW1wbGF0ZVw0XDIxL1Jvb20gRHJ1bXMudGVtcGxhdGVcNFwyMi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVw0XDIyL0RhbmNlIERydW1zLnRlbXBsYXRlXDRcMjEvSmF6eiBEcnVtcy50ZW1wbGF0ZVw0XDIxL0dNIFNlc3Npb24udGVtcGxhdGVcNFwyNEFjZSBGbHVpZCBTeW50aCBTZXNzaW9uXDRcNnVwcGVyXDRcCmRpcmVjdG9yeVwyMFEvb3B0L0xvZ2ljYWxBcmRvdXIvRHJ1bSBsb29wcywgY2hvcmRzLCBhbmQgY2hvcmQgcHJvZ3Jlc3Npb25zL01JREkgUHJvZ3Jlc3Npb25zL1w0XDIzZ2V0X2ZpbGVzX2luX2RpcmVjdG9yeVw0XDIwZmlsdGVyX2ZpbGVzX2J5X2tleVw0XDE3cGlja19yYW5kb21fZmlsZVw0XDI3UmFuZG9tIHByb2dyZXNzaW9uIGluIGtleSBcNFwzOiBcMTlcMFwwXDBcMFwwXDBcMFwwXDQgTm8gcHJvZ3Jlc3Npb25zIGZvdW5kIGZvciBrZXk6IFwxOVwxXDBcMFwwXDBcMFwwXDBcNFw2bG93ZXJcNFwxMS90bXAvY2hvcmRcNFwyXCJcNFwyOS9vcHQvTG9naWNhbEFyZG91ci9uZXdjaG9yZCBcNFwzb3NcNFwyMy9Zb3NoIFNlc3Npb24udGVtcGxhdGVcNFwxNllvc2hpbWkgU2Vzc2lvblw0XDNpb1w0XDZtYXRjaFwxOVwwXDBcMFwwXDBcMFwwXDBcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMlwiXDRcM29zXDRcMjcvU3VyZ2UgWFQgU2Vzc2lvbi50ZW1wbGF0ZVw0XDE3U3VyZ2UgWFQgU2Vzc2lvblw0XDNpb1w0XDZtYXRjaFwxOVwwXDBcMFwwXDBcMFwwXDBcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMlwiXDRcM29zXDRcMTJFZGdlIFZvY2Fsc1w0XDIyL0VkZ2UgVm9jYWxzLnRlbXBsYXRlXDRcMTJGdXp6IFZvY2Fsc1w0XDIyL0Z1enogVm9jYWxzLnRlbXBsYXRlXDRcCjgwOCBEcnVtc1w0XDE4LzgwOC05MDkudGVtcGxhdGVcNFwwMTQ4MDgtODA5IERydW1zXDRcNGRybFw0XDIxL2RydW1sYWJvb2gudGVtcGxhdGVcNFwxMWRydW1sYWJvb2hcNFwyMi9CcnVzaCBEcnVtcy50ZW1wbGF0ZVw0XDI2L09yY2hlc3RyYWwgUGVyYy50ZW1wbGF0ZVw0XDE1L3NvbmkudGVtcGxhdGVcNFwxNkFsZXNpcyBEcnVta2l0c1w0XDEzL2FsLnRlbXBsYXRlXDRcMTUvdHViZS50ZW1wbGF0ZVw0XDE3L2RlZXBlci50ZW1wbGF0ZVw0XDIzL3JvYm90IHZvY2Fscy50ZW1wbGF0ZVw0XDZBdWRpb1w0XDE2L2F1ZGlvLnRlbXBsYXRlXDRcMTgvc2FtcGxlci50ZW1wbGF0ZVw0XDE4L0J1c2ttYW4udGVtcGxhdGVcNFwxNy9ob3Ryb2QudGVtcGxhdGVcNFwKRHJ1bSBIZWxwXDRcMjlodHRwczovL3lvdXR1LmJlL0NPbTN5bTZZLXM4XDRcMjZTb2Z0d2FyZSBJbnN0cnVtZW50cyBIZWxwXDAyMDFodHRwczovL3lvdXR1LmJlL3lvdXJfc29mdHdhcmVfaW5zdHJ1bWVudHNfdmlkZW9cNFwyMUF1ZGlvIFJlY29yZGluZyBIZWxwXDIwLGh0dHBzOi8veW91dHUuYmUveW91cl9hdWRpb19yZWNvcmRpbmdfdmlkZW9cNFwyN0d1aXRhci9CYXNzIFJlY29yZGluZyBIZWxwXDIwLWh0dHBzOi8veW91dHUuYmUveW91cl9ndWl0YXJfcmVjb3JkaW5nX3ZpZGVvXDRcMjFTZXNzaW9uIFBsYXllcnMgSGVscFwyMCxodHRwczovL3lvdXR1LmJlL3lvdXJfc2Vzc2lvbl9wbGF5ZXJzX3ZpZGVvXDRcMTZHZW5lcmF0b3JzIEhlbHBcNCdodHRwczovL3lvdXR1LmJlL3lvdXJfZ2VuZXJhdG9yc192aWRlb1w0I09wZW5pbmcgQ2lyY2xlIG9mIEZpZnRocyBSZWZlcmVuY2VcNClodHRwczovL3JhbmRzY3VsbGFyZC5jb20vQ2lyY2xlT2ZGaWZ0aHMvXDRcMjUvU3RlcCBTZXF1ZW5jZXIudGVtcGxhdGVcNFwyN1N0ZXAgU2VxdWVuY2VyLVJlZCBaZXBwbGluXDQjU3RlcCBTZXF1ZW5jZXItQmxhY2sgUGVhcmwgRHJ1bWtpdFw0XDEyQmxhY2sgUGVhcmxcNFwiU3RlcCBTZXF1ZW5jZXItQmxvbmRlIEJvcCBEcnVta2l0XDRcMzBTdGVwIFNlcXVlbmNlci1TdGFuZGFyZCBEcnVtc1w0IFN0ZXAgU2VxdWVuY2VyLVN0YW5kYXJkIDIgRHJ1bXNcNCBTdGVwIFNlcXVlbmNlci1FbGVjdHJvbmljIERydW1zXDRcMjZTdGVwIFNlcXVlbmNlci1Sb29tIERydW1zXDRcMjdTdGVwIFNlcXVlbmNlci1Qb3dlciBEcnVtc1w0XDI3U3RlcCBTZXF1ZW5jZXItRGFuY2UgRHJ1bXNcNFwyNlN0ZXAgU2VxdWVuY2VyLUphenogRHJ1bXNcNFwyOVN0ZXAgU2VxdWVuY2VyLTgwOC05MDkgRHJ1bXNcNFwwMTQ4MDgtOTA5IERydW1zXDRcMjdTdGVwIFNlcXVlbmNlci1CcnVzaCBEcnVtc1w0XDMxU3RlcCBTZXF1ZW5jZXItT3JjaGVzdHJhbCBQZXJjXDRcMjRTdGVwIFNlcXVlbmNlci1Tb25pTmVrb1wyMCxTdGVwIFNlcXVlbmNlci1CdXNrbWFuJ3MgSG9saWRheSBQZXJjdXNzaW9uXDRcMzFTdGVwIFNlcXVlbmNlci1BbGVzaXMgRHJ1bWtpdHNcNCVTdGVwIFNlcXVlbmNlci1CbG9uZGUgQm9wIEhvdFJvZCBLaXRcNFwyMkJsb25kZSBCb3AgSG90Um9kIEtpdFw0XDI3U3RlcCBTZXF1ZW5jZXItTklOIERydW1raXRcNFwyNFN0ZXAgU2VxdWVuY2VyLU11bGRqb3JkXDRcMjRTdGVwIFNlcXVlbmNlci1Ib3VzZUtpdFw0XDI1U3RlcCBTZXF1ZW5jZXItUG93ZXJLaXQyXDRcClBvd2Vya2l0Mlw0XDI4U3RlcCBTZXF1ZW5jZXItU3RhbmRhcmQzS2l0XDRcMTNTdGFuZGFyZDNLaXRcNFwyN1N0ZXAgU2VxdWVuY2VyLUFuYWxvZ1Q5S2l0XDRcMjdTdGVwIFNlcXVlbmNlci1BbmFsb2dUOEtpdFw0XDI5Q2hvcmQgR2VuZXJhdGlvbiAtIEFDRSBGbHVpZFw0XDNpb1w0XDZtYXRjaFwxOVwwXDBcMFwwXDBcMFwwXDBcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMlwiXDRcM29zXDRcMjdDaG9yZCBHZW5lcmF0aW9uIC0gWW9zaGltaVw0XDNpb1w0XDZtYXRjaFwxOVwwXDBcMFwwXDBcMFwwXDBcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMlwiXDRcM29zXDRcMjhDaG9yZCBHZW5lcmF0aW9uIC0gU3VyZ2UgWFRcNFwzaW9cNFw2bWF0Y2hcMTlcMFwwXDBcMFwwXDBcMFwwXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDJcIlw0XDNvc1wxXDBcMFwwXDBcMFwyMFwwXDBcMFwwjVwwXDBcMKFcMFwwXDBcMVwwXDdcIlwwXDBcMEFcMFwwXDCAXDBcMFwwXYCAXDCGQEBcMIeAQFwxwcBcMFwwXDFcMVwxXDCkgIBcMaJAXDBcMFwzMMBcMIDGQEFcMFwxgVwxXDDkQFwwXDFcMzBAXDKAzMBBXDFAXDGAXDCBXDFcMlwwXYGBXDLkQIBcMcxAQlwx5EBcMFwxxkBBXDBcMYFcMlww5EBcMFwxxsBCXDDHXDDDXDFcMUFcM1ww5EBcMFwxxsBCXDDHgMNcMVwxwVwzXDBBXDFcNFww5ECAXDEmXDCAXDBcMTdcMFwwXDBcNFwKeGRnLW9wZW4gXDRcM2lvXDRcNW9wZW5cNFw2eXQuc2hcNFwyd1w0XDZwcmludFw0JUVycm9yOiBGYWlsZWQgdG8gY3JlYXRlIGZpbGUgJ3l0LnNoJ1w0XDZ3cml0ZVw0XDJcClw0XDZjbG9zZVw0I0ZpbGUgJ3l0LnNoJyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSFcNFwzb3NcNFw4ZXhlY3V0ZVw0XDIwbXYgeXQuc2ggL3RtcC95dC5zaFw0XDlmb3JrZXhlY1w0XAovYmluL2Jhc2hcNFwxMS90bXAveXQuc2hcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwo1wwXDBcMLlcMFwwXDBcNFwwXDE0TlwwXDBcMFw2XDFAXDBcMTJBQFwygYFcMFwwxsFAXDDHXDHBXDPHQcFcM1wwXDJcMFwwQFwygFwwhsJAXDCHgkFcNYfCQVw1JEGAXDNcNlwxQlwwXDEyQUJcMiSBXDBcMUeBQlwyTMHCXDJkgVwwXDFMXDHDXDJkXDFcMVwxXDMwQFwxgEyCQ1w0ZIJcMFwxXDhAgoZGwkNcMIZCQ1wwZEJcMFwxaUFcMFww6sH9XDEyN0ZcMUBcMExBwFwywYFcMFwwXDbCQFwwXDdcMkFcNFw3QkFcNEBcMlwwXDGAXDKAXDHGwkBcMMeCwVw1x8LBXDVkQYBcM0ZcMUJcMExBwlwyZIFcMFwxXDBcMYBcMkeBQlwyTMHCXDJkgVwwXDFMXDHDXDJkXDFcMVwxXDMwwFw1gExcMkRcNGSCXDBcMUxCxFw0ZIJcMFwxYkJcMFwwXDMwQFw0gExcMkRcNGSCXDBcMUyCxFw0ZIJcMFwxTELEXDRkglwwXDFiQlwwXDBcMzBAXDKATMJEXDRkglwwXDFMXDLFXDTBQlw1XDBkgoBcMYyCxVw0XDZDQ1wwQcNcNVwwXDI5Q1wzXDakQoBcMWlBXDBcMOpB+VwxMjcmXDCAXDBcMjRcMFwwXDBcNFw4U2Vzc2lvblw0XDI0bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGVcMTlcMVwwXDBcMFwwXDBcMFwwXDRcN0FSRE9VUlw0XDE3UHJlc2VudGF0aW9uSW5mb1w0XAptYXhfb3JkZXJcNFwyMFBsYXlsaXN0RGlzcG9zaXRpb25cNFwxMk5ld1BsYXlsaXN0XDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDd0cmFja3NcNFwKcm91dGVsaXN0XDRcNWl0ZXJcNFw5dGhlX25hbWVcNFw1bmFtZVw0XDZwcmludFw0XDl0b190cmFja1w0XDZpc25pbFw0XDE0dG9fbWlkaV90cmFja1w0XDZpbnB1dFw0XDVtaWRpXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDhjb25uZWN0XDRcMTIvbWlkaV9vdXQgMVwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDCEXDNcMFwwjFwzXDBcMFwxXDBcOVwyNVwwXDBcMEtcMFwwXDCGXDBAXDCHQEBcMcGAXDBcMFwwXDFcMFwwQcFcMFww3UCBXDGkgFwwXDGMXDBBXDGkXDBcMVwxXDMwQFwygIxBwVwyXDGCXDFcMKSBgFwxolwxXDBcMFwzMFwwXDGAhsFBXDCHXDFCXDPAXDGAXDBcMFwygFwypEGAXDGpQFwwXDAqwfxcMTI3ZlwwXDBcMSZcMIBcMFw5XDBcMFwwXDRcM2lvXDRcNnBvcGVuXDRcNWxzIFwiXDRcMlwiXDRcNmxpbmVzXDRcNm1hdGNoXDRcNyUubWlkJFw0XDZ0YWJsZVw0XDdpbnNlcnRcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwj1wzXDBcMJtcM1wwXDBcMlwwXDEzXDMwXDBcMFwwi1wwXDBcMMZcMEBcMFwwXDFcMFww5FwwXDFcMVwzMFwwXDWAXDEyQsBcM4GCXDBcMMBcMoBcMFwxw1wwXDCdXDJcM1w1JIKAXDFcIkJcMFwwXDMwwFwxgFwxMkLAXDOBglwwXDDAXDKAXDBcMVwzXDFcMJ1cMlwzXDUkgoBcMVwiXDJcMFwwXDMwXDBcMYBcNkJBXDBcN4JBXDRAXDJcMFwxgFwygFwzJEKAXDHpgFwwXDBqXDH6XDEyN6ZcMFwwXDEmXDCAXDBcN1wwXDBcMFw0XDdpcGFpcnNcNFw2bWF0Y2hcNFwyXlw0XDZbJVdfXVw0XDclLm1pZCRcNFw2dGFibGVcNFw3aW5zZXJ0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMJ5cM1wwXDClXDNcMFwwXDFcMFw0XDE5XDBcMFwwXFxcMFwwXDBcMzFcMMBcMFwzMEBcMIBEXDBcMFwwZlwwXDBcMUZAQFwwR4DAXDCGwEBcMIdcMEFcMaRcMIBcMGRAXDBcMEZAQFwwR0DBXDCBgFwxXDDcXDBcMFwwZICAXDGHQFwwXDCmXDBcMFwxJlwwgFwwXDdcMFwwXDBcMTlcMFwwXDBcMFwwXDBcMFwwXDRcNW1hdGhcNFwxMXJhbmRvbXNlZWRcNFwzb3NcNFw1dGltZVw0XDdyYW5kb21cMTlcMVwwXDBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMDxcNFwwXDBEXDRcMFwwXDFcMFw5XDI1XDBcMFwwS1wwXDBcMIZcMEBcMIdAQFwxwYBcMFwwXDBcMVwwXDBBwVwwXDDdQIFcMaSAXDBcMYxcMEFcMaRcMFwxXDFcMzBAXDKAjEHBXDJcMYJcMVwwpIGAXDGiXDFcMFwwXDMwXDBcMYCGwUFcMIdcMUJcM8BcMYBcMFwwXDKAXDKkQYBcMalAXDBcMCrB/FwxMjdmXDBcMFwxJlwwgFwwXDlcMFwwXDBcNFwzaW9cNFw2cG9wZW5cNFw1bHMgXCJcNFwyXCJcNFw2bGluZXNcNFw2bWF0Y2hcNFw3JS5taWQkXDRcNnRhYmxlXDRcN2luc2VydFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBHXDRcMFwwU1w0XDBcMFwyXDBcMTNcMzBcMFwwXDCLXDBcMFwwxlwwQFwwXDBcMVwwXDDkXDBcMVwxXDMwXDBcNYBcMTJCwFwzgYJcMFwwwFwygFwwXDHDXDBcMJ1cMlwzXDUkgoBcMVwiQlwwXDBcMzDAXDGAXDEyQsBcM4GCXDBcMMBcMoBcMFwxXDNcMVwwnVwyXDNcNSSCgFwxXCJcMlwwXDBcMzBcMFwxgFw2QkFcMFw3gkFcNEBcMlwwXDGAXDKAXDMkQoBcMemAXDBcMGpcMfpcMTI3plwwXDBcMSZcMIBcMFw3XDBcMFwwXDRcN2lwYWlyc1w0XDZtYXRjaFw0XDJeXDRcNlslV19dXDRcNyUubWlkJFw0XDZ0YWJsZVw0XDdpbnNlcnRcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwVlw0XDBcMF1cNFwwXDBcMVwwXDRcMTlcMFwwXDBcXFwwXDBcMFwzMVwwwFwwXDMwQFwwgERcMFwwXDBmXDBcMFwxRkBAXDBHgMBcMIbAQFwwh1wwQVwxpFwwgFwwZEBcMFwwRkBAXDBHQMFcMIGAXDFcMNxcMFwwXDBkgIBcMYdAXDBcMKZcMFwwXDEmXDCAXDBcN1wwXDBcMFwxOVwwXDBcMFwwXDBcMFwwXDBcNFw1bWF0aFw0XDExcmFuZG9tc2VlZFw0XDNvc1w0XDV0aW1lXDRcN3JhbmRvbVwxOVwxXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFww9Vw0XDBcMP1cNFwwXDBcMVwwXDlcMjVcMFwwXDBLXDBcMFwwhlwwQFwwh0BAXDHBgFwwXDBcMFwxXDBcMEHBXDBcMN1AgVwxpIBcMFwxjFwwQVwxpFwwXDFcMVwzMEBcMoCMQcFcMlwxglwxXDCkgYBcMaJcMVwwXDBcMzBcMFwxgIbBQVwwh1wxQlwzwFwxgFwwXDBcMoBcMqRBgFwxqUBcMFwwKsH8XDEyN2ZcMFwwXDEmXDCAXDBcOVwwXDBcMFw0XDNpb1w0XDZwb3Blblw0XDVscyBcIlw0XDJcIlw0XDZsaW5lc1w0XDZtYXRjaFw0XDclLm1pZCRcNFw2dGFibGVcNFw3aW5zZXJ0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDVcMFwwXDEyXDVcMFwwXDJcMFwxM1wzMFwwXDBcMItcMFwwXDDGXDBAXDBcMFwxXDBcMORcMFwxXDFcMzBcMFw1gFwxMkLAXDOBglwwXDDAXDKAXDBcMcNcMFwwnVwyXDNcNSSCgFwxXCJCXDBcMFwzMMBcMYBcMTJCwFwzgYJcMFwwwFwygFwwXDFcM1wxXDCdXDJcM1w1JIKAXDFcIlwyXDBcMFwzMFwwXDGAXDZCQVwwXDeCQVw0QFwyXDBcMYBcMoBcMyRCgFwx6YBcMFwwalwx+lwxMjemXDBcMFwxJlwwgFwwXDdcMFwwXDBcNFw3aXBhaXJzXDRcNm1hdGNoXDRcMl5cNFw2WyVXX11cNFw3JS5taWQkXDRcNnRhYmxlXDRcN2luc2VydFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMTVcNVwwXDBcMjJcNVwwXDBcMVwwXDRcMTlcMFwwXDBcXFwwXDBcMFwzMVwwwFwwXDMwQFwwgERcMFwwXDBmXDBcMFwxRkBAXDBHgMBcMIbAQFwwh1wwQVwxpFwwgFwwZEBcMFwwRkBAXDBHQMFcMIGAXDFcMNxcMFwwXDBkgIBcMYdAXDBcMKZcMFwwXDEmXDCAXDBcN1wwXDBcMFwxOVwwXDBcMFwwXDBcMFwwXDBcNFw1bWF0aFw0XDExcmFuZG9tc2VlZFw0XDNvc1w0XDV0aW1lXDRcN3JhbmRvbVwxOVwxXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFww6Vw3XDBcMPFcN1wwXDBcMVwwXDlcMjVcMFwwXDBLXDBcMFwwhlwwQFwwh0BAXDHBgFwwXDBcMFwxXDBcMEHBXDBcMN1AgVwxpIBcMFwxjFwwQVwxpFwwXDFcMVwzMEBcMoCMQcFcMlwxglwxXDCkgYBcMaJcMVwwXDBcMzBcMFwxgIbBQVwwh1wxQlwzwFwxgFwwXDBcMoBcMqRBgFwxqUBcMFwwKsH8XDEyN2ZcMFwwXDEmXDCAXDBcOVwwXDBcMFw0XDNpb1w0XDZwb3Blblw0XDVscyBcIlw0XDJcIlw0XDZsaW5lc1w0XDZtYXRjaFw0XDclLm1pZCRcNFw2dGFibGVcNFw3aW5zZXJ0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMPRcN1wwXDBcMFw4XDBcMFwyXDBcMTNcMzBcMFwwXDCLXDBcMFwwxlwwQFwwXDBcMVwwXDDkXDBcMVwxXDMwXDBcNYBcMTJCwFwzgYJcMFwwwFwygFwwXDHDXDBcMJ1cMlwzXDUkgoBcMVwiQlwwXDBcMzDAXDGAXDEyQsBcM4GCXDBcMMBcMoBcMFwxXDNcMVwwnVwyXDNcNSSCgFwxXCJcMlwwXDBcMzBcMFwxgFw2QkFcMFw3gkFcNEBcMlwwXDGAXDKAXDMkQoBcMemAXDBcMGpcMfpcMTI3plwwXDBcMSZcMIBcMFw3XDBcMFwwXDRcN2lwYWlyc1w0XDZtYXRjaFw0XDJeXDRcNlslV19dXDRcNyUubWlkJFw0XDZ0YWJsZVw0XDdpbnNlcnRcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDNcOFwwXDBcClw4XDBcMFwxXDBcNFwxOVwwXDBcMFxcXDBcMFwwXDMxXDDAXDBcMzBAXDCARFwwXDBcMGZcMFwwXDFGQEBcMEeAwFwwhsBAXDCHXDBBXDGkXDCAXDBkQFwwXDBGQEBcMEdAwVwwgYBcMVww3FwwXDBcMGSAgFwxh0BcMFwwplwwXDBcMSZcMIBcMFw3XDBcMFwwXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDVtYXRoXDRcMTFyYW5kb21zZWVkXDRcM29zXDRcNXRpbWVcNFw3cmFuZG9tXDE5XDFcMFwwXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDChXDhcMFwwqVw4XDBcMFwxXDBcOVwyNVwwXDBcMEtcMFwwXDCGXDBAXDCHQEBcMcGAXDBcMFwwXDFcMFwwQcFcMFww3UCBXDGkgFwwXDGMXDBBXDGkXDBcMVwxXDMwQFwygIxBwVwyXDGCXDFcMKSBgFwxolwxXDBcMFwzMFwwXDGAhsFBXDCHXDFCXDPAXDGAXDBcMFwygFwypEGAXDGpQFwwXDAqwfxcMTI3ZlwwXDBcMSZcMIBcMFw5XDBcMFwwXDRcM2lvXDRcNnBvcGVuXDRcNWxzIFwiXDRcMlwiXDRcNmxpbmVzXDRcNm1hdGNoXDRcNyUubWlkJFw0XDZ0YWJsZVw0XDdpbnNlcnRcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwrFw4XDBcMLhcOFwwXDBcMlwwXDEzXDMwXDBcMFwwi1wwXDBcMMZcMEBcMFwwXDFcMFww5FwwXDFcMVwzMFwwXDWAXDEyQsBcM4GCXDBcMMBcMoBcMFwxw1wwXDCdXDJcM1w1JIKAXDFcIkJcMFwwXDMwwFwxgFwxMkLAXDOBglwwXDDAXDKAXDBcMVwzXDFcMJ1cMlwzXDUkgoBcMVwiXDJcMFwwXDMwXDBcMYBcNkJBXDBcN4JBXDRAXDJcMFwxgFwygFwzJEKAXDHpgFwwXDBqXDH6XDEyN6ZcMFwwXDEmXDCAXDBcN1wwXDBcMFw0XDdpcGFpcnNcNFw2bWF0Y2hcNFwyXlw0XDZbJVdfXVw0XDclLm1pZCRcNFw2dGFibGVcNFw3aW5zZXJ0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMLtcOFwwXDDCXDhcMFwwXDFcMFw0XDE5XDBcMFwwXFxcMFwwXDBcMzFcMMBcMFwzMEBcMIBEXDBcMFwwZlwwXDBcMUZAQFwwR4DAXDCGwEBcMIdcMEFcMaRcMIBcMGRAXDBcMEZAQFwwR0DBXDCBgFwxXDDcXDBcMFwwZICAXDGHQFwwXDCmXDBcMFwxJlwwgFwwXDdcMFwwXDBcMTlcMFwwXDBcMFwwXDBcMFwwXDRcNW1hdGhcNFwxMXJhbmRvbXNlZWRcNFwzb3NcNFw1dGltZVw0XDdyYW5kb21cMTlcMVwwXDBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFpcOVwwXDBiXDlcMFwwXDFcMFw5XDI1XDBcMFwwS1wwXDBcMIZcMEBcMIdAQFwxwYBcMFwwXDBcMVwwXDBBwVwwXDDdQIFcMaSAXDBcMYxcMEFcMaRcMFwxXDFcMzBAXDKAjEHBXDJcMYJcMVwwpIGAXDGiXDFcMFwwXDMwXDBcMYCGwUFcMIdcMUJcM8BcMYBcMFwwXDKAXDKkQYBcMalAXDBcMCrB/FwxMjdmXDBcMFwxJlwwgFwwXDlcMFwwXDBcNFwzaW9cNFw2cG9wZW5cNFw1bHMgXCJcNFwyXCJcNFw2bGluZXNcNFw2bWF0Y2hcNFw3JS5taWQkXDRcNnRhYmxlXDRcN2luc2VydFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBlXDlcMFwwcVw5XDBcMFwyXDBcMTNcMzBcMFwwXDCLXDBcMFwwxlwwQFwwXDBcMVwwXDDkXDBcMVwxXDMwXDBcNYBcMTJCwFwzgYJcMFwwwFwygFwwXDHDXDBcMJ1cMlwzXDUkgoBcMVwiQlwwXDBcMzDAXDGAXDEyQsBcM4GCXDBcMMBcMoBcMFwxXDNcMVwwnVwyXDNcNSSCgFwxXCJcMlwwXDBcMzBcMFwxgFw2QkFcMFw3gkFcNEBcMlwwXDGAXDKAXDMkQoBcMemAXDBcMGpcMfpcMTI3plwwXDBcMSZcMIBcMFw3XDBcMFwwXDRcN2lwYWlyc1w0XDZtYXRjaFw0XDJeXDRcNlslV19dXDRcNyUubWlkJFw0XDZ0YWJsZVw0XDdpbnNlcnRcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwdFw5XDBcMHtcOVwwXDBcMVwwXDRcMTlcMFwwXDBcXFwwXDBcMFwzMVwwwFwwXDMwQFwwgERcMFwwXDBmXDBcMFwxRkBAXDBHgMBcMIbAQFwwh1wwQVwxpFwwgFwwZEBcMFwwRkBAXDBHQMFcMIGAXDFcMNxcMFwwXDBkgIBcMYdAXDBcMKZcMFwwXDEmXDCAXDBcN1wwXDBcMFwxOVwwXDBcMFwwXDBcMFwwXDBcNFw1bWF0aFw0XDExcmFuZG9tc2VlZFw0XDNvc1w0XDV0aW1lXDRcN3JhbmRvbVwxOVwxXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc2NyaXB0c1sxXVsibiJdID0gIk5ldyBUcmFjayAtIERpYWxvZyBNZW51IiAgIHNjcmlwdHNbMl0gPSB7fSBzY3JpcHRzWzJdWyJzIl0gPSAiYXJkb3VyIHtcCiBbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcCiBuYW1lID0gXCJJbnN0cnVtZW50IC0gQ2hhbmdlIEluc3RydW1lbnQgUGx1Z2luXCIsXAogYXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApkZXNjcmlwdGlvbiA9IFtbXApSZXBsYWNlIEluc3RydW1lbnQgUGx1Z2luIG9uIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFja1wKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcCiAgLS0gQ2hlY2sgaWYgbm8gdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsOmVtcHR5KCkgb3Igc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTplbXB0eSgpIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3QgYSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXApcCiAgLS0gQ2hlY2sgaWYgbW9yZSB0aGFuIG9uZSB0cmFjayBpcyBzZWxlY3RlZFwKICBpZiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOnNpemUoKSA+IDEgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJNb3JlIHRoYW4gb25lIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IG9ubHkgb25lIHRyYWNrIHRvIGNvbnRpbnVlLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLk9LKTpydW4oKVwKICAgIHJldHVyblwKICBlbmRcClwKXAogICAgIG1pZGlUcmFja0ZvdW5kID0gZmFsc2UgLS0gRmxhZyB0byBjaGVjayBpZiBhbnkgTUlESSB0cmFjayBpcyBzZWxlY3RlZFwKXAogICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2svYnVzXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19taWRpX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICAgbWlkaVRyYWNrRm91bmQgPSB0cnVlXAogICAgICAgcHJpbnQoXCJpcyBhIG1pZGkgdHJhY2tcIilcCiAgICAgIGVuZFwKICAgIGVuZFwKXAogICAgICAgaWYgIG1pZGlUcmFja0ZvdW5kID09IGZhbHNlIHRoZW5cCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyBNSURJIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgTUlESSB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKICAgIGVuZFwKXApcCiAgICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKXAogICAgbG9jYWwgcHJvYyA9IHI6bnRoX3BsdWdpbigwKSAtLSBmb3IgZXZlcnkgcGx1Z2luXAogICAgaWYgcHJvYzppc25pbCgpIHRoZW4gYnJlYWsgZW5kXAogICAgbG9jYWwgcGkgPSBwcm9jOnRvX2luc2VydCgpXAogICAgbG9jYWwgcGx1Z2luX25hbWUgPSBwaTpwbHVnaW4oMCk6bmFtZSgpXAogICAgaWYgcGx1Z2luX25hbWUgPT0gXCJBcnBlZ2dpYXRvclwiIHRoZW5cClwKICAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2ssIHBsZWFzZSBzZWxlY3QgYW4gaW5zdHJ1bWVudCB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKXAogICAgZW5kXApcCiAgICAgICBsb2NhbCBwcm9jMiA9IHI6bnRoX3BsdWdpbigxKSAtLSBmb3IgZXZlcnkgcGx1Z2luXAogICAgaWYgcHJvYzI6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpMiA9IHByb2MyOnRvX2luc2VydCgpXAogICAgbG9jYWwgcGx1Z2luX25hbWUyID0gcGkyOnBsdWdpbigxKTpuYW1lKClcCiAgICBpZiBwbHVnaW5fbmFtZTIgPT0gXCJNSURJIFN0cnVtXCIgdGhlblwKTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIlRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTZXNzaW9uIFBsYXllciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVtZW50IHRyYWNrKS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKICAgIGVuZFwKIGVuZFwKXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cClwKICAgIGxvY2FsIHByb2MgPSByOm50aF9wbHVnaW4oMCkgLS0gZm9yIGV2ZXJ5IHBsdWdpblwKICAgIGlmIHByb2M6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpID0gcHJvYzp0b19pbnNlcnQoKVwKICAgIGxvY2FsIHBsdWdpbl9uYW1lID0gcGk6cGx1Z2luKDApOm5hbWUoKVwKICAgIGlmIHBsdWdpbl9uYW1lID09IFwiUmlwY2hvcmRcIiB0aGVuXApcCiAgICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFJpcGNob3JkIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgdHJhY2suXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cClwKICAgIGVuZCBlbmRcCi0tTUlESSBTdGVwIFNlcXVlbmNlcjh4OFwKXAogICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKXAogICAgbG9jYWwgcHJvYyA9IHI6bnRoX3BsdWdpbigwKSAtLSBmb3IgZXZlcnkgcGx1Z2luXAogICAgaWYgcHJvYzppc25pbCgpIHRoZW4gYnJlYWsgZW5kXAogICAgbG9jYWwgcGkgPSBwcm9jOnRvX2luc2VydCgpXAogICAgbG9jYWwgcGx1Z2luX25hbWUgPSBwaTpwbHVnaW4oMCk6bmFtZSgpXAogICAgaWYgcGx1Z2luX25hbWUgPT0gXCJNSURJIFN0ZXAgU2VxdWVuY2VyOHg4XCIgdGhlblwKXAogICAgICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIlRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTdGVwIFNlcXVlbmNlciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVtZW50IHRyYWNrLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgICAgcmV0dXJuXApcCiAgICBlbmQgZW5kXApcClwKXApcClwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwiZHJvcGRvd25cIiwgdGl0bGUgPSBcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiLCB2YWx1ZXMgPVwKICAge1wKICAgIFtcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiXSA9IDEsIFtcIkFDRSBGbHVpZCBTeW50aFwiXSA9IDIsXAogICAgW1wiWW9zaGltaVwiXSA9IDMsXAogICAgW1wiU3VyZ2UgWFRcIl0gPSA0LFwKICAgIFtcIlNhbXBsdjEgU2FtcGxlclwiXSA9IDUsXAogICAgIFtcIkNvbm5lY3QgUmlwY2hvcmRcIl0gPSA2XApcCiAgIH0sXAogICBkZWZhdWx0ID0gXCJDaG9vc2UgSW5zdHJ1bWVudCBQbHVnaW5cIlwKICB9XAogfVwKXAogbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiLCBkaWFsb2dfb3B0aW9ucylcCiBsb2NhbCBydiA9IG9kOnJ1bigpXApcCiBsb2NhbCBwbHVnaW5fbmFtZSA9IG5pbFwKIHJpcGNob3JkID0gXCJub3Qgc2V0XCIgLS0gd2lsbCBiZSBzZXQgdG8gXCJzZXRcIiBpZiB3ZSBkZWNpZGVkIHRvIGNvbm5lY3QgUmlwY2hvcmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMiB0aGVuXApcOVw5cHJpbnQoXCJBQ0UgRmx1aWQgU3ludGhcIilcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gcGx1Z2luX25hbWVcClw5XDlwcmVzZXRfbmFtZSA9IFwiZ21cIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXApcCiBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDMgdGhlblwKXDlcOXByaW50KFwiWW91IENob3NlIFlvc2hpbWlcIilcClw5XDlwbHVnaW5fbmFtZSA9IFwiWW9zaGltaVwiXApcOVw5dHJhY2tfbmFtZSA9IHBsdWdpbl9uYW1lXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gNCB0aGVuXApcOVw5cHJpbnQoXCJZb3UgQ2hvc2UgU3VyZ2UgWFRcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJTdXJnZSBYVFwiXApcOVw5dHJhY2tfbmFtZSA9IHBsdWdpbl9uYW1lXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuVlNUMywgXCJcIilcClw5IGVuZFwKXApcOSAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA1IHRoZW5cClw5XDlwcmludChcIllvdSBDaG9zZSBTYW1wbHYxXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwic2FtcGx2MVwiXApcOVw5dHJhY2tfbmFtZSA9IFwiU2FtcGx2MSBTYW1wbGVyXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXDkgXDkgIFw5IFw5IFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA2IHRoZW5cClw5XDlwcmludChcIlJpcGNob3JkXCIpXApcOVw5cGx1Z2luX25hbWUgPSBcIlJpcGNob3JkXCJcClw5XDlyaXBjaG9yZCA9IFwic2V0XCJcClw5XDlcOSAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKICAgIHRoZV9uYW1lID0gcjpuYW1lKClcCiAgICBwcmludCh0aGVfbmFtZSlcCiAgZW5kXAogIFw5LS0gRmV0Y2ggdGhlIHVzZXIgY29uZmlnIGRpcmVjdG9yeVwKbG9jYWwgdXNlcl9jb25maWdfZGlyZWN0b3J5ID0gQVJET1VSLnVzZXJfY29uZmlnX2RpcmVjdG9yeSg4KSAtLSBnZXQgdGhlIGNvbmZpZyBkaXJlY3RvcnkgKHVzaW5nIHZlcnNpb24gOClcClwKcHJpbnQodXNlcl9jb25maWdfZGlyZWN0b3J5KVwKXApsb2NhbCBzdWJkaXIgPSBcInJvdXRlX3RlbXBsYXRlc1wiXApcCi0tIENvbmNhdGVuYXRlIHRoZSBjb25maWcgZGlyZWN0b3J5IHdpdGggdGhlIHN1YmRpcmVjdG9yeVwKbG9jYWwgZnVsbF9wYXRoID0gdXNlcl9jb25maWdfZGlyZWN0b3J5IC4uIFwiL1wiIC4uIHN1YmRpclwKXDlcOSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1JpcGNob3JkLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSaXBjaG9yZCBcIi4udGhlX25hbWVcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOVw5LS1sb2NhbCBuc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKXDlcOWZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXApcCiAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fbWlkaV90cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgbG9jYWwgb3V0cHV0bWlkaXBvcnQgPSByOm91dHB1dCgpOm1pZGkoMClcCiAgICAgIG91dHB1dG1pZGlwb3J0OmNvbm5lY3QodGhlX25hbWUgLi4gXCIvbWlkaV9pbiAxXCIpXAogICAgZW5kXAogIGVuZFwKXDlcOXJldHVyblwKXApcOSBlbmRcClwKXApcClwKbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcCiAgICAgIHI6cmVwbGFjZV9wcm9jZXNzb3IgKG9sZCwgbmV3LCBuaWwpXAogICAgICAgIHI6c2V0X25hbWUodHJhY2tfbmFtZSwgbmlsKVwKXAogaWYgcGx1Z2luX25hbWUgPT0gXCJBQ0UgRmx1aWQgU3ludGhcIiB0aGVuXApcClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZSh0cmFja19uYW1lKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChwcmVzZXRfbmFtZSlcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKZW5kXApcClwKICAgIGVuZFwKICBlbmRcCmVuZFwKXAotLSBDaGVjayBmb3IgcmlwY2hvcmRcCmlmIHJpcGNob3JkID09IFwibm90IHNldFwiIHRoZW4gLS0gbWFrZSBzdXJlIHdlIGRpZG4ndCBhbHJlYWR5IHNlbGVjdCB0aGUgb3B0aW9uIHRvIGNvbm5lY3QgUmlwY2hvcmRcCmxvY2FsIGEgPSBTZXNzaW9uOmVuZ2luZSgpXApcCl8sIHQgPSBhOmdldF9wb3J0cyhBUkRPVVIuRGF0YVR5cGUoXCJtaWRpXCIpLCBBUkRPVVIuUG9ydExpc3QoKSlcClwKbG9jYWwgcG9ydF9uYW1lID0gbmlsXApmb3IgcCBpbiB0WzJdOml0ZXIoKSBkb1wKICAgIGxvY2FsIG5hbWUgPSBwOm5hbWUoKVwKICAgIC0tIHByaW50KG5hbWUpXApcCiAgICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXAogICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2svYnVzXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgICAgbG9jYWwgY3VycmVudF90cmFjayA9IHI6bmFtZSgpXAogICAgICAgIC0tIHByaW50KGN1cnJlbnRfdHJhY2spXAogICAgICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19taWRpX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICAgICAgICBsb2NhbCBpbnB1dG1pZGlwb3J0ID0gcjppbnB1dCgpOm1pZGkoMClcCiAgICAgICAgICAgIGlmIGlucHV0bWlkaXBvcnQ6Y29ubmVjdGVkX3RvKG5hbWUpID09IHRydWUgdGhlblwKICAgICAgICAgICAgICAgIGlmIG5hbWU6ZmluZChcIi9taWRpX291dCAxXCIpIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgY29ycmVjdF9uYW1lID0gbmFtZTptYXRjaChcIiguKykvbWlkaV9vdXQgMVwiKVwKICAgICAgICAgICAgICAgICAgICBwcmludChcIkNvcnJlY3QgbmFtZSBpcyBcIiAuLiBjb3JyZWN0X25hbWUpXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXAogICAgZW5kXAplbmRcClwKaWYgY29ycmVjdF9uYW1lID09IG5pbCB0aGVuXAogICAgcHJpbnQoXCJObyBjb25uZWN0ZWQgTUlESSBvdXRwdXQgcG9ydCBmb3VuZFwiKVwKICAgIHJldHVyblwKZW5kXApcCmxvY2FsIHRyYWNrID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKGNvcnJlY3RfbmFtZSk6dG9fdHJhY2soKVwKaWYgbm90IHRyYWNrOmlzbmlsKCkgdGhlblwKICAgIGxvY2FsIGkgPSAwXAogICAgbG9jYWwgZm91bmRfcmlwY2hvcmQgPSBmYWxzZVwKICAgIHJlcGVhdCAtLSBpdGVyYXRlIG92ZXIgYWxsIHBsdWdpbnMvcHJvY2Vzc29yc1wKICAgICAgICBsb2NhbCBwcm9jID0gdHJhY2s6bnRoX3Byb2Nlc3NvcihpKVwKICAgICAgICBpZiBub3QgcHJvYzppc25pbCgpIHRoZW5cCiAgICAgICAgICAgIGxvY2FsIHByb2NfbmFtZSA9IHByb2M6ZGlzcGxheV9uYW1lKClcCiAgICAgICAgICAgLS0gcHJpbnQocHJvY19uYW1lKVwKICAgICAgICAgICAgaWYgcHJvY19uYW1lID09IFwiUmlwY2hvcmRcIiB0aGVuXAogICAgICAgICAgICAgICAtLSBwcmludChcIlJpcGNob3JkIHRydWVcIilcCiAgICAgICAgICAgICAgICBmb3VuZF9yaXBjaG9yZCA9IHRydWVcCiAgICAgICAgICAgICAgICB0cmFjazpzZXRfbmFtZShcIlJpcGNob3JkIFwiLi50cmFja19uYW1lKVwKICAgICAgICAgICAgZW5kXAogICAgICAgIGVuZFwKICAgICAgICBpID0gaSArIDFcCiAgICB1bnRpbCBwcm9jOmlzbmlsKClcClwKICAgIGlmIG5vdCBmb3VuZF9yaXBjaG9yZCB0aGVuXAogICAgICAgIHByaW50KFwiUmlwY2hvcmQgbm90IGZvdW5kXCIpXAogICAgZW5kXAplbHNlXAogICAgcHJpbnQoXCJUcmFjayAnXCIgLi4gY29ycmVjdF9uYW1lIC4uIFwiJyBub3QgZm91bmRcIilcCmVuZCBlbmRcCmVuZCBlbmRcClwKXApcClwKXApcCiIgIHNjcmlwdHNbMl1bImEiXSA9IHt9IHNjcmlwdHNbMl1bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2luc3RydW1lbnQubHVhIiAgIHNjcmlwdHNbMl1bImMiXSA9IHRydWUgc2NyaXB0c1syXVsiZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcClwwXDBcMFwyNVwxXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMFwyNVwxXDBcMFwxXDFcMjR3XDJcMFwwRlwwQFwwTEDAXDBkgFwwXDGMgMBcMKSAXDBcMaJAXDBcMFwzMIBcMYCHwMBcMIxcMEFcMaSAXDBcMYyAQFwxpIBcMFwxolwwXDBcMFwzMEBcM4CGQEFcMIeAQVwxwcBcMVwwXDFcMVwyXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMIfAwFwwjFwwQVwxpIBcMFwxjEBDXDGkgFwwXDEggFwwh1wzMEBcM4CGQEFcMIeAQVwxwcBcMVwwXDHBXDNcMEZBQVwwR0HCXDJHwcFcMoZBQVwwh4FCXDOHwUJcM6SAgFwyjFwwQ1wxpEBcMFwxJlwwgFwwXDhARIiHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMEBcNICMwcRcMqSBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMoCMwcRcMqSBXDBcMYxBRVwzpIFcMFwxjFwxRVwzpIFcMFwxokFcMFwwXDMwwFwwgFw4gEWIhsFFXDDBXDFcNlwwpEFcMFwxqUBcMFwwKsH6XDEyN4ZcMERcMFwzMUBEXDFcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxQVw2XDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh4FGXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMIfAwFwwjFwwQVwxpIBcMFwxjIBEXDGkXDBcMVwxXDMwwFwxNICMwcZcMlwxXDJcN1wwpIGAXDHMXDFFXDPkgVwwXDHiQVwwXDBcMzCAXDEzgMxBR1wz5IFcMFwxXDEygsdcM4FcMlw3XDAkgoBcMVwxMsJHXDQkglwwXDFcMzFcMEhcNFwzMEBcM4BGQkFcMEeCwVw0gcJcMVwwwUJcOFwwXDZDQVwwXDdDQlw2XDfDQVw2RkNBXDBHg8JcNkeDxlw2ZIKAXDJMXDLDXDRkQlwwXDEmXDCAXDBMwsZcMsGCXDNcMGSCgFwxjFwyxVw0pIJcMFwxokJcMFwwXDMwXDBcNoCMQsdcNKSCXDBcMcyCR1w1QYNcM1ww5IKAXDHMwsdcNeSCXDBcMVwzMYDIXDVcMzBAXDOAXDZDQVwwXDeDQVw2QcNcMVwwgcNcOFwwxkNBXDDHQ8JcN8fDwVw3XDZEQVwwXDeEQlw4XDeERlw4JIOAXDJcMTJcM0NcNiRDXDBcMSZcMIBcMKlAXDBcMCpB8FwxMjeHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMEBcN4CMwcZcMlwxXDJcN1wwpIGAXDHMXDFFXDPkgVwwXDHiQVwwXDBcMzBcMFw2gMxBR1wz5IFcMFwxXDEygsdcM4FcMlw3XDAkgoBcMVwxMsJHXDQkglwwXDFcMzFcMElcNFwzMEBcM4BGQkFcMEeCwVw0gcJcMVwwwUJcOVwwXDZDQVwwXDdDQlw2XDfDQVw2RkNBXDBHg8JcNkeDxlw2ZIKAXDJMXDLDXDRkQlwwXDEmXDCAXDCpQFwwXDAqwfdcMTI3h8DAXDCMXDBBXDGkgFwwXDGMgERcMaRcMFwxXDFcMzBAXDeAjMHGXDJcMVwyXDdcMKSBgFwxzFwxRVwz5IFcMFwx4kFcMFwwXDMwXDBcNoDMQUdcM+SBXDBcMVwxMoLHXDOBXDJcN1wwJIKAXDFcMTLCR1w0JIJcMFwxXDMxgElcNFwzMEBcM4BGQkFcMEeCwVw0gcJcMVwwwcJcOVwwXDZDQVwwXDdDQlw2XDfDQVw2RkNBXDBHg8JcNkeDxlw2ZIKAXDJMXDLDXDRkQlwwXDEmXDCAXDCpQFwwXDAqwfdcMTI3i1wwgFwwy0BcMVwwykBKlMpASpXKXDDLlVwxMYFcMVwwXAqBQ5ZcCsFLl1wKQUyYXArBTJlcCkFNmlwKwU2bylwwgZbKXDBLnKtAgFwwxkBBXDDHQM5cMVwxXDFcMTFcMEBcMVwwXDHkgIBcMVwxMlwxw1wxJIFcMFwxRFwxXDBcMFw4wE6dXCJcMVwwXDBcMzDAXDSAh0FKXDJcMzHAS1wzXDMwXDBcNICGwUVcMMGBXDExXDCkQVwwXDFBgVwxMVwwXDhAXDGeXDiAz56GXDFQXDCHQVBcM4eBUFwzxsFQXDBcMFwygFwyRlwyUFwwR1wy0Vw0R0LRXDSBglwxN1wwpIGAXDJcOICBn1wiXDFcMFwwXDMwgFw0gIdBSlwyXDMxQExcM1wzMMBcM4CGwUVcMMHBXDE3XDCkQVwwXDFBXDFcMTJcMFw4QFwxnoZcMVBcMIdBUFwzh4FQXDPGwVBcMFwwXDKAXDJGXDJQXDBHXDLRXDRHQtFcNIGCXDE3XDCkgYBcMlw4gIGfXCJcMVwwXDBcMzCAXDSAh0FKXDJcMzHATFwzXDMwwFwzgIbBRVwwwVwxXDE4XDCkQVwwXDFBgVwxMlwwXDhAXDGehlwxUFwwh0FQXDOHgVBcM8bBUFwwXDBcMoBcMkZcMlBcMEdcMtFcNEdC0lw0gYJcMTdcMKSBgFwyXDiAgZ9cIlwxXDBcMFwzMIBcNICHQUpcMlwzMUBNXDNcMzDAXDOAhsFFXDDBgVwxOFwwpEFcMFwxQcFcMThcMFw4XDBNnoZcMVBcMIdBUFwzh4FQXDPGwVBcMFwwXDKAXDJGXDJQXDBHXDLRXDRHQtFcNIGCXDE3XDCkgYBcMlw4gIGfXCJcMVwwXDBcMzDAXDIxgIdBSlwyXDMxwE1cM1wzMFwwXDIxgIbBRVwwwVwxXDlcMKRBXDBcMUFcMVw5XDBcOFwwU52GXDFAXDCMQUBcM6SBXDBcMcfBQFwzzFwxwVwz5IFcMFwxzIHEXDPkXDFcMVwxXDMwQFwxgMzCR1w15IJcMFwxXDjAgqbGwkVcMFw2Q1NcMORCXDBcMelBXDBcMGrC/VwxMjfGXDFQXDDHgdNcM1wxwlwxOVww5IFcMFwxXDbCRVwwQFwygFwzJEJcMFwxXDFcMlwyMFwwQFwygFwzgUJcMjBcMMBcMlwwXDRdwoJcNIBcMoBcNMGCXDIwXDCdwlwyXDXBwlwyMFwwXDZDU1ww3Vwyg1w1XDbDUFwwXDEyXDNVXDaBg1wzXDDGXDNQXDDHQ9VcN8eD1Vw3XDBcNFwwXDVAXDSAXDWGXDRQXDCHxFVcOYdcNFZcOSRDgFwzXDfDQFwzXDEyXDNBXDYkg1wwXDFcMTKDRFw2JFwzXDFcMVwzMMBcNYBcMTLExFw3JIRcMFwxXDEyXDRFXDgkhFwwXDFcIkRcMFwwXDMwQFw0gFwxMsTEXDckhFwwXDFcMTJERVw4JIRcMFwxXDEyXDRFXDgkhFwwXDFcIkRcMFwwXDMwQFwygFwxMkTWXDckhFwwXDFcMTKEVlw4gVw0XDdcMCSEgFwxTMRWXDjGRFNcMFwxXDVcMjNcMN1cNIVcOWREgFwxKUNcMFwwqkP5XDEyNyZcMIBcMIZcMUBcMIxBQFwzpIFcMFwxzIFAXDPkgVwwXDHiQVwwXDBcMzDAXDEzgMfBQFwzzFwxwVwz5IFcMFwxzIHAXDPkgVwwXDHiQVwwXDBcMzBcMFwxMoDHwUBcM8xcMcFcM+SBXDBcMcyBxFwz5FwxXDFcMVwzMFwwXAqAzMJEXDXkglwwXDHMXDLFXDXkglwwXDHiQlwwXDBcMzCAXDiAzMJGXDVBXDNcN1ww5IKAXDFcOMCCrsyCV1w1RkNXXDCGw09cMMRcM1wwXDDkQoBcMszCV1w1RlwzT1wwhFwzXDBcMORCXDBcMlwzMYDLXDJcMzDAXDSAxsJQXDDMXDLYXDVGXDNPXDDkgoBcMczCxFw15IJcMFwxzMLGXDVBXDNcN1ww5IKAXDHMQsdcNeSCXDBcMcyCx1w1QVwzXDdcMOSCgFwxXDEyQ9hcNYZDT1wwJIOAXDFMg9hcNcBcM1wwXDZkQ4BcMelBXDBcMGpcMvVcMTI3xoFOXDBcMzHAzlwzXDMwwFwzMYDGwVBcMMzB2Fwz5IFcMFwxXDEygtlcM4ZcMlBcMIfCWVw1wYJcMjJcMKSCXDBcMcZcMlBcMMdcMtpcNeRcMoBcMCTCXDBcMFw4QIKyXDhcMFwyslw0XDJcMFwwRkJZXDBHwstcNEyCxFw0ZFwyXDFcMVwzMFwwXDEzgEzDR1w2ZINcMFwxhlwzQFwwjENAXDekg1wwXDHHw0BcN8xcM8FcN+SDXDBcMcyDxFw35FwzXDFcMVwzMMBcOYDMxEdcOeSEXDBcMVwxMsVEXDkkhVwwXDFcMTJcNUVcCiSFXDBcMVwiRVwwXDBcMzDAXDeAXDEyxURcOSSFXDBcMVwxMkVFXAokhVwwXDFcMTJcNUVcCiSFXDBcMVwiRVwwXDBcMzDAXDWAXDEyRVpcOSSFXDBcMVwxMoVWXAqBXDVcN1wwJIWAXDFMhVpcCsBcNYBcNmSFgFwxXDMxgMVcClwzMEBcM4BMxdpcNsFcNVwyN1wwZIWAXDFiXDVcMFwwXDMwXDBcMoBMhdtcNsHFXDI3XDBkhYBcMVw4QIW2RsVFXDCBXDVcMjhcMMZFW1wwncVcNVwxMWRFXDBcMelDXDBcMGpE9VwxMjdpQlwwXDDqXDLyXDEyN0ZCW1wwXDMxQNxcNFwzMMBcMIBGwkVcMIGCXDI4XDBkQlwwXDEmXDCAXDBGwlBcMExcMthcNMZCW1wwZIKAXDFMwsRcNGSCXDBcMYxcMsVcNKSCXDBcMaJCXDBcMFwzMEBcN4CBXDJcN1www1wyXDBcMFwxMsPcXDSAXDNcMFw1JIOAXDFMXDNFXDZkg1wwXDFiQ1wwXDBcMzBAXDKATFwzXVw2ZINcMFwxXDMxXDDJXDZcMzBAXDGAw1wygFwwjMPXXDRcMcRcMjBcMEZcNE9cMFwyOURcNFw4pEOAXDGNgkNcNUxcM0VcNmSDXDBcMWJcM1wwXDBcMzBA+lwxMjfiQlwwXDBcMzBAXDKAXDbDRVwwQUNcMjlcMCRDXDBcMVwzMEBcMYCGwkVcMMGCXDI5XDBcNkNbXDBBw1wyOVww3UKDXDWkQlwwXDEmXDCAXDB4XDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDZlbXB0eVw0XDd0cmFja3NcNFwKcm91dGVsaXN0XDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcNkVycm9yXDAyMDZObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlw0XDEyTWVzc2FnZVR5cGVcNFwxMUJ1dHRvblR5cGVcNFwzT0tcNFw0cnVuXDRcNXNpemVcMTlcMVwwXDBcMFwwXDBcMFwwXDIwSE1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXDRcMTVtaWRpVHJhY2tGb3VuZFwxXDBcNFw1aXRlclw0XDl0b190cmFja1w0XDZpc25pbFw0XDE0dG9fbWlkaV90cmFja1wxXDFcNFw2cHJpbnRcNFwxNmlzIGEgbWlkaSB0cmFja1wwMjA0Tm8gTUlESSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIE1JREkgdHJhY2suXDRcNkNsb3NlXDRcMTFudGhfcGx1Z2luXDE5XDBcMFwwXDBcMFwwXDBcMFw0XAp0b19pbnNlcnRcNFw3cGx1Z2luXDRcNW5hbWVcNFwxMkFycGVnZ2lhdG9yXDIwW1RoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTZXNzaW9uIFBsYXllciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVtZW50IHRyYWNrLlw0XDExTUlESSBTdHJ1bVwyMFxcVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFNlc3Npb24gUGxheWVyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgdHJhY2spLlw0XDlSaXBjaG9yZFwyMFVUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIGEgUmlwY2hvcmQgdHJhY2ssIHBsZWFzZSBzZWxlY3QgYW4gaW5zdHJ1bWVudCB0cmFjay5cNFwyM01JREkgU3RlcCBTZXF1ZW5jZXI4eDhcMjBbVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFN0ZXAgU2VxdWVuY2VyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgdHJhY2suXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcMjVDaG9vc2UgSW5zdHJ1bWVudCBQbHVnaW5cNFw3dmFsdWVzXDRcMTZBQ0UgRmx1aWQgU3ludGhcMTlcMlwwXDBcMFwwXDBcMFwwXDRcOFlvc2hpbWlcMTlcM1wwXDBcMFwwXDBcMFwwXDRcOVN1cmdlIFhUXDE5XDRcMFwwXDBcMFwwXDBcMFw0XDE2U2FtcGx2MSBTYW1wbGVyXDE5XDVcMFwwXDBcMFwwXDBcMFw0XDE3Q29ubmVjdCBSaXBjaG9yZFwxOVw2XDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFw5cmlwY2hvcmRcNFw4bm90IHNldFw0XDExdHJhY2tfbmFtZVw0XDEycHJlc2V0X25hbWVcNFwzZ21cNFw0bmV3XDRcN0FSRE9VUlw0XDdMdWFBUElcNFwxMW5ld19wbHVnaW5cNFw4U2Vzc2lvblw0XDExUGx1Z2luVHlwZVw0XDRMVjJcNFwxXDRcMThZb3UgQ2hvc2UgWW9zaGltaVw0XDE5WW91IENob3NlIFN1cmdlIFhUXDRcNVZTVDNcNFwxOFlvdSBDaG9zZSBTYW1wbHYxXDRcOHNhbXBsdjFcNFw0c2V0XDRcOXRoZV9uYW1lXDRcMjJ1c2VyX2NvbmZpZ19kaXJlY3RvcnlcMTlcOFwwXDBcMFwwXDBcMFwwXDRcMTZyb3V0ZV90ZW1wbGF0ZXNcNFwyL1w0XDE5L1JpcGNob3JkLnRlbXBsYXRlXDRcClJpcGNob3JkIFw0XDI0bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGVcNFwxN1ByZXNlbnRhdGlvbkluZm9cNFwKbWF4X29yZGVyXDRcMjBQbGF5bGlzdERpc3Bvc2l0aW9uXDRcMTJOZXdQbGF5bGlzdFw0XDdvdXRwdXRcNFw1bWlkaVw0XDhjb25uZWN0XDRcMTEvbWlkaV9pbiAxXDRcNG9sZFw0XDE4cmVwbGFjZV9wcm9jZXNzb3JcNFw5c2V0X25hbWVcNFwxNHJvdXRlX2J5X25hbWVcNFwxNnByZXNldF9ieV9sYWJlbFw0XDEybG9hZF9wcmVzZXRcNFw3ZW5naW5lXDRcMl9cNFwydFw0XApnZXRfcG9ydHNcNFw5RGF0YVR5cGVcNFw5UG9ydExpc3RcNFw2aW5wdXRcNFwxM2Nvbm5lY3RlZF90b1w0XDVmaW5kXDRcMTIvbWlkaV9vdXQgMVw0XDEzY29ycmVjdF9uYW1lXDRcNm1hdGNoXDRcMTYoLispL21pZGlfb3V0IDFcNFwxN0NvcnJlY3QgbmFtZSBpcyBcMFw0JE5vIGNvbm5lY3RlZCBNSURJIG91dHB1dCBwb3J0IGZvdW5kXDRcMTRudGhfcHJvY2Vzc29yXDRcMTNkaXNwbGF5X25hbWVcNFwxOVJpcGNob3JkIG5vdCBmb3VuZFw0XDhUcmFjayAnXDRcMTInIG5vdCBmb3VuZFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzY3JpcHRzWzJdWyJuIl0gPSAiSW5zdHJ1bWVudCAtIENoYW5nZSBJbnN0cnVtZW50IFBsdWdpbiIgICBzY3JpcHRzWzNdID0ge30gc2NyaXB0c1szXVsicyJdID0gImFyZG91ciB7XAogW1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXAogbmFtZSA9IFwiRHJ1bW1lciAtIENoYW5nZSBEcnVtIFBsdWdpbiBvbiB0cmFjay9hZGQgYW5kIHJlbW92ZSBkcnVtIG5vdGVzXCIsXAogYXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApkZXNjcmlwdGlvbiA9IFtbXApSZXBsYWNlIERydW0gUGx1Z2luIG9uIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpZiBhIHRyYWNrIGlzIHNlbGVjdGVkIG9yIGFkZC9yZW1vdmVzIGRydW0gbm90ZXMgaWYgYSBtaWRpIHJlZ2lvbiBpcyBzZWxlY3RlZFwKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApcClwKbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKbG9jYWwgY291bnQgPSAwXApsb2NhbCBpc19taWRpX3JlZ2lvbiA9IGZhbHNlICAtLSBmaXhlZCB2YXJpYWJsZSBuYW1lXApcCmZvciByIGluIHNlbC5yZWdpb25zOnJlZ2lvbmxpc3QoKTppdGVyKCkgZG9cCiAgICBjb3VudCA9IGNvdW50ICsgMVwKICAgIGlmIHI6dG9fbWlkaXJlZ2lvbigpOmlzbmlsKCkgdGhlblwKICAgICBpc19taWRpX3JlZ2lvbiA9IGZhbHNlXAogICAgICAgIC0tcmV0dXJuXAogICAgZWxzZVwKICAgICAgICBpc19taWRpX3JlZ2lvbiA9IHRydWUgIC0tIGNvcnJlY3RlZCB2YXJpYWJsZSBuYW1lXAogICAgZW5kXAplbmRcClwKaWYgY291bnQgPiAxIHRoZW5cCiAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiRXN0aW1hdGUgVGVtcG9cIiwgXCJQbGVhc2Ugc2VsZWN0IGV4YWN0bHkgMSBNSURJIHJlZ2lvblwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgcHJpbnQobWQ6cnVuKCkpXAogICAgbWQgPSBuaWxcCiAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgcmV0dXJuXAplbmRcClwKaWYgaXNfbWlkaV9yZWdpb24gPT0gdHJ1ZSB0aGVuICAtLSBjb3JyZWN0IGNvbXBhcmlzb25cCiAgICBFZGl0b3I6YWNjZXNzX2FjdGlvbihcIkx1YUFjdGlvblwiLCBcInNjcmlwdC0xNFwiKVwKICAgIHJldHVybiAgLS0gc3RvcCBmdXJ0aGVyIHByb2Nlc3NpbmdcCmVsc2VcClwKXApcCiAgLS0gQ2hlY2sgaWYgbm8gdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsOmVtcHR5KCkgb3Igc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTplbXB0eSgpIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gdHJhY2sgb3IgbWlkaSBkcnVtIHJlZ2lvbiBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIG9yIG1pZGkgZHJ1bSByZWdpb24uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKXAogIC0tIENoZWNrIGlmIG1vcmUgdGhhbiBvbmUgdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTpzaXplKCkgPiAxIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXApcClwKICAgICBtaWRpVHJhY2tGb3VuZCA9IGZhbHNlIC0tIEZsYWcgdG8gY2hlY2sgaWYgYW55IE1JREkgdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fbWlkaV90cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgIG1pZGlUcmFja0ZvdW5kID0gdHJ1ZVwKICAgICAgIHByaW50KFwiaXMgYSBtaWRpIHRyYWNrXCIpXAogICAgICBlbmRcCiAgICBlbmRcClwKICAgICAgIGlmICBtaWRpVHJhY2tGb3VuZCA9PSBmYWxzZSB0aGVuXAogICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gTUlESSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIE1JREkgdHJhY2suXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cCiAgICBlbmRcClwKICAgICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXApcCiAgICBsb2NhbCBwcm9jID0gcjpudGhfcGx1Z2luKDApIC0tIGZvciBldmVyeSBwbHVnaW5cCiAgICBpZiBwcm9jOmlzbmlsKCkgdGhlbiBicmVhayBlbmRcCiAgICBsb2NhbCBwaSA9IHByb2M6dG9faW5zZXJ0KClcCiAgICBsb2NhbCBwbHVnaW5fbmFtZSA9IHBpOnBsdWdpbigwKTpuYW1lKClcCiAgICBpZiBwbHVnaW5fbmFtZSA9PSBcIk1JREkgU3RlcCBTZXF1ZW5jZXI4eDhcIiB0aGVuXApcCiAgICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFN0ZXAgU2VxdWVuY2VyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGEgZHJ1bSB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKXAogICAgZW5kIGVuZFwKXApcCiAgICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKXAogICAgbG9jYWwgcHJvYyA9IHI6bnRoX3BsdWdpbigwKSAtLSBmb3IgZXZlcnkgcGx1Z2luXAogICAgaWYgcHJvYzppc25pbCgpIHRoZW4gYnJlYWsgZW5kXAogICAgbG9jYWwgcGkgPSBwcm9jOnRvX2luc2VydCgpXAogICAgbG9jYWwgcGx1Z2luX25hbWUgPSBwaTpwbHVnaW4oMCk6bmFtZSgpXAogICAgaWYgcGx1Z2luX25hbWUgPT0gXCJBcnBlZ2dpYXRvclwiIHRoZW5cClwKICAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2ssIHBsZWFzZSBzZWxlY3QgYSBkcnVtIHRyYWNrLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgICAgcmV0dXJuXApcCiAgICBlbmRcClwKICAgICAgIGxvY2FsIHByb2MyID0gcjpudGhfcGx1Z2luKDEpIC0tIGZvciBldmVyeSBwbHVnaW5cCiAgICBpZiBwcm9jMjppc25pbCgpIHRoZW4gYnJlYWsgZW5kXAogICAgbG9jYWwgcGkyID0gcHJvYzI6dG9faW5zZXJ0KClcCiAgICBsb2NhbCBwbHVnaW5fbmFtZTIgPSBwaTI6cGx1Z2luKDEpOm5hbWUoKVwKICAgIGlmIHBsdWdpbl9uYW1lMiA9PSBcIk1JREkgU3RydW1cIiB0aGVuXApcClwKXAogICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFNlc3Npb24gUGxheWVyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGEgZHJ1bSB0cmFjaykuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cClwKZW5kXApcCiAgICBlbmRcClwKIGVuZFwKXApcClwKXApcClwKXApsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAge1wKICAgdHlwZSA9IFwiZHJvcGRvd25cIiwga2V5ID0gXCJkcm9wZG93blwiLCB0aXRsZSA9IFwiQ2hvb3NlIERydW0gUGx1Z2luXCIsIHZhbHVlcyA9XAogICB7XAogICAgW1wiQ2hvb3NlIERydW0gUGx1Z2luXCJdID0gMSxcCiAgICBbXCJSZWQgWmVwcGVsaW4gKEFWTCBEcnVta2l0cylcIl0gPSAzLFwKICAgIFtcIkJsYWNrIFBlYXJsIChBVkwgRHJ1bWtpdHMpXCJdID0gNCxcCiAgICAgICAgW1wiQmxvbmRlIEJvcChBVkwgRHJ1bWtpdHMpXCJdID0gNixcCiAgICAgICAgW1wiODA4LzgwOSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDcsXAogICAgICAgICBbXCJTdGFuZGFyZCBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDgsXAogICAgICAgICAgW1wiU3RhbmRhcmQgMiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDksXAogICAgICAgICAgIFtcIkVsZWN0cm9uaWMgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSAxMCxcCiAgICAgICAgICAgICAgICAgIFtcIlJvb20gRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSAxMSxcCiAgICAgICAgICAgICAgICAgICAgICBbXCJQb3dlciBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDEyLFwKICAgICAgICAgICAgICAgICAgICAgICBbXCJEYW5jZSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDEzLFwKXDlcOVw5XDlcOVw5W1wiSmF6eiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDE0LFwKXDlcOVw5XDlcOVw5W1wiU29uaU5la28gKEFDRSBGbHVpZCBTeW50aClcIl0gPTE1LFwKXDlcOVw5XDlcOVtcIk5JTiBEcnVta2l0IChBQ0UgRmx1aWQgU3ludGgpXCJdID0xNixcClw5XDlcOVw5XDlcOSBbXCJBbGVzaXMgRHJ1bWtpdHMoVXNlIEMxIHRvIGNoYW5nZSBraXRzKSAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9MTcsXApcOVw5XDlcOVw5XDlbXCJCcnVzaCBEcnVtIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gMTgsXApcOVw5XDlcOVw5XDlbXCJPcmNoZXN0cmFsIFBlcmMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSAxOSxcClw5XDlcOVw5XDlcOVtcIkJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb24gKEFWTCBEcnVtaXRzKVwiXSA9IDIwLFwKXDlcOVw5XDlcOVw5W1wiQmxvbmRlIEJvcCBIb3RSb2QgRHJ1bWtpdCAoQVZMIERydW1raXRzKVwiXSA9IDIxLFwKXDlcOVw5XDlcOVw5W1wiQ29ubmVjdCBTdGVwIFNlcXVlbmNlclwiXSA9IDIyLFwKXDlcOVw5XDlcOVw5W1wiTXVsZGpvcmRcIl0gPSAyMyxcClw5XDlcOVw5XDlcOVtcIkhvdXNlS2l0XCJdID0gMjQsXApcOVw5XDlcOVw5XDlbXCJQb3dlcktpdDJcIl0gPSAyNSxcClw5XDlcOVw5XDlcOVtcIlN0YW5kYXJkIDNcIl0gPSAyNixcClw5XDlcOVw5XDlcOVtcIkFuYWxvZ1Q5S2l0XCJdID0gMjcsXApcOVw5XDlcOVw5XDlbXCJBbmFsb2dUOEtpdFwiXSA9IDI4XApcCiAgIH0sXAogICBkZWZhdWx0ID0gXCJDaG9vc2UgRHJ1bSBQbHVnaW5cIlwKICB9XAogfVwKXAogbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBEcnVtIFBsdWdpblwiLCBkaWFsb2dfb3B0aW9ucylcCiBsb2NhbCBydiA9IG9kOnJ1bigpXApcCiBsb2NhbCBwbHVnaW5fbmFtZSA9IG5pbFwKXAogc3RlcCA9IFwibm90IHNldFwiXApcClwKXApcClwKXAogXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cClw5XDlwcmludChcIllvdSBDaG9zZSBSZWQgWmVwcGVsaW4gRHJ1bWtpdFwiKVwKXDlcOXBsdWdpbl9uYW1lID0gXCJSZWQgWmVwcGVsaW4gRHJ1bWtpdFwiXApcOVw5dHJhY2tfbmFtZSA9IHBsdWdpbl9uYW1lXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gNCB0aGVuXApcOVw5cHJpbnQoXCJZb3UgQ2hvc2UgQmxhY2sgUGVhcmwgRHJ1bWtpdFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkJsYWNrIFBlYXJsIERydW1raXRcIlwKXDlcOXRyYWNrX25hbWUgPSBwbHVnaW5fbmFtZVwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXDkgIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gNiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgQ2hvc2UgQmxvbmRlIEJvcCBEcnVta2l0XCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQmxvbmRlIEJvcCBEcnVta2l0XCJcClw5XDl0cmFja19uYW1lID0gcGx1Z2luX25hbWVcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcOSAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA3IHRoZW5cClw5XDlwcmludChcIjgwOC84MDlcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIjgwOC04MDkgRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJlaWdodFwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA4IHRoZW5cClw5XDlwcmludChcIlN0YW5kYXJkIERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJTdGFuZGFyZCBEcnVtc1wiXApcOVw5cHJlc2V0X25hbWUgPSBcIlN0YW5kYXJkIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA5IHRoZW5cClw5XDlwcmludChcIlN0YW5kYXJkIDIgRHJ1bXNcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlN0YW5kYXJkIDIgRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJTdGFuZGFyZCAyIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxMCB0aGVuXApcOVw5cHJpbnQoXCJFbGVjdHJvbmljIERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJFbGVjdHJvbmljIERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiRWxlY3Ryb25pYyBEcnVtc1wiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDExIHRoZW5cClw5XDlwcmludChcIlJvb20gRHJ1bXNcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlJvb20gRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJSb29tIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcOSAgIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMTIgdGhlblwKXDlcOXByaW50KFwiUG93ZXIgRHJ1bXNcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlBvd2VyIERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiUG93ZXIgRHJ1bXNcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxMyB0aGVuXApcOVw5cHJpbnQoXCJEYW5jZSBEcnVtc1wiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiRGFuY2UgRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJkYW5jZVwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5IFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxNCB0aGVuXApcOVw5cHJpbnQoXCJKYXp6IERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJKYXp6IERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiSmF6eiBEcnVtc1wiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5ICBcOSAgIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMTUgdGhlblwKXDlcOXByaW50KFwiU29uaU5la29cIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlNvbmlOZWtvIERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwic29uaVwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKXApcClwKXDkgIFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxNiB0aGVuXApcOVw5cHJpbnQoXCJOSU4gRHJ1bWtpdFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiTklOIERydW1raXRcIlwKXDlcOXByZXNldF9uYW1lID0gXCJuaW5cIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcOSBcOSAgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDE3IHRoZW5cClw5XDlwcmludChcIkFsZXNpcyBEcnVta2l0c1wiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiQWxlc2lzIERydW1raXRzXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiYWxcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXApcClwKXDkgXDkgXDkgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDE4IHRoZW5cClw5XDlwcmludChcIkJydXNoIERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJCcnVzaCBEcnVtc1wiXApcOVw5cHJlc2V0X25hbWUgPSBcIkJydXNoIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXDkgXDkgXDkgXDkgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDE5IHRoZW5cClw5XDlwcmludChcIkFDRSBGbHVpZCBTeW50aFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiT3JjaGVzdHJhbCBQZXJjXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiT3JjaGVzdHJhbCBQZXJjXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXDkgXDkgXDkgXDkgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDIwIHRoZW5cClw5XDlwcmludChcIkJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb25cIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJCdXNrbWFuJ3MgSG9saWRheSBQZXJjdXNzaW9uXCJcClw5XDl0cmFja19uYW1lID0gXCJCdXNrbWFuJ3MgSG9saWRheSBQZXJjdXNzaW9uXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiQnVza21hbidzIEhvbGlkYXkgUGVyY3Vzc2lvblwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5IFw5IFw5IFw5IFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyMSB0aGVuXApcOVw5cHJpbnQoXCJCbG9uZGUgQm9wIEhvdFJvZCBEcnVta2l0XCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQmxvbmRlIEJvcCBIb3RSb2QgRHJ1bWtpdFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiQmxvbmRlIEJvcCBIb3RSb2QgRHJ1bWtpdFwiXApcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXDkgIFw5IFw5IFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyMiB0aGVuXApcOVw5cHJpbnQoXCJTdGVwIFNlcXVlbmNlclwiKVwKXDlcOVw5ICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgdGhlX25hbWUgPSByOm5hbWUoKVwKICAgIHByaW50KHRoZV9uYW1lKVwKICAgIHN0ZXAgPSBcInNldFwiXAogIGVuZFwKICBcOS0tIEZldGNoIHRoZSB1c2VyIGNvbmZpZyBkaXJlY3RvcnlcCmxvY2FsIHVzZXJfY29uZmlnX2RpcmVjdG9yeSA9IEFSRE9VUi51c2VyX2NvbmZpZ19kaXJlY3RvcnkoOCkgLS0gZ2V0IHRoZSBjb25maWcgZGlyZWN0b3J5ICh1c2luZyB2ZXJzaW9uIDgpXApcCnByaW50KHVzZXJfY29uZmlnX2RpcmVjdG9yeSlcClwKbG9jYWwgc3ViZGlyID0gXCJyb3V0ZV90ZW1wbGF0ZXNcIlwKXAotLSBDb25jYXRlbmF0ZSB0aGUgY29uZmlnIGRpcmVjdG9yeSB3aXRoIHRoZSBzdWJkaXJlY3RvcnlcCmxvY2FsIGZ1bGxfcGF0aCA9IHVzZXJfY29uZmlnX2RpcmVjdG9yeSAuLiBcIi9cIiAuLiBzdWJkaXJcClw5XDkgbG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9TdGVwIFNlcXVlbmNlci50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RlcCBTZXF1ZW5jZXIgXCIuLnRoZV9uYW1lXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDlcOS0tbG9jYWwgbnNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcClw5XDlmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKXAogICAgaWYgbm90IHI6dG9fdHJhY2soKTppc25pbCgpIGFuZCBub3Qgcjp0b190cmFjaygpOnRvX21pZGlfdHJhY2soKTppc25pbCgpIHRoZW5cCiAgICAgIGxvY2FsIG91dHB1dG1pZGlwb3J0ID0gcjpvdXRwdXQoKTptaWRpKDApXAogICAgICBvdXRwdXRtaWRpcG9ydDpjb25uZWN0KHRoZV9uYW1lIC4uIFwiL21pZGlfaW4gMVwiKVwKICAgIGVuZFwKICBlbmRcClw5XDlyZXR1cm5cClwKXDkgZW5kXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyMyB0aGVuXApcOVw5cHJpbnQoXCJcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIk11bGRqb3JkXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwibWpcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcOSBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDI0IHRoZW5cClw5XDlwcmludChcIlwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiSG91c2VLaXRcIlwKXDlcOXByZXNldF9uYW1lID0gXCJob3VzZVwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5IFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMjUgdGhlblwKXDlcOXByaW50KFwiXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJQb3dlcktpdDJcIlwKXDlcOXByZXNldF9uYW1lID0gXCJwb3dlcmtpdDJcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcOSBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDI2IHRoZW5cClw5XDlwcmludChcIlwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQzS2l0XCJcClw5XDlwcmVzZXRfbmFtZSA9IFwic3RhbmRhcmQzXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyNyB0aGVuXApcOVw5cHJpbnQoXCJcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIkFuYWxvZ1Q5S2l0XCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiYXQ5XCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClw5IGlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDI4IHRoZW5cClw5XDlwcmludChcIlwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiQW5hbG9nVDhLaXRcIlwKXDlcOXByZXNldF9uYW1lID0gXCJhdDhcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXApcClwKXApcClwKXApcCmxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKICAgICAgcjpyZXBsYWNlX3Byb2Nlc3NvciAob2xkLCBuZXcsIG5pbClcCiAgICAgIHI6c2V0X25hbWUodHJhY2tfbmFtZSwgbmlsKVwKXAogICAgICBpZiBwbHVnaW5fbmFtZSA9PSBcIkFDRSBGbHVpZCBTeW50aFwiIHRoZW5cCiAgICAgICAgbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZSh0cmFja19uYW1lKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXAogICAgICAgIC0tIEdldCB0aGUgcHJlc2V0XAogICAgICAgIGxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKHByZXNldF9uYW1lKVwKICAgICAgICAtLSBMb2FkIHRoZSBwcmVzZXRcCiAgICAgICAgcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXAogICAgICBlbmRcClwKICAgICAgaWYgcGx1Z2luX25hbWUgPT0gXCJkcnVtbGFib29oXCIgdGhlblwKICAgICAgICBsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKHRyYWNrX25hbWUpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcCiAgICAgICAgLS0gR2V0IHRoZSBwcmVzZXRcCiAgICAgICAgbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwocHJlc2V0X25hbWUpXAogICAgICAgIC0tIExvYWQgdGhlIHByZXNldFwKICAgICAgICBwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcCiAgICAgIGVuZFwKICAgIGVuZFwKICBlbmRcCmVuZFwKXAotLSBDaGVjayBmb3IgY29ubmVjdGVkIFN0ZXAgU2VxdWVuY2VyIGFuZCByZW5hbWUgaXRcCmxvY2FsIGEgPSBTZXNzaW9uOmVuZ2luZSgpXApfLCB0ID0gYTpnZXRfcG9ydHMoQVJET1VSLkRhdGFUeXBlKFwibWlkaVwiKSwgQVJET1VSLlBvcnRMaXN0KCkpXApcCmxvY2FsIHBvcnRfbmFtZSA9IG5pbFwKZm9yIHAgaW4gdFsyXTppdGVyKCkgZG9cCiAgICBsb2NhbCBuYW1lID0gcDpuYW1lKClcCiAgICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgICAgbG9jYWwgY3VycmVudF90cmFjayA9IHI6bmFtZSgpXAogICAgICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19taWRpX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICAgICAgICBsb2NhbCBpbnB1dG1pZGlwb3J0ID0gcjppbnB1dCgpOm1pZGkoMClcCiAgICAgICAgICAgIGlmIGlucHV0bWlkaXBvcnQ6Y29ubmVjdGVkX3RvKG5hbWUpID09IHRydWUgdGhlblwKICAgICAgICAgICAgICAgIGlmIG5hbWU6ZmluZChcIi9taWRpX291dCAxXCIpIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgY29ycmVjdF9uYW1lID0gbmFtZTptYXRjaChcIiguKykvbWlkaV9vdXQgMVwiKVwKICAgICAgICAgICAgICAgICAgICBwcmludChcIkZvdW5kIGNvbm5lY3RlZCBzZXF1ZW5jZXI6IFwiIC4uIGNvcnJlY3RfbmFtZSlcClwKICAgICAgICAgICAgICAgICAgICAtLSBUcnkgdG8gcmVuYW1lIHRoZSBjb25uZWN0ZWQgc2VxdWVuY2VyXAogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRyYWNrID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKGNvcnJlY3RfbmFtZSk6dG9fdHJhY2soKVwKICAgICAgICAgICAgICAgICAgICBpZiBub3QgdHJhY2s6aXNuaWwoKSB0aGVuXAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBpID0gMFwKICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0XAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcHJvYyA9IHRyYWNrOm50aF9wcm9jZXNzb3IoaSlcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgcHJvYzppc25pbCgpIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcHJvY19uYW1lID0gcHJvYzpkaXNwbGF5X25hbWUoKVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBwcm9jX25hbWUgPT0gXCJNSURJIFN0ZXAgU2VxdWVuY2VyOHg4XCIgdGhlblwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2s6c2V0X25hbWUoXCJTdGVwIFNlcXVlbmNlciBcIiAuLiB0cmFja19uYW1lKVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoXCJSZW5hbWVkIHNlcXVlbmNlciB0bzogU3RlcCBTZXF1ZW5jZXIgXCIgLi4gdHJhY2tfbmFtZSlcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkgKyAxXAogICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCBwcm9jOmlzbmlsKClcCiAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXAogICAgZW5kXAplbmRcClwKLS0gSGFuZGxlIHNwZWNpYWwgY2FzZSBmb3Igc3RlcD09XCJzZXRcIlwKaWYgc3RlcCA9PSBcInNldFwiIHRoZW5cCiAgICAtLSAuLi4gZXhpc3Rpbmcgc3RlcD09XCJzZXRcIiBzcGVjaWZpYyBjb2RlIC4uLlwKZW5kXAplbmQgZW5kXApcClwKIiAgc2NyaXB0c1szXVsiYSJdID0ge30gc2NyaXB0c1szXVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvZHJ1bS5sdWEiICAgc2NyaXB0c1szXVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzNdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwXDI5XDJcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwXDI5XDJcMFwwXDFcMVwzMVNcNFwwXDBGXDBAXDBMQMBcMGSAXDBcMYGAXDBcMMNcMFwwXDBcN8HAXDBcMTJcMUFcMiSBXDBcMVwxMkFBXDIkXDFcMVwxXDMwQFwygI2AQVwxXDEywsFcMySCXDBcMVwxMlwyQlw0JIJcMFwxXCJcMlwwXDBcMzBAXDCAw1wwXDBcMFwzMFwwXDCAw1wwgFwwKUFcMFwwqsH8XDEyNyCAXDCDXDMwgFw0gFw2QUJcMFw3gUJcMkHBXDJcMIFcMVwzXDDGQUJcMMdBw1wzx4HDXDNcNkJCXDBcN8JDXDRcN1wyRFw0JIGAXDJGQURcMIyBRFwypFwxXDBcMWRBXDBcMFw0XDFcMFwwRsFEXDBkQYBcMCZcMIBcMFwzMVwwxVwxXDMwgFwxgFw2XDFAXDBcMTJBRVwygYFcNVwwwcFcNVwwJEFcMFwyJlwwgFwwXDMwwDCAXDEyXDHGXDAkgVwwXDFcIkFcMFwwXDMwgFwxgFw3QcZcMFwxMoFGXDIkgVwwXDFcMTJcMUZcMiSBXDBcMVwiXDFcMFwwXDMwQFwzgFw2QUJcMFw3gUJcMkHBXDZcMIFcMVw3XDDGQUJcMMdBw1wzx8HGXDNcNkJCXDBcN8JDXDRcN0JHXDQkgYBcMlwxMoFEXDIkQVwwXDEmXDCAXDBcN0HGXDBcMTKBRlwyJIFcMFwxXDEygUdcMiSBXDBcMSBcMFwxg1wzMEBcM4BcNkFCXDBcN4FCXDJBwVw2XDCBwVw3XDDGQUJcMMdBw1wzx8HGXDNcNkJCXDBcN8JDXDRcN0JHXDQkgYBcMlwxMoFEXDIkQVwwXDEmXDCAXDBcOEBIkFw3QcZcMFwxMoFGXDIkgVwwXDFcMTJBQVwyJFwxXDFcMVwzMEBcNIBcMTKCyFwzJIJcMFwxXDEyXDJCXDQkglwwXDFcIkJcMFwwXDMwwFwygFwxMoLIXDMkglwwXDFcMTLCSFw0JIJcMFwxXDEyXDJCXDQkglwwXDFcIkJcMFwwXDMwwFwwgFw4XDBFkFw2QkRcMEFcMlw5XDAkQlwwXDEpQVwwXDCqwfpcMTI3XDZcMUhcMFwzMUBIXDJcMzBAXDOAXDZBQlwwXDeBQlwyQcFcNlwwgUFcOVwwxkFCXDDHQcNcM8fBxlwzXDZCQlwwXDfCQ1w0XDdcMkRcNCSBgFwyXDEygURcMiRBXDBcMSZcMIBcMFw3QcZcMFwxMoFGXDIkgVwwXDFcMTJBQVwyJFwxXDFcMVwzMEBcN4BcMTKCyVwzgYJcMFwwJIKAXDFMXDJCXDRkglwwXDFiQlwwXDBcMzBcMFw2gEzCSVw0ZIJcMFwxjFwyylw0XDGDXDBcMKSCgFwxjEJKXDWkglwwXDFcMzGASlw1XDMwQFwzgMZCQlwwx4LCXDVcMcNcNlwwQcNcClwwhkNCXDCHQ0NcN4fDRlw3xkNCXDDHw8NcN8dcM8RcN+SCgFwyzILEXDXkQlwwXDEmXDCAXDApQVwwXDCqwfdcMTI3XDdBxlwwXDEygUZcMiSBXDBcMVwxMkFBXDIkXDFcMVwxXDMwwFwxNIBcMTKCyVwzgYJcMFwwJIKAXDFMXDJCXDRkglwwXDFiQlwwXDBcMzCAXDEzgEzCSVw0ZIJcMFwxjFwyylw0XDGDXDBcMKSCgFwxjEJKXDWkglwwXDFcMzFcMEtcNVwzMEBcM4DGQkJcMMeCwlw1XDHDXDZcMEFDXDExXDCGQ0JcMIdDQ1w3h8NGXDfGQ0JcMMfDw1w3x1wzxFw35IKAXDLMgsRcNeRCXDBcMSZcMIBcMMyCyVwzQYNcMVww5IKAXDFcMTJcM8JcNSSDXDBcMVwiQ1wwXDBcMzBcMFw2gFwxMsPJXDUkg1wwXDFMXDNKXDbBg1wxXDBkg4BcMUxDylw2ZINcMFwxXDMxgMtcNlwzMEBcM4CGQ0JcMIeDQlw3wcNcNlwwXDHEXDExXDBGREJcMEdEw1w4R8TGXDiGREJcMIfEQ1w5h1w0RFw5pIOAXDKMg0RcN6RDXDBcMSZcMIBcMClBXDBcMKpB8FwxMjdcMTFcMYBcMEtBXDFcMEpBTJhKQUyZSlwxzZmLQVw1XDCKgUGaisFNm4pBTpyKwU6dikFPnorBT5+KQVCgisFQoYpBUaKKwVGjikFSpIrBUqWKQVOmisFTp4pBVKiKwVSpikFVqorBVauKQVasisFWrYpBV66KwVevikFYsIrBWLGKQVmyisFZs0qBgZpKXDFNtCtBgFwwRkFCXDBHQdpcMoFcMVwxM1wwwFwxXDBcMmSBgFwxjIHEXDKkgVwwXDHEXDFcMFwwXDjAWrWiXDFcMFwwXDMwgFw0gFw3QkxcM1wzMcBNXDRcMzDAXDOAXDZCRFwwQVwyXDI3XDAkQlwwXDHBQVwyN1wwXDjAXDG3XDZcMlxcXDBcN0JcXFw0XDeCXFxcNEbCXFxcMIBcMoBcM8ZcMlxcXDDHXDLdXDXHQt1cNVwxg1wyOVwwJIKAXDJcOFwwgreiXDFcMFwwXDMwgFw0gFw3QkxcM1wzMUBOXDRcMzDAXDOAXDZCRFwwQcJcMjlcMCRCXDBcMcFcMVwzMFwwXDjAXDG3XDZcMlxcXDBcN0JcXFw0XDeCXFxcNEbCXFxcMIBcMoBcM8ZcMlxcXDDHXDLdXDXHQt1cNVwxg1wyOVwwJIKAXDJcOFwwgreiXDFcMFwwXDMwgFw0gFw3QkxcM1wzMcBOXDRcMzDAXDOAXDZCRFwwQUJcMzBcMCRCXDBcMcGBXDMwXDBcOMBcMbdcNlwyXFxcMFw3QlxcXDRcN4JcXFw0RsJcXFwwgFwygFwzxlwyXFxcMMdcMt1cNcdC3Vw1XDGDXDI5XDAkgoBcMlw4XDCCt6JcMVwwXDBcMzDAXDSAXDdCTFwzXDMxQE9cNFwzMFwwXDSAXDZCRFwwQcJcMzBcMCRCXDBcMcFcMVwzMVwwXDhAX7dcOMBfv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAT1w0XDMwXDBcNIBcNkJEXDBBXDIgXDAkQlwwXDHBXDFcMzFcMFw4XDBgt1w4XDBgv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAUFw0XDMwXDBcNIBcNkJEXDBBQiBcMCRCXDBcMcFcMVwzMVwwXDhAYLdcOEBgv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAUFw0XDMwXDBcNIBcNkJEXDBBgiBcMCRCXDBcMcFcMVwzMVwwXDiAYLdcOIBgv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAUVw0XDMwXDBcNIBcNkJEXDBBwiBcMCRCXDBcMcFcMVwzMVwwXDjAYLdcOMBgv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAUVw0XDMwXDBcNIBcNkJEXDBBXDIhXDAkQlwwXDHBXDFcMzFcMFw4XDBht1w4XDBhv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAUlw0XDMwXDBcNIBcNkJEXDBBQiFcMCRCXDBcMcFcMVwzMVwwXDhAYbdcOIBhv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAUlw0XDMwXDBcNIBcNkJEXDBBwiFcMCRCXDBcMcFcMVwzMVwwXDjAYbdcOMBhv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAU1w0XDMwXDBcNIBcNkJEXDBBXDJcIlwwJEJcMFwxwVwxXDMxXDBcOEBit1w4gGK/XDZcMlxcXDBcN0JcXFw0XDeCXFxcNEbCXFxcMIBcMoBcM8ZcMlxcXDDHXDLdXDXHQt1cNVwxg1wyOVwwJIKAXDJcOFwwgreiXDFcMFwwXDMwwFw0gFw3QkxcM1wzMcBTXDRcMzBcMFw0gFw2QkRcMEHCXCJcMCRCXDBcMcFcMVwzMVwwXDjAYrdcOFwwY79cNlwyXFxcMFw3QlxcXDRcN4JcXFw0RsJcXFwwgFwygFwzxlwyXFxcMMdcMt1cNcdC3Vw1XDGDXDI5XDAkgoBcMlw4XDCCt6JcMVwwXDBcMzDAXDSAXDdCTFwzXDMxQFRcNFwzMFwwXDSAXDZCRFwwQUIjXDAkQlwwXDHBXDFcMzFcMFw4QGO3XDiAY79cNlwyXFxcMFw3QlxcXDRcN4JcXFw0RsJcXFwwgFwygFwzxlwyXFxcMMdcMt1cNcdC3Vw1XDGDXDI5XDAkgoBcMlw4XDCCt6JcMVwwXDBcMzDAXDSAXDdCTFwzXDMxwFRcNFwzMFwwXDSAXDZCRFwwQcIjXDAkQlwwXDHBXDFcMzFcMFw4wGO3XDjAY79cNlwyXFxcMFw3QlxcXDRcN4JcXFw0RsJcXFwwgFwygFwzxlwyXFxcMMdcMt1cNcdC3Vw1XDGDXDI5XDAkgoBcMlw4XDCCt6JcMVwwXDBcMzDAXDSAXDdCTFwzXDMxQFVcNFwzMFwwXDSAXDZCRFwwQVwyXDMxXDAkQlwwXDHBXDFcMzFcMFw4XDBkt1w4XDBkv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAVVw0XDMwXDBcNIBcNkJEXDBBQiRcMCRCXDBcMcFBJFwwXDhAZLdcOEBkv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMIBcNIBcN0JMXDNcMzFAVlw0XDMwwFwzgFw2QkRcMEGCJFwwJEJcMFwxwYEkXDBcOIBkt1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMIBcMjGAXDdCTFwzXDMxwFZcNFwzMMBcMjCAXDZCRFwwQcIkXDAkQlwwXDFcNlwyQFwwXDEyQkBcNCSCXDBcMUdCRlw0TILGXDRkglwwXDFMQsFcNGRcMlwxXDFcMzCAXDGATENKXDZkg1wwXDFcOEBcM8pGQ0RcMIZcM2VcMGRDXDBcMVw4QGW1aUJcMFww6oL9XDEyN0ZcMlxcXDBHguVcNIHCXDE1XDBkglwwXDGGQkRcMMBcMoBcNKRCXDBcMYHCJVwwwFwygFw0XDFcMyZcMEBcM1wwXDXdQoNcNVwwXDOAXDVBQyZcMFwyOUNcM1w2QYMmXDCGXDNlXDBdg4NcNobDXFxcMIzDZlw3XDGEXDFcMEZcNFxcXDBHXDTnXDhHROdcOIBcNFwwXDbAXDSAXDZcNlw1XFxcMFw3hWdcClw3xWdcCqRDgFwzh0NGXDSMg0ZcN6SDXDBcMYxDQVw3pFwzXDFcMVwzMMBcNYCMhMhcOKSEXDBcMYxcNEJcOaSEXDBcMaJEXDBcMFwzMEBcNICMhMhcOKSEXDBcMYzESFw5pIRcMFwxjFw0Qlw5pIRcMFwxokRcMFwwXDMwQFwygIxcNOhcOKSEXDBcMYxEaFw5XDGFXDBcMKSEgFwxzIRoXDlGXDVlXDCBxShcMF2FhVwK5ESAXDGpQ1wwXDAqRPlcMTI3JlwwgFwwolwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAV1w0XDMwXDBcNIBcNkJEXDBBglwyOVwwJEJcMFwxwVwxXDMxXDBcOFwwV7dcOFwwab9cNlwyXFxcMFw3QlxcXDRcN4JcXFw0RsJcXFwwgFwygFwzxlwyXFxcMMdcMt1cNcdC3Vw1XDGDXDI5XDAkgoBcMlw4XDCCt6JcMVwwXDBcMzDAXDSAXDdCTFwzXDMxwFdcNFwzMFwwXDSAXDZCRFwwQYJcMjlcMCRCXDBcMcFcMVwzMVwwXDiAV7dcOEBpv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAWFw0XDMwXDBcNIBcNkJEXDBBglwyOVwwJEJcMFwxwVwxXDMxXDBcOFwwWLdcOIBpv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAWFw0XDMwXDBcNIBcNkJEXDBBglwyOVwwJEJcMFwxwVwxXDMxXDBcOMBpt1w4XDBqv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzFAWVw0XDMwXDBcNIBcNkJEXDBBglwyOVwwJEJcMFwxwVwxXDMxXDBcOFwwWbdcOEBqv1w2XDJcXFwwXDdCXFxcNFw3glxcXDRGwlxcXDCAXDKAXDPGXDJcXFwwx1wy3Vw1x0LdXDVcMYNcMjlcMCSCgFwyXDhcMIK3olwxXDBcMFwzMMBcNIBcN0JMXDNcMzHAWVw0XDMwXDBcNIBcNkJEXDBBglwyOVwwJEJcMFwxwVwxXDMxXDBcOIBZt1w4gGq/XDZcMlxcXDBcN0JcXFw0XDeCXFxcNEbCXFxcMIBcMoBcM8ZcMlxcXDDHXDLdXDXHQt1cNVwxg1wyOVwwJIKAXDJcOFwwgrdcNlwyQFwwXDEyQkBcNCSCXDBcMUxcMkZcNGSCXDBcMWJCXDBcMFwzMEBcMTmAR0JGXDRMgsZcNGSCXDBcMUxcMsZcNGSCXDBcMWJCXDBcMFwzMIBcMTeAR0JGXDRMgsZcNGSCXDBcMUxCwVw0ZFwyXDFcMVwzMIBcMTWATINIXDZkg1wwXDFMXDPCXDZkg1wwXDFiQ1wwXDBcMzBcMFwxNIBMg0lcNsGDXDBcMGSDgFwxXDhAg9VMXDNrXDbGw2pcMFw2xFtcMERcNFwwXDBkQ4BcMkxDa1w2xoNbXDBcNFw0XDBcMGRDXDBcMlwzMVww31wzXDMwwFw0gEbDXFxcMEyD61w2xoNbXDBkg4BcMUyDyFw2ZINcMFwxTIPJXDbBg1wwXDBkg4BcMUzDyVw2ZINcMFwxTFwzylw2wYNcMFwwZIOAXDGMw+tcNlw2hF9cMKSDgFwxzFwz7Fw2QFw0XDBcN+RDgFwxXDMxQOxcM1wzMMBcNIBGw1xcXDBMg+tcNsaDW1wwZIOAXDFMg8hcNmSDXDBcMUyDyVw2wYNcMFwwZIOAXDFMw8lcNmSDXDBcMUxcM8pcNsGDXDBcMGSDgFwxjMPrXDZcNoRfXDCkg4BcMcxcM+xcNkBcNFwwXDfkQ4BcMWlCXDBcMOqC71wxMjdGwlxcXDBMguxcNGSCXDBcMYxC7Vw0XDZcM1xcXDBcN4NtXDZBQyhcMCSDXDBcMUZcM1xcXDBHw+1cNmRcM4BcMKTCXDBcMFw4wFwy2lw4gILZhFwyXDBcMMZcMm1cMMdcMu5cNcxCwVw15FwyXDFcMVwzMEBcMjKAzENKXDfkg1wwXDFcNlw0QFwwXDEyREBcOCSEXDBcMUdERlw4TITGXDhkhFwwXDFMRMFcOGRcNFwxXDFcMzBcMFwxOYBMRUpcCmSFXDBcMYyFSFwKpIVcMFwxjFw1QlwxMaSFXDBcMaJFXDBcMFwzMFwwXDE3gIyFSFwKpIVcMFwxjMVIXDExpIVcMFwxjFw1QlwxMaSFXDBcMaJFXDBcMFwzMFwwXDE1gIxFblwKpIVcMFwxjEVoXDExXDGGXDBcMKSFgFwxzIVuXDExQFw2gFw35IWAXDFcMzFcMMVcMTFcMzCAXDEygMzF7lw3QVw2L1ww5IWAXDHiXDVcMFwwXDMwQFwxMYDMhe9cN0HGL1ww5IWAXDFcOMCF3sZFRFwwXDFcMDA2MFwwRkZvXDBcMjlGXDZcMTLkRVwwXDHGxVxcXDDMhetcMTFGRm9cMOSFgFwxzIXIXDEx5IVcMFwxXDEyXDbCXDExJIZcMFwxXCJGXDBcMFwzMIBcNoBcMYZcMFwwTEbwXDExwFw2XDBcMTJkhoBcMYxcNsJcMTKkhlwwXDGiRlwwXDBcMzBAXDOAjIbwXDEypIZcMFwxXDMxgEpcMTNcMzBAXDKAzEbrXDExQYcmXDCGh1tcMF2Hh1wxNORGgFwxxkZEXDBcMccwXDBGh1tcMFwyOUdcN1wxNORGXDBcMVwxM4ZBXDEyjFw2wlwxMqSGXDBcMaJcNlwwXDBcMzBA+VwxMjdpRFwwXDDqXDTsXDEyN+lCXDBcMGrD6FwxMjfGglpcMFwzMUDlXDVcMzDA/1wxMjcmXDCAXDDEXDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE0dG9fbWlkaXJlZ2lvblw0XDZpc25pbFw0XApMdWFEaWFsb2dcNFw4TWVzc2FnZVw0XDE1RXN0aW1hdGUgVGVtcG9cNCRQbGVhc2Ugc2VsZWN0IGV4YWN0bHkgMSBNSURJIHJlZ2lvblw0XDEyTWVzc2FnZVR5cGVcNFw1SW5mb1w0XDExQnV0dG9uVHlwZVw0XDZDbG9zZVw0XDZwcmludFw0XDRydW5cNFwxNWNvbGxlY3RnYXJiYWdlXDFcMVw0XDE0YWNjZXNzX2FjdGlvblw0XApMdWFBY3Rpb25cNFwKc2NyaXB0LTE0XDRcNmVtcHR5XDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFw2RXJyb3JcMjBSTm8gdHJhY2sgb3IgbWlkaSBkcnVtIHJlZ2lvbiBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIG9yIG1pZGkgZHJ1bSByZWdpb24uXDRcM09LXDRcNXNpemVcMjBITW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cNFwxNW1pZGlUcmFja0ZvdW5kXDFcMFw0XDl0b190cmFja1w0XDE0dG9fbWlkaV90cmFja1w0XDE2aXMgYSBtaWRpIHRyYWNrXDAyMDRObyBNSURJIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgTUlESSB0cmFjay5cNFwxMW50aF9wbHVnaW5cNFwKdG9faW5zZXJ0XDRcN3BsdWdpblw0XDVuYW1lXDRcMjNNSURJIFN0ZXAgU2VxdWVuY2VyOHg4XDIwVFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTdGVwIFNlcXVlbmNlciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhIGRydW0gdHJhY2suXDRcMTJBcnBlZ2dpYXRvclwyMFRUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2ssIHBsZWFzZSBzZWxlY3QgYSBkcnVtIHRyYWNrLlw0XDExTUlESSBTdHJ1bVwyMFVUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2ssIHBsZWFzZSBzZWxlY3QgYSBkcnVtIHRyYWNrKS5cNFw1dHlwZVw0XDlkcm9wZG93blw0XDRrZXlcNFw2dGl0bGVcNFwxOUNob29zZSBEcnVtIFBsdWdpblw0XDd2YWx1ZXNcNFwyOFJlZCBaZXBwZWxpbiAoQVZMIERydW1raXRzKVwxOVwzXDBcMFwwXDBcMFwwXDBcNFwyN0JsYWNrIFBlYXJsIChBVkwgRHJ1bWtpdHMpXDE5XDRcMFwwXDBcMFwwXDBcMFw0XDI1QmxvbmRlIEJvcChBVkwgRHJ1bWtpdHMpXDE5XDZcMFwwXDBcMFwwXDBcMFw0IDgwOC84MDkgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcMTlcN1wwXDBcMFwwXDBcMFwwXDQhU3RhbmRhcmQgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcMTlcOFwwXDBcMFwwXDBcMFwwXDQjU3RhbmRhcmQgMiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwxOVw5XDBcMFwwXDBcMFwwXDBcNCNFbGVjdHJvbmljIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDE5XApcMFwwXDBcMFwwXDBcMFw0XDI5Um9vbSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwxOVwxMVwwXDBcMFwwXDBcMFwwXDRcMzBQb3dlciBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwxOVwxMlwwXDBcMFwwXDBcMFwwXDRcMzBEYW5jZSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwxOVwxM1wwXDBcMFwwXDBcMFwwXDRcMjlKYXp6IERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDE5XDE0XDBcMFwwXDBcMFwwXDBcNFwyN1NvbmlOZWtvIChBQ0UgRmx1aWQgU3ludGgpXDE5XDE1XDBcMFwwXDBcMFwwXDBcNFwzME5JTiBEcnVta2l0IChBQ0UgRmx1aWQgU3ludGgpXDE5XDE2XDBcMFwwXDBcMFwwXDBcMDIwOUFsZXNpcyBEcnVta2l0cyhVc2UgQzEgdG8gY2hhbmdlIGtpdHMpIChBQ0UgRmx1aWQgU3ludGgpXDE5XDE3XDBcMFwwXDBcMFwwXDBcNFwyOUJydXNoIERydW0gKEFDRSBGbHVpZCBTeW50aClcMTlcMThcMFwwXDBcMFwwXDBcMFw0XCJPcmNoZXN0cmFsIFBlcmMgKEFDRSBGbHVpZCBTeW50aClcMTlcMTlcMFwwXDBcMFwwXDBcMFwyMCtCdXNrbWFuJ3MgSG9saWRheSBQZXJjdXNzaW9uIChBVkwgRHJ1bWl0cylcMTlcMjBcMFwwXDBcMFwwXDBcMFw0KUJsb25kZSBCb3AgSG90Um9kIERydW1raXQgKEFWTCBEcnVta2l0cylcMTlcMjFcMFwwXDBcMFwwXDBcMFw0XDIzQ29ubmVjdCBTdGVwIFNlcXVlbmNlclwxOVwyMlwwXDBcMFwwXDBcMFwwXDRcOU11bGRqb3JkXDE5XDIzXDBcMFwwXDBcMFwwXDBcNFw5SG91c2VLaXRcMTlcMjRcMFwwXDBcMFwwXDBcMFw0XApQb3dlcktpdDJcMTlcMjVcMFwwXDBcMFwwXDBcMFw0XDExU3RhbmRhcmQgM1wxOVwyNlwwXDBcMFwwXDBcMFwwXDRcMTJBbmFsb2dUOUtpdFwxOVwyN1wwXDBcMFwwXDBcMFwwXDRcMTJBbmFsb2dUOEtpdFwxOVwyOFwwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFw3RGlhbG9nXDRcNXN0ZXBcNFw4bm90IHNldFw0XDMxWW91IENob3NlIFJlZCBaZXBwZWxpbiBEcnVta2l0XDRcMjFSZWQgWmVwcGVsaW4gRHJ1bWtpdFw0XDExdHJhY2tfbmFtZVw0XDRuZXdcNFw3QVJET1VSXDRcN0x1YUFQSVw0XDExbmV3X3BsdWdpblw0XDhTZXNzaW9uXDRcMTFQbHVnaW5UeXBlXDRcNExWMlw0XDFcNFwzMFlvdSBDaG9zZSBCbGFjayBQZWFybCBEcnVta2l0XDRcMjBCbGFjayBQZWFybCBEcnVta2l0XDRcMjlZb3UgQ2hvc2UgQmxvbmRlIEJvcCBEcnVta2l0XDRcMTlCbG9uZGUgQm9wIERydW1raXRcNFwwMDg4MDgvODA5XDRcMTZBQ0UgRmx1aWQgU3ludGhcNFwwMTQ4MDgtODA5IERydW1zXDRcMTJwcmVzZXRfbmFtZVw0XDZlaWdodFw0XDE1U3RhbmRhcmQgRHJ1bXNcNFwxN1N0YW5kYXJkIDIgRHJ1bXNcNFwxN0VsZWN0cm9uaWMgRHJ1bXNcNFwxMVJvb20gRHJ1bXNcNFwxMlBvd2VyIERydW1zXDRcMTJEYW5jZSBEcnVtc1w0XDZkYW5jZVw0XDExSmF6eiBEcnVtc1w0XDlTb25pTmVrb1w0XDE1U29uaU5la28gRHJ1bXNcNFw1c29uaVw0XDEyTklOIERydW1raXRcNFw0bmluXDRcMTZBbGVzaXMgRHJ1bWtpdHNcNFwzYWxcNFwxMkJydXNoIERydW1zXDRcMTZPcmNoZXN0cmFsIFBlcmNcNFwyOUJ1c2ttYW4ncyBIb2xpZGF5IFBlcmN1c3Npb25cNFwyNkJsb25kZSBCb3AgSG90Um9kIERydW1raXRcNFwxNVN0ZXAgU2VxdWVuY2VyXDRcOXRoZV9uYW1lXDRcNHNldFw0XDIydXNlcl9jb25maWdfZGlyZWN0b3J5XDRcMTZyb3V0ZV90ZW1wbGF0ZXNcNFwyL1w0XDI1L1N0ZXAgU2VxdWVuY2VyLnRlbXBsYXRlXDRcMTZTdGVwIFNlcXVlbmNlciBcNFwyNG5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlXDRcMTdQcmVzZW50YXRpb25JbmZvXDRcCm1heF9vcmRlclw0XDIwUGxheWxpc3REaXNwb3NpdGlvblw0XDEyTmV3UGxheWxpc3RcNFw3b3V0cHV0XDRcNW1pZGlcNFw4Y29ubmVjdFw0XDExL21pZGlfaW4gMVw0XDNtalw0XDZob3VzZVw0XApwb3dlcmtpdDJcNFwxM1N0YW5kYXJkM0tpdFw0XApzdGFuZGFyZDNcNFw0YXQ5XDRcNGF0OFw0XDRvbGRcNFwxOHJlcGxhY2VfcHJvY2Vzc29yXDRcOXNldF9uYW1lXDRcMTRyb3V0ZV9ieV9uYW1lXDRcMTZwcmVzZXRfYnlfbGFiZWxcNFwxMmxvYWRfcHJlc2V0XDRcMTFkcnVtbGFib29oXDRcN2VuZ2luZVw0XDJfXDRcMnRcNFwKZ2V0X3BvcnRzXDRcOURhdGFUeXBlXDRcOVBvcnRMaXN0XDE5XDJcMFwwXDBcMFwwXDBcMFw0XDZpbnB1dFw0XDEzY29ubmVjdGVkX3RvXDRcNWZpbmRcNFwxMi9taWRpX291dCAxXDRcMTNjb3JyZWN0X25hbWVcNFw2bWF0Y2hcNFwxNiguKykvbWlkaV9vdXQgMVw0XDI4Rm91bmQgY29ubmVjdGVkIHNlcXVlbmNlcjogXDRcMTRudGhfcHJvY2Vzc29yXDRcMTNkaXNwbGF5X25hbWVcNCZSZW5hbWVkIHNlcXVlbmNlciB0bzogU3RlcCBTZXF1ZW5jZXIgXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNjcmlwdHNbM11bIm4iXSA9ICJEcnVtbWVyIC0gQ2hhbmdlIERydW0gUGx1Z2luIG9uIHRyYWNrL2FkZCBhbmQgcmVtb3ZlIGRydW0gbm90ZXMiICAgc2NyaXB0c1s0XSA9IHt9IHNjcmlwdHNbNF1bInMiXSA9ICJhcmRvdXIge1wKICBbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcCiAgbmFtZSA9IFwiR3VpdGFyIC0gQ2hhbmdlIEd1aXRhciBQbHVnaW5cIixcCiAgYXV0aG9yID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKICBkZXNjcmlwdGlvbiA9IFtbXApSZXBsYWNlIEd1aXRhciBQbHVnaW4gb24gY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrXAogIF1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcClwKICAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcClwKICAtLSBDaGVjayBpZiBubyB0cmFjayBpcyBzZWxlY3RlZFwKICBpZiBzZWw6ZW1wdHkoKSBvciBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOmVtcHR5KCkgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLk9LKTpydW4oKVwKICAgIHJldHVyblwKICBlbmRcClwKICAtLSBDaGVjayBpZiBtb3JlIHRoYW4gb25lIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbC50cmFja3M6cm91dGVsaXN0KCk6c2l6ZSgpID4gMSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKYXVkaW9UcmFja0ZvdW5kID0gZmFsc2UgLS0gRmxhZyB0byBjaGVjayBpZiBhbnkgYXVkaW8gdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fYXVkaW9fdHJhY2soKTppc25pbCgpIHRoZW5cCiAgICAgICBhdWRpb1RyYWNrRm91bmQgPSB0cnVlXAogICAgICAgcHJpbnQoXCJpcyBhbiBhdWRpbyB0cmFja1wiKVwKICAgICAgZW5kXAogICAgZW5kXApcCiAgICAgICBpZiAgYXVkaW9UcmFja0ZvdW5kID09IGZhbHNlIHRoZW5cCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyBhdWRpbyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhbiBhdWRpbyB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKICAgIGVuZFwKXAogIGxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICAgIHtcCiAgICAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwiZHJvcGRvd25cIiwgdGl0bGUgPSBcIkNob29zZSBHdWl0YXIgUGx1Z2luXCIsIHZhbHVlcyA9XAogICAgICB7XAogICAgICAgIFtcIkNob29zZSBHdWl0YXIgUGx1Z2luXCJdID0gMSwgW1wiUmF0YXRvdWlsbGVcIl0gPSAyLFwKICAgICAgICBbXCJHdWl0YXJpeFwiXSA9IDNcCiAgICAgIH0sXAogICAgICBkZWZhdWx0ID0gXCJDaG9vc2UgR3VpdGFyIFBsdWdpblwiXAogICAgfVwKICB9XApcCiAgbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nKFwiQ2hvb3NlIEd1aXRhciBQbHVnaW5cIiwgZGlhbG9nX29wdGlvbnMpXAogIGxvY2FsIHJ2ID0gb2Q6cnVuKClcCiAgbG9jYWwgcGx1Z2luX25hbWUgPSBuaWxcCiAgbG9jYWwgbmV3ID0gbmlsXApcCiAgaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMiB0aGVuXAogICAgcHJpbnQoXCJZb3UgQ2hvc2UgUmF0YXRvdWlsbGVcIilcCiAgICBwbHVnaW5fbmFtZSA9IFwiUmF0YXRvdWlsbGVcIlwKICAgIG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKICBlbHNlaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMyB0aGVuXAogICAgcHJpbnQoXCJZb3UgQ2hvc2UgR3VpdGFyaXhcIilcCiAgICBwbHVnaW5fbmFtZSA9IFwiR3VpdGFyaXhcIlwKICAgIG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuVlNUMywgXCJcIilcCiAgZWxzZVwKICAgIHJldHVyblwKICBlbmRcClwKICAtLSBGb3IgdGhlIHNlbGVjdGVkIHRyYWNrLCByZXBsYWNlIHRoZSBwbHVnaW5cCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgbG9jYWwgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICByOnJlcGxhY2VfcHJvY2Vzc29yKG9sZCwgbmV3LCBuaWwpXAogICAgICByOnNldF9uYW1lKHBsdWdpbl9uYW1lLCBuaWwpXAogICAgZW5kXAogIGVuZFwKXAogIGlmIHBsdWdpbl9uYW1lID09IFwiUmF0YXRvdWlsbGVcIiB0aGVuXApcClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcIlJhdGF0b3VpbGxlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcClwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJuZXdcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKZW5kXApcCmVuZCBlbmRcCiIgIHNjcmlwdHNbNF1bImEiXSA9IHt9IHNjcmlwdHNbNF1bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2d1aXRhci5sdWEiICAgc2NyaXB0c1s0XVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzRdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwW1wwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMFtcMFwwXDBcMVwxXDE3zVwwXDBcMEZcMEBcMExAwFwwZIBcMFwxjIDAXDCkgFwwXDGiQFwwXDBcMzCAXDGAh8DAXDCMXDBBXDGkgFwwXDGMgEBcMaSAXDBcMaJcMFwwXDBcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxXDFcMlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4fBQlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYxAQ1wxpIBcMFwxIIBcMIdcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxwVwzXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMFw4QESIh8DAXDCMXDBBXDGkgFwwXDGMgERcMaRcMFwxXDFcMzBAXDSAjMHEXDKkgVwwXDGMXDFFXDOkgVwwXDGiQVwwXDBcMzDAXDKAjMHEXDKkgVwwXDGMQUVcM6SBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMIBcOIBFiIbBRVwwwVwxXDZcMKRBXDBcMalAXDBcMCrB+lwxMjeGXDBEXDBcMzFARFwxXDMwQFwzgIZAQVwwh4BBXDHBwFwxXDBcMUFcNlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4eBRlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCLXDCAXDDLQFwxXDDKXDDHjcpcMMeOysBHj1wxMcFcMFwwXAqBw49cCoHIkFwKXDHJkcpcMFwxkMrAx5KrQIBcMMZAQVwwx4DJXDFcMcFcN1wwQFwxXDBcMeSAgFwxXDEyXDHDXDEkgVwwXDFEXDGAXDBcIlwxXDBcMFwzMIBcNIDHXDFHXDJcMzGAyFwzXDMwwFwzgMbBRVwwXDHCXDlcMORBXDBcMUFBXDhcMMZcMUpcMMdBylwzx4HKXDNcNsJKXDBAXDKAXDKGXDJKXDCHXDJLXDWHQktcNcGCXDExXDDkgYBcMoBcMYBcM1wzMEBcNYBcIlwxXDBcMFwzMIBcNIDHXDFHXDJcMzFcMMlcM1wzMMBcM4DGwUVcMFwxwlwxMVww5EFcMFwxQcFcOFwwxlwxSlwwx0HKXDPHgcpcM1w2wkpcMEBcMoBcMoZcMkpcMIdcMktcNYdcMkxcNcGCXDExXDDkgYBcMoBcMYBcM1wzMFwwXDCAJlwwgFwwx8HAXDDMXDHBXDPkgVwwXDHMgcRcM+RcMVwxXDFcMzBAXDSAzMJEXDXkglwwXDHMXDLFXDXkglwwXDHiQlwwXDBcMzDAXDKAzEJMXDVBg1wxMlww5IKAXDFcMTLDTFw1gFwzgFw1wFwzXDBcM1w0XDRcMFwwJEOAXDJcMTJcM01cNYBcM4BcMsRcM1wwXDAkQ1wwXDLpQVwwXDBqwvpcMTI3XDMxQMhcMlwzMMBcNIDGwUpcMMxBzVwzQUJcOFww5IGAXDHMwcRcM+SBXDBcMcxBzFwzQYJcMTJcMOSBgFwxzIHNXDPkgVwwXDHMwc1cM0GCXDEyXDDkgYBcMVwxMlwyzlwzgUJcMTRcMCSCgFwxTILOXDPAXDJcMFw0ZEKAXDEmXDCAXDA7XDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDZlbXB0eVw0XDd0cmFja3NcNFwKcm91dGVsaXN0XDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcNkVycm9yXDAyMDZObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlw0XDEyTWVzc2FnZVR5cGVcNFwxMUJ1dHRvblR5cGVcNFwzT0tcNFw0cnVuXDRcNXNpemVcMTlcMVwwXDBcMFwwXDBcMFwwXDIwSE1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXDRcMTZhdWRpb1RyYWNrRm91bmRcMVwwXDRcNWl0ZXJcNFw5dG9fdHJhY2tcNFw2aXNuaWxcNFwxNXRvX2F1ZGlvX3RyYWNrXDFcMVw0XDZwcmludFw0XDE4aXMgYW4gYXVkaW8gdHJhY2tcMDIwN05vIGF1ZGlvIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGFuIGF1ZGlvIHRyYWNrLlw0XDZDbG9zZVw0XDV0eXBlXDRcOWRyb3Bkb3duXDRcNGtleVw0XDZ0aXRsZVw0XDIxQ2hvb3NlIEd1aXRhciBQbHVnaW5cNFw3dmFsdWVzXDRcMTJSYXRhdG91aWxsZVwxOVwyXDBcMFwwXDBcMFwwXDBcNFw5R3VpdGFyaXhcMTlcM1wwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFw3RGlhbG9nXDRcMjJZb3UgQ2hvc2UgUmF0YXRvdWlsbGVcNFw3QVJET1VSXDRcN0x1YUFQSVw0XDExbmV3X3BsdWdpblw0XDhTZXNzaW9uXDRcMTFQbHVnaW5UeXBlXDRcNExWMlw0XDFcNFwxOVlvdSBDaG9zZSBHdWl0YXJpeFw0XDVWU1QzXDRcMTFudGhfcGx1Z2luXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDE4cmVwbGFjZV9wcm9jZXNzb3JcNFw5c2V0X25hbWVcNFwxNHJvdXRlX2J5X25hbWVcNFwKdG9faW5zZXJ0XDRcN3BsdWdpblw0XDE2cHJlc2V0X2J5X2xhYmVsXDRcNG5ld1w0XDEybG9hZF9wcmVzZXRcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc2NyaXB0c1s0XVsibiJdID0gIkd1aXRhciAtIENoYW5nZSBHdWl0YXIgUGx1Z2luIiAgIHNjcmlwdHNbNV0gPSB7fSBzY3JpcHRzWzVdWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgPSBcIk11c2VzY29yZSAtIE9wZW4gTWlkaSByZWdpb24gaW4gbXVzaWNhbCBub3RhdGlvbiBmb3JtYXRcIixcClw5YXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApkZXNjcmlwdGlvbiA9IFtbXApUYWtlcyBhIHNlbGVjdGVkIE1JREkgcmVnaW9uIGFuZCBvcGVucyBpdCBpbiBNdXNlc2NvcmVcCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcClwKbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZSAoXCJPcGVuIE11c2ljYWwgU2NvcmVcIiwgXCJJZiBNdXNlc2NvcmUgc2hvd3MgYSBibGFuayBwYWdlLCB5b3UgbWF5IGhhdmUgdG8gd2FpdCBhIG1pbnV0ZSBvciB0d28gZm9yIEFyZG91ciB0byB3cml0ZSB0aGUgZmlsZSB0byBkaXNrXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcClw5cHJpbnQgKG1kOnJ1bigpKVwKXApcOW1kID0gbmlsXApcOWNvbGxlY3RnYXJiYWdlICgpXApcClwKXApcClwKXApsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXApsb2NhbCBjb3VudCA9IDBcCmxvY2FsIG1pZGlfcmVnaW9uXApcCmZvciByIGluIHNlbC5yZWdpb25zOnJlZ2lvbmxpc3QoKTppdGVyKCkgZG9cCiAgICBjb3VudCA9IGNvdW50ICsgMVwKICAgIGlmIHI6dG9fbWlkaXJlZ2lvbigpOmlzbmlsKCkgdGhlblwKICAgICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UgKFwiT3BlbiBpbiBNdXNlc2NvcmVcIiwgXCJUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhIG1pZGlcIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKXDlwcmludCAobWQ6cnVuKCkpXAogICAgICAgICBtZCA9IG5pbFwKXDljb2xsZWN0Z2FyYmFnZSAoKVwKICAgICAgICByZXR1cm5cCiAgICBlbHNlXAogICAgICAgIG1pZGlfcmVnaW9uID0gclwKICAgIGVuZFwKZW5kXApcCmlmIGNvdW50IH49IDEgdGhlblwKICAgICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UgKFwiT3BlbiBpbiBNdXNlc2NvcmVcIiwgXCJQbGVhc2Ugc2VsZWN0IGV4YWN0bHkgMSBtaWRpIHJlZ2lvblwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXApcOXByaW50IChtZDpydW4oKSlcCiAgICAgICAgIG1kID0gbmlsXApcOWNvbGxlY3RnYXJiYWdlICgpXAogICAgcmV0dXJuXAplbmRcClwKbG9jYWwgcm4gPSBtaWRpX3JlZ2lvbjpuYW1lKClcCmxvY2FsIHNvdXJjZSA9IG1pZGlfcmVnaW9uOnNvdXJjZSgwKTp0b19maWxlc291cmNlKCk6cGF0aCgpXApwcmludChzb3VyY2UpXApsb2NhbCBmaWxlcGF0aCA9IHNvdXJjZVwKIHJvdXRlID0gbWlkaV9yZWdpb246cGxheWxpc3QoKTpuYW1lKClcCnByaW50ICggdHJhY2spXApcOXBpZCA9IG1pZGlfcmVnaW9uOnBsYXlsaXN0KCk6Z2V0X29yaWdfdHJhY2tfaWQgKClcCnByaW50IChwaWQpXApcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKbG9jYWwgY29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL21zY29yZSAgXCIgLi5xdW90ZWRmaWxlcGF0aFwKXAotLSBPcGVuIHRoZSBmaWxlIFwibXNjb3JlLnNoXCIgZm9yIHdyaXRpbmdcCmxvY2FsIGZpbGUgPSBpby5vcGVuKFwibXNjb3JlLnNoXCIsIFwid1wiKVwKXApcClwKaWYgbm90IGZpbGUgdGhlblwKICAgIC0tIEhhbmRsZSBlcnJvciBpZiBmaWxlIGNvdWxkbid0IGJlIG9wZW5lZFwKICAgIHByaW50KFwiRXJyb3I6IEZhaWxlZCB0byBjcmVhdGUgZmlsZSAnbXNjb3JlLnNoJ1wiKVwKZWxzZVwKICAgIC0tIFdyaXRlIHRoZSBjb21tYW5kIGNvbnRlbnQgdG8gdGhlIGZpbGVcClwKXAogICAgZmlsZTp3cml0ZShjb21tYW5kIC4uIFwiXFxuXCIpIC0tIFdyaXRlIHRoZSBjb21tYW5kIHRvIHRoZSBmaWxlXApcCiAgICAtLSBDbG9zZSB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKVwKXAogICAgcHJpbnQoXCJGaWxlICdtc2NvcmUuc2gnIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVwiKVwKXAogICAgLS0gRGVsZXRlIHRoZSBmaWxlIGFmdGVyIHByaW50aW5nIHRoZSBzdWNjZXNzIG1lc3NhZ2VcClwKZW5kXApcCmxvY2FsIG12ID0gXCJtdiBtc2NvcmUuc2ggL3RtcC9tc2NvcmUuc2hcIlwKXApvcy5leGVjdXRlKG12KVwKXApvcy5mb3JrZXhlYyhcIi9iaW4vYmFzaFwiLCBcIi90bXAvbXNjb3JlLnNoXCIpXApcCi0tb3MuZXhlY3V0ZShcImZpcmVmb3ggZmlsZTovLy90bXAvb3V0cHV0LnBkZlwiKVwKXAogb3MucmVtb3ZlKFwiL3RtcC9tc2NvcmUuc2hcIilcClwKXApcCi0tIE9wZW4gdGhlIGZpbGUgXCJtc2NvcmUuc2hcIiBmb3Igd3JpdGluZ1wKbG9jYWwgZmlsZSA9IGlvLm9wZW4oXCJtc2NvcmUuc2hcIiwgXCJ3XCIpXApcClwKXAppZiBub3QgZmlsZSB0aGVuXAogICAgLS0gSGFuZGxlIGVycm9yIGlmIGZpbGUgY291bGRuJ3QgYmUgb3BlbmVkXAogICAgcHJpbnQoXCJFcnJvcjogRmFpbGVkIHRvIGNyZWF0ZSBmaWxlICdtc2NvcmUuc2gnXCIpXAplbHNlXAogICAgLS0gV3JpdGUgdGhlIGNvbW1hbmQgY29udGVudCB0byB0aGUgZmlsZVwKbG9jYWwgY29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL21zY29yZSAgXCIgLi5xdW90ZWRmaWxlcGF0aFwKXAogICAgZmlsZTp3cml0ZShjb21tYW5kIC4uIFwiXFxuXCIpIC0tIFdyaXRlIHRoZSBjb21tYW5kIHRvIHRoZSBmaWxlXApcCiAgICAtLSBDbG9zZSB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKVwKXAogICAgcHJpbnQoXCJGaWxlICdtc2NvcmUuc2gnIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVwiKVwKXAogICAgLS0gRGVsZXRlIHRoZSBmaWxlIGFmdGVyIHByaW50aW5nIHRoZSBzdWNjZXNzIG1lc3NhZ2VcClwKZW5kXApcCmxvY2FsIG12ID0gXCJtdiBtc2NvcmUuc2ggL3RtcC9tc2NvcmUuc2hcIlwKXApvcy5leGVjdXRlKG12KVwKXApvcy5mb3JrZXhlYyhcIi9iaW4vYmFzaFwiLCBcIi90bXAvbXNjb3JlLnNoXCIpXApcCmZvciByIGluIFNlc3Npb246Z2V0X3JvdXRlcyAoKTppdGVyICgpIGRvXAogICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSBhbmQgbm90IHI6dG9fdHJhY2sgKCk6dG9fbWlkaV90cmFjayAoKTppc25pbCAoKSB0aGVuXApcClwKXApcCm9zLmV4ZWN1dGUoXCJzbGVlcCAyXCIpXApcClwKXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X2lkKHBpZCk6dG9fdHJhY2soKVwKXApcOVw5XDlcOWxvY2FsIGlucHV0bWlkaXBvcnQgPSByOmlucHV0KCk6bWlkaSgwKVwKXDlcOVw5XDktLSBwcmludChpbnB1dG1pZGlwb3J0Om5hbWUoKSlcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgKHByb2M6bmFtZSgpKVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1pZGlwb3J0OmRpc2Nvbm5lY3QoXCJtc2NvcmU6bXNjb3JlLW1pZGktMVwiKVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgY29ycmVjdHBvcnQgPSBwcm9jOmlucHV0KCk6bWlkaSgwKVwKXApcClw5XDlcOVw5IGNvcnJlY3Rwb3J0OmNvbm5lY3QoXCJtc2NvcmU6bXNjb3JlLW1pZGktMVwiKVwKXDlcOVw5ZW5kXApcOWVuZFwKXApcClwKXApcClwKXApcCmVuZCBlbmRcClwKXApcClwKXAoiICBzY3JpcHRzWzVdWyJhIl0gPSB7fSBzY3JpcHRzWzVdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9tc2NvcmVleC5sdWEiICAgc2NyaXB0c1s1XVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzVdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwnVwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMJ1cMFwwXDBcMVwxXDI07lwwXDBcMEZcMEBcMEdAwFwwgYBcMFwwwcBcMFwwXDZcMUBcMFw3XDFBXDJcN0FBXDJGXDFAXDBHgcFcMkfBwVwyZICAXDKGXDBCXDDMQMJcMORcMFwwXDGkQFwwXDBEXDBcMFwwhoBCXDCkQIBcMIbAQlwwjFwwQ1wxpIBcMFwxwUBcM1wwXDRcMVwwXDBHgUNcMUzBw1wyZIFcMFwxTFwxxFwyZFwxXDFcMVwzMMBcNoDNQMRcMUyCRFw0ZIJcMFwxTMLEXDRkglwwXDFiXDJcMFwwXDMwwFw0gEZcMkBcMEdCwFw0gVwyXDVcMMFCXDVcMFw2XDNAXDBcN1wzQVw2XDdDQVw2RlwzQFwwR4PBXDZHw8FcNmSCgFwyhlwyQlwwzELCXDTkXDJcMFwxpEJcMFwwRFwyXDBcMIaCQlwwpEKAXDAmXDCAXDBcMzBcMFwwgFwwXDFcMFw0aUFcMFww6kH4XDEyN19AxFwxXDMwgFw0gEZcMUBcMEdBwFwygVwxXDVcMMGBXDVcMFw2XDJAXDBcN1wyQVw0XDdCQVw0RlwyQFwwR4LBXDRHwsFcNGSBgFwyhlwxQlwwzEHCXDLkXDFcMFwxpEFcMFwwRFwxXDBcMIaBQlwwpEGAXDAmXDCAXDBMwUVcMmSBXDBcMYxcMUZcMlwxQlwzXDCkgYBcMYxBRlwzpIFcMFwxjIFGXDOkgVwwXDHGXDFCXDBcMFwyXDBcM+RBXDBcMcBcMVwwXDNcMTJcMkdcMiSCXDBcMVwxMsJFXDQkglwwXDFcOFwwgo1cNlwyQlwwRkJHXDAkQlwwXDFcMTJcMkdcMiSCXDBcMVwxMsJHXDQkglwwXDFcOFwwXDKPXDZcMkJcMEaCR1wwJEJcMFwxXDFcMlw4XDBAXDKAXDOBXDJcOFwwXDI5glwyXDRBQlw4XDCAXDJcMFw0XYKCXDSGgkhcMIfCSFw1wVwyXDlcMFwxQ1w5XDCkgoBcMaJCXDBcMFwzMMBcMIDGXDJCXDBcMYNcOVww5EJcMFwxXDMwQFwygMzCSVw1QFwzgFw0gVwzXApcMF2Dg1w25EKAXDHMQkpcNeRCXDBcMcZcMkJcMFwxg1wKXDDkQlwwXDHBwlwKXDBcNlwzS1wwXDdDS1w2QFwzgFw1JENcMFwxXDZcM0tcMFw3g0tcNkHDXDExXDCBXDNcMTJcMCRDgFwxXDZcM0tcMFw3Q0xcNkFcM1wxMlwwJENcMFwxXDaDSFwwXDfDSFw2QVwzXDlcMIFDXDlcMCSDgFwxXCJDXDBcMFwzMMBcMIBGXDNCXDCBg1w5XDBkQ1wwXDFcMzBcMFwzgEFDXDhcMIBcM1wwXDRdg4NcNozDSVw2XDBcNIBcNkFcNFwKXDBcMjlEXDRcOKRDgFwxjENKXDakQ1wwXDGGXDNCXDDBg1wKXDCkQ1wwXDFBw1wKXDCGXDNLXDCHQ0tcN8BcM4BcNqRDXDBcMYZcM0tcMIeDS1w3wcNcMTFcMFwxXDRcMTJcMKRDgFwxhoNMXDCMw0xcN6SDXDBcMYxcM0RcN6RcM1wxXDFcMzDAXAqAjFw0zVw4pIRcMFwxjMREXDmkhFwwXDGiRFwwXDBcMzBAXDmAjFw0zVw4pIRcMFwxjERNXDmkhFwwXDGMxERcOaSEXDBcMaJEXDBcMFwzMEBcN4CGXDRLXDCHREtcOcGEXDEzXDCkRFwwXDGGhExcMIzETVw5XDaFR1wwpISAXDGMXDRNXDmkhFwwXDHMXDTOXDjkhFwwXDHMRM5cOUFFXDNcMOSEgFwxXDZcNUJcMEzFRVw5ZFw1XDBcMSRFXDBcMFwxMoXOXDmBxVwxNFwwJEWAXDFcMTJcNU5cOSSFXDBcMVwxMkVOXAqBRVwzXDAkhYBcMUxcNU9cCsHFXDE0XDBkRYBcMalDXDBcMCpE9FwxMjcmXDCAXDA9XDBcMFwwXDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcMTlPcGVuIE11c2ljYWwgU2NvcmVcMjBrSWYgTXVzZXNjb3JlIHNob3dzIGEgYmxhbmsgcGFnZSwgeW91IG1heSBoYXZlIHRvIHdhaXQgYSBtaW51dGUgb3IgdHdvIGZvciBBcmRvdXIgdG8gd3JpdGUgdGhlIGZpbGUgdG8gZGlza1w0XDEyTWVzc2FnZVR5cGVcNFw1SW5mb1w0XDExQnV0dG9uVHlwZVw0XDZDbG9zZVw0XDZwcmludFw0XDRydW5cNFwxNWNvbGxlY3RnYXJiYWdlXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE0dG9fbWlkaXJlZ2lvblw0XDZpc25pbFw0XDE4T3BlbiBpbiBNdXNlc2NvcmVcNFwiVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYSBtaWRpXDQkUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgbWlkaSByZWdpb25cNFw1bmFtZVw0XDdzb3VyY2VcNFwxNHRvX2ZpbGVzb3VyY2VcNFw1cGF0aFw0XDZyb3V0ZVw0XDlwbGF5bGlzdFw0XDZ0cmFja1w0XDRwaWRcNFwxOGdldF9vcmlnX3RyYWNrX2lkXDRcMlwiXDRcMjgvb3B0L0xvZ2ljYWxBcmRvdXIvbXNjb3JlICBcNFwzaW9cNFw1b3Blblw0XAptc2NvcmUuc2hcNFwyd1w0KUVycm9yOiBGYWlsZWQgdG8gY3JlYXRlIGZpbGUgJ21zY29yZS5zaCdcNFw2d3JpdGVcNFwyXApcNFw2Y2xvc2VcNCdGaWxlICdtc2NvcmUuc2gnIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVw0XDI4bXYgbXNjb3JlLnNoIC90bXAvbXNjb3JlLnNoXDRcM29zXDRcOGV4ZWN1dGVcNFw5Zm9ya2V4ZWNcNFwKL2Jpbi9iYXNoXDRcMTUvdG1wL21zY29yZS5zaFw0XDdyZW1vdmVcNFw4U2Vzc2lvblw0XDExZ2V0X3JvdXRlc1w0XDl0b190cmFja1w0XDE0dG9fbWlkaV90cmFja1w0XDhzbGVlcCAyXDRcMTJyb3V0ZV9ieV9pZFw0XDZpbnB1dFw0XDVtaWRpXDRcMTFkaXNjb25uZWN0XDRcMjFtc2NvcmU6bXNjb3JlLW1pZGktMVw0XDhjb25uZWN0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNjcmlwdHNbNV1bIm4iXSA9ICJNdXNlc2NvcmUgLSBPcGVuIE1pZGkgcmVnaW9uIGluIG11c2ljYWwgbm90YXRpb24gZm9ybWF0IiAgIHNjcmlwdHNbNl0gPSB7fSBzY3JpcHRzWzZdWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgPSBcIlRlbXBvIC0gRXN0aW1hdGUgIGFuZCBzZXQgdGVtcG9cIixcClw5YXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApkZXNjcmlwdGlvbiA9IFtbXApFc3RpbWF0ZSB0aGUgdGVtcG8gb2YgYSBzZWxlY3RlZCBhdWRpbyByZWdpb24gYW5kIHNldCB0ZW1wbyBtYXJrZXJzIG9yIHNldCB0aGUgZXN0aW1hdGVkIHRlbXBvIGZvciB0aGUgZW50aXJlIHByb2plY3RcCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcClwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcImRyb3Bkb3duXCIsIHRpdGxlID0gXCJDaG9vc2UgaG93IHRvIHNldCB0ZW1wb1wiLCB2YWx1ZXMgPVwKICAgIHtcCiAgICAgIFtcIlNldCB0ZW1wbyBmb3IgZW50aXJlIHByb2plY3RcIl0gPSAxLCBbXCJTZXQgdGVtcG8gZm9yIGxlbmd0aCBvZiB0aGUgYXVkaW8gbG9vcFwiXSA9IDJcCiAgICB9LFwKICAgIGRlZmF1bHQgPSBcIlNldCB0ZW1wbyBmb3IgZW50aXJlIHByb2plY3RcIlwKICB9XAp9XApcCmxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyhcIkNob29zZSBob3cgdG8gc2V0IHRlbXBvXCIsIGRpYWxvZ19vcHRpb25zKVwKbG9jYWwgcnYgPSBvZDpydW4oKVwKXAotLSBFeGl0IHRoZSBzY3JpcHQgaWYgJ0NhbmNlbCcgaXMgcHJlc3NlZCBvciB0aGUgZGlhbG9nIGlzIGNsb3NlZFwKaWYgbm90IHJ2IHRoZW5cCiAgcmV0dXJuIC0tIEV4aXRzIHRoZSBzY3JpcHRcCmVuZFwKXAppZiBydltcImRyb3Bkb3duXCJdID09IDIgdGhlblwKICBkdXIgPSB0cnVlXAplbHNlXAogIGR1ciA9IGZhbHNlXAplbmRcClwKXApcClwKXApsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXApsb2NhbCBjb3VudCA9IDBcClwKXApmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0KCk6aXRlcigpIGRvXAogICAgY291bnQgPSBjb3VudCArIDFcCiAgICBpZiByOnRvX2F1ZGlvcmVnaW9uKCk6aXNuaWwoKSB0aGVuXAogICAgICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJFc3RpbWF0ZSBUZW1wb1wiLCBcIlRoZSBzZWxlY3RlZCByZWdpb24gaXMgbm90IGFuIGF1ZGlvIHJlZ2lvblwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgICAgIHByaW50KG1kOnJ1bigpKVwKICAgICAgICBtZCA9IG5pbFwKICAgICAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgICAgIHJldHVyblwKICAgIGVsc2VcCiAgICAgICAgYXVkaW9fcmVnaW9uID0gclwKICAgIGVuZFwKZW5kXApcCmlmIGNvdW50IH49IDEgdGhlblwKICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJFc3RpbWF0ZSBUZW1wb1wiLCBcIlBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvblwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgcHJpbnQobWQ6cnVuKCkpXAogICAgbWQgPSBuaWxcCiAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgcmV0dXJuXAplbmRcClwKbG9jYWwgcm4gPSBhdWRpb19yZWdpb246bmFtZSgpXApwcmludCAocm4pXApsb2NhbCBzb3VyY2UgPSBhdWRpb19yZWdpb246c291cmNlKDApOnRvX2ZpbGVzb3VyY2UoKTpwYXRoKClcCi0tcHJpbnQoc291cmNlKVwKbG9jYWwgZmlsZXBhdGggPSBzb3VyY2VcClwKbG9jYWwgc3QgPSBhdWRpb19yZWdpb246cG9zaXRpb24oKVwKXApwcmludCAoc3QpXApcCmxvY2FsIGxuID0gYXVkaW9fcmVnaW9uOmxlbmd0aCgpXApsb2NhbCBldCA9IHN0ICsgbG5cCnByaW50KGV0KVwKXApsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXApmdW5jdGlvbiBleHRyYWN0QlBNKHJuKVwKICAgIGxvY2FsIGJwbSA9IHN0cmluZy5tYXRjaChybiwgXCIoJWQlZD8lZD8pWy1fXT8lcypbYkJdW3BQXVttTV1cIiwgMSlcCiAgICBpZiBub3QgYnBtIHRoZW5cCiAgICAgICAgYnBtID0gc3RyaW5nLm1hdGNoKHJuLCBcIltiQl1bcFBdW21NXSVzKltfLV0/KCVkKylcIiwgMSlcCiAgICBlbmRcCiAgICByZXR1cm4gYnBtXAplbmRcClwKLS0gRXhhbXBsZSB1c2FnZTpcClwKbG9jYWwgYnBtID0gZXh0cmFjdEJQTShybilcCmlmIGJwbSB0aGVuXAogICAgcHJpbnQoYnBtKVwKICAgIGxvY2FsIHJlc3VsdCA9IGJwbVwKXAogICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkVzdGltYXRlIFRlbXBvXCIsIHJlc3VsdCwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgIHByaW50KG1kOnJ1bigpKVwKICAgIG1kID0gbmlsXAogICAgY29sbGVjdGdhcmJhZ2UoKVwKXAogICAgbG9jYWwgbnVtID0gdG9udW1iZXIocmVzdWx0KVwKXAogICAgLS0gdG8gZG8sIGFkZCB0ZW1wbyBtYXJrZXJzIGFuZCBwcm9tcHQgd2hldGhlciBvciBub3QgeW91IHdhbnQgdG8gdGVtcG8gbWFya2Vyc1wKXAogICAgLS0gc2V0IGEgdGVtcG8gbWFwXAogICAgbG9jYWwgdG0gPSBUZW1wb3JhbC5UZW1wb01hcC53cml0ZV9jb3B5KClcCiAgICBpZiBkdXIgPT0gdHJ1ZSB0aGVuXAogICAgdG06c2V0X3RlbXBvKFRlbXBvcmFsLlRlbXBvKG51bSwgbnVtLCA0KSwgc3QpXAogICB0bTpzZXRfdGVtcG8oVGVtcG9yYWwuVGVtcG8oMTIwLCAxMjAsIDQpLCBldClcCiAgIGVsc2VcClwKICAgIHRwID0gVGVtcG9yYWwudGltZXBvc190IChTZXNzaW9uOm5vbWluYWxfc2FtcGxlX3JhdGUgKCkgKiAwKVwKXApcCiAgICAgdG06c2V0X3RlbXBvKFRlbXBvcmFsLlRlbXBvKG51bSwgbnVtLCA0KSwgdHApXApcCiAgICAgZW5kXApcCiAgICBTZXNzaW9uOmJlZ2luX3JldmVyc2libGVfY29tbWFuZChcIkNoYW5nZSBUZW1wbyBNYXBcIilcCiAgICBUZW1wb3JhbC5UZW1wb01hcC51cGRhdGUodG0pXAogICAgaWYgbm90IFNlc3Npb246YWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kKCkgdGhlblwKICAgICAgICBTZXNzaW9uOmNvbW1pdF9yZXZlcnNpYmxlX2NvbW1hbmQobmlsKVwKICAgIGVuZFwKXAogICAgdG0gPSBuaWxcClwKICAgIC0tIEFib3J0IEVkaXQgZXhhbXBsZVwKICAgIC0tIGFmdGVyIGV2ZXJ5IGNhbGwgdG8gVGVtcG9yYWwuVGVtcG9NYXAud3JpdGVfY29weSgpXAogICAgLS0gdGhlcmUgbXVzdCBiZSBhIG1hdGNoaW5nIGNhbGwgdG9cCiAgICAtLSBUZW1wb3JhbC5UZW1wb01hcC51cGRhdGUoKSBvciBUZW1wb3JhbC5UZW1wb01hcC5hYm9ydF91cGRhdGUoKVwKICAgIFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgIFRlbXBvcmFsLlRlbXBvTWFwLmFib3J0X3VwZGF0ZSgpXAplbHNlXAogICAgcHJpbnQoXCJCUE0gbm90IGZvdW5kIGluIGZpbGVuYW1lLlwiKVwKXApcClwKICAgICAgICAtLSBsb2NhbCBjb21tYW5kID0gXCJicG1iaW4gXCIgLi4gcXVvdGVkZmlsZXBhdGhcClwKICAgICAgICBsb2NhbCBjb21tYW5kID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIvbWluaWJwbSAgXCIgLi5xdW90ZWRmaWxlcGF0aC4uXCIgPiAvdG1wL2JwbS50eHRcIlwKXApvcy5leGVjdXRlKGNvbW1hbmQpXApcClwKLS0gUmVhZCB0aGUgZmlsZVwKIGZpbGUgPSBpby5vcGVuKFwiL3RtcC9icG0udHh0XCIsIFwiclwiKVwKIGNvbnRlbnQgPSBmaWxlOnJlYWQoXCIqYWxsXCIpXApmaWxlOmNsb3NlKClcClwKLS0gRXh0cmFjdCB0aGUgbnVtYmVyIGFmdGVyIFwiRXN0aW1hdGVkIEJQTTpcIlwKYnBtX3N0cmluZyA9IGNvbnRlbnQ6bWF0Y2goXCJFc3RpbWF0ZWQgQlBNOiVzKihbJWQlLl0rKVwiKVwKaWYgYnBtX3N0cmluZyA9PSBuaWwgdGhlblwKICAgIC0tIEZhbGxiYWNrOiB1c2Ugc294IHwgYnBtIGlmIG1pbmlicG0gZGlkIG5vdCBwcm9kdWNlIGEgcmVzdWx0XAogICAgbG9jYWwgZmFsbGJhY2tfY29tbWFuZCA9IFwic294IFwiIC4uIHF1b3RlZGZpbGVwYXRoIC4uIFwiIC10IHJhdyAtciA0ODAwMCAtZSBmbG9hdCAtYyAxIC0gfCBicG0gPiAvdG1wL2JwbS50eHRcIlwKICAgIG9zLmV4ZWN1dGUoZmFsbGJhY2tfY29tbWFuZClcCiAgICBmaWxlID0gaW8ub3BlbihcIi90bXAvYnBtLnR4dFwiLCBcInJcIilcCiAgICBjb250ZW50ID0gZmlsZTpyZWFkKFwiKmFsbFwiKVwKICAgIGZpbGU6Y2xvc2UoKVwKICAgIC0tIFRyeSB0byBleHRyYWN0IEJQTSBmcm9tIHRoZSBmYWxsYmFjayBvdXRwdXQgKGFzc3VtaW5nIGJwbSBvdXRwdXRzIGp1c3QgdGhlIG51bWJlciBvciBzaW1pbGFyKVwKICAgIGJwbV9zdHJpbmcgPSBjb250ZW50Om1hdGNoKFwiKFslZCUuXSspXCIpXAplbmRcCmJwbV9udW1iZXIgPSB0b251bWJlcihicG1fc3RyaW5nKVwKcHJpbnQoYnBtX251bWJlcilcCm51bSA9IGJwbV9udW1iZXJcClwKbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkVzdGltYXRlIFRlbXBvXCIsIGJwbV9zdHJpbmcsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCnByaW50KG1kOnJ1bigpKVwKbWQgPSBuaWxcCmNvbGxlY3RnYXJiYWdlKClcClwKXAogICAgLS0gc2V0IGEgdGVtcG8gbWFwXAogICAgbG9jYWwgdG0gPSBUZW1wb3JhbC5UZW1wb01hcC53cml0ZV9jb3B5KClcCiAgICBpZiBkdXIgPT0gdHJ1ZSB0aGVuXAogICAgdG06c2V0X3RlbXBvKFRlbXBvcmFsLlRlbXBvKG51bSwgbnVtLCA0KSwgc3QpXAogICB0bTpzZXRfdGVtcG8oVGVtcG9yYWwuVGVtcG8oMTIwLCAxMjAsIDQpLCBldClcCiAgIGVsc2VcClwKICAgIHRwID0gVGVtcG9yYWwudGltZXBvc190IChTZXNzaW9uOm5vbWluYWxfc2FtcGxlX3JhdGUgKCkgKiAwKVwKXApcCiAgICAgdG06c2V0X3RlbXBvKFRlbXBvcmFsLlRlbXBvKG51bSwgbnVtLCA0KSwgdHApXApcCiAgICAgZW5kXApcCiAgICBTZXNzaW9uOmJlZ2luX3JldmVyc2libGVfY29tbWFuZChcIkNoYW5nZSBUZW1wbyBNYXBcIilcCiAgICBUZW1wb3JhbC5UZW1wb01hcC51cGRhdGUodG0pXAogICAgaWYgbm90IFNlc3Npb246YWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kKCkgdGhlblwKICAgICAgICBTZXNzaW9uOmNvbW1pdF9yZXZlcnNpYmxlX2NvbW1hbmQobmlsKVwKICAgIGVuZFwKXAogICAgdG0gPSBuaWxcClwKICAgIC0tIEFib3J0IEVkaXQgZXhhbXBsZVwKICAgIC0tIGFmdGVyIGV2ZXJ5IGNhbGwgdG8gVGVtcG9yYWwuVGVtcG9NYXAud3JpdGVfY29weSgpXAogICAgLS0gdGhlcmUgbXVzdCBiZSBhIG1hdGNoaW5nIGNhbGwgdG9cCiAgICAtLSBUZW1wb3JhbC5UZW1wb01hcC51cGRhdGUoKSBvciBUZW1wb3JhbC5UZW1wb01hcC5hYm9ydF91cGRhdGUoKVwKICAgIFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgIFRlbXBvcmFsLlRlbXBvTWFwLmFib3J0X3VwZGF0ZSgpXApcClwKXAogICAgZW5kXApcCiAgICAtLSBsb2NhbCBjb21tYW5kID0gXCJzb3ggIFwiIC4ucXVvdGVkZmlsZXBhdGguLiBcIiAtdCByYXcgLXIgNDgwMDAgIC1lIGZsb2F0IC1jIDEgLSB8IGJwbVwiXApcClwKXApcClwKXApcClwKXApcClwKXApcCmVuZCBlbmRcClwKXApcClwKXApcClwKXApcClwKXApcClwKXApcClwKXAoiICBzY3JpcHRzWzZdWyJhIl0gPSB7fSBzY3JpcHRzWzZdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy90ZW1wby5sdWEiICAgc2NyaXB0c1s2XVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzZdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFww21wwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMNtcMFwwXDBcMVwxXDI0fVwxXDBcMEtcMIBcMItAXDFcMIpAQICKQECBilwwwYHLgFwwXDDKwEGDykBChIrAgIKKgEGFa0CAXDCGwEJcMIdcMENcMcFcMFwxXDBcMFwxgFwwpICAXDHMQENcMeSAXDBcMeJAXDBcMFwzMFwwXDCAJlwwgFwwXDdBwFwxXDMxQEJcMlwzMEBcMIBcOMBDh1wzMFwwXDCAXDhcMESHXDZBRFwwXDEygURcMiSBXDBcMUHBXDRcMIdcMUVcMoxBRVwzpIFcMFwxjIFFXDOkXDFcMVwxXDMwwFw2gE3BwVwyjMLFXDSkglwwXDGMXDJGXDWkglwwXDGiXDJcMFwwXDMwwFw0gIbCQlwwh0JGXDXBglw2XDBcMcNcNlwwRsNCXDBHXDPHXDZHQ8dcNobDQlwwh4NHXDeHw0dcN6SCgFwyxlwySFwwXDEyQ0NcNSRcM1wwXDHkQlwwXDCEXDJcMFwwxkJIXDDkQoBcMCZcMIBcMFwzMFwwXDCAXDhAXDKRqUFcMFwwKkL4XDEyN1/AwVwyXDMwgFw0gIbBQlwwh0FGXDPBgVw2XDBcMcJcOFwwRsJCXDBHXDLHXDRHQsdcNIbCQlwwh4JHXDWHwkdcNaSBgFwyxlwxSFwwXDEyQkNcMyRcMlwwXDHkQVwwXDCEXDFcMFwwxkFIXDDkQYBcMCZcMIBcMIaBSFwwjFwxSVwzpIFcMFwxxlwxSFwwXDBcMlwwXDPkQVwwXDHGgUhcMMxByVwzQcJcNFww5IGAXDHMgclcM+SBXDBcMczByVwz5IFcMFwxXDBcMoBcM0aCSFwwTFwyylw0ZIJcMFwxhlwySFwwwFwygFw0pEJcMFwxhoJIXDCMQkpcNaSCXDBcMc2Cglw0XDZcM0hcMEBcM4BcNSRDXDBcMVwxg1wKXDBAXDNcMFw0gYNcClwwXDI5g1wzXDZsXDNcMFwwXDhAg5VGw0pcMIBcM1wwXDNkg1wwXDFiXDNcMFwwXDMwwFwyM4CGXDNIXDDAXDOAXDakQ1wwXDGAXDOAXDbGw0JcMMdDxlw3XDGEXDZcMEBcNFwwXDeGxEJcMIdcNEdcOYdER1w5xsRCXDDHhMdcOcfEx1w55IOAXDJcNlw0SFwwTETDXDdkXDRcMFwxJERcMFwwxFwzXDBcMFw2REhcMCREgFwwXDZcNEtcMEBcNFwwXDckhFwwXDFGREtcMEeEy1w4R8TLXDhkhIBcMIaEQ1wwXDMxwENcOVwzMIBcNICMXDTMXDhcNkVLXDBcN0VMXApAXDVcMFw4gFw1XDBcOMGFXDEyXDAkhVwwXDJAXDWAXDSkRFwwXDKMXDTMXDhcNkVLXDBcN0VMXApBxVwxMlwwgcVcMTJcMMGFXDEyXDAkhVwwXDJAXDWAXDWkRFwwXDJcMzBcMFw0gIZES1wwh0RNXDnGhE1cMMzEzVw55IRcMFwxz8TEXDmkhFwwXDFcOIBcNJqMXDTMXDhcNkVLXDBcN0VMXApAXDVcMFw4gFw1XDBcOMGFXDEyXDAkhVwwXDJGXDVNXDCkRFwwXDKGhE1cMIxcNE5cOVwxRVwxNFwwpESAXDGGREtcMIeES1w5h4ROXDnAXDSAXDikRFwwXDGGhE1cMIzETlw5pIRcMFwxokRcMFwwXDMwwFwwgIaETVwwjFw0T1w5XDRcNVwwXDCkRIBcMURcNFwwXDCGREtcMIeES1w5h8RLXDmkRIBcMIZES1wwh4RLXDmHRE9cOaREgFwwXDMwXDAngIZcM0hcMMGDXDE1XDCkQ1wwXDGBw1wxNVwwwFwzXDBcNlwxXDRcMTZcMJ1cM1w0XDfGQ1BcMMeD0Fw3XDBcNFwwXDfkQ1wwXDHGXDNRXDDHQ9FcN1wxhFwxN1wwQcRcMTdcMOSDgFwxXDjAg6HGw1BcMMxD0lw3QYRcMThcMOSDgFwxXDjAXDOkxsNQXDDMw9JcN+RDXDBcMcZcM1JcMMxD01w3QYRcMTlcMOSDgFwxXDjAXDOmxlwzU1wwXDMxwNNcN1wzMIBcNoDBXDNcMjBcMFwwXDRcMFw2QURcMjBcMN1DhFw3XDZEUFwwXDeEUFw4QFw0gFw3JERcMFwxXDZcNFFcMFw3RFFcOEGEXDE3XDCBxFwxN1wwJISAXDFcOFwwhKFcNsRQXDBcMTJEUlw4gYRcMThcMCSEgFwxXDhcMFw0pFw2xFBcMFwxMsRSXDgkRFwwXDFcNlw0UlwwXDEyRFNcOIGEXDIwXDAkhIBcMVw4XDBcNKbGXDNLXDBcNlw0U1ww5INcMFwxXDjAg6nGXDNIXDBcNsRUXDDkQ1wwXDHGw1RcMFw4wFwzqsbDQlwwx0PGXDdcMYRcNlwwRlw0U1wwhsRCXDCHXDRHXDmHREdcOcbEQlwwx4THXDnHxMdcOeSDgFwyXDZcNEhcMExEw1w3ZFw0XDBcMSREXDBcMMRcM1wwXDBcNkRIXDAkRIBcMFw2REtcMFw3hEtcOFw3xEtcOCSEgFwwRoRDXDBcMzHAw1w4XDMwgFw0gExcNExcOMZES1wwx0TMXDlcNlw1VVwwRlw1VVwwgYVcMTJcMOSEXDBcMlwwXDWAXDRkRFwwXDJMXDRMXDjGREtcMMdEzFw5XDHFXDEyXDBBxVwxMlwwgYVcMTJcMOSEXDBcMlwwXDWAXDVkRFwwXDJcMzBcMFw0gEZES1wwR0TNXDiGhE1cMIzETVw5pIRcMFwxj8REXDlkhFwwXDFcOEBcNJpMXDRMXDjGREtcMMdEzFw5XDZcNVVcMEZcNVVcMIGFXDEyXDDkhFwwXDJcNlw1TVwwZERcMFwyRoRNXDBMXDTOXDjBRFwxNFwwZESAXDFGREtcMEeEy1w4R4TOXDiAXDRcMFw4ZERcMFwxRoRNXDBMxM5cOGSEXDBcMWJEXDBcMFwzMMBcMIBGhE1cMExcNM9cOMRcNFwwXDBkRIBcMVw0XDRcMFwwRkRLXDBHhMtcOEfEy1w4ZESAXDBGREtcMEeEy1w4R0TPXDhkRIBcMCZcMIBcMFVcMFwwXDBcNFw1dHlwZVw0XDlkcm9wZG93blw0XDRrZXlcNFw2dGl0bGVcNFwyNENob29zZSBob3cgdG8gc2V0IHRlbXBvXDRcN3ZhbHVlc1w0XDI5U2V0IHRlbXBvIGZvciBlbnRpcmUgcHJvamVjdFwxOVwxXDBcMFwwXDBcMFwwXDBcNCdTZXQgdGVtcG8gZm9yIGxlbmd0aCBvZiB0aGUgYXVkaW8gbG9vcFwxOVwyXDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XApMdWFEaWFsb2dcNFw3RGlhbG9nXDRcNHJ1blw0XDRkdXJcMVwxXDFcMFw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cMTlcMFwwXDBcMFwwXDBcMFwwXDRcOHJlZ2lvbnNcNFwxMXJlZ2lvbmxpc3RcNFw1aXRlclw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFw4TWVzc2FnZVw0XDE1RXN0aW1hdGUgVGVtcG9cMjArVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYW4gYXVkaW8gcmVnaW9uXDRcMTJNZXNzYWdlVHlwZVw0XDVJbmZvXDRcMTFCdXR0b25UeXBlXDRcNkNsb3NlXDRcNnByaW50XDRcMTVjb2xsZWN0Z2FyYmFnZVw0XDEzYXVkaW9fcmVnaW9uXDQlUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXDRcNW5hbWVcNFw3c291cmNlXDRcMTR0b19maWxlc291cmNlXDRcNXBhdGhcNFw5cG9zaXRpb25cNFw3bGVuZ3RoXDRcMlwiXDRcMTFleHRyYWN0QlBNXDRcOXRvbnVtYmVyXDRcOVRlbXBvcmFsXDRcOVRlbXBvTWFwXDRcMTF3cml0ZV9jb3B5XDRcCnNldF90ZW1wb1w0XDZUZW1wb1wxOVw0XDBcMFwwXDBcMFwwXDBcMTl4XDBcMFwwXDBcMFwwXDBcNFwzdHBcNFwKdGltZXBvc190XDRcOFNlc3Npb25cNFwyMG5vbWluYWxfc2FtcGxlX3JhdGVcNFwyNWJlZ2luX3JldmVyc2libGVfY29tbWFuZFw0XDE3Q2hhbmdlIFRlbXBvIE1hcFw0XDd1cGRhdGVcNFwzMWFib3J0X2VtcHR5X3JldmVyc2libGVfY29tbWFuZFw0XDI2Y29tbWl0X3JldmVyc2libGVfY29tbWFuZFw0XDEzYWJvcnRfdXBkYXRlXDRcMjdCUE0gbm90IGZvdW5kIGluIGZpbGVuYW1lLlw0XDI5L29wdC9Mb2dpY2FsQXJkb3VyL21pbmlicG0gIFw0XDE2ID4gL3RtcC9icG0udHh0XDRcM29zXDRcOGV4ZWN1dGVcNFw1ZmlsZVw0XDNpb1w0XDVvcGVuXDRcMTMvdG1wL2JwbS50eHRcNFwyclw0XDhjb250ZW50XDRcNXJlYWRcNFw1KmFsbFw0XDZjbG9zZVw0XDExYnBtX3N0cmluZ1w0XDZtYXRjaFw0XDI3RXN0aW1hdGVkIEJQTTolcyooWyVkJS5dKylcMFw0XDVzb3ggXDAyMDYgLXQgcmF3IC1yIDQ4MDAwIC1lIGZsb2F0IC1jIDEgLSB8IGJwbSA+IC90bXAvYnBtLnR4dFw0XAooWyVkJS5dKylcNFwxMWJwbV9udW1iZXJcNFw0bnVtXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFFcMFwwXDBXXDBcMFwwXDFcMFw2XDE3XDBcMFwwRlwwQFwwR0DAXDCAXDBcMFwwwYBcMFwwXDHBXDBcMGSAXDBcMmJAXDBcMFwzMIBcMYCGXDBAXDCHQEBcMcBcMFwwXDBcMVwxXDFcMEHBXDBcMKSAXDBcMkBcMFwwXDFmXDBcMFwxJlwwgFwwXDVcMFwwXDBcNFw3c3RyaW5nXDRcNm1hdGNoXDRcMzEoJWQlZD8lZD8pWy1fXT8lcypbYkJdW3BQXVttTV1cMTlcMVwwXDBcMFwwXDBcMFwwXDRcMjZbYkJdW3BQXVttTV0lcypbXy1dPyglZCspXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNjcmlwdHNbNl1bIm4iXSA9ICJUZW1wbyAtIEVzdGltYXRlICBhbmQgc2V0IHRlbXBvIiAgIHNjcmlwdHNbN10gPSB7fSBzY3JpcHRzWzddWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgPSBcIktleSAtIEdldCB0aGUga2V5IGFuZCBzY2FsZSBvZiBhbiBhdWRpbyBsb29wXCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKZGVzY3JpcHRpb24gPSBbW1wKRXN0aW1hdGVzIHRoZSBrZXkgb2YgYW4gYXVkaW8gbG9vcCBmb3IgdGhlIHB1cnBvc2Ugb2Ygc2V0dGluZyBhIGRlZmF1bHQga2V5IGFuZCBzY2FsZSBmb3IgdGhlIFNlc3Npb24gUGxheWVyLCBDaG9yZCBHZW5lcmF0b3IsIGFuZCBCYXNzbGluZSBnZW5lYXJhdG9yIHRvIGZvbGxvdy4gVGhpcyBhbHNvIHNlcnZlcyBhcyBhIHBvaW50IG9mIHJlZmVyZW5jZSBmb3Igc2V0dGluZyB1cCBhdXRvdHVuZS4gVGhlIGtleSBhbmQgc2NhbGUgYXJlIHN0b3JlZCBpbiBhIHRleHQgZmlsZSBjYWxsZWQga2V5LnR4dCBsb2NhdGVkIGluIH4vLmNvbmZpZy9hcmRvdXI4L2tleS50eHRcCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcClwKLS0gR2V0IHRoZSB1c2VyIGNvbmZpZyBkaXJlY3RvcnlcCiBzcGF0aCA9IFNlc3Npb246cGF0aCgpXApcCi0tIENvbnN0cnVjdCB0aGUgZnVsbCBwYXRoIHRvIHRoZSBrZXkudHh0IGZpbGVcCiBrZXlfZmlsZV9wYXRoID0gc3BhdGggLi4gXCIva2V5LnR4dFwiXApcCi0tIFJlYWQgdGhlIGNvbnRlbnRzIG9mIHRoZSBrZXkudHh0IGZpbGVcCiBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcInJcIikgLS0gT3BlbiB0aGUgZmlsZSBpbiByZWFkIG1vZGVcCiBmaWxlX2NvbnRlbnQgPSBcIk5vIGtleSBzZXRcIiAtLSBEZWZhdWx0IHZhbHVlIGlmIHRoZSBmaWxlIGNhbm5vdCBiZSByZWFkXApcCmlmIGZpbGUgdGhlblwKICAgIGZpbGVfY29udGVudCA9IGZpbGU6cmVhZChcIiphXCIpIC0tIFJlYWQgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBmaWxlXAogICAgZmlsZTpjbG9zZSgpIC0tIENsb3NlIHRoZSBmaWxlXAplbHNlXAogICAgcHJpbnQoXCJXYXJuaW5nOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciByZWFkaW5nIGF0IFwiIC4uIGtleV9maWxlX3BhdGgpXAplbmRcClwKXApcClwKbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKbG9jYWwgY291bnQgPSAwXApsb2NhbCBtaWRpX3JlZ2lvblwKXApmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0KCk6aXRlcigpIGRvXAogICAgY291bnQgPSBjb3VudCArIDFcCiAgICBpZiByOnRvX2F1ZGlvcmVnaW9uKCk6aXNuaWwoKSB0aGVuXAogICAgICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJHZXQgS2V5XCIsIFwiVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYW4gYXVkaW8gcmVnaW9uLiBDdXJyZW50IHByb2plY3Qga2V5IGlzIHNldCB0byBcIi4uZmlsZV9jb250ZW50LCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgICAgIHByaW50KG1kOnJ1bigpKVwKICAgICAgICBtZCA9IG5pbFwKICAgICAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgICAgIHJldHVyblwKICAgIGVsc2VcCiAgICAgICAgYXVkaW9fcmVnaW9uID0gclwKICAgIGVuZFwKZW5kXApcCmlmIGNvdW50IH49IDEgdGhlblwKICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJHZXQgS2V5XCIsIFwiUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uLiBDdXJyZW50IHByb2plY3Qga2V5IGlzIHNldCB0byBcIi4uZmlsZV9jb250ZW50LCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgcHJpbnQobWQ6cnVuKCkpXAogICAgbWQgPSBuaWxcCiAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgcmV0dXJuXAplbmRcClwKbG9jYWwgcm4gPSBhdWRpb19yZWdpb246bmFtZSgpXApsb2NhbCBzb3VyY2UgPSBhdWRpb19yZWdpb246c291cmNlKDApOnRvX2ZpbGVzb3VyY2UoKTpwYXRoKClcCnByaW50KHNvdXJjZSlcCmxvY2FsIGZpbGVwYXRoID0gc291cmNlXApcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKXAotLSBFeGFtcGxlIHVzYWdlOlwKbG9jYWwgZmlsZW5hbWUgPSBxdW90ZWRmaWxlcGF0aFwKXApcClwKXApcClwKICBsb2NhbCBjb21tYW5kID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIva2V5IFwiIC4uIHF1b3RlZGZpbGVwYXRoXApcCm9zLmV4ZWN1dGUoY29tbWFuZClcClwKXAotLSBPcGVuIHRoZSBmaWxlIGluIHdyaXRlIG1vZGVcClwKXApcCiAgIGxvY2FsIGhhbmRsZSA9IGlvLnBvcGVuKGNvbW1hbmQpXAogICAgbG9jYWwgZmlyc3RyZXN1bHQgPSBoYW5kbGU6cmVhZChcIiphXCIpXAogICAgaGFuZGxlOmNsb3NlKClcClwKICAgIHByaW50KGZpcnN0cmVzdWx0KVwKXAogICAgLS0gRXh0cmFjdCB0aGUga2V5IGFuZCBzY2FsZVwKbG9jYWwgZGtleSwgc2NhbGUgPSBzdHJpbmcubWF0Y2goZmlyc3RyZXN1bHQsIFwiVGhlIGtleSBvZiB0aGUgc29uZyBpcyAoW0EtRyNdKykgKCVhKylcIilcClwKLS0gSWYgdGhlIHNjYWxlIGlzIG1pbm9yLCBhcHBlbmQgJ20nIHRvIHRoZSBrZXlcCi0tIEV4dHJhY3QgdGhlIGtleSBhbmQgc2NhbGVcCmxvY2FsIGRrZXksIHNjYWxlID0gc3RyaW5nLm1hdGNoKGZpcnN0cmVzdWx0LCBcIlRoZSBrZXkgb2YgdGhlIHNvbmcgaXMgKFtBLUdiI10rKSAoJWErKVwiKVwKXAotLSBJZiB0aGUgc2NhbGUgaXMgbWlub3IsIGFwcGVuZCAnbScgdG8gdGhlIGtleVwKaWYgc2NhbGUgPT0gXCJtaW5vclwiIHRoZW5cCiAgICBka2V5ID0gZGtleSAuLiBcIm1cIlwKZW5kXApcCnByaW50KFwiS2V5OiBcIiAuLiBka2V5KVwKcHJpbnQoXCJTY2FsZTogXCIgLi4gc2NhbGUpXApcClwKXAogICAtLSAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkVzdGltYXRlIEtleVwiLCBmaXJzdHJlc3VsdCwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgLS0gcHJpbnQobWQ6cnVuKCkpXAogICAgLS1tZCA9IG5pbFwKICAgIC0tY29sbGVjdGdhcmJhZ2UoKVwKXAogICAgbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwidGFyZ2V0X2tleVwiLCB0aXRsZSA9IFwiRXN0aW1hdGVkIGtleSBvZiBsb29wOiBcIiAuLiBka2V5IC4uIFwiIFwiIC4uIHNjYWxlIC4uIFwiIFdvdWxkIHlvdSBsaWtlIHRvIHNldCB0aGlzIGFzIHRoZSBwcm9qZWN0IGtleT8gQ3VycmVudCBwcm9qZWN0IGtleSBpcyBzZXQgdG8gXCIuLmZpbGVfY29udGVudCwgdmFsdWVzID1cCiAgIHtcCiAgICBbXCJEbyBub3Qgc2V0IHByb2plY3Qga2V5XCJdID0gMSwgW1wic2V0IHRoZSBrZXkgb2YgdGhlIHByb2plY3RcIl0gPSAyXAogICB9LFwKICAgZGVmYXVsdCA9IFwiRG8gbm90IHNldCBwcm9qZWN0IGtleVwiXApcCiAgIH1cCiB9XApcClwKXAogbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkVzdGltYXRlIEtleVwiLCBkaWFsb2dfb3B0aW9ucylcCiBsb2NhbCBydiA9IG9kOnJ1bigpXApcClwKXAppZiBydiBhbmQgcnZbXCJ0YXJnZXRfa2V5XCJdID09IDIgdGhlblwKXApwcmludCAoXCJzZXR0aW5nIGtleSBvZiBwcm9qZWN0XCIpXApcCi0tIEdldCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XAogc3BhdGggPSBTZXNzaW9uOnBhdGgoKVwKXAotLSBDb25zdHJ1Y3QgdGhlIGZ1bGwgcGF0aCB0byB0aGUga2V5LnR4dCBmaWxlXAoga2V5X2ZpbGVfcGF0aCA9IHNwYXRoIC4uIFwiL2tleS50eHRcIlwKXAotLSBPcGVuIHRoZSBmaWxlIGluIHdyaXRlIG1vZGUgKHRoaXMgd2lsbCBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIGNvbnRlbnQpXApsb2NhbCBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcIndcIilcClwKLS0gQ2hlY2sgaWYgdGhlIGZpbGUgd2FzIG9wZW5lZCBzdWNjZXNzZnVsbHlcCmlmIGZpbGUgdGhlblwKICAgIC0tIE9wdGlvbmFsbHksIHlvdSBjYW4gd3JpdGUgbmV3IGNvbnRlbnQgdG8gdGhlIGZpbGVcCiAgICBmaWxlOndyaXRlKGRrZXkgLi4gXCIgIFwiIC4uIHNjYWxlIC4uIFwiXFxuXCIpXApcCiAgICAtLSBDbG9zZSB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKVwKXAogICAgLS0gQ29uc3RydWN0IHRoZSBmdWxsIHBhdGggdG8gdGhlIGtleS50eHQgZmlsZVwKIGtleV9maWxlX3BhdGggPSBzcGF0aCAuLiBcIi9rZXkudHh0XCJcClwKLS0gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIGtleS50eHQgZmlsZVwKIGZpbGUgPSBpby5vcGVuKGtleV9maWxlX3BhdGgsIFwiclwiKSAtLSBPcGVuIHRoZSBmaWxlIGluIHJlYWQgbW9kZVwKIGZpbGVfY29udGVudCA9IFwiTm8ga2V5IHNldFwiIC0tIERlZmF1bHQgdmFsdWUgaWYgdGhlIGZpbGUgY2Fubm90IGJlIHJlYWRcClwKIGVuZFwKXAppZiBmaWxlIHRoZW5cCiAgICBmaWxlX2NvbnRlbnQgPSBmaWxlOnJlYWQoXCIqYVwiKSAtLSBSZWFkIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKSAtLSBDbG9zZSB0aGUgZmlsZVwKXAogICAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkdldCBLZXlcIiwgXCJDdXJyZW50IHByb2plY3Qga2V5IGlzIG5vdyBzZXQgdG8gXCIuLmZpbGVfY29udGVudCwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgbWQgPSBuaWxcCiAgICAgICAgY29sbGVjdGdhcmJhZ2UoKVwKZWxzZVwKICAgIHByaW50KFwiRXJyb3I6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHdyaXRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCmVuZFwKXAplbmRcClwKXApcClwKXApcClwKXApcClwKXApcClwKXApcClwKXApcCmVuZCBlbmRcClwKXApcClwKXApcClwKXApcClwKXApcClwKXApcClwKIiAgc2NyaXB0c1s3XVsiYSJdID0ge30gc2NyaXB0c1s3XVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMva2V5Lmx1YSIgICBzY3JpcHRzWzddWyJjIl0gPSB0cnVlIHNjcmlwdHNbN11bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXApcMFwwXDC+XDBcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwvlwwXDBcMFwxXDFcMjZcOVwxXDBcMEZAQFwwTIDAXDBkgFwwXDFcOEBcMIBGXDBAXDCBXDBcMVwwXYCAXDBcOECAgUaAQVwwR8DBXDCGwEBcMMFcMFwyXDBkgIBcMVw4QICCXDiAwoRGQEFcMGJcMFwwXDBcMzBcMFwygEZAQVwwTMDCXDDBXDBcM1wwZICAXDFcOECAhEZAQVwwTEDDXDBkQFwwXDFcMzBcMFwxgEaAQ1wwgcBcM1wwxsBAXDCdwFwwXDFkQFwwXDFGXDBEXDBMQMRcMGSAXDBcMYGAXDRcMMRcMFwwXDBcN8HEXDBcMTJcMUVcMiSBXDBcMVwxMkFFXDIkXDFcMVwxXDMwQFw3gI2ARVwxXDEywsVcMySCXDBcMVwxMlwyRlw0JIJcMFwxXCJcMlwwXDBcMzBAXDWAXDZCRlwwXDeCRlw0QcJcNlwwgVwyXDdcMMZCQlwwncJcMlw1xkJGXDDHQsdcNceCx1w1XDZDRlwwXDfDR1w2XDdcM0hcNiSCgFwyRoJDXDCMQkhcNKRcMlwwXDFkQlwwXDBcNFwyXDBcMEaCSFwwZEKAXDAmXDCAXDBcMzBcMFwwgFw4wIGRKUFcMFwwqsH3XDEyN1+ARVwxXDMwXDBcNYBcNkFGXDBcN4FGXDJBwVw2XDCBXDFcOVwwxkFCXDCdwVwxXDPGQUZcMMdBx1wzx4HHXDNcNkJGXDBcN8JHXDRcN1wySFw0JIGAXDJGgUNcMIxBSFwypFwxXDBcMWRBXDBcMFw0XDFcMFwwRoFIXDBkQYBcMCZcMIBcMFw2wUhcMFwxMkFJXDIkgVwwXDFGwUhcMEyByVwywYFcNFwwZIGAXDFMwclcMmSBXDBcMUyBwFwyZIFcMFwxhoFDXDDAXDGAXDKkQVwwXDGAXDGAXDLBXDFcClwwXDBcMlwwXDNBXDJcClww3UGCXDNcMFwygFwzQUJcClwwgFwygFwzXYKCXDSGgkpcMIfCSlw1wFwygFw0pEJcMFwxhoJBXDCHXDJLXDXAXDKAXDSkglwwXDHMwkJcNUFcM1wzXDDkgoBcMVwxMkNDXDUkQ1wwXDFcNoNDXDBAXDOAXDUkQ1wwXDFcNkNLXDBcN4NLXDZAXDOAXDWBw1wxMVwwJMOAXDGGQ0tcMIeDS1w3wFwzgFw1XDFcNFwxMlwwpMOAXDFcMzFAzFw3XDMwgFwwgFwwXDRcMFw3QYRcMTJcMJ1DXDRcOFw2hENcMEHEXDEyXDCAXDRcMFw3XYSEXDgkRFwwXDFcNoRDXDBBXDRcMTNcMIBcNIBcN12EhFw4JERcMFwxXDExXDSAXDBLRFwxXDBKhM2aSlw0zpuBhFwxNFwwwFw0XDBcN1wxxVwxNFwwQFw1gFw3gVw1XDE1XDDGRUJcMJ3EXDVcOUqEhJyLhFwwXDCKhEWfilw00J9KhISeSoTPoCtEgFwwRkRGXDBHhNBcOIHEXDE2XDDAXDRcMFw4ZISAXDGMRMhcOKSEXDBcMaJcNFwwXDBcMzCAXDE4gMdcNE5cOVwzMVww0Fw5XDMwwFwxN4DGhENcMFwxXDVcMTdcMOREXDBcMcZEQFwwzITAXDnkhFwwXDFcOMBcNIDGXDRAXDBcMVw1XDFcMN1cNIVcOVw4wISBxoRBXDDHxMFcOVw2xUBcMEFFXDE3XDDkhIBcMeJcNFwwXDBcMzDAXDSAXDEyhdFcOYBcNVwwXDfBxVwxN1wwXDBcNoBcN0FcNlwxOFwwnUVcNlwxMSRFgFwxXDEyRcNcOSRFXDBcMVw2XDVAXDBBXDVcMVwwXDI5RVw1XApcOFwwhYFcNoVBXDBcN8VBXApGxUBcMIFcNVwyXDAkhYBcMcBcNFwwXApcOIDChOJcNFwwXDBcMzCAXDaAXDEyxcJcOYFcNVwzXDAkhYBcMVw4XDCFhFwxMkXDXDkkRVwwXDFcNkVGXDBcN4VGXApBxVw2XDCBRVwxOFwwxkVCXDCdxVw1XDExxkVGXDDHRcdcMTHHhcdcMTFcNkZGXDBcN8ZHXDEyXDdcNkhcMTIkhYBcMkaFQ1wwjEVIXAqkXDVcMFwxZEVcMFwwXDRcNVwwXDBGhUhcMGRFgFwwXDMwXDBcMYBcNoVDXDBBhVwxOFwwhsVAXDBdhYVcCiRFXDBcMSZcMIBcMEtcMFwwXDBcNFw2c3BhdGhcNFw4U2Vzc2lvblw0XDVwYXRoXDRcMTRrZXlfZmlsZV9wYXRoXDRcOS9rZXkudHh0XDRcNWZpbGVcNFwzaW9cNFw1b3Blblw0XDJyXDRcMTNmaWxlX2NvbnRlbnRcNFwxMU5vIGtleSBzZXRcNFw1cmVhZFw0XDMqYVw0XDZjbG9zZVw0XDZwcmludFwyMC1XYXJuaW5nOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciByZWFkaW5nIGF0IFw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cMTlcMFwwXDBcMFwwXDBcMFwwXDRcOHJlZ2lvbnNcNFwxMXJlZ2lvbmxpc3RcNFw1aXRlclwxOVwxXDBcMFwwXDBcMFwwXDBcNFwxNXRvX2F1ZGlvcmVnaW9uXDRcNmlzbmlsXDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcOEdldCBLZXlcMjBLVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYW4gYXVkaW8gcmVnaW9uLiBDdXJyZW50IHByb2plY3Qga2V5IGlzIHNldCB0byBcNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVw0XDEzYXVkaW9fcmVnaW9uXDIwRVBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvbi4gQ3VycmVudCBwcm9qZWN0IGtleSBpcyBzZXQgdG8gXDRcNW5hbWVcNFw3c291cmNlXDRcMTR0b19maWxlc291cmNlXDRcMlwiXDRcMjQvb3B0L0xvZ2ljYWxBcmRvdXIva2V5IFw0XDNvc1w0XDhleGVjdXRlXDRcNnBvcGVuXDRcN3N0cmluZ1w0XDZtYXRjaFw0J1RoZSBrZXkgb2YgdGhlIHNvbmcgaXMgKFtBLUcjXSspICglYSspXDQoVGhlIGtleSBvZiB0aGUgc29uZyBpcyAoW0EtR2IjXSspICglYSspXDRcNm1pbm9yXDRcMm1cNFw2S2V5OiBcNFw4U2NhbGU6IFw0XDV0eXBlXDRcOWRyb3Bkb3duXDRcNGtleVw0XDExdGFyZ2V0X2tleVw0XDZ0aXRsZVw0XDI0RXN0aW1hdGVkIGtleSBvZiBsb29wOiBcNFwyIFwyME8gV291bGQgeW91IGxpa2UgdG8gc2V0IHRoaXMgYXMgdGhlIHByb2plY3Qga2V5PyBDdXJyZW50IHByb2plY3Qga2V5IGlzIHNldCB0byBcNFw3dmFsdWVzXDRcMjNEbyBub3Qgc2V0IHByb2plY3Qga2V5XDRcMjdzZXQgdGhlIGtleSBvZiB0aGUgcHJvamVjdFwxOVwyXDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFwxM0VzdGltYXRlIEtleVw0XDIzc2V0dGluZyBrZXkgb2YgcHJvamVjdFw0XDJ3XDRcNndyaXRlXDRcMyAgXDRcMlwKXDQjQ3VycmVudCBwcm9qZWN0IGtleSBpcyBub3cgc2V0IHRvIFwyMCtFcnJvcjogQ291bGQgbm90IG9wZW4gZmlsZSBmb3Igd3JpdGluZyBhdCBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc2NyaXB0c1s3XVsibiJdID0gIktleSAtIEdldCB0aGUga2V5IGFuZCBzY2FsZSBvZiBhbiBhdWRpbyBsb29wIiAgIHNjcmlwdHNbOF0gPSB7fSBzY3JpcHRzWzhdWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSAgICA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgICAgICAgID0gXCJWb2NhbHMgLSBDaGFuZ2UgVm9jYWwgUGx1Z2lucy9QcmVzZXRzIGZvciBBdWRpbyBUcmFja1wiLFwKXDlsaWNlbnNlICAgICA9IFwiTUlUXCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKXDlkZXNjcmlwdGlvbiA9IFtbQ2hhbmdlcyBwbHVnaW5zL3ByZXNldHMgZm9yIHZvY2FscyAgYmFzZWQgb24gaXMgc2VsZWN0ZWQgZnJvbSAgYSBkaWFsb2cgbWVudSBdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoKVwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcClwKICAtLSBDaGVjayBpZiBubyB0cmFjayBpcyBzZWxlY3RlZFwKICBpZiBzZWw6ZW1wdHkoKSBvciBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOmVtcHR5KCkgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLk9LKTpydW4oKVwKICAgIHJldHVyblwKICBlbmRcClwKICAtLSBDaGVjayBpZiBtb3JlIHRoYW4gb25lIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbC50cmFja3M6cm91dGVsaXN0KCk6c2l6ZSgpID4gMSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKYXVkaW9UcmFja0ZvdW5kID0gZmFsc2UgLS0gRmxhZyB0byBjaGVjayBpZiBhbnkgYXVkaW8gdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fYXVkaW9fdHJhY2soKTppc25pbCgpIHRoZW5cCiAgICAgICBhdWRpb1RyYWNrRm91bmQgPSB0cnVlXAogICAgICAgcHJpbnQoXCJpcyBhbiBhdWRpbyB0cmFja1wiKVwKICAgICAgZW5kXApcCiAgICAgICAgIGlzX3JlY29yZGluZyA9IHI6cmVjX2VuYWJsZV9jb250cm9sKCk6Z2V0X3ZhbHVlKClcCiAgcHJpbnQoXCJpcyByZWNvcmRpbmcgXCIuLmlzX3JlY29yZGluZylcCiAgcHJpbnQodHlwZShpc19yZWNvcmRpbmcpKVwKICBpZiBpc19yZWNvcmRpbmcgPT0gMS4wIHRoZW5cCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJWb2NhbCBwcmVzZXRzIGNhbm5vdCBiZSBjaGFuZ2VkIHdoZW4gdHJhY2sgaXMgYXJtZWQgZm9yIHJlY29yZGluZ1wiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgICAgcmV0dXJuXAogICAgZW5kXAogICAgZW5kXApcCiAgICAgICBpZiAgYXVkaW9UcmFja0ZvdW5kID09IGZhbHNlIHRoZW5cCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyBhdWRpbyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhbiBhdWRpbyB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKICAgIGVuZFwKXApcCmxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcImRyb3Bkb3duXCIsIHRpdGxlID0gXCJDaG9vc2UgVm9jYWwgUHJlc2V0XCIsIHZhbHVlcyA9XAogICB7XAogICAgW1wiQ2hvb3NlIFZvY2FsIFByZXNldFwiXSA9IDEsIFtcIkNsYXNzaWNcIl0gPSAyLFtcIkJyaWdodFwiXSA9IDMsIFtcIkRhbmNlXCJdID0gNCwgW1wiQ29tcHJlc3NlZFwiXSA9IDUsIFtcIlRlbGVwaG9uZVwiXSA9IDYsXAogICAgW1wiTmF0dXJhbFwiXSA9IDcsIFtcIkVkZ2VcIl0gPTgsIFtcIkZ1enogVm9jYWxzXCJdID0gOSwgW1wiVHViZSBWb2NhbHNcIl0gPSAxMCxbXCJEZWVwZXIgVm9jYWxzXCJdID0gMTEsIFtcIlJvYm90IFZvY2Fsc1wiXSA9IDEyXApcCiAgIH0sXAogICBkZWZhdWx0ID0gXCJDaG9vc2UgVm9jYWwgUHJlc2V0XCJcCiAgfVwKIH1cClwKIGxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyAoXCJDaG9vc2UgVm9jYWwgUHJlc2V0XCIsIGRpYWxvZ19vcHRpb25zKVwKIGxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKIC0tIFVzbmcgcHJlc2V0cyB0byBzYXZlIHNldHRpbmdzIGZvciBhdXRvdHVuZSB3aGVuIHN3aXRjaGluZyB2b2NhbHNcClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKXAogIGxvY2FsIHRyYWNrbmFtZSA9ICByOm5hbWUoKVwKXApcClwKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgIGxvY2FsIHByb2MgPSByOm50aF9wbHVnaW4gKDApIC0tIGZvciBldmVyeSBwbHVnaW5cClw5XDlcOWlmIHByb2M6aXNuaWwgKCkgdGhlbiBicmVhayBlbmRcClw5XDlcOWxvY2FsIHBpID0gcHJvYzp0b19pbnNlcnQgKClcClw5XDlwcmVzZXQgPSBwaTpwbHVnaW4oMCk6bGFzdF9wcmVzZXQoKVwKXDlcOXByaW50IChwcmVzZXQpXApcClw5XDlsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKHRyYWNrbmFtZSk6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKLS1sb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImNsYXNzaWMtMlwiKVwKXApcCnByb2M6c2F2ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCmVuZCBlbmQgZW5kXApcCmxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6YWN0aXZlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZFwKXApcCi0tIEZ1bmN0aW9uIHRvIGNsZWFyIG91dCBhbGwgcGx1Z2lucyBhbmQgbmFtZSB0aGUgdHJhY2tcClwKZnVuY3Rpb24gYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhwcmVzZXRfbmFtZSlcCiAgICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICAgICAgbG9jYWwgcGx1Z3MgPSBBUkRPVVIuUHJvY2Vzc29yTGlzdCgpOyAtLSBjcmVhdGUgYSBQbHVnaW5MaXN0XAogICAgICAgIGxvY2FsIGkgPSAwO1wKICAgICAgICByZXBlYXQgLS0gaXRlcmF0ZSBvdmVyIGFsbCBwbHVnaW5zL3Byb2Nlc3NvcnNcCiAgICAgICAgICAgIGxvY2FsIHByb2MgPSByOm50aF9wcm9jZXNzb3IgKGkpXAogICAgICAgICAgICBpZiBub3QgcHJvYzppc25pbCAoKSB0aGVuXAogICAgICAgICAgICAgICAgLS0gYXBwZW5kIHBsdWdpbiB0byBsaXN0XAogICAgICAgICAgICAgICAgcGx1Z3M6cHVzaF9iYWNrKHByb2MpXAogICAgICAgICAgICBlbmRcCiAgICAgICAgICAgIGkgPSBpICsgMVwKICAgICAgICB1bnRpbCBwcm9jOmlzbmlsICgpXApcCiAgICAgICAgcjpyZW1vdmVfcHJvY2Vzc29ycyAocGx1Z3MsIG5pbClcCiAgICAgICAgcjpzZXRfbmFtZShwcmVzZXRfbmFtZSwgbmlsKVwKICAgIGVuZFwKZW5kXApcCi0tIEV4YW1wbGUgdXNhZ2U6XApcClwKXAotLSBDcmVhdGUgYSBmdW5jdGlvbiB0byBhZGQgcGx1Z2luc1wKXApmdW5jdGlvbiBhZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhwbHVnaW5fbmFtZSwgcGx1Z2luX3R5cGUsIHBvc2l0aW9uKVwKICAgIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCiAgICBpZiBub3QgRWRpdG9yOmdldF9zZWxlY3Rpb24oKTplbXB0eSgpIGFuZCBub3QgRWRpdG9yOmdldF9zZWxlY3Rpb24oKS50cmFja3M6cm91dGVsaXN0KCk6ZW1wdHkoKSB0aGVuXAogICAgICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogICAgICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICAgICAgICBsb2NhbCBwcm9jID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBwbHVnaW5fdHlwZSwgXCJcIilcCiAgICAgICAgICAgIGFzc2VydChub3QgcHJvYzppc25pbCgpKVwKICAgICAgICAgICAgcjphZGRfcHJvY2Vzc29yX2J5X2luZGV4KHByb2MsIHBvc2l0aW9uLCBuaWwsIHRydWUpXAogICAgICAgIGVuZFwKICAgIGVuZFwKZW5kXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyIHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcImNsYXNzaWNcIilcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIng0Mi1BdXRvdHVuZSAoc2NhbGVzKVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDApIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjbGFzc2ljXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiY2xhc3NpY1wiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImNsYXNzaWNcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gQUNFIENvbXByZXNzb3JcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjbGFzc2ljXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY2xhc3NpY1wiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjbGFzc2ljXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY2xhc3NpYy0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIFRhcGUgRGVsYXkgU2ltdWxhdGlvblwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIlRhcGUgRGVsYXkgU2ltdWxhdGlvblwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjbGFzc2ljXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig0KTp0b19pbnNlcnQoKTpwbHVnaW4oNClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY2xhc3NpY1wiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBHeFJldmVyYi1TdGVyZW9cClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJHeFJldmVyYi1TdGVyZW9cIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA1KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiY2xhc3NpY1wiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNSk6dG9faW5zZXJ0KCk6cGx1Z2luKDUpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImNsYXNzaWNcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXApcCi0tICoqKiBFbmQgb2YgY2xhc3NpYyB2b2NhbHMgKioqKlwKZW5kXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDMgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwiYnJpZ2h0XCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiYnJpZ2h0XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcCi0tIENsYXNzaWMgVm9jYWxzXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImJyaWdodFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImJyaWdodFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImJyaWdodFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImJyaWdodFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkNhbGYgRXhjaXRlclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJicmlnaHRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJicmlnaHRcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiVEFQIERlRXNzZXJcIiwgQVJET1VSLlBsdWdpblR5cGUuTEFEU1BBLCA0KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiYnJpZ2h0XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig0KTp0b19pbnNlcnQoKTpwbHVnaW4oNClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiYnJpZ2h0XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEd4UmV2ZXJiLVN0ZXJlb1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDUpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJicmlnaHRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDUpOnRvX2luc2VydCgpOnBsdWdpbig1KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJicmlnaHQtMlwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKLS0gKioqIEVuZCBvZiBicmlnaHQgdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA0IHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcImRhbmNlXCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkYW5jZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRhbmNlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZGFuY2VcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJDYWxmIEV4Y2l0ZXJcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAzKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkYW5jZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgUmV2ZXJiXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRhbmNlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig0KTp0b19pbnNlcnQoKTpwbHVnaW4oNClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZGFuY2VcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gR3hSZXZlcmItU3RlcmVvXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiR3hDaG9ydXMtU3RlcmVvXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRhbmNlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZGFuY2VcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA2KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDYpOnRvX2luc2VydCgpOnBsdWdpbig2KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkYW5jZS0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXAotLSAqKiogRW5kIG9mIGRhbmNlIHZvY2FscyAqKioqXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gNSB0aGVuXApcCmFwcGx5X3ByZXNldF90b190cmFja3MoXCJjb21wcmVzc2VkXCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiY29tcHJlc3NlZFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjb21wcmVzc2VkXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigxKTp0b19pbnNlcnQoKTpwbHVnaW4oMSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY29tcHJlc3NlZFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNvbXByZXNzZWRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjb21wcmVzc2VkXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIENvbXByZXNzb3JcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAzKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiY29tcHJlc3NlZFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMyk6dG9faW5zZXJ0KCk6cGx1Z2luKDMpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImNvbXByZXNzZWQtMlwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJDb21iIFNwbGl0dGVyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNvbXByZXNzZWRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjb21wcmVzc2VkXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEd4UmV2ZXJiLVN0ZXJlb1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkd4Q29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDUpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjb21wcmVzc2VkXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY29tcHJlc3NlZFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDYpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjb21wcmVzc2VkXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig2KTp0b19pbnNlcnQoKTpwbHVnaW4oNilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY29tcHJlc3NlZC0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXAotLSAqKiogRW5kIG9mIGNvbXByZXNzZWQgdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA2IHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcInRlbGVwaG9uZVwiKVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInRlbGVwaG9uZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0ZWxlcGhvbmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZWxlcGhvbmVcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gQUNFIENvbXByZXNzb3JcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0ZWxlcGhvbmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZWxlcGhvbmVcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJUQVAgU2NhbGluZyBMaW1pdGVyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxBRFNQQSwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInRlbGVwaG9uZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMyk6dG9faW5zZXJ0KCk6cGx1Z2luKDMpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbGVwaG9uZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJSYXRhdG91aWxsZVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0ZWxlcGhvbmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZWxlcGhvbmVcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBSZXZlcmJcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA1KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwidGVsZXBob25lXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVsZXBob25lXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXApcClwKXApcClwKLS0gKioqIEVuZCBvZiB0ZWxlcGhvbmUgdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA3IHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcIm5hdHVyYWxcIilcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIng0Mi1BdXRvdHVuZSAoc2NhbGVzKVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDApIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJuYXR1cmFsXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcCi0tIENsYXNzaWMgVm9jYWxzXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcIm5hdHVyYWxcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJuYXR1cmFsXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEFDRSBDb21wcmVzc29yXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIENvbXByZXNzb3JcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAyKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwibmF0dXJhbFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcIm5hdHVyYWxcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAyKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwibmF0dXJhbFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcIm5hdHVyYWwtMlwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcCi0tICoqKiBFbmQgb2YgbmF0dXJhbCB2b2NhbHMgKioqKlwKZW5kXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDggdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwiZWRnZVwiKVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImVkZ2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZWRnZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImVkZ2VcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gQUNFIENvbXByZXNzb3JcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJlZGdlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZWRnZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkNhbGYgRXhjaXRlclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJlZGdlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZWRnZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJlZGdlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig0KTp0b19pbnNlcnQoKTpwbHVnaW4oNClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZWRnZS0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKLS0gKioqIEVuZCBvZiBuYXR1cmFsIHZvY2FscyAqKioqXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gOSB0aGVuXApcCmFwcGx5X3ByZXNldF90b190cmFja3MoXCJmdXp6XCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZnV6elwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJmdXp6XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigxKTp0b19pbnNlcnQoKTpwbHVnaW4oMSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZnV6elwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImZ1enpcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJmdXp6XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiTURBIE92ZXJkcml2ZVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJmdXp6XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZnV6elwiKVwKXApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXApcClwKLS0gKioqIEVuZCBvZiBuYXR1cmFsIHZvY2FscyAqKioqXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMTAgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwidHViZVwiKVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInR1YmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwidHViZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInR1YmVcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gQUNFIENvbXByZXNzb3JcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0dWJlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidHViZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0dWJlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidHViZSAyXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiWmFtVHViZVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0dWJlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig0KTp0b19pbnNlcnQoKTpwbHVnaW4oNClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidHViZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBSZXZlcmJcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA1KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwidHViZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNSk6dG9faW5zZXJ0KCk6cGx1Z2luKDUpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInR1YmVcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXAotLSAqKiogRW5kIG9mIG5hdHVyYWwgdm9jYWxzICoqKipcCmVuZFwKIGlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDExIHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcImRlZXBlclwiKVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRlZXBlclwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkZWVwZXJcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkZWVwZXJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gQUNFIENvbXByZXNzb3JcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkZWVwZXJcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkZWVwZXJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJSdWJiZXIgQmFuZCBNb25vIFBpdGNoIFNoaWZ0ZXJcIiwgQVJET1VSLlBsdWdpblR5cGUuTEFEU1BBLCAzKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGVlcGVyXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZGVlcGVyXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiVEFQIENob3J1cy9GbGFuZ2VyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxBRFNQQSwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRlZXBlclwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNCk6dG9faW5zZXJ0KCk6cGx1Z2luKDQpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRlZXBlclwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDUpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkZWVwZXJcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDUpOnRvX2luc2VydCgpOnBsdWdpbig1KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkZWVwZXIgMlwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKXAotLSAqKiogRW5kIG9mIG5hdHVyYWwgdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxMiB0aGVuXApcCmFwcGx5X3ByZXNldF90b190cmFja3MoXCJyb2JvdFwiKVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwicm9ib3RcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJyb2JvdFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwicm9ib3RcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJMRk8gUGhhc2VyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwicm9ib3RcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJNREEgUmluZ01vZFwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJyb2JvdFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNCk6dG9faW5zZXJ0KCk6cGx1Z2luKDQpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInJvYm90XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiVEFQIENob3J1cy9GbGFuZ2VyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxBRFNQQSwgNSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwicm9ib3RcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKZW5kXApcClwKXApcClwKXApcClwKXApcClwKZW5kIGVuZFwKIiAgc2NyaXB0c1s4XVsiYSJdID0ge30gc2NyaXB0c1s4XVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvdm9jYWxzLmx1YSIgICBzY3JpcHRzWzhdWyJjIl0gPSB0cnVlIHNjcmlwdHNbOF1bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDlcMFwwXDBtXDRcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFw5XDBcMFwwbVw0XDBcMFwwXDBcMjPyXDlcMFwwXDZcMEBcMFwxMkBAXDAkgFwwXDFMgEBcMGSAXDBcMWJAXDBcMFwzMIBcMYBHwEBcMExcMMFcMGSAXDBcMUyAwFwwZIBcMFwxYlwwXDBcMFwzMEBcM4BGQEFcMEeAwVwwgcBcMVwwwVwwXDJcMFw2QUFcMFw3QUJcMlw3wUFcMkZBQVwwR4HCXDJHwcJcMmSAgFwyTFwww1wwZEBcMFwxJlwwgFwwR8BAXDBMXDDBXDBkgFwwXDFMQMNcMGSAXDBcMSBAXDCHXDMwQFwzgEZAQVwwR4DBXDCBwFwxXDDBwFwzXDBcNkFBXDBcN0FCXDJcN8FBXDJGQUFcMEeBwlwyR8HCXDJkgIBcMkxcMMNcMGRAXDBcMSZcMIBcMFw4QESIR8BAXDBMXDDBXDBkgFwwXDFMgMRcMGRcMFwxXDFcMzBAXDEygEzBRFwyZIFcMFwxTFwxxVwyZIFcMFwxYkFcMFwwXDMwwFwygEzBRFwyZIFcMFwxTEHFXDJkgVwwXDFMXDHFXDJkgVwwXDFiQVwwXDBcMzDAXDCAXDiARYhGwUVcMIFcMVw2XDBkQVwwXDFMgUZcMmSBXDBcMUzBxlwyZIFcMFwxXDhAgYxGwUVcMIFcMVw3XDDGQUZcMJ3BXDFcM2RBXDBcMUbBRVwwhkFHXDDGQUZcMKRcMVwwXDFkQVwwXDBGQUZcMFwzMYDHXDJcMzBAXDOARkFBXDBHgcFcMoHBXDFcMMHBXDdcMFw2QkFcMFw3QkJcNFw3wkFcNEZCQVwwR4LCXDRHXDLIXDRkgYBcMkxcMcNcMmRBXDBcMSZcMIBcMGlAXDBcMOrA8lwxMjdGXDBEXDBcMzFAxFwwXDMwQFwzgEZAQVwwR4DBXDCBwFwxXDDBQFw4XDBcNkFBXDBcN0FCXDJcN8FBXDJGQUFcMEeBwlwyR1wxyFwyZICAXDJMXDDDXDBkQFwwXDEmXDCAXDBLXDCAXDCLQFwxXDCKgMiOioDIkYpASZLLXDBcM1wwyoDDkspcMMqTyoDKlMpcMMuVyoDLlspcMMyXyoDMmMpcMM2ZyoDNmspcMM6byoDOnMpcMM+disBcMJOKQMmea0CAXDCGQEFcMIeAT1wxwUBcOVwwXDBcMYBcMKSAgFwxzFwwQ1wx5IBcMFwxXDZcMUBcMFwxMkFAXDIkgVwwXDFMgUBcMmSBXDBcMWJBXDBcMFwzMEBcMTSAR8FAXDJMXDHBXDJkgVwwXDFMgcBcMmSBXDBcMWJBXDBcMFwzMIBcMTKAR8FAXDJMXDHBXDJkgVwwXDFMgcRcMmRcMVwxXDFcMzCAXAqATMJPXDRkglwwXDGMwkRcNKSCXDBcMYxcMkVcNaSCXDBcMaJCXDBcMFwzMIBcOICMXDJQXDRcMUNcMTZcMKSCgFwxzFwyRVw15IJcMFwx4kJcMFwwXDMwQFw3gMyCUFw15IJcMFwxXDEyXDPRXDWBQ1wxNlwwJIOAXDFcMTJDUVw2JINcMFwxXDhcMIOhXDbDRVwwRsNQXDAkQ1wwXDFcNoNRXDBcMTLDUVw2gFwzgFw0JIOAXDFcMTLDRFw2JINcMFwxXDEyXDNQXDaBQ1wxNlwwJIOAXDFcMTKDUFw2JINcMFwxXDEyXDNRXDaBQ1wxNlwwJIOAXDFMXDNSXDbBQ1wxOFwwZEOAXDFpQVwwXDDqgfRcMTI3RlwxQFwwTEHAXDJkgVwwXDGMgcBcMqSBXDBcMaJBXDBcMFwzMMBcN4CHwcBcMoxcMUFcM6SBXDBcMYyBQFwzpIFcMFwxokFcMFwwXDMwXDBcNoCHwcBcMoxcMUFcM6SBXDBcMYyBRFwzpFwxXDFcMVwzMFwwXDSAjMLEXDSkglwwXDGMXDJFXDWkglwwXDGiQlwwXDBcMzCAXDKAjFwy0Fw0XDFDXDE2XDCkgoBcMVw4gFwypYaCUlwwjMJSXDWkglwwXDFcOICCpYbCRVwwxsJSXDCkQlwwXDGpQVwwXDAqXDL7XDEyN6xcMVwwXDBcOIBcMaasQVwwXDBcOICBpuJcMFwwXDBcMzBcMDAwNYCHgchcMVwzMVwwSlwzXDMwQDSAhlwxU1wwwYFcMTlcMKRBXDBcMYZBU1wwwcFcMTlcMFw2XDJUXDBcN0JUXDRcN4JUXDRBwlwyMFwwpEFcMFwyhlwxVVwwjMFRXDNcMYJcMTlcMKSBgFwxjMFEXDOkgVwwXDGMXDFQXDNcMcJcMjBcMKSBgFwxjIFQXDOkgVwwXDGMXDFRXDNcMcJcMjBcMKSBgFwxzEFVXDNBQlwxOFww5IGAXDFcMTKCVVwzgFwygFwzJEKAXDFcMTLCVVwzgUJcMThcMCRCgFwxXDbCUlwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTFwy1lw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMQ9ZcNmSDXDBcMWJDXDBcMFwzMIBcMoBMXDNQXDbBw1wyMFwwZIOAXDFcOEBcM6VGg1JcMEyD1lw2ZINcMFwxXDhAg6VGw0VcMIbDUlwwZENcMFwxaUJcMFww6lwy+1wxMjdcNkJTXDBBwlwyMlwwhlwyVFwwh0JUXDWHglRcNcFcMlwyM1wwJEJcMFwyXDZcMlVcMFwxMsJRXDSBglwxOVwwJIKAXDFcMTLCRFw0JIJcMFwxXDEyXDJQXDSBXDJcMjNcMCSCgFwxXDEyglBcNCSCXDBcMVwxMlwyUVw0gVwyXDIzXDAkgoBcMUxCVVw0wYJcMTlcMGSCgFwxjIJVXDRcMFwzgFw0pEKAXDGGQlNcMMFCXDIzXDBcNlwzVFwwXDdDVFw2XDeDVFw2QVwzXApcMKRCXDBcMoZcMlVcMIzCUVw1XDGDXDE5XDCkgoBcMYzCRFw1pIJcMFwxjFwyUFw1XDFcM1wKXDCkgoBcMYyCUFw1pIJcMFwxjFwyUVw1XDFcM1wKXDCkgoBcMcxCVVw1QYNcMTlcMOSCgFwxXDEyg1VcNYBcM4BcNSRDgFwxXDZDU1wwQcNcMjJcMIZcM1RcMIdDVFw3h4NUXDfBg1wKXDAkQ1wwXDJcNlwzVVwwXDEyw1FcNoGDXDE5XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTJcM1BcNoGDXApcMCSDgFwxXDEyg1BcNiSDXDBcMVwxMlwzUVw2gYNcClwwJIOAXDFMQ1VcNsGDXDIzXDBkg4BcMYyDVVw2XDBcNIBcNqRDgFwxhkNTXDDBw1wyM1wwXDZcNFRcMFw3RFRcOFw3hFRcOEFcNFwxMVwwpENcMFwyhlwzVVwwjMNRXDdcMYRcMTlcMKSDgFwxjMNEXDekg1wwXDGMXDNQXDdcMVw0XDExXDCkg4BcMYyDUFw3pINcMFwxjFwzUVw3XDFcNFwxMVwwpIOAXDHMQ1VcN0GEXDE5XDDkg4BcMVwxMoRVXDeAXDSAXDckRIBcMVw2RFNcMEFcNFwyNFwwhlw0VFwwh0RUXDmHhFRcOcGEXDExXDAkRFwwXDJcNlw0VVwwXDEyxFFcOIGEXDE5XDAkhIBcMVwxMsREXDgkhFwwXDFcMTJcNFBcOIGEXDExXDAkhIBcMVwxMoRQXDgkhFwwXDFcMTJcNFFcOIGEXDExXDAkhIBcMUxEVVw4wYRcMTlcMGSEgFwxjIRVXDhcMFw1gFw4pESAXDHiXDBcMFwwXDMwXDAwMDWAh4HIXDFcMzGASlwzXDMwQDSAhlwxU1wwwUFcMjRcMKRBXDBcMYZBU1wwwcFcMTlcMFw2XDJUXDBcN0JUXDRcN4JUXDRBwlwyMFwwpEFcMFwyhlwxVVwwjMFRXDNcMUJcMjRcMKSBgFwxjMFEXDOkgVwwXDGMXDFQXDNcMcJcMjBcMKSBgFwxjIFQXDOkgVwwXDGMXDFRXDNcMcJcMjBcMKSBgFwxzEFVXDNBQlwxOFww5IGAXDFcMTKCVVwzgFwygFwzJEKAXDFcMTLCVVwzgUJcMThcMCRCgFwxXDbCUlwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTFwy1lw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMQ9ZcNmSDXDBcMWJDXDBcMFwzMIBcMoBMXDNQXDbBw1wyMFwwZIOAXDFcOEBcM6VGg1JcMEyD1lw2ZINcMFwxXDhAg6VGw0VcMIbDUlwwZENcMFwxaUJcMFww6lwy+1wxMjdcNkJTXDBBwlwyMlwwhlwyVFwwh0JUXDWHglRcNcFcMlwyM1wwJEJcMFwyXDZcMlVcMFwxMsJRXDSBQlwyNFwwJIKAXDFcMTLCRFw0JIJcMFwxXDEyXDJQXDSBXDJcMjNcMCSCgFwxXDEyglBcNCSCXDBcMVwxMlwyUVw0gVwyXDIzXDAkgoBcMUxCVVw0wUJcMjRcMGSCgFwxjIJVXDRcMFwzgFw0pEKAXDGGQlNcMMFCXDIzXDBcNlwzVFwwXDdDVFw2XDeDVFw2QVwzXApcMKRCXDBcMoZcMlVcMIzCUVw1XDFDXDI0XDCkgoBcMYzCRFw1pIJcMFwxjFwyUFw1XDFcM1wKXDCkgoBcMYyCUFw1pIJcMFwxjFwyUVw1XDFcM1wKXDCkgoBcMcxCVVw1QUNcMjRcMOSCgFwxXDEyg1VcNYBcM4BcNSRDgFwxXDZDU1wwQYNcMjRcMIZcM1RcMIdDVFw3h4NUXDfBg1wKXDAkQ1wwXDJcNlwzVVwwXDEyw1FcNoFDXDI0XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTJcM1BcNoGDXApcMCSDgFwxXDEyg1BcNiSDXDBcMVwxMlwzUVw2gYNcClwwJIOAXDFMQ1VcNsFDXDI0XDBkg4BcMYyDVVw2XDBcNIBcNqRDgFwxhkNTXDDBw1wyNFwwXDZcNFRcMFw3RFRcOFw3XDRZXDhBXDRcMTFcMKRDXDBcMoZcM1VcMIzDUVw3XDFEXDI0XDCkg4BcMYzDRFw3pINcMFwxjFwzUFw3XDFcNFwxMVwwpIOAXDGMg1BcN6SDXDBcMYxcM1FcN1wxXDRcMTFcMKSDgFwxzENVXDdBRFwyNFww5IOAXDFcMTKEVVw3gFw0gFw3JESAXDFcNkRTXDBBxFwyMlwwhlw0VFwwh0RUXDmHhFRcOcGEXDExXDAkRFwwXDJcNlw0VVwwXDEyxFFcOIFEXDI0XDAkhIBcMVwxMsREXDgkhFwwXDFcMTJcNFBcOIGEXDExXDAkhIBcMVwxMoRQXDgkhFwwXDFcMTJcNFFcOIGEXDExXDAkhIBcMUxEVVw4wURcMjVcMGSEgFwxjIRVXDhcMFw1gFw4pESAXDHiXDBcMFwwXDMwwDuAh4HIXDFcMzFcMEtcM1wzMFwwO4CGXDFTXDDBgVwyNVwwpEFcMFwxhkFTXDDBwVwxOVwwXDZcMlRcMFw3QlRcNFw3glRcNEHCXDIwXDCkQVwwXDKGXDFVXDCMwVFcM1wxglwyNVwwpIGAXDGMwURcM6SBXDBcMYxcMVBcM1wxwlwyMFwwpIGAXDGMgVBcM6SBXDBcMYxcMVFcM1wxwlwyMFwwpIGAXDHMQVVcM0FCXDE4XDDkgYBcMVwxMoJVXDOAXDKAXDMkQoBcMVwxMsJVXDOBQlwxOFwwJEKAXDFcNsJSXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMXDLWXDRkXDJcMVwxXDMwXDBcNIBMw0RcNmSDXDBcMUxD1lw2ZINcMFwxYkNcMFwwXDMwgFwygExcM1BcNsHDXDIwXDBkg4BcMVw4QFwzpUaDUlwwTIPWXDZkg1wwXDFcOECDpUbDRVwwhsNSXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2QlNcMEHCXDIyXDCGXDJUXDCHQlRcNYeCVFw1wVwyXDIzXDAkQlwwXDJcNlwyVVwwXDEywlFcNIGCXDI1XDAkgoBcMVwxMsJEXDQkglwwXDFcMTJcMlBcNIFcMlwyM1wwJIKAXDFcMTKCUFw0JIJcMFwxXDEyXDJRXDSBXDJcMjNcMCSCgFwxTEJVXDTBglwyNVwwZIKAXDGMglVcNFwwXDOAXDSkQoBcMYZCU1wwwUJcMjNcMFw2XDNUXDBcN0NUXDZcN4NUXDZBXDNcClwwpEJcMFwyhlwyVVwwjMJRXDVcMYNcMjVcMKSCgFwxjMJEXDWkglwwXDGMXDJQXDVcMVwzXApcMKSCgFwxjIJQXDWkglwwXDGMXDJRXDVcMVwzXApcMKSCgFwxzEJVXDVBg1wyNVww5IKAXDFcMTKDVVw1gFwzgFw1JEOAXDFcNkNTXDBBg1wyNFwwhlwzVFwwh0NUXDeHg1RcN8GDXApcMCRDXDBcMlw2XDNVXDBcMTLDUVw2gYNcMjVcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMlwzUFw2gYNcClwwJIOAXDFcMTKDUFw2JINcMFwxXDEyXDNRXDaBg1wKXDAkg4BcMUxDVVw2wYNcMjVcMGSDgFwxjINVXDZcMFw0gFw2pEOAXDGGQ1NcMMHDXDI1XDBcNlw0VFwwXDdEVFw4XDeEVFw4QVw0XDExXDCkQ1wwXDKGXDNVXDCMw1FcN1wxhFwyNVwwpIOAXDGMw0RcN6SDXDBcMYxcM1BcN1wxXDRcMTFcMKSDgFwxjINQXDekg1wwXDGMXDNRXDdcMVw0XDExXDCkg4BcMcxDVVw3QYRcMjVcMOSDgFwxXDEyhFVcN4BcNIBcNyREgFwxXDZEU1wwQVw0XDI2XDCGXDRUXDCHRFRcOYeEVFw5wYRcMTFcMCREXDBcMlw2XDRVXDBcMTLEUVw4gYRcMjVcMCSEgFwxXDEyxERcOCSEXDBcMVwxMlw0UFw4gYRcMTFcMCSEgFwxXDEyhFBcOCSEXDBcMVwxMlw0UVw4gYRcMTFcMCSEgFwxTERVXDjBhFwyNVwwZISAXDGMhFVcOFwwXDWAXDikRIBcMYZEU1wwwcRcMjJcMFw2XDVUXDBcN0VUXApcN4VUXApBXDVcMTJcMKREXDBcMoZcNFVcMIzEUVw5XDGFXDI1XDCkhIBcMYzERFw5pIRcMFwxjFw0UFw5XDFcNVwxMlwwpISAXDGMhFBcOaSEXDBcMYxcNFFcOVwxXDVcMTJcMKSEgFwxzERVXDlBRVwyNlww5ISAXDFcMTKFVVw5gFw1gFw5JEWAXDHiXDBcMFwwXDMwwDuAh4HIXDFcMzGAS1wzXDMwXDA7gIZcMVNcMMGBXDI2XDCkQVwwXDGGQVNcMMHBXDE5XDBcNlwyVFwwXDdCVFw0XDeCVFw0QcJcMjBcMKRBXDBcMoZcMVVcMIzBUVwzXDGCXDI2XDCkgYBcMYzBRFwzpIFcMFwxjFwxUFwzXDHCXDIwXDCkgYBcMYyBUFwzpIFcMFwxjFwxUVwzXDHCXDIwXDCkgYBcMcxBVVwzQUJcMThcMOSBgFwxXDEyglVcM4BcMoBcMyRCgFwxXDEywlVcM4FCXDE4XDAkQoBcMVw2wlJcMFwzMUBEXDRcMzCAXDmAXDZcMkBcMFwxMkJAXDQkglwwXDFMgkBcNGSCXDBcMWJCXDBcMFwzMMBcN4BHwkBcNExcMsFcNGSCXDBcMUyCwFw0ZIJcMFwxYkJcMFwwXDMwXDBcNoBHwkBcNExcMsFcNGSCXDBcMUxcMtZcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTEPWXDZkg1wwXDFiQ1wwXDBcMzCAXDKATFwzUFw2wcNcMjBcMGSDgFwxXDhAXDOlRoNSXDBMg9ZcNmSDXDBcMVw4QIOlRsNFXDCGw1JcMGRDXDBcMWlCXDBcMOpcMvtcMTI3XDZCU1wwQcJcMjJcMIZcMlRcMIdCVFw1h4JUXDXBXDJcMjNcMCRCXDBcMlw2XDJVXDBcMTLCUVw0gYJcMjZcMCSCgFwxXDEywkRcNCSCXDBcMVwxMlwyUFw0gVwyXDIzXDAkgoBcMVwxMoJQXDQkglwwXDFcMTJcMlFcNIFcMlwyM1wwJIKAXDFMQlVcNMGCXDI2XDBkgoBcMYyCVVw0XDBcM4BcNKRCgFwxhkJTXDDBQlwyM1wwXDZcM1RcMFw3Q1RcNlw3g1RcNkFcM1wKXDCkQlwwXDKGXDJVXDCMwlFcNVwxg1wyNlwwpIKAXDGMwkRcNaSCXDBcMYxcMlBcNVwxXDNcClwwpIKAXDGMglBcNaSCXDBcMYxcMlFcNVwxXDNcClwwpIKAXDHMQlVcNUGDXDI2XDDkgoBcMVwxMoNVXDWAXDOAXDUkQ4BcMVw2Q1NcMEFDXDIzXDCGXDNUXDCHQ1RcN4eDVFw3wYNcClwwJENcMFwyXDZcM1VcMFwxMsNRXDaBg1wyNlwwJIOAXDFcMTLDRFw2JINcMFwxXDEyXDNQXDaBg1wKXDAkg4BcMVwxMoNQXDYkg1wwXDFcMTJcM1FcNoGDXApcMCSDgFwxTENVXDbBw1wyNlwwZIOAXDGMg1VcNlwwXDSAXDakQ4BcMYZDU1wwwVwzXDI3XDBcNlw0VFwwXDdEVFw4XDeEVFw4QVw0XDExXDCkQ1wwXDKGXDNVXDCMw1FcN1wxhFwyNlwwpIOAXDGMw0RcN6SDXDBcMYxcM1BcN1wxXDRcMTFcMKSDgFwxjINQXDekg1wwXDGMXDNRXDdcMVw0XDExXDCkg4BcMcxDVVw3QYRcMjZcMOSDgFwxXDEyhFVcN4BcNIBcNyREgFwxXDZEU1wwQURcMjdcMIZcNFRcMIdEVFw5h4RUXDnBhFwxMVwwJERcMFwyXDZcNFVcMFwxMsRRXDiBhFwyNlwwJISAXDFcMTLERFw4JIRcMFwxXDEyXDRQXDiBhFwxMVwwJISAXDFcMTKEUFw4JIRcMFwxXDEyXDRRXDiBhFwxMVwwJISAXDFMRFVcOMGEXDI2XDBkhIBcMYyEVVw4XDBcNYBcOKREgFwxhkRTXDDBxFwyMlwwXDZcNVRcMFw3RVRcClw3hVRcCkFcNVwxMlwwpERcMFwyhlw0VVwwjMRRXDlcMYVcMjZcMKSEgFwxjMREXDmkhFwwXDGMXDRQXDlcMVw1XDEyXDCkhIBcMYyEUFw5pIRcMFwxjFw0UVw5XDFcNVwxMlwwpISAXDHMRFVcOUHFXDI2XDDkhIBcMVwxMoVVXDmAXDWAXDkkRYBcMeJcMFwwXDBcMzBcMDAwNYCHgchcMVwzMVwwTFwzXDMwQDSAhlwxU1wwwYFcMjdcMKRBXDBcMYZBU1wwwcFcMTlcMFw2XDJUXDBcN0JUXDRcN4JUXDRBwlwyMFwwpEFcMFwyhlwxVVwwjMFRXDNcMYJcMjdcMKSBgFwxjMFEXDOkgVwwXDGMXDFQXDNcMcJcMjBcMKSBgFwxjIFQXDOkgVwwXDGMXDFRXDNcMcJcMjBcMKSBgFwxzEFVXDNBQlwxOFww5IGAXDFcMTKCVVwzgFwygFwzJEKAXDFcMTLCVVwzgUJcMThcMCRCgFwxXDbCUlwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTFwy1lw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMQ9ZcNmSDXDBcMWJDXDBcMFwzMIBcMoBMXDNQXDbBw1wyMFwwZIOAXDFcOEBcM6VGg1JcMEyD1lw2ZINcMFwxXDhAg6VGw0VcMIbDUlwwZENcMFwxaUJcMFww6lwy+1wxMjdcNkJTXDBBwlwyMlwwhlwyVFwwh0JUXDWHglRcNcFcMlwyM1wwJEJcMFwyXDZcMlVcMFwxMsJRXDSBglwyN1wwJIKAXDFcMTLCRFw0JIJcMFwxXDEyXDJQXDSBXDJcMjNcMCSCgFwxXDEyglBcNCSCXDBcMVwxMlwyUVw0gVwyXDIzXDAkgoBcMUxCVVw0wYJcMjdcMGSCgFwxjIJVXDRcMFwzgFw0pEKAXDGGQlNcMMFCXDIzXDBcNlwzVFwwXDdDVFw2XDeDVFw2QVwzXApcMKRCXDBcMoZcMlVcMIzCUVw1XDGDXDI3XDCkgoBcMYzCRFw1pIJcMFwxjFwyUFw1XDFcM1wKXDCkgoBcMYyCUFw1pIJcMFwxjFwyUVw1XDFcM1wKXDCkgoBcMcxCVVw1QYNcMjdcMOSCgFwxXDEyg1VcNYBcM4BcNSRDgFwxXDZDU1wwQcNcMjdcMIZcM1RcMIdDVFw3h1wzWVw3wYNcClwwJENcMFwyXDZcM1VcMFwxMsNRXDaBg1wyN1wwJIOAXDFcMTLDRFw2JINcMFwxXDEyXDNQXDaBg1wKXDAkg4BcMVwxMoNQXDYkg1wwXDFcMTJcM1FcNoGDXApcMCSDgFwxTENVXDbBg1wyN1wwZIOAXDGMg1VcNlwwXDSAXDakQ4BcMYZDU1wwwVwzXDI4XDBcNlw0VFwwXDdEVFw4XDeEVFw4QVw0XDExXDCkQ1wwXDKGXDNVXDCMw1FcN1wxhFwyN1wwpIOAXDGMw0RcN6SDXDBcMYxcM1BcN1wxXDRcMTFcMKSDgFwxjINQXDekg1wwXDGMXDNRXDdcMVw0XDExXDCkg4BcMcxDVVw3QYRcMjdcMOSDgFwxXDEyhFVcN4BcNIBcNyREgFwxXDZEU1wwQcRcMjVcMIZcNFRcMIdEVFw5h4RUXDnBhFwxMVwwJERcMFwyXDZcNFVcMFwxMsRRXDiBhFwyN1wwJISAXDFcMTLERFw4JIRcMFwxXDEyXDRQXDiBhFwxMVwwJISAXDFcMTKEUFw4JIRcMFwxXDEyXDRRXDiBhFwxMVwwJISAXDFMRFVcOMGEXDI3XDBkhIBcMYyEVVw4XDBcNYBcOKREgFwx4lwwXDBcMFwzMIAngIeByFwxXDMxgExcM1wzMMAmgIZcMVNcMMFBXDI4XDCkQVwwXDGGQVNcMMHBXDE5XDBcNlwyVFwwXDdCVFw0XDeCVFw0QcJcMjBcMKRBXDBcMoZcMVVcMIzBUVwzXDFCXDI4XDCkgYBcMYzBRFwzpIFcMFwxjFwxUFwzXDHCXDIwXDCkgYBcMYyBUFwzpIFcMFwxjFwxUVwzXDHCXDIwXDCkgYBcMcxBVVwzQUJcMThcMOSBgFwxXDEyglVcM4BcMoBcMyRCgFwxXDEywlVcM4FCXDE4XDAkQoBcMVw2wlJcMFwzMUBEXDRcMzCAXDmAXDZcMkBcMFwxMkJAXDQkglwwXDFMgkBcNGSCXDBcMWJCXDBcMFwzMMBcN4BHwkBcNExcMsFcNGSCXDBcMUyCwFw0ZIJcMFwxYkJcMFwwXDMwXDBcNoBHwkBcNExcMsFcNGSCXDBcMUxcMtZcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTEPWXDZkg1wwXDFiQ1wwXDBcMzCAXDKATFwzUFw2wcNcMjBcMGSDgFwxXDhAXDOlRoNSXDBMg9ZcNmSDXDBcMVw4QIOlRsNFXDCGw1JcMGRDXDBcMWlCXDBcMOpcMvtcMTI3XDZCU1wwQcJcMjJcMIZcMlRcMIdCVFw1h4JUXDXBXDJcMjNcMCRCXDBcMlw2XDJVXDBcMTLCUVw0gUJcMjhcMCSCgFwxXDEywkRcNCSCXDBcMVwxMlwyUFw0gVwyXDIzXDAkgoBcMVwxMoJQXDQkglwwXDFcMTJcMlFcNIFcMlwyM1wwJIKAXDFMQlVcNMFCXDI4XDBkgoBcMYyCVVw0XDBcM4BcNKRCgFwxhkJTXDDBQlwyM1wwXDZcM1RcMFw3Q1RcNlw3g1RcNkFcM1wKXDCkQlwwXDKGXDJVXDCMwlFcNVwxQ1wyOFwwpIKAXDGMwkRcNaSCXDBcMYxcMlBcNVwxXDNcClwwpIKAXDGMglBcNaSCXDBcMYxcMlFcNVwxXDNcClwwpIKAXDHMQlVcNUFDXDI4XDDkgoBcMVwxMoNVXDWAXDOAXDUkQ4BcMVw2Q1NcMEHDXDIyXDCGXDNUXDCHQ1RcN4eDVFw3wVwzXApcMCRDXDBcMlw2XDNVXDBcMTLDUVw2gUNcMjhcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMlwzUFw2gVwzXApcMCSDgFwxXDEyg1BcNiSDXDBcMVwxMlwzUVw2gVwzXApcMCSDgFwxTENVXDbBg1wyOFwwZIOAXDGMg1VcNlwwXDSAXDakQ4BcMeJcMFwwXDBcMzBALoCHgchcMVwzMVwwTVwzXDMwgC2AhlwxU1wwwcFcMjhcMKRBXDBcMYZBU1wwwcFcMTlcMFw2XDJUXDBcN0JUXDRcN4JUXDRBwlwyMFwwpEFcMFwyhlwxVVwwjMFRXDNcMcJcMjhcMKSBgFwxjMFEXDOkgVwwXDGMXDFQXDNcMcJcMjBcMKSBgFwxjIFQXDOkgVwwXDGMXDFRXDNcMcJcMjBcMKSBgFwxzEFVXDNBQlwxOFww5IGAXDFcMTKCVVwzgFwygFwzJEKAXDFcMTLCVVwzgUJcMThcMCRCgFwxXDbCUlwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTFwy1lw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMQ9ZcNmSDXDBcMWJDXDBcMFwzMIBcMoBMXDNQXDbBw1wyMFwwZIOAXDFcOEBcM6VGg1JcMEyD1lw2ZINcMFwxXDhAg6VGw0VcMIbDUlwwZENcMFwxaUJcMFww6lwy+1wxMjdcNkJTXDBBwlwyMlwwhlwyVFwwh0JUXDWHglRcNcFcMlwyM1wwJEJcMFwyXDZcMlVcMFwxMsJRXDSBwlwyOFwwJIKAXDFcMTLCRFw0JIJcMFwxXDEyXDJQXDSBXDJcMjNcMCSCgFwxXDEyglBcNCSCXDBcMVwxMlwyUVw0gVwyXDIzXDAkgoBcMUxCVVw0wcJcMjhcMGSCgFwxjIJVXDRcMFwzgFw0pEKAXDGGQlNcMMFCXDIzXDBcNlwzVFwwXDdDVFw2XDeDVFw2QVwzXApcMKRCXDBcMoZcMlVcMIzCUVw1XDHDXDI4XDCkgoBcMYzCRFw1pIJcMFwxjFwyUFw1XDFcM1wKXDCkgoBcMYyCUFw1pIJcMFwxjFwyUVw1XDFcM1wKXDCkgoBcMcxCVVw1QcNcMjhcMOSCgFwxXDEyg1VcNYBcM4BcNSRDgFwxXDZDU1wwQYNcMjRcMIZcM1RcMIdDVFw3h4NUXDfBg1wKXDAkQ1wwXDJcNlwzVVwwXDEyw1FcNoHDXDI4XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTJcM1BcNoGDXApcMCSDgFwxXDEyg1BcNiSDXDBcMVwxMlwzUVw2gYNcClwwJIOAXDFMQ1VcNsHDXDI4XDBkg4BcMYyDVVw2XDBcNIBcNqRDgFwxhkNTXDDBw1wyMlwwXDZcNFRcMFw3RFRcOFw3hFRcOEFcNFwxMVwwpENcMFwyhlwzVVwwjMNRXDdcMcRcMjhcMKSDgFwxjMNEXDekg1wwXDGMXDNQXDdcMVw0XDExXDCkg4BcMYyDUFw3pINcMFwxjFwzUVw3XDFcNFwxMVwwpIOAXDHMQ1VcN0FcNFwyOVww5IOAXDFcMTKEVVw3gFw0gFw3JESAXDHiXDBcMFwwXDMwgCeAh4HIXDFcMzGATVwzXDMwwCaAhlwxU1wwwUFcMjlcMKRBXDBcMYZBU1wwwcFcMTlcMFw2XDJUXDBcN0JUXDRcN4JUXDRBwlwyMFwwpEFcMFwyhlwxVVwwjMFRXDNcMUJcMjlcMKSBgFwxjMFEXDOkgVwwXDGMXDFQXDNcMcJcMjBcMKSBgFwxjIFQXDOkgVwwXDGMXDFRXDNcMcJcMjBcMKSBgFwxzEFVXDNBQlwxOFww5IGAXDFcMTKCVVwzgFwygFwzJEKAXDFcMTLCVVwzgUJcMThcMCRCgFwxXDbCUlwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTFwy1lw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMQ9ZcNmSDXDBcMWJDXDBcMFwzMIBcMoBMXDNQXDbBw1wyMFwwZIOAXDFcOEBcM6VGg1JcMEyD1lw2ZINcMFwxXDhAg6VGw0VcMIbDUlwwZENcMFwxaUJcMFww6lwy+1wxMjdcNkJTXDBBwlwyMlwwhlwyVFwwh0JUXDWHglRcNcFcMlwyM1wwJEJcMFwyXDZcMlVcMFwxMsJRXDSBQlwyOVwwJIKAXDFcMTLCRFw0JIJcMFwxXDEyXDJQXDSBXDJcMjNcMCSCgFwxXDEyglBcNCSCXDBcMVwxMlwyUVw0gVwyXDIzXDAkgoBcMUxCVVw0wUJcMjlcMGSCgFwxjIJVXDRcMFwzgFw0pEKAXDGGQlNcMMFCXDIzXDBcNlwzVFwwXDdDVFw2XDeDVFw2QVwzXApcMKRCXDBcMoZcMlVcMIzCUVw1XDFDXDI5XDCkgoBcMYzCRFw1pIJcMFwxjFwyUFw1XDFcM1wKXDCkgoBcMYyCUFw1pIJcMFwxjFwyUVw1XDFcM1wKXDCkgoBcMcxCVVw1QUNcMjlcMOSCgFwxXDEyg1VcNYBcM4BcNSRDgFwxXDZDU1wwQYNcMjlcMIZcM1RcMIdDVFw3h4NUXDfBg1wKXDAkQ1wwXDJcNlwzVVwwXDEyw1FcNoFDXDI5XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTJcM1BcNoGDXApcMCSDgFwxXDEyg1BcNiSDXDBcMVwxMlwzUVw2gYNcClwwJIOAXDFMQ1VcNsFDXDI5XDBkg4BcMYyDVVw2XDBcNIBcNqRDgFwx4lwwXDBcMFwzMFwwMDA1gIeByFwxXDMxXDBOXDNcMzBANICGXDFTXDDBwVwyOVwwpEFcMFwxhkFTXDDBwVwxOVwwXDZcMlRcMFw3QlRcNFw3glRcNEHCXDIwXDCkQVwwXDKGXDFVXDCMwVFcM1wxwlwyOVwwpIGAXDGMwURcM6SBXDBcMYxcMVBcM1wxwlwyMFwwpIGAXDGMgVBcM6SBXDBcMYxcMVFcM1wxwlwyMFwwpIGAXDHMQVVcM0FCXDE4XDDkgYBcMVwxMoJVXDOAXDKAXDMkQoBcMVwxMsJVXDOBQlwxOFwwJEKAXDFcNsJSXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMXDLWXDRkXDJcMVwxXDMwXDBcNIBMw0RcNmSDXDBcMUxD1lw2ZINcMFwxYkNcMFwwXDMwgFwygExcM1BcNsHDXDIwXDBkg4BcMVw4QFwzpUaDUlwwTIPWXDZkg1wwXDFcOECDpUbDRVwwhsNSXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2QlNcMEHCXDIyXDCGXDJUXDCHQlRcNYeCVFw1wVwyXDIzXDAkQlwwXDJcNlwyVVwwXDEywlFcNIHCXDI5XDAkgoBcMVwxMsJEXDQkglwwXDFcMTJcMlBcNIFcMlwyM1wwJIKAXDFcMTKCUFw0JIJcMFwxXDEyXDJRXDSBXDJcMjNcMCSCgFwxTEJVXDTBwlwyOVwwZIKAXDGMglVcNFwwXDOAXDSkQoBcMYZCU1wwwUJcMjNcMFw2XDNUXDBcN0NUXDZcN4NUXDZBXDNcClwwpEJcMFwyhlwyVVwwjMJRXDVcMcNcMjlcMKSCgFwxjMJEXDWkglwwXDGMXDJQXDVcMVwzXApcMKSCgFwxjIJQXDWkglwwXDGMXDJRXDVcMVwzXApcMKSCgFwxzEJVXDVBw1wyOVww5IKAXDFcMTKDVVw1gFwzgFw1JEOAXDFcNkNTXDBBw1wyMlwwhlwzVFwwh0NUXDeHg1RcN8GDXApcMCRDXDBcMlw2XDNVXDBcMTLDUVw2gcNcMjlcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMlwzUFw2gYNcClwwJIOAXDFcMTKDUFw2JINcMFwxXDEyXDNRXDaBg1wKXDAkg4BcMUxDVVw2wVwzXDMwXDBkg4BcMYyDVVw2XDBcNIBcNqRDgFwxhkNTXDDBQ1wzMFwwXDZcNFRcMFw3RFRcOFw3hFRcOEFcNFwxMVwwpENcMFwyhlwzVVwwjMNRXDdcMcRcMjlcMKSDgFwxjMNEXDekg1wwXDGMXDNQXDdcMVw0XDExXDCkg4BcMYyDUFw3pINcMFwxjFwzUVw3XDFcNFwxMVwwpIOAXDHMQ1VcN0HEXDI5XDDkg4BcMVwxMoRVXDeAXDSAXDckRIBcMVw2RFNcMEHEXDI1XDCGXDRUXDCHRFRcOYeEVFw5wYRcMTFcMCREXDBcMlw2XDRVXDBcMTLEUVw4gcRcMjlcMCSEgFwxXDEyxERcOCSEXDBcMVwxMlw0UFw4gYRcMTFcMCSEgFwxXDEyhFBcOCSEXDBcMVwxMlw0UVw4gYRcMTFcMCSEgFwxTERVXDjBxFwyOVwwZISAXDGMhFVcOFwwXDWAXDikRIBcMeJcMFwwXDBcMzBcMDAwNYCHgchcMVwzMYBOXDNcMzBANICGXDFTXDDBgVwzMFwwpEFcMFwxhkFTXDDBwVwxOVwwXDZcMlRcMFw3QlRcNFw3glRcNEHCXDIwXDCkQVwwXDKGXDFVXDCMwVFcM1wxglwzMFwwpIGAXDGMwURcM6SBXDBcMYxcMVBcM1wxwlwyMFwwpIGAXDGMgVBcM6SBXDBcMYxcMVFcM1wxwlwyMFwwpIGAXDHMQVVcM0FCXDE4XDDkgYBcMVwxMoJVXDOAXDKAXDMkQoBcMVwxMsJVXDOBQlwxOFwwJEKAXDFcNsJSXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMXDLWXDRkXDJcMVwxXDMwXDBcNIBMw0RcNmSDXDBcMUxD1lw2ZINcMFwxYkNcMFwwXDMwgFwygExcM1BcNsHDXDIwXDBkg4BcMVw4QFwzpUaDUlwwTIPWXDZkg1wwXDFcOECDpUbDRVwwhsNSXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2QlNcMEHCXDIyXDCGXDJUXDCHQlRcNYeCVFw1wVwyXDIzXDAkQlwwXDJcNlwyVVwwXDEywlFcNIGCXDMwXDAkgoBcMVwxMsJEXDQkglwwXDFcMTJcMlBcNIFcMlwyM1wwJIKAXDFcMTKCUFw0JIJcMFwxXDEyXDJRXDSBXDJcMjNcMCSCgFwxTEJVXDTBglwzMFwwZIKAXDGMglVcNFwwXDOAXDSkQoBcMYZCU1wwwUJcMjNcMFw2XDNUXDBcN0NUXDZcN4NUXDZBXDNcClwwpEJcMFwyhlwyVVwwjMJRXDVcMYNcMzBcMKSCgFwxjMJEXDWkglwwXDGMXDJQXDVcMVwzXApcMKSCgFwxjIJQXDWkglwwXDGMXDJRXDVcMVwzXApcMKSCgFwxzEJVXDVBg1wzMFww5IKAXDFcMTKDVVw1gFwzgFw1JEOAXDFcNkNTXDBBw1wzMFwwhlwzVFwwh0NUXDeHXDNZXDfBg1wKXDAkQ1wwXDJcNlwzVVwwXDEyw1FcNoGDXDMwXDAkg4BcMVwxMsNEXDYkg1wwXDFcMTJcM1BcNoGDXApcMCSDgFwxXDEyg1BcNiSDXDBcMVwxMlwzUVw2gYNcClwwJIOAXDFMQ1VcNsGDXDMwXDBkg4BcMYyDVVw2XDBcNIBcNqRDgFwxhkNTXDDBXDNcMzFcMFw2XDRUXDBcN0RUXDhcN1w0WVw4QVw0XDExXDCkQ1wwXDKGXDNVXDCMw1FcN1wxhFwzMFwwpIOAXDGMw0RcN6SDXDBcMYxcM1BcN1wxXDRcMTFcMKSDgFwxjINQXDekg1wwXDGMXDNRXDdcMVw0XDExXDCkg4BcMcxDVVw3QYRcMzBcMOSDgFwxXDEyhFVcN4BcNIBcNyREgFwxXDZEU1wwQcRcMjJcMIZcNFRcMIdEVFw5h4RUXDnBhFwxMVwwJERcMFwyXDZcNFVcMFwxMsRRXDiBhFwzMFwwJISAXDFcMTLERFw4JIRcMFwxXDEyXDRQXDiBhFwxMVwwJISAXDFcMTKEUFw4JIRcMFwxXDEyXDRRXDiBhFwxMVwwJISAXDFMRFVcOMFEXDMxXDBkhIBcMYyEVVw4XDBcNYBcOKREgFwx4lwwXDBcMFwzMFwwMDA1gIeByFwxXDMxXDBPXDNcMzBANICGXDFTXDDBgVwzMVwwpEFcMFwxhkFTXDDBwVwxOVwwXDZcMlRcMFw3QlRcNFw3glRcNEHCXDIwXDCkQVwwXDKGXDFVXDCMwVFcM1wxglwzMVwwpIGAXDGMwURcM6SBXDBcMYxcMVBcM1wxwlwyMFwwpIGAXDGMgVBcM6SBXDBcMYxcMVFcM1wxwlwyMFwwpIGAXDHMQVVcM0FCXDE4XDDkgYBcMVwxMoJVXDOAXDKAXDMkQoBcMVwxMsJVXDOBQlwxOFwwJEKAXDFcNsJSXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMXDLWXDRkXDJcMVwxXDMwXDBcNIBMw0RcNmSDXDBcMUxD1lw2ZINcMFwxYkNcMFwwXDMwgFwygExcM1BcNsHDXDIwXDBkg4BcMVw4QFwzpUaDUlwwTIPWXDZkg1wwXDFcOECDpUbDRVwwhsNSXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2QlNcMEHCXDIyXDCGXDJUXDCHQlRcNYeCVFw1wVwyXDIzXDAkQlwwXDJcNlwyVVwwXDEywlFcNIGCXDMxXDAkgoBcMVwxMsJEXDQkglwwXDFcMTJcMlBcNIFcMlwyM1wwJIKAXDFcMTKCUFw0JIJcMFwxXDEyXDJRXDSBXDJcMjNcMCSCgFwxTEJVXDTBglwzMVwwZIKAXDGMglVcNFwwXDOAXDSkQoBcMYZCU1wwwUJcMjNcMFw2XDNUXDBcN0NUXDZcN4NUXDZBXDNcClwwpEJcMFwyhlwyVVwwjMJRXDVcMYNcMzFcMKSCgFwxjMJEXDWkglwwXDGMXDJQXDVcMVwzXApcMKSCgFwxjIJQXDWkglwwXDGMXDJRXDVcMVwzXApcMKSCgFwxzEJVXDVBg1wzMVww5IKAXDFcMTKDVVw1gFwzgFw1JEOAXDFcNkNTXDBBw1wzMVwwhlwzVFwwh0NUXDeHg1RcN8GDXApcMCRDXDBcMlw2XDNVXDBcMTLDUVw2gYNcMzFcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMlwzUFw2gYNcClwwJIOAXDFcMTKDUFw2JINcMFwxXDEyXDNRXDaBg1wKXDAkg4BcMUxDVVw2wYNcMzFcMGSDgFwxjINVXDZcMFw0gFw2pEOAXDGGQ1NcMMFcMyBcMFw2XDRUXDBcN0RUXDhcN4RUXDhBXDRcMTFcMKRDXDBcMoZcM1VcMIzDUVw3XDGEXDMxXDCkg4BcMYzDRFw3pINcMFwxjFwzUFw3XDFcNFwxMVwwpIOAXDGMg1BcN6SDXDBcMYxcM1FcN1wxXDRcMTFcMKSDgFwxzENVXDdBhFwzMVww5IOAXDFcMTKEVVw3gFw0gFw3JESAXDFcNkRTXDBBXDRcMzFcMIZcNFRcMIdEVFw5h1w0WVw5wYRcMTFcMCREXDBcMlw2XDRVXDBcMTLEUVw4gYRcMzFcMCSEgFwxXDEyxERcOCSEXDBcMVwxMlw0UFw4gYRcMTFcMCSEgFwxXDEyhFBcOCSEXDBcMVwxMlw0UVw4gYRcMTFcMCSEgFwxTERVXDjBhFwzMVwwZISAXDGMhFVcOFwwXDWAXDikRIBcMSZcMIBcMIFcMFwwXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDRcNmVtcHR5XDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw2RXJyb3JcMDIwNk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXDRcMTJNZXNzYWdlVHlwZVw0XDExQnV0dG9uVHlwZVw0XDNPS1w0XDRydW5cNFw1c2l6ZVwxOVwxXDBcMFwwXDBcMFwwXDBcMjBITW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cNFwxNmF1ZGlvVHJhY2tGb3VuZFwxXDBcNFw1aXRlclw0XDl0b190cmFja1w0XDZpc25pbFw0XDE1dG9fYXVkaW9fdHJhY2tcMVwxXDRcNnByaW50XDRcMThpcyBhbiBhdWRpbyB0cmFja1w0XDEzaXNfcmVjb3JkaW5nXDRcMTlyZWNfZW5hYmxlX2NvbnRyb2xcNFwKZ2V0X3ZhbHVlXDRcMTRpcyByZWNvcmRpbmcgXDRcNXR5cGVcM1wwXDBcMFwwXDBcMPA/XDIwQlZvY2FsIHByZXNldHMgY2Fubm90IGJlIGNoYW5nZWQgd2hlbiB0cmFjayBpcyBhcm1lZCBmb3IgcmVjb3JkaW5nXDRcNkNsb3NlXDAyMDdObyBhdWRpbyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhbiBhdWRpbyB0cmFjay5cNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcMjBDaG9vc2UgVm9jYWwgUHJlc2V0XDRcN3ZhbHVlc1w0XDhDbGFzc2ljXDE5XDJcMFwwXDBcMFwwXDBcMFw0XDdCcmlnaHRcMTlcM1wwXDBcMFwwXDBcMFwwXDRcNkRhbmNlXDE5XDRcMFwwXDBcMFwwXDBcMFw0XDExQ29tcHJlc3NlZFwxOVw1XDBcMFwwXDBcMFwwXDBcNFwKVGVsZXBob25lXDE5XDZcMFwwXDBcMFwwXDBcMFw0XDhOYXR1cmFsXDE5XDdcMFwwXDBcMFwwXDBcMFw0XDVFZGdlXDE5XDhcMFwwXDBcMFwwXDBcMFw0XDEyRnV6eiBWb2NhbHNcMTlcOVwwXDBcMFwwXDBcMFwwXDRcMTJUdWJlIFZvY2Fsc1wxOVwKXDBcMFwwXDBcMFwwXDBcNFwxNERlZXBlciBWb2NhbHNcMTlcMTFcMFwwXDBcMFwwXDBcMFw0XDEzUm9ib3QgVm9jYWxzXDE5XDEyXDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFw1bmFtZVw0XDExbnRoX3BsdWdpblwxOVwwXDBcMFwwXDBcMFwwXDBcNFwKdG9faW5zZXJ0XDRcN3ByZXNldFw0XDdwbHVnaW5cNFwxMmxhc3RfcHJlc2V0XDRcOFNlc3Npb25cNFwxNHJvdXRlX2J5X25hbWVcNFwxMnNhdmVfcHJlc2V0XDRcNXRlbXBcNFw0b2xkXDRcN2FjdGl2ZVw0XDIzYXBwbHlfcHJlc2V0X3RvX3RyYWNrc1w0XDMwYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3NcNFw4Y2xhc3NpY1w0XDIyeDQyLUF1dG90dW5lIChzY2FsZXMpXDRcN0FSRE9VUlw0XDExUGx1Z2luVHlwZVw0XDRMVjJcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOFNlc3Npb25cNFwxNnByZXNldF9ieV9sYWJlbFw0XDEybG9hZF9wcmVzZXRcNFwxNHJlbW92ZV9wcmVzZXRcNFw1aXRlclw0XDZpc25pbFw0XDExZGVhY3RpdmF0ZVw0XDdBQ0UgRVFcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMTVBQ0UgQ29tcHJlc3Nvclw0XApjbGFzc2ljLTJcNFwyMlRhcGUgRGVsYXkgU2ltdWxhdGlvblw0XDE2R3hSZXZlcmItU3RlcmVvXDRcN2JyaWdodFw0XDEzQ2FsZiBFeGNpdGVyXDRcMTJUQVAgRGVFc3Nlclw0XDdMQURTUEFcNFw5YnJpZ2h0LTJcNFw2ZGFuY2VcNFwxMUFDRSBSZXZlcmJcNFwxNkd4Q2hvcnVzLVN0ZXJlb1w0XDhkYW5jZS0yXDRcMTFjb21wcmVzc2VkXDRcMTNjb21wcmVzc2VkLTJcNFwxNENvbWIgU3BsaXR0ZXJcNFwxM0d4Q29tcHJlc3Nvclw0XAp0ZWxlcGhvbmVcNFwyMFRBUCBTY2FsaW5nIExpbWl0ZXJcNFwxMlJhdGF0b3VpbGxlXDRcOG5hdHVyYWxcNFwKbmF0dXJhbC0yXDRcNWVkZ2VcNFw3ZWRnZS0yXDRcNWZ1enpcNFwxNE1EQSBPdmVyZHJpdmVcNFw1dHViZVw0XDd0dWJlIDJcNFw4WmFtVHViZVw0XDdkZWVwZXJcNFwzMVJ1YmJlciBCYW5kIE1vbm8gUGl0Y2ggU2hpZnRlclw0XDE5VEFQIENob3J1cy9GbGFuZ2VyXDRcOWRlZXBlciAyXDRcNnJvYm90XDRcMTFMRk8gUGhhc2VyXDRcMTJNREEgUmluZ01vZFwxXDBcMFwwXDBcMFwyXDBcMFwwXDBqXDBcMFwwfFwwXDBcMFwxXDBcMTInXDBcMFwwRlwwQFwwTEDAXDBkgFwwXDGHgMBcMIzAQFwxpIBcMFwxjFwwQVwxpFwwXDFcMVwzMIBcNoCGQUFcMIeBQVwzpIGAXDDBwVwxXDBcMTJcMsJcMoBcMoBcMySCgFwxTEJCXDRkglwwXDFiQlwwXDBcMzCAXDCATIJCXDPAXDJcMFw0ZEKAXDHNwcJcM0xCQlw0ZIJcMFwxYlwyXDBcMFwzMFww/FwxMjdcMTJcMsNcMoBcMlwwXDPEXDJcMFwwJEJcMFwyXDEyQsNcMoBcMlwwXDDEXDJcMFwwJEJcMFwyqUBcMFwwKoH4XDEyNyZcMIBcMFwxNFwwXDBcMFw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cNFw3dHJhY2tzXDRcCnJvdXRlbGlzdFw0XDVpdGVyXDRcN0FSRE9VUlw0XDE0UHJvY2Vzc29yTGlzdFwxOVwwXDBcMFwwXDBcMFwwXDBcNFwxNG50aF9wcm9jZXNzb3JcNFw2aXNuaWxcNFwKcHVzaF9iYWNrXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE4cmVtb3ZlX3Byb2Nlc3NvcnNcNFw5c2V0X25hbWVcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwhFwwXDBcMI5cMFwwXDBcM1wwXDAxNTBcMFwwXDDGXDBAXDDMQMBcMeSAXDBcMVw2XDFAXDBcMTJBQFwyJIFcMFwxXDEygUBcMiSBXDBcMVwiQVwwXDBcMzBcMFw5gFw2XDFAXDBcMTJBQFwyJIFcMFwxXDfBQFwyXDEyXDFBXDIkgVwwXDFcMTKBQFwyJIFcMFwxXCJBXDBcMFwzMIBcNoBcN8HAXDFcMTJcMUFcMiSBXDBcMVwxMkFBXDIkXDFcMVwxXDMwgFw0gFw2gkFcMFw3wkFcNFw3XDJCXDRGQkJcMIBcMlwwXDDAXDKAXDBcMYNcMlwwJIKAXDJGwkJcMIxcMkNcNKSCXDBcMZtcMlwwXDVkQlwwXDFMQsNcM8BcMlwwXDRcMFwzXDBcMURcM1wwXDCDXDOAXDBkQlwwXDMpQVwwXDCqgfpcMTI3JlwwgFwwXDE0XDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDZlbXB0eVw0XDd0cmFja3NcNFwKcm91dGVsaXN0XDRcNWl0ZXJcNFw3QVJET1VSXDRcN0x1YUFQSVw0XDExbmV3X3BsdWdpblw0XDhTZXNzaW9uXDRcMVw0XDdhc3NlcnRcNFw2aXNuaWxcNFwyM2FkZF9wcm9jZXNzb3JfYnlfaW5kZXhcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc2NyaXB0c1s4XVsibiJdID0gIlZvY2FscyAtIENoYW5nZSBWb2NhbCBQbHVnaW5zL1ByZXNldHMgZm9yIEF1ZGlvIFRyYWNrIiAgIHNjcmlwdHNbOV0gPSB7fSBzY3JpcHRzWzldWyJzIl0gPSAiYXJkb3VyIHtcCiAgW1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXAogIG5hbWUgPSBcIkF1ZGlvIHRvIE1JRElcIixcCiAgbGljZW5zZSA9IFwiTUlUXCIsXAogIGF1dGhvciA9IFwiQXJkb3VyIFRlYW0gKE1vZGlmaWVkIGJ5IEp1c3RpbiBFaHJsaWNobWFuKVwiLFwKICBkZXNjcmlwdGlvbiA9IFtbXApBbmFseXplIGF1ZGlvIGZyb20gdGhlIHNlbGVjdGVkIGF1ZGlvIHJlZ2lvbiB0byBhIHNlbGVjdGVkIE1JREkgcmVnaW9uLlwKXApBIE1JREkgcmVnaW9uIG9uIHRoZSB0YXJnZXQgdHJhY2sgd2lsbCBoYXZlIHRvIGJlIGNyZWF0ZWQgZmlyc3QgKHVzZSB0aGUgcGVuIHRvb2wpLlwKXApUaGlzIHNjcmlwdCB1c2VzIHRoZSBQb2x5cGhvbmljIFRyYW5zY3JpcHRpb24gVkFNUCBwbHVnaW4gZnJvbSBRdWVlbiBNYXJ5IFVuaXYsIExvbmRvbi5cClRoZSBwbHVnaW4gd29ya3MgYmVzdCBhdCA0NC4xS0h6IGlucHV0IHNhbXBsZSByYXRlLCBhbmQgaXMgdHVuZWQgZm9yIHBpYW5vIGFuZCBndWl0YXIgbXVzaWMuIFZlbG9jaXR5IGlzIG5vdCBlc3RpbWF0ZWQuXApUaGlzIHZlcnNpb24gaGFzIGJlZW4gbW9kaWZpZWQgdG8gcHJvZHVjZSBib3RoIG1vbm9waG9uaWMgYW5kIHBvbHlwaG9uaWMgTUlESSBvdXRwdXQuXApdXVwKfVwKXApcCmZ1bmN0aW9uIGZhY3RvcnkoKSByZXR1cm4gZnVuY3Rpb24oKVwKXAogIGxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICAgIHtcCiAgICAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwiZHJvcGRvd25cIiwgdGl0bGUgPSBcIkNob29zZSB0eXBlIG9mIE1JREkgVHJhbnNjcmlwdGlvblwiLCB2YWx1ZXMgPVwKICAgICAge1wKICAgICAgICBbXCJNb25vcGhvbmljIChCZXN0IGZvciB2b2ljZSB0byBNSURJKVwiXSA9IDEsIFtcIlBvbHlwaG9uaWNcIl0gPSAyXAogICAgICB9LFwKICAgICAgZGVmYXVsdCA9IFwiTW9ub3Bob25pYyAoQmVzdCBmb3Igdm9pY2UgdG8gTUlESSlcIlwKICAgIH1cCiAgfVwKXAogIGxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyhcIkNob29zZSBNSURJIFRyYW5zY3JpcHRpb24gVHlwZVwiLCBkaWFsb2dfb3B0aW9ucylcCiAgbG9jYWwgcnYgPSBvZDpydW4oKVwKXAogICAgaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMSB0aGVuXAogIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCiAgbG9jYWwgc3IgPSBTZXNzaW9uOm5vbWluYWxfc2FtcGxlX3JhdGUoKVwKICBsb2NhbCB0bSA9IFRlbXBvcmFsLlRlbXBvTWFwLnJlYWQoKVwKICBsb2NhbCB2YW1wID0gQVJET1VSLkx1YUFQSS5WYW1wKFwibGliYXJkb3VydmFtcHBsdWdpbnM6cW0tdHJhbnNjcmlwdGlvblwiLCBzcilcCiAgbG9jYWwgbWlkaV9yZWdpb24gPSBuaWxcCiAgbG9jYWwgYXVkaW9fcmVnaW9ucyA9IHt9XAogIGxvY2FsIHN0YXJ0X3RpbWUgPSBTZXNzaW9uOmN1cnJlbnRfZW5kX3NhbXBsZSgpXAogIGxvY2FsIGVuZF90aW1lID0gU2Vzc2lvbjpjdXJyZW50X3N0YXJ0X3NhbXBsZSgpXAogIGxvY2FsIG1heF9wb3MgPSAwXAogIGxvY2FsIGN1cl9wb3MgPSAwXApcCiAgZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCgpOml0ZXIoKSBkb1wKICAgIGxvY2FsIGFyID0gcjp0b19hdWRpb3JlZ2lvbigpXAogICAgaWYgbm90IGFyOmlzbmlsKCkgdGhlblwKICAgICAgbG9jYWwgc3QgPSByOnBvc2l0aW9uKCk6c2FtcGxlcygpXAogICAgICBsb2NhbCBsbiA9IHI6bGVuZ3RoKCk6c2FtcGxlcygpXAogICAgICBsb2NhbCBldCA9IHN0ICsgbG5cCiAgICAgIGlmIHN0IDwgc3RhcnRfdGltZSB0aGVuXAogICAgICAgIHN0YXJ0X3RpbWUgPSBzdFwKICAgICAgZW5kXAogICAgICBpZiBldCA+IGVuZF90aW1lIHRoZW5cCiAgICAgICAgZW5kX3RpbWUgPSBldFwKICAgICAgZW5kXAogICAgICB0YWJsZS5pbnNlcnQoYXVkaW9fcmVnaW9ucywgYXIpXAogICAgICBtYXhfcG9zID0gbWF4X3BvcyArIGFyOnRvX3JlYWRhYmxlKCk6cmVhZGFibGVfbGVuZ3RoKClcCiAgICBlbHNlXAogICAgICBtaWRpX3JlZ2lvbiA9IHI6dG9fbWlkaXJlZ2lvbigpXAogICAgZW5kXAogIGVuZFwKXAogIGlmICNhdWRpb19yZWdpb25zID09IDAgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiTW9ub3Bob25pYyBBdWRpbyB0byBNSURJXCIsXAogICAgICBcIk5vIHNvdXJjZSBhdWRpbyByZWdpb24ocykgc2VsZWN0ZWQuXFxuQXQgbGVhc3Qgb25lIGF1ZGlvLXJlZ2lvbiB0byBiZSBhbmFseXplZCBuZWVkcyB0byBiZSBzZWxlY3RlZC5cIixcCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvcixcCiAgICAgIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlXAogICAgKTpydW4oKVwKICAgIHJldHVyblwKICBlbmRcClwKICBpZiBub3QgbWlkaV9yZWdpb24gdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiTW9ub3Bob25pYyBBdWRpbyB0byBNSURJXCIsXAogICAgICBcIk5vIHRhcmdldCBNSURJIHJlZ2lvbiBzZWxlY3RlZC5cXG5BIE1JREkgcmVnaW9uLCBpZGVhbGx5IGVtcHR5LCBhbmQgZXh0ZW5kaW5nIGJleW9uZCB0aGUgc2VsZWN0ZWQgYXVkaW8tcmVnaW9uKHMpIG5lZWRzIHRvIGJlIHNlbGVjdGVkLlwiLFwKICAgICAgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLFwKICAgICAgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2VcCiAgICApOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKXAogIG1pZGlfcmVnaW9uOnNldF9pbml0aWFsX3Bvc2l0aW9uKFRlbXBvcmFsLnRpbWVwb3NfdChzdGFydF90aW1lKSlcCiAgbWlkaV9yZWdpb246c2V0X2xlbmd0aChUZW1wb3JhbC50aW1lY250X3QoZW5kX3RpbWUgLSBzdGFydF90aW1lKSlcClwKICBsb2NhbCBwZGlhbG9nID0gTHVhRGlhbG9nLlByb2dyZXNzV2luZG93KFwiQXVkaW8gdG8gTUlESVwiLCB0cnVlKVwKICBmdW5jdGlvbiBwcm9ncmVzcyhfLCBwb3MpXAogICAgcmV0dXJuIHBkaWFsb2c6cHJvZ3Jlc3MoKGN1cl9wb3MgKyBwb3MpIC8gbWF4X3BvcywgXCJBbmFseXppbmdcIilcCiAgZW5kXApcCiAgZm9yIGksIGFyIGluIHBhaXJzKGF1ZGlvX3JlZ2lvbnMpIGRvXAogICAgbG9jYWwgYV9vZmYgPSBhcjpwb3NpdGlvbigpXAogICAgbG9jYWwgYl9vZmYgPSB0bTpxdWFydGVyc19hdChtaWRpX3JlZ2lvbjpwb3NpdGlvbigpKVwKXAogICAgdmFtcDphbmFseXplKGFyOnRvX3JlYWRhYmxlKCksIDAsIHByb2dyZXNzKVwKXAogICAgaWYgcGRpYWxvZzpjYW5jZWxlZCgpIHRoZW5cCiAgICAgIGdvdG8gb3V0XAogICAgZW5kXApcCiAgICBjdXJfcG9zID0gY3VyX3BvcyArIGFyOnRvX3JlYWRhYmxlKCk6cmVhZGFibGVfbGVuZ3RoKClcCiAgICBwZGlhbG9nOnByb2dyZXNzKGN1cl9wb3MgLyBtYXhfcG9zLCBcIkdlbmVyYXRpbmcgTUlESVwiKVwKXAogICAgbG9jYWwgZmwgPSB2YW1wOnBsdWdpbigpOmdldFJlbWFpbmluZ0ZlYXR1cmVzKCk6YXQoMClcCiAgICBpZiBmbCBhbmQgZmw6c2l6ZSgpID4gMCB0aGVuXAogICAgICBsb2NhbCBtbSA9IG1pZGlfcmVnaW9uOm1pZGlfc291cmNlKDApOm1vZGVsKClcCiAgICAgIGxvY2FsIG1pZGlfY29tbWFuZCA9IG1tOm5ld19ub3RlX2RpZmZfY29tbWFuZChcIkF1ZGlvMk1pZGlcIilcClwKICAgICAgbG9jYWwgbGFzdF90aW1lc3RhbXAgPSAtMSAtLSBLZWVwIHRyYWNrIG9mIGxhc3QgcHJvY2Vzc2VkIHRpbWVzdGFtcFwKICAgICAgZm9yIGYgaW4gZmw6aXRlcigpIGRvXAogICAgICAgIGxvY2FsIGZ0ID0gVmFtcC5SZWFsVGltZS5yZWFsVGltZTJGcmFtZShmLnRpbWVzdGFtcCwgc3IpXAogICAgICAgIGxvY2FsIGZkID0gVmFtcC5SZWFsVGltZS5yZWFsVGltZTJGcmFtZShmLmR1cmF0aW9uLCBzcilcCiAgICAgICAgbG9jYWwgZm4gPSBmLnZhbHVlczphdCgwKVwKXAogICAgICAgIC0tIFByb2Nlc3Mgb25seSB0aGUgZmlyc3Qgbm90ZSBmb3IgZWFjaCB1bmlxdWUgdGltZXN0YW1wXAogICAgICAgIGlmIGZ0IH49IGxhc3RfdGltZXN0YW1wIHRoZW5cCiAgICAgICAgICBsYXN0X3RpbWVzdGFtcCA9IGZ0XApcCiAgICAgICAgICBsb2NhbCBicyA9IHRtOnF1YXJ0ZXJzX2F0KGFfb2ZmICsgVGVtcG9yYWwudGltZWNudF90KGZ0KSwgMClcCiAgICAgICAgICBsb2NhbCBiZSA9IHRtOnF1YXJ0ZXJzX2F0KGFfb2ZmICsgVGVtcG9yYWwudGltZWNudF90KGZ0ICsgZmQpLCAwKVwKXAogICAgICAgICAgbG9jYWwgcG9zID0gYnMgLSBiX29mZlwKICAgICAgICAgIGxvY2FsIGxlbiA9IGJlIC0gYnNcCiAgICAgICAgICBsb2NhbCBub3RlID0gQVJET1VSLkx1YUFQSS5uZXdfbm90ZXB0cigwLCBwb3MsIGxlbiwgZm4gKyAxLCAweDdmKVwKICAgICAgICAgIG1pZGlfY29tbWFuZDphZGQobm90ZSlcCiAgICAgICAgZW5kXAogICAgICBlbmRcCiAgICAgIG1tOmFwcGx5X2NvbW1hbmQoU2Vzc2lvbiwgbWlkaV9jb21tYW5kKVwKICAgIGVuZFwKXAogICAgLS0gUmVzZXQgdGhlIHBsdWdpbiBmb3IgdGhlIG5leHQgaXRlcmF0aW9uXAogICAgdmFtcDpyZXNldCgpXAogIGVuZFwKXAogIDo6b3V0OjpcCiAgcGRpYWxvZzpkb25lKClcCiAgZWxzZWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDIgdGhlblwKICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKXDlsb2NhbCBzciA9IFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSAoKVwKXDlsb2NhbCB0bSA9IFRlbXBvcmFsLlRlbXBvTWFwLnJlYWQgKClcClw5bG9jYWwgdmFtcCA9IEFSRE9VUi5MdWFBUEkuVmFtcCAoXCJsaWJhcmRvdXJ2YW1wcGx1Z2luczpxbS10cmFuc2NyaXB0aW9uXCIsIHNyKVwKXDlsb2NhbCBtaWRpX3JlZ2lvbiA9IG5pbFwKXDlsb2NhbCBhdWRpb19yZWdpb25zID0ge31cClw5bG9jYWwgc3RhcnRfdGltZSA9IFNlc3Npb246Y3VycmVudF9lbmRfc2FtcGxlICgpXApcOWxvY2FsIGVuZF90aW1lID0gU2Vzc2lvbjpjdXJyZW50X3N0YXJ0X3NhbXBsZSAoKVwKXDlsb2NhbCBtYXhfcG9zID0gMFwKXDlsb2NhbCBjdXJfcG9zID0gMFwKXDlmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0ICgpOml0ZXIgKCkgZG9cClw5XDlsb2NhbCBhciA9IHI6dG9fYXVkaW9yZWdpb24oKVwKXDlcOWlmIG5vdCBhcjppc25pbCgpIHRoZW5cClw5XDlcOWxvY2FsIHN0ID0gcjpwb3NpdGlvbigpOnNhbXBsZXMoKVwKXDlcOVw5bG9jYWwgbG4gPSByOmxlbmd0aCgpOnNhbXBsZXMoKVwKXDlcOVw5bG9jYWwgZXQgPSBzdCArIGxuO1wKXDlcOVw5aWYgc3QgPCBzdGFydF90aW1lIHRoZW5cClw5XDlcOVw5c3RhcnRfdGltZSA9IHN0XApcOVw5XDllbmRcClw5XDlcOWlmIGV0ID4gZW5kX3RpbWUgdGhlblwKXDlcOVw5XDllbmRfdGltZSA9IGV0XApcOVw5XDllbmRcClw5XDlcOXRhYmxlLmluc2VydChhdWRpb19yZWdpb25zLCBhcilcClw5XDlcOW1heF9wb3MgPSBtYXhfcG9zICsgYXI6dG9fcmVhZGFibGUgKCk6cmVhZGFibGVfbGVuZ3RoICgpXApcOVw5ZWxzZVwKXDlcOVw5bWlkaV9yZWdpb24gPSByOnRvX21pZGlyZWdpb24oKVwKXDlcOWVuZFwKXDllbmRcClwKXDlpZiAjYXVkaW9fcmVnaW9ucyA9PSAwIHRoZW5cClw5XDlMdWFEaWFsb2cuTWVzc2FnZSAoXCJQb2x5cGhvbmljIEF1ZGlvIHRvIE1JRElcIiwgXCJObyBzb3VyY2UgYXVkaW8gcmVnaW9uKHMpIHNlbGVjdGVkLlxcbkF0IGxlYXN0IG9uZSBhdWRpby1yZWdpb24gdG8gYmUgYW5hbHl6ZWQgbmVlZCB0byBiZSBzZWxlY3RlZC5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuICgpXApcOVw5cmV0dXJuXApcOWVuZFwKXDlpZiBub3QgbWlkaV9yZWdpb24gdGhlblwKXDlcOUx1YURpYWxvZy5NZXNzYWdlIChcIlBvbHlwaG9uaWMgQXVkaW8gdG8gTUlESVwiLCBcIk5vIHRhcmdldCBNSURJIHJlZ2lvbiBzZWxlY3RlZC5cXG5BIE1JREkgcmVnaW9uLCBpZGVhbGx5IGVtcHR5LCBhbmQgZXh0ZW5kaW5nIGJleW9uZCB0aGUgc2VsZWN0ZWQgYXVkaW8tcmVnaW9uKHMpIG5lZWRzIHRvIGJlIHNlbGVjdGVkLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4gKClcClw5XDlyZXR1cm5cClw5ZW5kXApcClw5bWlkaV9yZWdpb246c2V0X2luaXRpYWxfcG9zaXRpb24gKFRlbXBvcmFsLnRpbWVwb3NfdCAoc3RhcnRfdGltZSkpXApcOW1pZGlfcmVnaW9uOnNldF9sZW5ndGggKFRlbXBvcmFsLnRpbWVjbnRfdCAoZW5kX3RpbWUgLSBzdGFydF90aW1lKSlcClwKXDlsb2NhbCBwZGlhbG9nID0gTHVhRGlhbG9nLlByb2dyZXNzV2luZG93IChcIkF1ZGlvIHRvIE1JRElcIiwgdHJ1ZSlcClw5ZnVuY3Rpb24gcHJvZ3Jlc3MgKF8sIHBvcylcClw5XDlyZXR1cm4gcGRpYWxvZzpwcm9ncmVzcyAoKGN1cl9wb3MgKyBwb3MpIC8gbWF4X3BvcywgXCJBbmFseXppbmdcIilcClw5ZW5kXApcClw5Zm9yIGksYXIgaW4gcGFpcnMoYXVkaW9fcmVnaW9ucykgZG9cClw5XDlsb2NhbCBhX29mZiA9IGFyOnBvc2l0aW9uICgpXApcOVw5bG9jYWwgYl9vZmYgPSB0bTpxdWFydGVyc19hdCAobWlkaV9yZWdpb246cG9zaXRpb24gKCkpO1wKXApcOVw5dmFtcDphbmFseXplIChhcjp0b19yZWFkYWJsZSAoKSwgMCwgcHJvZ3Jlc3MpXApcClw5XDlpZiBwZGlhbG9nOmNhbmNlbGVkICgpIHRoZW5cClw5XDlcOWdvdG8gb3V0XApcOVw5ZW5kXApcClw5XDljdXJfcG9zID0gY3VyX3BvcyArIGFyOnRvX3JlYWRhYmxlICgpOnJlYWRhYmxlX2xlbmd0aCAoKVwKXDlcOXBkaWFsb2c6cHJvZ3Jlc3MgKGN1cl9wb3MgLyBtYXhfcG9zLCBcIkdlbmVyYXRpbmcgTUlESVwiKVwKXApcOVw5bG9jYWwgZmwgPSB2YW1wOnBsdWdpbiAoKTpnZXRSZW1haW5pbmdGZWF0dXJlcyAoKTphdCAoMClcClw5XDlpZiBmbCBhbmQgZmw6c2l6ZSgpID4gMCB0aGVuXApcOVw5XDlsb2NhbCBtbSA9IG1pZGlfcmVnaW9uOm1pZGlfc291cmNlKDApOm1vZGVsKClcClw5XDlcOWxvY2FsIG1pZGlfY29tbWFuZCA9IG1tOm5ld19ub3RlX2RpZmZfY29tbWFuZCAoXCJBdWRpbzJNaWRpXCIpXApcOVw5XDlmb3IgZiBpbiBmbDppdGVyICgpIGRvXApcOVw5XDlcOWxvY2FsIGZ0ID0gVGVtcG9yYWwudGltZWNudF90IChWYW1wLlJlYWxUaW1lLnJlYWxUaW1lMkZyYW1lIChmLnRpbWVzdGFtcCwgc3IpKVwKXDlcOVw5XDlsb2NhbCBmZCA9IFRlbXBvcmFsLnRpbWVjbnRfdCAoVmFtcC5SZWFsVGltZS5yZWFsVGltZTJGcmFtZSAoZi5kdXJhdGlvbiwgc3IpKVwKXDlcOVw5XDlsb2NhbCBmbiA9IGYudmFsdWVzOmF0ICgwKVwKXApcOVw5XDlcOWxvY2FsIGJzID0gdG06cXVhcnRlcnNfYXQgKGFfb2ZmICsgZnQsIDApXApcOVw5XDlcOWxvY2FsIGJlID0gdG06cXVhcnRlcnNfYXQgKGFfb2ZmICsgZnQgKyBmZCwgMClcClw5XDlcOVw5cHJpbnQgKFwiTlwiLCBicywgYmUsIGZuICsgMSlcClwKXDlcOVw5XDlsb2NhbCBwb3MgPSBicyAtIGJfb2ZmXApcOVw5XDlcOWxvY2FsIGxlbiA9IGJlIC0gYnNcClw5XDlcOVw5bG9jYWwgbm90ZSA9IEFSRE9VUi5MdWFBUEkubmV3X25vdGVwdHIgKDAsIHBvcywgbGVuLCBmbiArIDEsIDB4N2YpXApcOVw5XDlcOW1pZGlfY29tbWFuZDphZGQgKG5vdGUpXApcOVw5XDllbmRcClw5XDlcOW1tOmFwcGx5X2NvbW1hbmQgKFNlc3Npb24sIG1pZGlfY29tbWFuZClcClw5XDllbmRcClw5XDktLSByZXNldCB0aGUgcGx1Z2luIChwcmVwYXJlIGZvciBuZXh0IGl0ZXJhdGlvbilcClw5XDl2YW1wOnJlc2V0ICgpXApcOWVuZFwKXApcOTo6b3V0OjpcClw5cGRpYWxvZzpkb25lICgpO1wKICBlbHNlXAogICAgcmV0dXJuXAogIGVuZFwKXAplbmQgZW5kXAoiICBzY3JpcHRzWzldWyJhIl0gPSB7fSBzY3JpcHRzWzldWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9hdWRpb3RvbWlkaS5sdWEiICAgc2NyaXB0c1s5XVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzldWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwxOFwwXDBcMOJcMFwwXDBcMFwwXDJcM1wwXDBcMCxcMFwwXDAmXDBcMFwxJlwwgFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDE4XDBcMFww4lwwXDBcMFwwXDAq+1wxXDBcMFwxMVwwgFwwS0BcMVwwSkBAgEpAQIFKXDDBgYuAXDBcMIrAQYOKQEKESoCAgkqAQYUrQIBcMEbAQlwwR1www1wwgUBcM1wwwFwwXDBcMGSAgFwxjIDDXDCkgFwwXDGiXDBcMFwwXDMwXDA8gMdAQFwxXDMxwMFcMVwzMEA7gMbAQ1wwzFwwxFwx5IBcMFwxXDZBRFwwXDEygURcMiSBXDBcMUbBRFwwR1wxxVwyR0HFXDJkgYBcMIaBRVwwh8FFXDOHXDFGXDPBQVw2XDBcMFwyXDBcMqSBgFwxxFwxXDBcMFwxMVwyXDBcMEZCRFwwTILGXDRkglwwXDGGQkRcMIzCRlw1pIJcMFwxwVwyXDdcMFwxXDNcN1wwR0PHXDFMg8dcNmSDXDBcMUzDx1w2ZFwzXDFcMVwzMIBcOIBMXDRIXDhkhFwwXDGMRMhcOKSEXDBcMaJEXDBcMFwzMEBcNoCMhEhcOKSEXDBcMYzESFw5pIRcMFwxzFw0SVw45IRcMFwxzMTIXDnkhFwwXDFcMTPFXDRcOSBAXDJcOVwzMFwwXDCAQFwyXDBcOSBcMFw1XDVcMzBcMFwwgIBcMlwwXApGRUlcMEeFyVwKgFw1XDBcNMBcNYBcOGRFgFwxTMXJXDhkhVwwXDFMXDXKXApkhVwwXDHNQoVcNVwzMIBcMICMREpcOKSEXDBcMcBcMVwwXDlpQ1wwXDDqg/ZcMTI3XFxcM1wwXDRcMzFcMMdcNlwzMEBcM4BGw0JcMEeDylw2gcNcClwwwVwzXDExXDBcNsRCXDBcN0RLXDhcN4RLXDhGxEJcMEfEy1w4R1w0zFw4ZIOAXDJMg8NcNmRDXDBcMSZcMIBcMOJBXDBcMFwzMEBcM4BGw0JcMEeDylw2gcNcClwwwUNcMTJcMFw2xEJcMFw3REtcOFw3hEtcOEbEQlwwR8TLXDhHXDTMXDhkg4BcMkyDw1w2ZENcMFwxJlwwgFwwTIPMXDPGw0RcMMfDzFw3XDBcNIBcNORcM1wwXDFkQ1wwXDBMXDPNXDPGw0RcMMdDzVw3XDE0RFwyXDXkXDNcMFwxZENcMFwwRsNCXDBHg81cNoHDXDEzXDDDXDOAXDBkg4BcMaxcM1wwXDBcOIBcM5yGQ05cMMBcM1wwXDSkXDNcMVwxXDMwgFwyNoDMhEhcOeSEXDBcMVwxMoXOXDKMhchcM6RcNVwwXDEkhVwwXDBMxU5cM8zFSVw55IVcMFwxXDFcNlw3XDBGXDZPXDBkRYBcMkxFz1w2ZIVcMFwxYkVcMFwwXDMwXDBcMjOATMVJXDlkhVwwXDFMXDXKXApkhVwwXDFcMTNDXDVcNkxcNc9cNtLFXDJcNlwxhlwxNVwwZEVcMFwyTMVPXDNkhVwwXDFMXDXQXApkhVwwXDFMRdBcCsFcNVw3XDBkhYBcMWJcNVwwXDBcMzCAXDE3gIyF0FwKpIVcMFwxIIBcNY5cMzCAXDE2gIzF0FwzXDFcNlw3XDCkhYBcMYxcNVFcMTGkhVwwXDHMRVFcMTFBhlwxN1ww5IWAXDFcMcZcMTdcMEzGx1wKZFw2XDFcMVwzMFwwXDEygEZcN0ZcMEdcN9JcMTRHR9JcMTSHh1JcMTTAXDdcMFwyZIeAXDGGXDdGXDCHXDdSXDE1h0dSXDE1x8dSXDE0XDBcOFwwXDKkh4BcMcdHQVwxNMxH0FwxNUFcOFw3XDDkh4BcMV9cMIZcMTRcMzCAXDeAXDBcNoBcMTRcMTKIzlwyhshEXDCHSE1cMTfAXDiAXDE0pIhcMFwxjYiIXDnBXDhcN1wwJIhcMFwyTIjOXDLGyERcMMdIzVwxN1wxM4mHXDE05IhcMFwxzciIXDlcMVw5XDdcMGSIXDBcMo5cOFw1XDE2zlw4iFwxNlw2iUVcMFw3yUVcMThcN1w5U1wxOEFcOVw3XDCAXDlcMFwxN8BcOYBcMTdcMTPKwVwxNUFKXDE5XDAkiVwwXDNMidNcMTHAXDlcMFwxOGRJgFwxaUZcMFww6lw281wxMjdMxlNcMTHGRkRcMFwwXDeAXDExZEZcMFwyjFw1VFwzpEVcMFwxqYNcMFwwKoTkXDEyN4xD1Fw2pENcMFwxXDMwQT2AXDMwXDA9gKJcMFwwXDBcMzBAPIDHQEBcMVwzMUDCXDFcMzCAO4DGwENcMMxcMMRcMeSAXDBcMVw2QURcMFwxMoFEXDIkgVwwXDFGwURcMEdcMcVcMkdBxVwyZIGAXDCGgUVcMIfBRVwzh1wxRlwzwUFcNlwwXDBcMlwwXDKkgYBcMcRcMVwwXDBcMTFcMlwwXDBGQkRcMEyCxlw0ZIJcMFwxhkJEXDCMwkZcNaSCXDBcMcFcMlw3XDBcMVwzXDdcMEdDx1wxTIPHXDZkg1wwXDFMw8dcNmRcM1wxXDFcMzCAXDiATFw0SFw4ZIRcMFwxjETIXDikhFwwXDGiRFwwXDBcMzBAXDaAjIRIXDikhFwwXDGMxEhcOaSEXDBcMcxcNElcOOSEXDBcMczEyFw55IRcMFwxXDEzxVw0XDkgQFwyXDlcMzBcMFwwgEBcMlwwXDkgXDBcNVw1XDMwXDBcMICAXDJcMFwKRkVJXDBHhclcCoBcNVwwXDTAXDWAXDhkRYBcMUzFyVw4ZIVcMFwxTFw1ylwKZIVcMFwxzUKFXDVcMzCAXDCAjERKXDikhFwwXDHAXDFcMFw5aUNcMFww6oP2XDEyN1xcXDNcMFw0XDMxXDDHXDZcMzBAXDOARsNCXDBHg8pcNoGDXDIwXDDBw1wyMFwwXDbEQlwwXDdES1w4XDeES1w4RsRCXDBHxMtcOEdcNMxcOGSDgFwyTIPDXDZkQ1wwXDEmXDCAXDDiQVwwXDBcMzBAXDOARsNCXDBHg8pcNoGDXDIwXDDBQ1wxMlwwXDbEQlwwXDdES1w4XDeES1w4RsRCXDBHxMtcOEdcNMxcOGSDgFwyTIPDXDZkQ1wwXDEmXDCAXDBMg8xcM8bDRFwwx8PMXDdcMFw0gFw05FwzXDBcMWRDXDBcMExcM81cM8bDRFwwx0PNXDdcMTREXDJcNeRcM1wwXDFkQ1wwXDBGw0JcMEeDzVw2gcNcMTNcMMNcM4BcMGSDgFwxrENcMFwwXDiAXDOehkNOXDDAXDNcMFw0pFwzXDFcMVwzMMBcMjaAzIRIXDnkhFwwXDFcMTKFzlwyjIXIXDOkXDVcMFwxJIVcMFwwTMVOXDPMxUlcOeSFXDBcMVwxXDZcN1wwRlw2VVwwZEWAXDJMRc9cNmSFXDBcMWJFXDBcMFwzMEBcMjOATMVJXDlkhVwwXDFMXDXKXApkhVwwXDFcMTNDXDVcNkxcNdVcNtLFXDJcNlwxhlwxNVwwZEVcMFwyTMVPXDNkhVwwXDFMXDXQXApkhVwwXDFMRdBcCsFcNVw3XDBkhYBcMWJcNVwwXDBcMzDAXDE3gIyF0FwKpIVcMFwxIIBcNY5cMzDAXDE2gIzF0FwzXDFcNlw3XDCkhYBcMYxcNVFcMTGkhVwwXDHMRVFcMTFBhlwxN1ww5IWAXDFcMTLGx1wKJFw2XDFcMVwzMIBcMTKAXDbHRFwwXDdHTVwxNEZcN0ZcMEdcN9JcMTRHR9JcMTSHh9JcMTPAXDdcMFwyZFw3gFwxJIdcMFwwRsdEXDBHR81cMTSGXDdGXDCHXDdSXDE1h0dSXDE1x8fSXDEzXDBcOFwwXDKkXDeAXDFkh1wwXDCHR8FcMTOMR1BcMTVcMVw4XDdcMKSHgFwxzIfOXDJNXDiHXDmBXDhcN1ww5IdcMFwyXDEyiM5cMo1cOIdcOY1IXDdcMTfBXDhcN1wwJIhcMFwyRkhVXDCBiFwyMVwwwFw4gFwxNVwwXDlcMFwxNk3JQVwxNWRIgFwyTlw4hVwxNY7IXDdcMTbGiEVcMMfIxVwxN8dcONNcMTdcMVw5XDdcMEBcOYBcMTaAXDlcMFwxN83JQVwxNVwxSlwxOVww5IhcMFwzXDEyidNcMTGAXDmAXDE3JEmAXDEpRlwwXDCqhvJcMTI3XDEyxlNcMTGGRkRcMMBcNoBcMTEkRlwwXDKMXDVUXDOkRVwwXDGpg1wwXDAqRORcMTI3jEPUXDakQ1wwXDFcMzBBXDCAXDMwXDBcMIAmXDCAXDAmXDCAXDBXXDBcMFwwXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcIkNob29zZSB0eXBlIG9mIE1JREkgVHJhbnNjcmlwdGlvblw0XDd2YWx1ZXNcNCRNb25vcGhvbmljIChCZXN0IGZvciB2b2ljZSB0byBNSURJKVwxOVwxXDBcMFwwXDBcMFwwXDBcNFwxMVBvbHlwaG9uaWNcMTlcMlwwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFwKTHVhRGlhbG9nXDRcN0RpYWxvZ1w0XDMxQ2hvb3NlIE1JREkgVHJhbnNjcmlwdGlvbiBUeXBlXDRcNHJ1blw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cNFw4U2Vzc2lvblw0XDIwbm9taW5hbF9zYW1wbGVfcmF0ZVw0XDlUZW1wb3JhbFw0XDlUZW1wb01hcFw0XDVyZWFkXDRcN0FSRE9VUlw0XDdMdWFBUElcNFw1VmFtcFw0JmxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLXRyYW5zY3JpcHRpb25cNFwxOWN1cnJlbnRfZW5kX3NhbXBsZVw0XDIxY3VycmVudF9zdGFydF9zYW1wbGVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOHJlZ2lvbnNcNFwxMXJlZ2lvbmxpc3RcNFw1aXRlclw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFw5cG9zaXRpb25cNFw4c2FtcGxlc1w0XDdsZW5ndGhcNFw2dGFibGVcNFw3aW5zZXJ0XDRcMTJ0b19yZWFkYWJsZVw0XDE2cmVhZGFibGVfbGVuZ3RoXDRcMTR0b19taWRpcmVnaW9uXDRcOE1lc3NhZ2VcNFwyNU1vbm9waG9uaWMgQXVkaW8gdG8gTUlESVwyMGNObyBzb3VyY2UgYXVkaW8gcmVnaW9uKHMpIHNlbGVjdGVkLlwKQXQgbGVhc3Qgb25lIGF1ZGlvLXJlZ2lvbiB0byBiZSBhbmFseXplZCBuZWVkcyB0byBiZSBzZWxlY3RlZC5cNFwxMk1lc3NhZ2VUeXBlXDRcNkVycm9yXDRcMTFCdXR0b25UeXBlXDRcNkNsb3NlXDIwhk5vIHRhcmdldCBNSURJIHJlZ2lvbiBzZWxlY3RlZC5cCkEgTUlESSByZWdpb24sIGlkZWFsbHkgZW1wdHksIGFuZCBleHRlbmRpbmcgYmV5b25kIHRoZSBzZWxlY3RlZCBhdWRpby1yZWdpb24ocykgbmVlZHMgdG8gYmUgc2VsZWN0ZWQuXDRcMjFzZXRfaW5pdGlhbF9wb3NpdGlvblw0XAp0aW1lcG9zX3RcNFwxMXNldF9sZW5ndGhcNFwKdGltZWNudF90XDRcMTVQcm9ncmVzc1dpbmRvd1w0XDE0QXVkaW8gdG8gTUlESVw0XDlwcm9ncmVzc1w0XDZwYWlyc1w0XDEycXVhcnRlcnNfYXRcNFw4YW5hbHl6ZVw0XDlwcm9ncmVzc1w0XDljYW5jZWxlZFw0XDE2R2VuZXJhdGluZyBNSURJXDRcN3BsdWdpblw0XDIxZ2V0UmVtYWluaW5nRmVhdHVyZXNcNFwzYXRcNFw1c2l6ZVw0XDEybWlkaV9zb3VyY2VcNFw2bW9kZWxcNFwyMm5ld19ub3RlX2RpZmZfY29tbWFuZFw0XDExQXVkaW8yTWlkaVwxOf//////////XDRcOVJlYWxUaW1lXDRcMTVyZWFsVGltZTJGcmFtZVw0XAp0aW1lc3RhbXBcNFw5ZHVyYXRpb25cNFwxMm5ld19ub3RlcHRyXDE5XDEyN1wwXDBcMFwwXDBcMFwwXDRcNGFkZFw0XDE0YXBwbHlfY29tbWFuZFw0XDZyZXNldFw0XDVkb25lXDRcMjVQb2x5cGhvbmljIEF1ZGlvIHRvIE1JRElcMjBiTm8gc291cmNlIGF1ZGlvIHJlZ2lvbihzKSBzZWxlY3RlZC5cCkF0IGxlYXN0IG9uZSBhdWRpby1yZWdpb24gdG8gYmUgYW5hbHl6ZWQgbmVlZCB0byBiZSBzZWxlY3RlZC5cNFw5cHJvZ3Jlc3NcNFw2cHJpbnRcNFwyTlwxXDBcMFwwXDBcMFwyXDBcMFwwXDBWXDBcMFwwWFwwXDBcMFwyXDBcNlwKXDBcMFwwhVwwXDBcMIxcMEBcMVw1XDGAXDBcMTNBXDBcMkVcMVwwXDFcMThBXDFcMkFBXDBcMKVcMFwwXDKmXDBcMFwwJlwwgFwwXDJcMFwwXDBcNFw5cHJvZ3Jlc3NcNFwKQW5hbHl6aW5nXDNcMFwwXDBcMVwxM1wxXDEyXDFcMTFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwws1wwXDBcMLVcMFwwXDBcMlwwXDZcClwwXDBcMIVcMFwwXDCMXDBAXDFcNVwxgFwwXDEzQVwwXDJFXDFcMFwxXDE4QVwxXDJBQVwwXDClXDBcMFwyplwwXDBcMCZcMIBcMFwyXDBcMFwwXDRcOXByb2dyZXNzXDRcCkFuYWx5emluZ1wzXDBcMFwwXDFcMTNcMVwxMlwxXDExXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNjcmlwdHNbOV1bIm4iXSA9ICJBdWRpbyB0byBNSURJIiAgIHNjcmlwdHNbMTBdID0ge30gc2NyaXB0c1sxMF1bInMiXSA9ICJhcmRvdXIge1wKICAgIFtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKICAgIG5hbWUgPSBcIlBpdGNoIC0gQ2hhbmdlIHRoZSBwaXRjaCBvZiBhdWRpbyBsb29wIGJ5IGtleVwiLFwKICAgIGF1dGhvciA9IFwiSnVzdGluIEVocmxpY2htYW5cIixcCiAgICBkZXNjcmlwdGlvbiA9IFtbXApUcmFuc3Bvc2VzIHRoZSBrZXkgb2YgYXVkaW8gbG9vcFwKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSgpXAogICAgcmV0dXJuIGZ1bmN0aW9uKHNpZ25hbCwgLi4uKVwKICAgICAgICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXAogICAgICAgIGxvY2FsIGNvdW50ID0gMFwKICAgICAgICBsb2NhbCBhdWRpb19yZWdpb25cClwKICAgICAgICBmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0KCk6aXRlcigpIGRvXAogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMVwKICAgICAgICAgICAgaWYgcjp0b19hdWRpb3JlZ2lvbigpOmlzbmlsKCkgdGhlblwKICAgICAgICAgICAgICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJHZXQgS2V5XCIsIFwiVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYW4gYXVkaW8gcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICAgICAgICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgICAgICAgICBtZCA9IG5pbFwKICAgICAgICAgICAgICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICAgICAgICAgICAgICByZXR1cm5cCiAgICAgICAgICAgIGVsc2VcCiAgICAgICAgICAgICAgICBhdWRpb19yZWdpb24gPSByXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXApcCiAgICAgICAgaWYgY291bnQgfj0gMSB0aGVuXAogICAgICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiR2V0IEtleVwiLCBcIlBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvblwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgICAgIG1kID0gbmlsXAogICAgICAgICAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgICAgICAgICByZXR1cm5cCiAgICAgICAgZW5kXApcCiAgICAgICAgbG9jYWwgcm4gPSBhdWRpb19yZWdpb246bmFtZSgpXAogICAgICAgIGxvY2FsIHNvdXJjZSA9IGF1ZGlvX3JlZ2lvbjpzb3VyY2UoMCk6dG9fZmlsZXNvdXJjZSgpOnBhdGgoKVwKICAgICAgICBwcmludChzb3VyY2UpXAogICAgICAgIGxvY2FsIGZpbGVwYXRoID0gc291cmNlXAogICAgICAgIGxvY2FsIHF1b3RlZGZpbGVwYXRoID0gJ1wiJyAuLiBmaWxlcGF0aCAuLiAnXCInXApcCiAgICAgICAgLS0gRXhhbXBsZSB1c2FnZTpcCiAgICAgICAgbG9jYWwgZmlsZW5hbWUgPSBxdW90ZWRmaWxlcGF0aFwKXApcCiAgICAgICAgICAgIGZpcnN0cmVzdWx0ID0gXCJLZXkgbm90IGZvdW5kLlwiXAogICAgICAgICAgICBsb2NhbCBjb21tYW5kID0gXCIvb3B0L0xvZ2ljYWxBcmRvdXIva2V5IFwiIC4uIHF1b3RlZGZpbGVwYXRoXAogICAgICAgICAgICBvcy5leGVjdXRlKGNvbW1hbmQpXApcCiAgICAgICAgICAgIC0tIE9wZW4gdGhlIGZpbGUgaW4gd3JpdGUgbW9kZVwKICAgICAgICAgICAgbG9jYWwgaGFuZGxlID0gaW8ucG9wZW4oY29tbWFuZClcCiAgICAgICAgICAgIGZpcnN0cmVzdWx0ID0gaGFuZGxlOnJlYWQoXCIqYVwiKVwKICAgICAgICAgICAgaGFuZGxlOmNsb3NlKClcCiAgICAgICAgICAgIHByaW50KGZpcnN0cmVzdWx0KVwKXAotLSBFeHRyYWN0IHRoZSBrZXkgYW5kIHNjYWxlXApsb2NhbCBka2V5LCBzY2FsZSA9IHN0cmluZy5tYXRjaChmaXJzdHJlc3VsdCwgXCJUaGUga2V5IG9mIHRoZSBzb25nIGlzIChbQS1HI10rKSAoJWErKVwiKVwKXAotLSBJZiB0aGUgc2NhbGUgaXMgbWlub3IsIGFwcGVuZCAnbScgdG8gdGhlIGtleVwKLS0gRXh0cmFjdCB0aGUga2V5IGFuZCBzY2FsZVwKbG9jYWwgZGtleSwgc2NhbGUgPSBzdHJpbmcubWF0Y2goZmlyc3RyZXN1bHQsIFwiVGhlIGtleSBvZiB0aGUgc29uZyBpcyAoW0EtR2IjXSspICglYSspXCIpXApcCi0tIElmIHRoZSBzY2FsZSBpcyBtaW5vciwgYXBwZW5kICdtJyB0byB0aGUga2V5XAppZiBzY2FsZSA9PSBcIm1pbm9yXCIgdGhlblwKICAgIGRrZXkgPSBka2V5IC4uIFwibVwiXAplbmRcClwKcHJpbnQoXCJLZXk6IFwiIC4uIGRrZXkpXApwcmludChcIlNjYWxlOiBcIiAuLiBzY2FsZSlcClwKXApcCi0tIEdldCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCBzcGF0aCA9IFNlc3Npb246cGF0aCgpXApcCi0tIENvbnN0cnVjdCB0aGUgZnVsbCBwYXRoIHRvIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGtleV9maWxlX3BhdGggPSBzcGF0aCAuLiBcIi9rZXkudHh0XCJcClwKLS0gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIGtleS50eHQgZmlsZVwKbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJyXCIpIC0tIE9wZW4gdGhlIGZpbGUgaW4gcmVhZCBtb2RlXApsb2NhbCBmaWxlX2NvbnRlbnQgPSBcIk5vIGtleSBzZXRcIiAtLSBEZWZhdWx0IHZhbHVlIGlmIHRoZSBmaWxlIGNhbm5vdCBiZSByZWFkXApcCmlmIGZpbGUgdGhlblwKICAgIGZpbGVfY29udGVudCA9IGZpbGU6cmVhZChcIiphXCIpIC0tIFJlYWQgdGhlIGVudGlyZSBjb250ZW50IG9mIHRoZSBmaWxlXAogICAgZmlsZTpjbG9zZSgpIC0tIENsb3NlIHRoZSBmaWxlXAplbHNlXAogICAgcHJpbnQoXCJXYXJuaW5nOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciByZWFkaW5nIGF0IFwiIC4uIGtleV9maWxlX3BhdGgpXAplbmRcClwKLS0gUHJlcGFyZSB0aGUgZGlhbG9nIG9wdGlvbiB3aXRoIHRoZSBmaWxlIGNvbnRlbnRcCmxvY2FsIGN1cnJlbnRfa2V5X29wdGlvbiA9IFwiU2V0IHRvIGN1cnJlbnQgcHJvamVjdCBrZXk6IFwiIC4uIGZpbGVfY29udGVudFwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwidGFyZ2V0X2tleVwiLCB0aXRsZSA9IFwiRXN0aW1hdGVkIGtleSBvZiBsb29wOiBcIiAuLiBka2V5IC4uIFwiIFwiIC4uIHNjYWxlIC4uIFwiLiBDaG9vc2UgVGFyZ2V0IEtleSAoSGl0IENhbmNlbCBvciBzZWxlY3QgRG8gbm90IGNoYW5nZSBrZXkgdG8gbm90IGNoYW5nZSB0aGUga2V5KVwiLCB2YWx1ZXMgPVwKICAge1wKICAgIFtcIkNcIl0gPSAxLCBbXCJDI1wiXSA9IDIsIFtcIkRiXCJdID0gMywgW1wiRFwiXSA9IDQsIFtcIkQjXCJdID0gNSwgW1wiRWJcIl0gPSA2LFwKICAgIFtcIkVcIl0gPSA3LCBbXCJGXCJdID0gOCwgW1wiRiNcIl0gPSA5LCBbXCJHYlwiXSA9IDEwLCBbXCJHXCJdID0gMTEsIFtcIkcjXCJdID0gMTIsIFtcIkFiXCJdID0gMTMsXAogICAgW1wiQVwiXSA9IDE0LCBbXCJBI1wiXSA9IDE1LCBbXCJCYlwiXSA9IDE2LCBbXCJCXCJdID0gMTcsXAogICAgW1wiQW1cIl0gPSAxOCwgW1wiQSNtXCJdID0gMTksIFtcIkJibVwiXSA9IDIwLCBbXCJCbVwiXSA9IDIxLCBbXCJDbVwiXSA9IDIyLFwKICAgIFtcIkMjbVwiXSA9IDIzLCBbXCJEYm1cIl0gPSAyNCwgW1wiRG1cIl0gPSAyNSwgW1wiRCNtXCJdID0gMjYsIFtcIkVibVwiXSA9IDI3LFwKICAgIFtcIkVtXCJdID0gMjgsIFtcIkZtXCJdID0gMjksIFtcIkYjbVwiXSA9IDMwLCBbXCJHYm1cIl0gPSAzMSwgW1wiR21cIl0gPSAzMiwgW1wiRyNtXCJdID0gMzMsIFtcIkFibVwiXSA9IDM0LFwKICAgIFtjdXJyZW50X2tleV9vcHRpb25dID0gMzUsIC0tIEFkZCB0aGUgZmlsZSBjb250ZW50IG9wdGlvblwKICAgIFtcIkRvIG5vdCBjaGFuZ2Uga2V5XCJdID0gMzYgLS0gVXBkYXRlIGluZGV4IGZvciBcIkRvIG5vdCBjaGFuZ2Uga2V5XCIgdG8gYXZvaWQgb3ZlcmxhcFwKICAgfSxcCiAgIGRlZmF1bHQgPSBjdXJyZW50X2tleV9vcHRpb24gLS0gU2V0IHRoZSBjdXJyZW50IGtleSBvcHRpb24gYXMgdGhlIGRlZmF1bHRcCiAgfVwKfVwKXAotLSBDcmVhdGUgYW5kIHJ1biB0aGUgZGlhbG9nXApsb2NhbCBvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJDaG9vc2UgVGFyZ2V0IEtleVwiLCBkaWFsb2dfb3B0aW9ucylcCmxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKLS0gQ2hlY2sgdGhlIHVzZXIncyBzZWxlY3Rpb25cCmlmIHJ2IGFuZCBydltcInRhcmdldF9rZXlcIl0gPT0gMzUgYW5kIGZpbGVfY29udGVudDptYXRjaChcIk5vIGtleSBzZXRcIikgdGhlblwKICAgIHByaW50KFwiTm8ga2V5IGlzIHNldCBpbiB0aGUgZmlsZS4gRXhpdGluZyB0aGUgc2NyaXB0LlwiKVwKICAgIHJldHVybiAtLSBFeGl0IHRoZSBzY3JpcHRcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJ0YXJnZXRfa2V5XCJdID09IDM1IHRoZW5cCiAgICAgICBsb2NhbCBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcInJcIilcCiAgICBsb2NhbCBwa2V5XApcCiAgICBpZiBmaWxlIHRoZW5cCiAgICAgICAgLS0gUmVhZCB0aGUga2V5IGZyb20gdGhlIGZpbGUgKGFzc3VtaW5nIHRoZSBrZXkgaXMgb24gdGhlIGZpcnN0IGxpbmUpXAogICAgICAgIGxvY2FsIGtleV93aXRoX3N1ZmZpeCA9IGZpbGU6cmVhZChcIipsXCIpXAogICAgICAgIGZpbGU6Y2xvc2UoKVwKXAogICAgICAgIC0tIE1vZGlmeSB0aGUgcGF0dGVybiB0byBjYXB0dXJlIHRoZSBrZXkgYW5kIGluY2x1ZGUgXCJtXCIgaWYgaXQncyBtaW5vclwKICAgICAgICBwa2V5ID0ga2V5X3dpdGhfc3VmZml4Om1hdGNoKFwiXiglYSM/Yj9tPylcIilcCiAgICBlbmRcClwKICAgIC0tIFByaW50IHRoZSBleHRyYWN0ZWQga2V5IHRvIHZlcmlmeVwKICAgIHByaW50KFwiRXh0cmFjdGVkIEtleTpcIiwgcGtleSlcClwKICAgIC0tIFByZXBhcmUgYSBsb29rdXAgdGFibGUgdG8gbWF0Y2gga2V5cyB0byBudW1iZXJzXAogICAgbG9jYWwga2V5X3RvX251bWJlciA9IHtcCiAgICAgICAgW1wiQ1wiXSA9IDEsIFtcIkMjXCJdID0gMiwgW1wiRGJcIl0gPSAzLCBbXCJEXCJdID0gNCwgW1wiRCNcIl0gPSA1LCBbXCJFYlwiXSA9IDYsXAogICAgICAgIFtcIkVcIl0gPSA3LCBbXCJGXCJdID0gOCwgW1wiRiNcIl0gPSA5LCBbXCJHYlwiXSA9IDEwLCBbXCJHXCJdID0gMTEsIFtcIkcjXCJdID0gMTIsIFtcIkFiXCJdID0gMTMsXAogICAgICAgIFtcIkFcIl0gPSAxNCwgW1wiQSNcIl0gPSAxNSwgW1wiQmJcIl0gPSAxNiwgW1wiQlwiXSA9IDE3LFwKICAgICAgICBbXCJBbVwiXSA9IDE4LCBbXCJBI21cIl0gPSAxOSwgW1wiQmJtXCJdID0gMjAsIFtcIkJtXCJdID0gMjEsIFtcIkNtXCJdID0gMjIsXAogICAgICAgIFtcIkMjbVwiXSA9IDIzLCBbXCJEYm1cIl0gPSAyNCwgW1wiRG1cIl0gPSAyNSwgW1wiRCNtXCJdID0gMjYsIFtcIkVibVwiXSA9IDI3LFwKICAgICAgICBbXCJFbVwiXSA9IDI4LCBbXCJGbVwiXSA9IDI5LCBbXCJGI21cIl0gPSAzMCwgW1wiR2JtXCJdID0gMzEsIFtcIkdtXCJdID0gMzIsIFtcIkcjbVwiXSA9IDMzLCBbXCJBYm1cIl0gPSAzNFwKICAgIH1cClwKICAgIC0tIExvb2sgdXAgdGhlIGV4dHJhY3RlZCBrZXkgaW4gdGhlIHRhYmxlIHRvIGdldCB0aGUgbnVtYmVyXAogICAgIHNlbGVjdGVkX251bWJlciA9IGtleV90b19udW1iZXJbcGtleV1cClwKICAgIGlmIHNlbGVjdGVkX251bWJlciB0aGVuXAogICAgICAgIHByaW50KFwiTWF0Y2hlZCBLZXkgTnVtYmVyOlwiLCBzZWxlY3RlZF9udW1iZXIpXAogICAgICAgIC0tIFVzZSBgc2VsZWN0ZWRfbnVtYmVyYCBmb3IgeW91ciB0cmFuc3Bvc2l0aW9uIGxvZ2ljIG9yIGFueSBmdXJ0aGVyIHN0ZXBzXAogICAgZWxzZVwKICAgICAgICBwcmludChcIkVycm9yOiBUaGUgZXh0cmFjdGVkIGtleSBkb2VzIG5vdCBtYXRjaCBhbnkga25vd24ga2V5LlwiKVwKICAgIGVuZFwKZW5kXApcClwKXApcCi0tIEV4aXQgaWYgZGlhbG9nIGlzIGNhbmNlbGVkIG9yIGNsb3NlZFwKaWYgbm90IHJ2IHRoZW5cCiAgICBwcmludChcIkRpYWxvZyBjYW5jZWxlZCBvciBjbG9zZWQuXCIpXAogICAgcmV0dXJuXApcCmVuZFwKXApcClwKLS0gQ3JlYXRlIGEgcmV2ZXJzZSBsb29rdXAgdGFibGUgdG8gbWFwIG51bWJlcnMgYmFjayB0byBtdXNpY2FsIGtleSBzdHJpbmdzXApsb2NhbCBudW1iZXJfdG9fa2V5ID0ge1wKICAgIFsxXSA9IFwiQ1wiLCBbMl0gPSBcIkMjXCIsIFszXSA9IFwiRGJcIiwgWzRdID0gXCJEXCIsIFs1XSA9IFwiRCNcIiwgWzZdID0gXCJFYlwiLFwKICAgIFs3XSA9IFwiRVwiLCBbOF0gPSBcIkZcIiwgWzldID0gXCJGI1wiLCBbMTBdID0gXCJHYlwiLCBbMTFdID0gXCJHXCIsIFsxMl0gPSBcIkcjXCIsIFsxM10gPSBcIkFiXCIsXAogICAgWzE0XSA9IFwiQVwiLCBbMTVdID0gXCJBI1wiLCBbMTZdID0gXCJCYlwiLCBbMTddID0gXCJCXCIsXAogICAgWzE4XSA9IFwiQW1cIiwgWzE5XSA9IFwiQSNtXCIsIFsyMF0gPSBcIkJibVwiLCBbMjFdID0gXCJCbVwiLCBbMjJdID0gXCJDbVwiLFwKICAgIFsyM10gPSBcIkMjbVwiLCBbMjRdID0gXCJEYm1cIiwgWzI1XSA9IFwiRG1cIiwgWzI2XSA9IFwiRCNtXCIsIFsyN10gPSBcIkVibVwiLFwKICAgIFsyOF0gPSBcIkVtXCIsIFsyOV0gPSBcIkZtXCIsIFszMF0gPSBcIkYjbVwiLCBbMzFdID0gXCJHYm1cIiwgWzMyXSA9IFwiR21cIiwgWzMzXSA9IFwiRyNtXCIsIFszNF0gPSBcIkFibVwiXAp9XApcCmlmIHJ2IGFuZCBydltcInRhcmdldF9rZXlcIl0gfj0gMzUgdGhlblwKIHNlbGVjdGVkX251bWJlciA9IHJ2LnRhcmdldF9rZXlcCmVuZFwKLS0gTWFwIHRoZSBudW1lcmljIHZhbHVlIGJhY2sgdG8gdGhlIGNvcnJlc3BvbmRpbmcga2V5IHN0cmluZ1wKIHRhcmdldF9rZXkgPSBudW1iZXJfdG9fa2V5W3NlbGVjdGVkX251bWJlcl1cClwKLS0gRGVmaW5lIGEgbWFwcGluZyBvZiBtdXNpY2FsIGtleXMgdG8gdGhlaXIgY29ycmVzcG9uZGluZyBub3RlIHZhbHVlcyAoc2VtaXRvbmVzKVwKa2V5X3RvX3NlbWl0b25lID0ge1wKICAgIEMgPSAwLCBbXCJDI1wiXSA9IDEsIERiID0gMSwgRCA9IDIsIFtcIkQjXCJdID0gMywgRWIgPSAzLFwKICAgIEUgPSA0LCBGID0gNSwgW1wiRiNcIl0gPSA2LCBHYiA9IDYsIEcgPSA3LCBbXCJHI1wiXSA9IDgsIEFiID0gOCxcCiAgICBBID0gOSwgW1wiQSNcIl0gPSAxMCwgQmIgPSAxMCwgQiA9IDExLFwKICAgIEFtID0gOSwgW1wiQSNtXCJdID0gMTAsIEJibSA9IDEwLCBCbSA9IDExLCBDbSA9IDAsIFtcIkMjbVwiXSA9IDEsXAogICAgRGJtID0gMSwgRG0gPSAyLCBbXCJEI21cIl0gPSAzLCBFYm0gPSAzLCBFbSA9IDQsIEZtID0gNSxcCiAgICBbXCJGI21cIl0gPSA2LCBHYm0gPSA2LCBHbSA9IDcsIFtcIkcjbVwiXSA9IDgsIEFibSA9IDhcCn1cClwKLS0gRnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBzZW1pdG9uZSBzaGlmdCBiZXR3ZWVuIHR3byBrZXlzXApmdW5jdGlvbiBzZW1pdG9uZV9zaGlmdChkZXRlY3RlZF9rZXksIHRhcmdldF9rZXkpXAogICAgLS0gR2V0IHRoZSBzZW1pdG9uZSB2YWx1ZXMgZm9yIHRoZSBkZXRlY3RlZCBhbmQgdGFyZ2V0IGtleXNcCiAgICAgZGV0ZWN0ZWRfc2VtaXRvbmUgPSBrZXlfdG9fc2VtaXRvbmVbZGV0ZWN0ZWRfa2V5XVwKICAgICB0YXJnZXRfc2VtaXRvbmUgPSBrZXlfdG9fc2VtaXRvbmVbdGFyZ2V0X2tleV1cClwKICAgIGlmIGRldGVjdGVkX3NlbWl0b25lID09IG5pbCBvciB0YXJnZXRfc2VtaXRvbmUgPT0gbmlsIHRoZW5cCiAgICAgICAgcHJpbnQoXCJJbnZhbGlkIGtleS4gUGxlYXNlIGVudGVyIGEgdmFsaWQga2V5LlwiKVwKICAgICAgICByZXR1cm5cCiAgICBlbmRcClwKICAgIC0tIENhbGN1bGF0ZSB0aGUgc2VtaXRvbmUgZGlmZmVyZW5jZVwKICAgICBzZW1pdG9uZV9kaWZmZXJlbmNlID0gdGFyZ2V0X3NlbWl0b25lIC0gZGV0ZWN0ZWRfc2VtaXRvbmVcClwKICAgIC0tIFByaW50IHRoZSByZXN1bHRcCiAgICBpZiBzZW1pdG9uZV9kaWZmZXJlbmNlID4gMCB0aGVuXAogICAgICAgIHByaW50KFwiR28gdXAgXCIgLi4gc2VtaXRvbmVfZGlmZmVyZW5jZSAuLiBcIiBzZW1pdG9uZShzKSB0byByZWFjaCBcIiAuLiB0YXJnZXRfa2V5IC4uIFwiLlwiKVwKICAgIGVsc2VpZiBzZW1pdG9uZV9kaWZmZXJlbmNlIDwgMCB0aGVuXAogICAgICAgIHByaW50KFwiR28gZG93biBcIiAuLiBtYXRoLmFicyhzZW1pdG9uZV9kaWZmZXJlbmNlKSAuLiBcIiBzZW1pdG9uZShzKSB0byByZWFjaCBcIiAuLiB0YXJnZXRfa2V5IC4uIFwiLlwiKVwKICAgIGVsc2VcCiAgICAgICAgcHJpbnQoXCJUaGUgZGV0ZWN0ZWQga2V5IGlzIGFscmVhZHkgaW4gXCIgLi4gdGFyZ2V0X2tleSAuLiBcIi5cIilcCiAgICBlbmRcCmVuZFwKXAotLSBFeGFtcGxlIHVzYWdlOiBDYWxjdWxhdGUgc2VtaXRvbmUgc2hpZnRcCiBkZXRlY3RlZF9rZXkgPSBka2V5ICAtLSBZb3UgY2FuIHJlcGxhY2UgdGhpcyB3aXRoIHRoZSBhY3R1YWwgZGV0ZWN0ZWQga2V5XApzZW1pdG9uZV9zaGlmdChkZXRlY3RlZF9rZXksIHRhcmdldF9rZXkpXApcClwKXDktLSBoZWxwZXIgZnVuY3Rpb24gLS1cClw5LS0gdGhlcmUgaXMgY3VycmVudGx5IG5vIGRpcmVjdCB3YXkgdG8gZmluZCB0aGUgdHJhY2tcClw5LS0gY29ycmVzcG9uZGluZyB0byBhIFtzZWxlY3RlZF0gcmVnaW9uXApcOWZ1bmN0aW9uIGZpbmRfdHJhY2tfZm9yX3JlZ2lvbiAocmVnaW9uX2lkKVwKXDlcOWZvciByb3V0ZSBpbiBTZXNzaW9uOmdldF90cmFja3MgKCk6aXRlciAoKSBkb1wKXDlcOVw5bG9jYWwgdHJhY2sgPSByb3V0ZTp0b190cmFjayAoKVwKXDlcOVw5bG9jYWwgcGwgPSB0cmFjazpwbGF5bGlzdCAoKVwKXDlcOVw5aWYgbm90IHBsOnJlZ2lvbl9ieV9pZCAocmVnaW9uX2lkKTppc25pbCAoKSB0aGVuXApcOVw5XDlcOXJldHVybiB0cmFja1wKXDlcOVw5ZW5kXApcOVw5ZW5kXApcOVw5YXNzZXJ0ICgwKSAtLSBjYW4ndCBoYXBwZW4sIHJlZ2lvbiBtdXN0IGJlIGluIGEgcGxheWxpc3RcClw5ZW5kXApcClw5LS0gRnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSByYXRpbyBmb3IgY2hhbmdpbmcgcGl0Y2ggYnkgYSBudW1iZXIgb2Ygc2VtaXRvbmVzXApmdW5jdGlvbiBjYWxjdWxhdGVfcmF0aW8oc2VtaXRvbmVzKVwKICAgIC0tIFJhdGlvIGNhbGN1bGF0aW9uIGZvcm11bGE6IDJeKHNlbWl0b25lcyAvIDEyKVwKICAgIGxvY2FsIHJhdGlvID0gMl4oc2VtaXRvbmVzIC8gMTIpXAogICAgcmV0dXJuIHJhdGlvXAplbmRcClwKLS0gRXhhbXBsZSB1c2FnZVwKbG9jYWwgc2VtaXRvbmVzID0gc2VtaXRvbmVfZGlmZmVyZW5jZSAtLSBDaGFuZ2UgdGhpcyB2YWx1ZSB0byB0ZXN0IHdpdGggZGlmZmVyZW50IHNlbWl0b25lIHNoaWZ0c1wKcHJpbnQgKHNlbWl0b25lcylcCmxvY2FsIHJhdGlvID0gY2FsY3VsYXRlX3JhdGlvKHNlbWl0b25lcylcClwKXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiRm9yIGEgc2hpZnQgb2YgXCIgLi4gc2VtaXRvbmVzIC4uIFwiIHNlbWl0b25lcywgdGhlIHJhdGlvIGlzOiBcIiAuLiByYXRpbylcClwKXApwcmludCh0eXBlKHJhdGlvKSlcClwKXApcOS0tIGdldCBFZGl0b3Igc2VsZWN0aW9uXApcOS0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6RWRpdG9yXApcOS0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6U2VsZWN0aW9uXApcOWxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcClw5LS0gSW5zdGFudGlhdGUgdGhlIFFNIEJhckJlYXQgVHJhY2tlclwKXDktLSBzZWUgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6THVhQVBJOlZhbXBcClw5LS0gaHR0cDovL3ZhbXAtcGx1Z2lucy5vcmcvcGx1Z2luLWRvYy9xbS12YW1wLXBsdWdpbnMuaHRtbCNxbS1iYXJiZWF0dHJhY2tlclwKXDlsb2NhbCB2YW1wID0gQVJET1VSLkx1YUFQSS5WYW1wIChcImxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLWJhcmJlYXR0cmFja2VyXCIsIFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSAoKSlcClwKXDktLSBwcmVwYXJlIHVuZG8gb3BlcmF0aW9uXApcOVNlc3Npb246YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kIChcIlJ1YmJlcmJhbmQgUmVnaW9uc1wiKVwKXApcOS0tIGZvciBlYWNoIHNlbGVjdGVkIHJlZ2lvblwKXDktLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0FyZG91clVJOlJlZ2lvblNlbGVjdGlvblwKXDlmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0ICgpOml0ZXIgKCkgZG9cClw5XDktLSBcInJcIiBpcy1hIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQVJET1VSOlJlZ2lvblwKXApcOVw5LS0gdGVzdCBpZiBpdCdzIGFuIGF1ZGlvIHJlZ2lvblwKXDlcOWxvY2FsIGFyID0gcjp0b19hdWRpb3JlZ2lvbiAoKVwKXDlcOWlmIGFyOmlzbmlsICgpIHRoZW5cClw5XDlcOWdvdG8gbmV4dFwKXDlcOWVuZFwKXApcOVw5LS0gY3JlYXRlIFJ1YmJlcmJhbmQgc3RyZXRjaGVyXApcOVw5bG9jYWwgcmIgPSBBUkRPVVIuTHVhQVBJLlJ1YmJlcmJhbmQgKGFyLCBmYWxzZSlcClwKXDlcOS0tIHRoZSBydWJiZXJiYW5kLWZpbHRlciBhbHNvIGltcGxlbWVudHMgdGhlIHJlYWRhYmxlIEFQSS5cClw5XDktLSBodHRwczovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6QXVkaW9SZWFkYWJsZVwKXDlcOS0tIFRoaXMgYWxsb3dzIHRvIHJlYWQgZnJvbSB0aGUgbWFzdGVyLXNvdXJjZSBvZiB0aGUgZ2l2ZW4gYXVkaW8tcmVnaW9uLlwKXDlcOS0tIEFueSBwcmlvciB0aW1lLXN0cmV0Y2ggb3IgcGl0Y2gtc2hpZnQgYXJlIGlnbm9yZWQgd2hlbiByZWFkaW5nLCBob3dldmVyXApcOVw5LS0gcHJvY2Vzc2luZyByZXRhaW5zIHRoZSBwcmV2aW91cyBzZXR0aW5nc1wKXDlcOWxvY2FsIG1heF9wb3MgPSByYjpyZWFkYWJsZSAoKTpyZWFkYWJsZV9sZW5ndGggKClcClwKXDlcOS0tIHByZXBhcmUgdGFibGUgdG8gaG9sZCBhbmFseXNpcyByZXN1bHRzXApcOVw5LS0gdGhlIGJlYXQtbWFwIGlzIGEgdGFibGUgaG9sZGluZyBhdWRpby1zYW1wbGUgcG9zaXRpb25zOlwKXDlcOS0tIFtmcm9tXSA9IHRvXApcOVw5bG9jYWwgYmVhdF9tYXAgPSB7fVwKXDlcOWxvY2FsIHByZXZfYmVhdCA9IDBcClwKXDlcOS0tIGNvbnN0cnVjdCBhIHByb2dyZXNzLWRpYWxvZyB3aXRoIGNhbmNlbCBidXR0b25cClw5XDlsb2NhbCBwZGlhbG9nID0gTHVhRGlhbG9nLlByb2dyZXNzV2luZG93IChcIlRyYW5zcG9zZSBBdWRpb1wiLCB0cnVlKVwKXDlcOS0tIHByb2dyZXNzIGRpYWxvZyBjYWxsYmFja3NcClw5XDlmdW5jdGlvbiB2YW1wX2NhbGxiYWNrIChfLCBwb3MpXApcOVw5XDlyZXR1cm4gcGRpYWxvZzpwcm9ncmVzcyAocG9zIC8gbWF4X3BvcywgXCJBbmFseXppbmdcIilcClw5XDllbmRcClw5XDlmdW5jdGlvbiByYl9wcm9ncmVzcyAoXywgcG9zKVwKXDlcOVw5cmV0dXJuIHBkaWFsb2c6cHJvZ3Jlc3MgKHBvcyAvIG1heF9wb3MsIFwiVHJhbnNwb3NpbmdcIilcClw5XDllbmRcClwKXDlcOS0tIHJ1biBWQU1QIHBsdWdpbiwgYW5hbHl6ZSB0aGUgZmlyc3QgY2hhbm5lbCBvZiB0aGUgYXVkaW8tcmVnaW9uXApcOVw5dmFtcDphbmFseXplIChyYjpyZWFkYWJsZSAoKSwgMCwgdmFtcF9jYWxsYmFjaylcClwKXDlcOS0tIGdldFJlbWFpbmluZ0ZlYXR1cmVzIHJldHVybnMgYSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI1ZhbXA6UGx1Z2luOkZlYXR1cmVTZXRcClw5XDktLSBnZXQgdGhlIGZpcnN0IG91dHB1dC4gaGVyZTogQmVhdHMsIGVzdGltYXRlZCBiZWF0IGxvY2F0aW9ucyAmIGJlYXQtbnVtYmVyXApcOVw5LS0gXCJmbFwiIGlzLWEgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNWYW1wOlBsdWdpbjpGZWF0dXJlTGlzdFwKXDlcOWxvY2FsIGZsID0gdmFtcDpwbHVnaW4gKCk6Z2V0UmVtYWluaW5nRmVhdHVyZXMgKCk6YXQgKDApXApcOVw5bG9jYWwgYmVhdGNvdW50ID0gMFwKXDlcOS0tIGl0ZXJhdGUgb3ZlciByZXR1cm5lZCBmZWF0dXJlc1wKXDlcOWZvciBmIGluIGZsOml0ZXIgKCkgZG9cClw5XDlcOS0tIFwiZlwiIGlzLWEgIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jVmFtcDpQbHVnaW46RmVhdHVyZVwKXDlcOVw5bG9jYWwgZm4gPSBWYW1wLlJlYWxUaW1lLnJlYWxUaW1lMkZyYW1lIChmLnRpbWVzdGFtcCwgU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpKVwKXDlcOVw5YmVhdF9tYXBbZm5dID0gZm4gLS0ga2VlcCBiZWF0cyAoMS80IG5vdGVzKSB1bmNoYW5nZWRcClw5XDlcOWlmIHByZXZfYmVhdCA+IDAgdGhlblwKXDlcOVw5XDktLSBtb3ZlIHRoZSBoYWxmIGJlYXRzICgxLzh0aCkgYmFja1wKXDlcOVw5XDlsb2NhbCBkaWZmID0gKGZuIC0gcHJldl9iZWF0KSAvIDJcClw5XDlcOVw5YmVhdF9tYXBbZm4gLSBkaWZmXSA9IGZuIC0gZGlmZiArIGRpZmYgLyAzIC0tIG1vZGVyYXRlIHN3aW5nIDI6MSAodHJpcGxldClcClw5XDlcOVw5LS1iZWF0X21hcFtmbiAtIGRpZmZdID0gZm4gLSBkaWZmICsgZGlmZiAvIDIgLS0gaGFyZCBzd2luZyAzOjEgKGRvdHRlZCA4dGgpXApcOVw5XDlcOWJlYXRjb3VudCA9IGJlYXRjb3VudCArIDFcClw5XDlcOWVuZFwKXDlcOVw5cHJldl9iZWF0ID0gZm5cClw5XDllbmRcClw5XDktLSByZXNldCB0aGUgcGx1Z2luIHN0YXRlIChwcmVwYXJlIGZvciBuZXh0IGl0ZXJhdGlvbilcClw5XDl2YW1wOnJlc2V0ICgpXApcClw5XDlpZiBwZGlhbG9nOmNhbmNlbGVkICgpIHRoZW4gZ290byBvdXQgZW5kXApcClw5XDktLSBza2lwIHJlZ2lvbnMgc2hvcnRlciB0aGFuIGEgYmFyXApcOVw5aWYgYmVhdGNvdW50IDwgOCB0aGVuXApcOVw5XDlwZGlhbG9nOmRvbmUgKClcClw5XDlcOWdvdG8gbmV4dFwKXDlcOWVuZFwKXApcOVw5LS0gY29uZmlndXJlIHJ1YmJlcmJhbmQgc3RyZXRjaCB0b29sXApcOVw5cmI6c2V0X3N0cmVjaF9hbmRfcGl0Y2ggKDEsIHJhdGlvKSAtLSBubyBvdmVyYWxsIHN0cmV0Y2hpbmcsIG5vIHBpdGNoLXNoaWZ0XApcOVw5LS1yYjpzZXRfbWFwcGluZyAoYmVhdF9tYXApIC0tIGFwcGx5IGJlYXQtbWFwIGZyb20vdG9cClwKXDlcOS0tIG5vdyBzdHJldGNoIHRoZSByZWdpb25cClw5XDlsb2NhbCBuYXIgPSByYjpwcm9jZXNzIChyYl9wcm9ncmVzcylcClwKXDlcOWlmIHBkaWFsb2c6Y2FuY2VsZWQgKCkgdGhlbiBnb3RvIG91dCBlbmRcClwKXDlcOS0tIGhpZGUgbW9kYWwgcHJvZ3Jlc3MgZGlhbG9nIGFuZCBkZXN0cm95IGl0XApcOVw5cGRpYWxvZzpkb25lICgpXApcOVw5cGRpYWxvZyA9IG5pbFwKXApcOVw5LS0gcmVwbGFjZSByZWdpb25cClw5XDlpZiBub3QgbmFyOmlzbmlsICgpIHRoZW5cClw5XDlcOXByaW50IChcIm5ldyBhdWRpbyByZWdpb246IFwiLCBuYXI6bmFtZSAoKSwgbmFyOmxlbmd0aCAoKSlcClw5XDlcOWxvY2FsIHRyYWNrID0gZmluZF90cmFja19mb3JfcmVnaW9uIChyOnRvX3N0YXRlZnVsICgpOmlkICgpKVwKXDlcOVw5bG9jYWwgcGxheWxpc3QgPSB0cmFjazpwbGF5bGlzdCAoKVwKXDlcOVw5cGxheWxpc3Q6dG9fc3RhdGVmdWwgKCk6Y2xlYXJfY2hhbmdlcyAoKSAtLSBwcmVwYXJlIHVuZG9cClw5XDlcOXBsYXlsaXN0OnJlbW92ZV9yZWdpb24gKHIpXApcOVw5XDlwbGF5bGlzdDphZGRfcmVnaW9uIChuYXIsIHI6cG9zaXRpb24gKCksIDEsIGZhbHNlKVwKXDlcOVw5LS0gY3JlYXRlIGEgZGlmZiBvZiB0aGUgcGVyZm9ybWVkIHdvcmssIGFkZCBpdCB0byB0aGUgc2Vzc2lvbidzIHVuZG8gc3RhY2tcClw5XDlcOS0tIGFuZCBjaGVjayBpZiBpdCBpcyBub3QgZW1wdHlcClw5XDlcOVNlc3Npb246YWRkX3N0YXRlZnVsX2RpZmZfY29tbWFuZCAocGxheWxpc3Q6dG9fc3RhdGVmdWxkZXN0cnVjdGlibGUgKCkpXApcOVw5ZW5kXApcClw5XDk6Om5leHQ6OlwKXDllbmRcClwKXDk6Om91dDo6XApcClw5LS0gYWxsIGRvbmUsIGNvbW1pdCB0aGUgY29tYmluZWQgVW5kbyBPcGVyYXRpb25cClw5aWYgbm90IFNlc3Npb246YWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kICgpIHRoZW5cClw5XDlTZXNzaW9uOmNvbW1pdF9yZXZlcnNpYmxlX2NvbW1hbmQgKG5pbClcClw5ZW5kXApcClw5ICBsb2NhbCBuZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwidGFyZ2V0X2tleVwiLCB0aXRsZSA9IFwiV291bGQgeW91IGxpa2UgdG8gc2V0IHRoZSBwcm9qZWN0IGtleSB0byB0aGUgbmV3IGtleSBvZiBcIi4udGFyZ2V0X2tleSwgdmFsdWVzID1cCiAgIHtcCiAgICBbXCJEbyBub3Qgc2V0IFwiLi50YXJnZXRfa2V5Li5cIiBhcyBwcm9qZWN0IGtleSBvciBwcmVzcyBjYW5jZWxcIl0gPSAxLCBbXCJzZXQgXCIuLnRhcmdldF9rZXkuLlwiIGFzIHRoZSBuZXcga2V5IG9mIHRoZSBwcm9qZWN0XCJdID0gMlwKICAgfSxcCiAgIGRlZmF1bHQgPSBcIkRvIG5vdCBzZXQgXCIuLnRhcmdldF9rZXkuLlwiIGFzIHByb2plY3Qga2V5IG9yIHByZXNzIGNhbmNlbFwiXApcCiAgIH1cCiB9XApcCiBpZiB0YXJnZXRfa2V5Om1hdGNoKFwibSRcIikgdGhlblwKICAgIHNjYWxlID0gXCJtaW5vclwiXAplbHNlaWYgdGFyZ2V0X2tleTptYXRjaChcIltBLUddJFwiKSB0aGVuXAogICAgc2NhbGUgPSBcIm1ham9yXCJcClwKZW5kXApcCnByaW50KFwiVGhlIHNjYWxlIGlzOlwiLCBzY2FsZSlcClwKXApcCiBsb2NhbCBub2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNoYW5nZSBLZXlcIiwgbmRpYWxvZ19vcHRpb25zKVwKIGxvY2FsIG5ydiA9IG5vZDpydW4oKVwKXAppZiBucnYgYW5kIG5ydltcInRhcmdldF9rZXlcIl0gPT0gMSB0aGVuXApyZXR1cm5cCmVuZFwKXAppZiBucnYgYW5kIG5ydltcInRhcmdldF9rZXlcIl0gPT0gMiB0aGVuXApcCnByaW50IChcInNldHRpbmcga2V5IG9mIHByb2plY3RcIilcCnByaW50KHRhcmdldF9rZXkpXApcCi0tIEdldCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCBzcGF0aCA9IFNlc3Npb246cGF0aCgpXApcCi0tIENvbnN0cnVjdCB0aGUgZnVsbCBwYXRoIHRvIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGtleV9maWxlX3BhdGggPSBzcGF0aCAuLiBcIi9rZXkudHh0XCJcClwKLS0gT3BlbiB0aGUgZmlsZSBpbiB3cml0ZSBtb2RlICh0aGlzIHdpbGwgb3ZlcndyaXRlIGFueSBleGlzdGluZyBjb250ZW50KVwKbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJ3XCIpXApcCi0tIENoZWNrIGlmIHRoZSBmaWxlIHdhcyBvcGVuZWQgc3VjY2Vzc2Z1bGx5XAppZiBmaWxlIHRoZW5cCiAgICAtLSBPcHRpb25hbGx5LCB5b3UgY2FuIHdyaXRlIG5ldyBjb250ZW50IHRvIHRoZSBmaWxlXAogICAgZmlsZTp3cml0ZSh0YXJnZXRfa2V5IC4uIFwiICBcIiAuLiBzY2FsZSAuLiBcIlxcblwiKVwKXAogICAgLS0gQ2xvc2UgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKClcCiAgICBwcmludChcIkZpbGUgY2xlYXJlZCBhbmQgZGF0YSB3cml0dGVuIHRvIFwiIC4uIGtleV9maWxlX3BhdGggLi4gXCIgc3VjY2Vzc2Z1bGx5LlwiKVwKZWxzZVwKICAgIHByaW50KFwiRXJyb3I6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHdyaXRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCmVuZFwKXAplbmRcClwKICAgIGVuZCBlbmRcCiIgIHNjcmlwdHNbMTBdWyJhIl0gPSB7fSBzY3JpcHRzWzEwXVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvbmV3a2V5Lmx1YSIgICBzY3JpcHRzWzEwXVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzEwXVsiZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcClwwXDBcMLNcMVwwXDBcMFwwXDJcM1wwXDBcMCxcMFwwXDAmXDBcMFwxJlwwgFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDExXDBcMFwws1wxXDBcMFwxXDAwMTGsXDJcMFwwRlwwQFwwTEDAXDBkgFwwXDGBgFwwXDDEXDBcMFwwXDfBwFwwXDEyXDFBXDIkgVwwXDFcMTJBQVwyJFwxXDFcMVwzMMBcNoCNgEFcMVwxMsLBXDMkglwwXDFcMTJcMkJcNCSCXDBcMVwiXDJcMFwwXDMwwFw0gFw2QkJcMFw3gkJcNEHCXDJcMIFcMlwzXDDGQkJcMMdCw1w1x4LDXDVcNkNCXDBcN8NDXDZcN1wzRFw2JIKAXDJGQkRcMIyCRFw0pFwyXDBcMWRCXDBcMFw0XDJcMFwwRsJEXDBkQoBcMCZcMIBcMFwzMFwwXDCAwFwwgFwzKUFcMFwwqkH4XDEyN1+AQVwxXDMwgFw0gFw2QUJcMFw3gUJcMkHBXDJcMIFcMVw1XDDGQUJcMMdBw1wzx4HDXDNcNkJCXDBcN8JDXDRcN1wyRFw0JIGAXDJGQURcMIyBRFwypFwxXDBcMWRBXDBcMFw0XDFcMFwwRsFEXDBkQYBcMCZcMIBcMFwxMkHFXDEkgVwwXDFMgcVcMcGBXDBcMGSBgFwxTMHFXDJkgVwwXDFMXDHGXDJkgVwwXDGGQURcMMBcMYBcMqRBXDBcMYBcMYBcMsFBXDZcMFwwXDJcMFwzQUJcNlww3UGCXDNcMFwygFwzXDjARo1BXDJcN1wwgFwygFwzXYKCXDSGQkdcMIeCR1w1wFwygFw0pEJcMFwxhsJHXDCHXDJIXDXAXDKAXDSkglwwXDHMQkhcNUGDXDhcMOSCgFwxXDjAXDKNzMJIXDXkQlwwXDHGQkRcMFw2g0ZcMORCXDBcMcZcMklcMMdCyVw1XDaDRlwwQYNcOVww5MKAXDFGXDNJXDBHQ8lcNoaDRlwwwcNcOVwwZMOAXDFcMzFcMEpcN1wzMIBcMIDAXDOAXDZcMURcClwwXVwzhFw3xkNEXDBcMYRcClwwQFw0gFw2XDI5RFw0XDjkQ1wwXDHGQ0RcMFwxxFwKXDBAXDRcMFw3XDI5RFw0XDjkQ1wwXDHGXDNLXDDMXDPGXDfkg1wwXDFcMFw0gFw3QURcMTFcMFwyOURcNFw4RsRHXDBHhMtcOIBcNFwwXDjBxFwxMVwwZISAXDGBXDRcMTJcMGJcNFwwXDBcMzCAXDGAzETIXDhBhVw4XDDkhIBcMYBcNIBcOczEyFw45ERcMFwxXDMwXDBcMYDGRERcMFwxRVwxMlwwQFw1XDBcOFwyOUVcNVwK5ERcMFwxwYRcMTJcMFwwXDVcMFw53Vw0hVw5XDExXDWAXDBLRVwxXDBKXDXNmUqFzZqBXDVcMTRcMMBcNYBcNlwxRlwxNFwwQFw2XDBcN4GGXDE0XDCdhVw2XDExSoWFm4tFXDZcMIqFQZ6Khc+eilw10J+KhdCgilw10aGKhdGiilw10qOKhdKkilw106WKhdOmilw11KeKhdSoilw11amKhdWqilw11quKhdasilw1162Khdeuilw12K+Khdiwilw12bGKhdmyilw12rOKhdq0ilw127WKhdu2ilw13LeKhdy4ilw13bmKhd26ilw13ruKhd68ilw1372Khd++isXfXDmKRWDASoWFnUrFXDTBK0WAXDBGRUJcMEfF4FwKgVw1IVwwwFw1XDBcCmSFgFwxjIXEXAqkhVwwXDGiXDVcMFwwXDMwwFwygMeFTVwxMVwzMcDfXDExXDMwXDBcMoDMRUlcOUFcNlwxMlww5IWAXDHiXDVcMFwwXDMwwFwwgMZFRFwwXDFGIVww5EVcMFwxJlwwgFwwolw1XDBcMFwzMMBcMTeAx4VNXDExXDMxwN9cMTFcMzBcMFwxN4DGxUdcMMeFy1wxMVwwXDZcMFw4QcZcMTFcMOSFgFwxXDRcNlwwXDDiXDVcMFwwXDMwXDBcMoBMRshcMTHBhiFcMGSGgFwxjMbIXDExpEZcMFwxjEbJXDEyXDHHIVwwpIaAXDFcMFw2XDBcMTNGRkRcMIFcNlwiXDDAXDZcMFwxMmRGgFwxS0ZcNlwwSoZBnkqGz55KXDbQn0qG0KBKXDbRoUqG0aJKXDbSo0qG0qRKXDbTpUqG06ZKXDbUp0qG1KhKXDbVqUqG1apKXDbWq0qG1qxKXDbXrUqG165KXDbYr0qG2LBKXDbZsUqG2bJKXDbas0qG2rRKXDbbtUqG27ZKXDbct0qG3LhKXDbduUqG3bpKXDbeu0qG3rxKXDbfvUqG376HXDaGXDEyXDiAhsSGRmJcMKJcNlwwXDBcMzBcMFwxgIZGRFwwwYZcIlwwXDZHYlwwpEaAXDFcMzCAXDCAhkZEXDDBxlwiXDCkRlwwXDGiRVwwXDBcMzDAXDCAxkVEXDBcMVw2I1ww5EVcMFwxJlwwgFwwy0VcNlwwylw1T4PKRU+fysVPoMpFUKHKxVCiykVRo8rFUaTKRVKlysVSpspFU6fKxVOoykVUqcrFVKrKRVWrysVVrMpFVq3KxVauykVXr8rFV7DKRVixysVYsspFWbPKxVm0ykVatcrFWrbKRVu3ysVbuMpFXFy5ysVcXLrKRV27ysVdvMpFXr3KxV6+ykVfv6JcNVwwXDBcMzBcMFwxgFw3hk1cMTFfwF9cMTJcMzBAXDCAXDeGTVwxMVw4XDCGxFw2RmJcMFw3XDaGXDExXDhcMFw2m1wxMUZcNlwwXAqGQJ5cCobBnlwKhsGfXAqGz6BcClw20KFcClw20KJcCobQo1wKXDbRpFwKhtGlXAqG0aZcClw20qdcCobSqFwKhtKpXApcNtOqXAqG06tcCobTrFwKXDbUrVwKXDbTrlwKhtOvXAqG07BcClw21LFcCobAslwKhsGzXAqGwbRcCobPtVwKXDbQtlwKXDbQt1wKhtC4XApcNtG5XAqG0bpcCobRu1wKXDbSvFwKhtK9XAqG0r5cOFwwhsYsXDZcMFwwXDhcMFw2x1w4QIPHXDaGY1wwRsZjXDCGhk1cMCRGgFwxLEZcMFwwXDhcMFw2yCyGXDBcMFw4XDCGyFw2hmRcMEbGZFwwgFw2XDBcMTJkRlwwXDFGRmRcMIBcNlwwXDEyZIZcMFwxhsZkXDDBXDYlXDBcMFw3XDBcMTJBRyVcMIBcN4BcMTLdhodcMTOkRlwwXDGGxmRcMMbGTFwwXDBcN4BcMTLkXDZcMFwxpEZcMFwwhlw2QFwwjEZAXDEzpIZcMFwxxoZlXDDHxuVcMTPHXDbmXDEzXDFHJlwwRodmXDBMx+ZcMTRkXDdcMFwx5IZcMFwwXDaHZlwwXDEyXDdnXDE0gUcnXDAkR4BcMVw3x0BcMTNcMTJcN0FcMTQkh1wwXDFcMTKHZ1wxNCRcN1wxXDFcMzBAIIBcMTLIwVwxNSSIXDBcMUzIZ1wxNmSIXDBcMWJIXDBcMF7IXDMwgEaIZVwwR8jlXDE2R1w46FwxNoBcOFwwXDE2w1w4XDBcMGSIgFwxjEjoXDE2pIhcMFwxjIhoXDE3pIhcMFwxy1w4XDBcMFwxyShcMEZJQlwwR1w56VwxOIFJKVwww1w5gFwwZImAXDGsyVwwXDBcOIBcOdOsXDlcMVwwXDiAidOMXDnqXDEzXDEySuhcMTYkilwwXDFByihcMIaKaVwwpEmAXDKMSepcMTOkiVwwXDGMiWpcMTmkiVwwXDGMyWpcMTlcMcooXDCkiYBcMcHJKFwwXDEyimdcMTkkXApcMVwxXDMwwFw0gFw2XDExZlwwXDdcMTFrXDIyXDdLa1wyMkeL61wyMYaLZlwwjMtmXDIzpFwxMVwwXDEki1wwXDDKXDhcMTFcMjIgXDCJ0VwzMMBcMYBOXDExXDlcMjJSy+tcMjKOS1wxMVwyMs5LXDExXDIyXDE4XDEy0FwyMs1cMTGMXDIzyshcMTFcMjPNicFcMTlcMFw5XDBcMjIpSlwwXDCqSvpcMTI3XDEyXArsXDEzJEpcMFwxXDEySuxcMTgkilwwXDFcIkpcMFwwXshcMTSAIIDSXDE5XDMwgFwwgFwxMorsXDE4JEpcMFwxXlw4XDEzgFwxMsrsXDE2gYpcMVwwwFwKgFwxMiRKXDBcMlwxMlwK7VwxNobKaVwwJIqAXDFMSuxcMThkilwwXDFiSlwwXDBeyFwKgEyK7FwxOGRKXDBcMURcOVwwXDBMymdcMjBkilwwXDFiSlwwXDBeiFw4gEbKZFwwgUotXDDMSkVcMjDkilwwXDFcMTKLbVwyMCRcMTFcMFwxZEpcMFwwRlwKZFwwjMrtXDE1pIpcMFwxjFwKblwyMaRcClwwXDFkilwwXDCMSu5cMjCkilwwXDHMym1cMjHkilwwXDHMiu5cMjHkSlwwXDHMym5cMjFAXDExgFwxNeRKgFwxzFwKb1wyMUBcMTFcMFwyMIxL71wxNaSLXDBcMcGLXDFcMFwzXDEyXDBcMORKXDBcM8aKZlwwzIrvXDIxTMtvXDIxZFwxMVwwXDHkSlwwXDBeyP9cMTI3KUdcMFwwqsfeXDEyN1w2h2ZcMFwxMlw3cFwxNCSHXDBcMVwiR1wwXDBcMzDAXDCAXDaHZlwwXDEyR3BcMTSEXDdcMFwwJEeAXDFcMTFcN4BcMEtHXDFcMEpcN82ZSofNmoGHMFwwxodNXDCdx1w3XDE1SoeHm4uHXDBcMMHHMFwwXDaITVwwQVwwMDgxXDDdR4hcMTWKh8FcMTXBRzFcMFw2iE1cMEGIMVww3UeIXDE1isfrXDE1SoeHnYHHMFwwxodNXDBcMVwwMDgxXDCdXDdcOFwxNUqHXDfBK0eAXDBGh01cMExHyVwxNMHHMVwwZIeAXDFiXDdcMFwwXDMwQFwwgIFcM1wKXDBcMzCAXDGARodNXDBMR8lcMTTBXDAwNzJcMGSHgFwxYlw3XDBcMFwzMFwwXDCAgUMyXDBGx2RcMIGHMlwwwFw3XDBcN2RHgFwxRkdCXDBHx+BcMTSBxzJcMMBcN1wwXDE0ZIeAXDGMh8RcMTSkh1wwXDGiXDdcMFwwXDMwwFwwgMeHTVwxNVwzMYDBXDE1XDMwXDBcMIAmXDCAXDCiXDdcMFwwXDMwgFwKgMeHTVwxNVwzMcDrXDE1XDMwwFw5gMbHZFwwXDFcMDA4M1ww5EdcMFwxxsdkXDBcNohNXDDkR1wwXDHGh2ZcMMxcN8ZcMTXkh1wwXDFcMFw4gFwxNUFIXDExXDBcMjlIXDhcMTZGyEdcMEeIy1wxNoBcOFwwXDE2wUgzXDBkiIBcMWJcOFwwXDBcMzDAXDOAjIjzXDE2XDaJTVwwQckzXDCAXDlcMFw3wVwwMDk0XDBcMjnJXDlcMTikSIBcMYzIyFwxNqRIXDBcMYbIZFwwwUg0XDBcMFw5XDBcMTZBiTRcMN1IiVwxN6RIXDBcMVwzMFwwXDGAhshkXDDByDRcMFwwXDlcMFwxNt1cOIlcMTekSFwwXDEmXDCAXDDUXDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw4R2V0IEtleVwyMCtUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb25cNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw2cHJpbnRcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVw0JVBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvblw0XDVuYW1lXDRcN3NvdXJjZVw0XDE0dG9fZmlsZXNvdXJjZVw0XDVwYXRoXDRcMlwiXDRcMTJmaXJzdHJlc3VsdFw0XDE1S2V5IG5vdCBmb3VuZC5cNFwyNC9vcHQvTG9naWNhbEFyZG91ci9rZXkgXDRcM29zXDRcOGV4ZWN1dGVcNFwzaW9cNFw2cG9wZW5cNFw1cmVhZFw0XDMqYVw0XDZjbG9zZVw0XDdzdHJpbmdcNFw2bWF0Y2hcNCdUaGUga2V5IG9mIHRoZSBzb25nIGlzIChbQS1HI10rKSAoJWErKVw0KFRoZSBrZXkgb2YgdGhlIHNvbmcgaXMgKFtBLUdiI10rKSAoJWErKVw0XDZtaW5vclw0XDJtXDRcNktleTogXDRcOFNjYWxlOiBcNFw4U2Vzc2lvblw0XDkva2V5LnR4dFw0XDVvcGVuXDRcMnJcNFwxMU5vIGtleSBzZXRcMjAtV2FybmluZzogQ291bGQgbm90IG9wZW4gZmlsZSBmb3IgcmVhZGluZyBhdCBcNFwyOVNldCB0byBjdXJyZW50IHByb2plY3Qga2V5OiBcNFw1dHlwZVw0XDlkcm9wZG93blw0XDRrZXlcNFwxMXRhcmdldF9rZXlcNFw2dGl0bGVcNFwyNEVzdGltYXRlZCBrZXkgb2YgbG9vcDogXDRcMiBcMjBTLiBDaG9vc2UgVGFyZ2V0IEtleSAoSGl0IENhbmNlbCBvciBzZWxlY3QgRG8gbm90IGNoYW5nZSBrZXkgdG8gbm90IGNoYW5nZSB0aGUga2V5KVw0XDd2YWx1ZXNcNFwyQ1w0XDNDI1wxOVwyXDBcMFwwXDBcMFwwXDBcNFwzRGJcMTlcM1wwXDBcMFwwXDBcMFwwXDRcMkRcMTlcNFwwXDBcMFwwXDBcMFwwXDRcM0QjXDE5XDVcMFwwXDBcMFwwXDBcMFw0XDNFYlwxOVw2XDBcMFwwXDBcMFwwXDBcNFwyRVwxOVw3XDBcMFwwXDBcMFwwXDBcNFwyRlwxOVw4XDBcMFwwXDBcMFwwXDBcNFwzRiNcMTlcOVwwXDBcMFwwXDBcMFwwXDRcM0diXDE5XApcMFwwXDBcMFwwXDBcMFw0XDJHXDE5XDExXDBcMFwwXDBcMFwwXDBcNFwzRyNcMTlcMTJcMFwwXDBcMFwwXDBcMFw0XDNBYlwxOVwxM1wwXDBcMFwwXDBcMFwwXDRcMkFcMTlcMTRcMFwwXDBcMFwwXDBcMFw0XDNBI1wxOVwxNVwwXDBcMFwwXDBcMFwwXDRcM0JiXDE5XDE2XDBcMFwwXDBcMFwwXDBcNFwyQlwxOVwxN1wwXDBcMFwwXDBcMFwwXDRcM0FtXDE5XDE4XDBcMFwwXDBcMFwwXDBcNFw0QSNtXDE5XDE5XDBcMFwwXDBcMFwwXDBcNFw0QmJtXDE5XDIwXDBcMFwwXDBcMFwwXDBcNFwzQm1cMTlcMjFcMFwwXDBcMFwwXDBcMFw0XDNDbVwxOVwyMlwwXDBcMFwwXDBcMFwwXDRcNEMjbVwxOVwyM1wwXDBcMFwwXDBcMFwwXDRcNERibVwxOVwyNFwwXDBcMFwwXDBcMFwwXDRcM0RtXDE5XDI1XDBcMFwwXDBcMFwwXDBcNFw0RCNtXDE5XDI2XDBcMFwwXDBcMFwwXDBcNFw0RWJtXDE5XDI3XDBcMFwwXDBcMFwwXDBcNFwzRW1cMTlcMjhcMFwwXDBcMFwwXDBcMFw0XDNGbVwxOVwyOVwwXDBcMFwwXDBcMFwwXDRcNEYjbVwxOVwzMFwwXDBcMFwwXDBcMFwwXDRcNEdibVwxOVwzMVwwXDBcMFwwXDBcMFwwXDRcM0dtXDE5IFwwXDBcMFwwXDBcMFwwXDRcNEcjbVwxOSFcMFwwXDBcMFwwXDBcMFw0XDRBYm1cMTlcIlwwXDBcMFwwXDBcMFwwXDE5I1wwXDBcMFwwXDBcMFwwXDRcMThEbyBub3QgY2hhbmdlIGtleVwxOSRcMFwwXDBcMFwwXDBcMFw0XDhkZWZhdWx0XDRcN0RpYWxvZ1w0XDE4Q2hvb3NlIFRhcmdldCBLZXlcMjAvTm8ga2V5IGlzIHNldCBpbiB0aGUgZmlsZS4gRXhpdGluZyB0aGUgc2NyaXB0Llw0XDMqbFw0XDEyXiglYSM/Yj9tPylcNFwxNUV4dHJhY3RlZCBLZXk6XDRcMTZzZWxlY3RlZF9udW1iZXJcNFwyME1hdGNoZWQgS2V5IE51bWJlcjpcMDIwN0Vycm9yOiBUaGUgZXh0cmFjdGVkIGtleSBkb2VzIG5vdCBtYXRjaCBhbnkga25vd24ga2V5Llw0XDI3RGlhbG9nIGNhbmNlbGVkIG9yIGNsb3NlZC5cNFwxNmtleV90b19zZW1pdG9uZVw0XDE1c2VtaXRvbmVfc2hpZnRcNFwxM2RldGVjdGVkX2tleVw0XDIyZmluZF90cmFja19mb3JfcmVnaW9uXDRcMTZjYWxjdWxhdGVfcmF0aW9cNFwyMHNlbWl0b25lX2RpZmZlcmVuY2VcNFw2cHJpbnRcNFwxNkZvciBhIHNoaWZ0IG9mIFw0XDI3IHNlbWl0b25lcywgdGhlIHJhdGlvIGlzOiBcNFw3QVJET1VSXDRcN0x1YUFQSVw0XDVWYW1wXDQnbGliYXJkb3VydmFtcHBsdWdpbnM6cW0tYmFyYmVhdHRyYWNrZXJcNFw4U2Vzc2lvblw0XDIwbm9taW5hbF9zYW1wbGVfcmF0ZVw0XDI1YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kXDRcMTlSdWJiZXJiYW5kIFJlZ2lvbnNcNFw1aXRlclw0XDZpc25pbFw0XDExUnViYmVyYmFuZFw0XDlyZWFkYWJsZVw0XDE2cmVhZGFibGVfbGVuZ3RoXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDE1UHJvZ3Jlc3NXaW5kb3dcNFwxNlRyYW5zcG9zZSBBdWRpb1w0XDE0dmFtcF9jYWxsYmFja1w0XDEycmJfcHJvZ3Jlc3NcNFw4YW5hbHl6ZVw0XDdwbHVnaW5cNFwyMWdldFJlbWFpbmluZ0ZlYXR1cmVzXDRcM2F0XDRcOVJlYWxUaW1lXDRcMTVyZWFsVGltZTJGcmFtZVw0XAp0aW1lc3RhbXBcMTlcMlwwXDBcMFwwXDBcMFwwXDRcNnJlc2V0XDRcOWNhbmNlbGVkXDRcNWRvbmVcNFwyMXNldF9zdHJlY2hfYW5kX3BpdGNoXDRcOHByb2Nlc3NcNFwxOW5ldyBhdWRpbyByZWdpb246IFw0XDdsZW5ndGhcNFwxMnRvX3N0YXRlZnVsXDRcM2lkXDRcOXBsYXlsaXN0XDRcMTRjbGVhcl9jaGFuZ2VzXDRcMTRyZW1vdmVfcmVnaW9uXDRcMTFhZGRfcmVnaW9uXDRcOXBvc2l0aW9uXDRcMjZhZGRfc3RhdGVmdWxfZGlmZl9jb21tYW5kXDRcMjR0b19zdGF0ZWZ1bGRlc3RydWN0aWJsZVw0XDMxYWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kXDRcMjZjb21taXRfcmV2ZXJzaWJsZV9jb21tYW5kXDAyMDlXb3VsZCB5b3UgbGlrZSB0byBzZXQgdGhlIHByb2plY3Qga2V5IHRvIHRoZSBuZXcga2V5IG9mIFw0XDEyRG8gbm90IHNldCBcNCAgYXMgcHJvamVjdCBrZXkgb3IgcHJlc3MgY2FuY2VsXDRcNXNldCBcNFwzMSBhcyB0aGUgbmV3IGtleSBvZiB0aGUgcHJvamVjdFw0XDNtJFw0XDdbQS1HXSRcNFw2bWFqb3JcNFwxNFRoZSBzY2FsZSBpczpcNFwxMUNoYW5nZSBLZXlcNFwyM3NldHRpbmcga2V5IG9mIHByb2plY3RcNFwyd1w0XDZ3cml0ZVw0XDMgIFw0XDJcClw0XCJGaWxlIGNsZWFyZWQgYW5kIGRhdGEgd3JpdHRlbiB0byBcNFwxNSBzdWNjZXNzZnVsbHkuXDIwK0Vycm9yOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciB3cml0aW5nIGF0IFwxXDBcMFwwXDBcMFw1XDBcMFwwXDDEXDBcMFww2VwwXDBcMFwyXDBcMDA4NlwwXDBcMIZAQFwwh1wwXDBcMVw4gFwwgIZAQFwwh0BcMFwxXDiAXDCBhlwwQFwwX8BAXDFcMzCAXDCAhoBAXDBcMzHAQFwxXDMwwFwwgIZcMEFcMMFAXDFcMKRAXDBcMSZcMIBcMIaAQFwwxlwwQFwwjsBcMFwxXDiAXDCDhoBBXDAggICDXDMwXDBcMoCGXDBBXDDBXDBcMlwwXDaBQVwwQUFcMlwwgFwxgFwwwYFcMlww3cCBXDGkQFwwXDFcMzBcMFw1gIaAQVwwIMBBXDFcMzDAXDKAhlwwQVwwwcBcMlwwXDZcMUNcMFw3QUNcMkaBQVwwJIFcMFwxQUFcMlwwgFwxgFwwwYFcMlww3cCBXDGkQFwwXDFcMzBAXDGAhlwwQVwwwYBcM1wwXDBcMYBcMEGBXDJcMN1AgVwxpEBcMFwxJlwwgFwwXDE1XDBcMFwwXDRcMThkZXRlY3RlZF9zZW1pdG9uZVw0XDE2a2V5X3RvX3NlbWl0b25lXDRcMTZ0YXJnZXRfc2VtaXRvbmVcMFw0XDZwcmludFw0J0ludmFsaWQga2V5LiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBrZXkuXDRcMjBzZW1pdG9uZV9kaWZmZXJlbmNlXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDdHbyB1cCBcNFwyMyBzZW1pdG9uZShzKSB0byByZWFjaCBcNFwyLlw0XDlHbyBkb3duIFw0XDVtYXRoXDRcNGFic1w0IFRoZSBkZXRlY3RlZCBrZXkgaXMgYWxyZWFkeSBpbiBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFww41wwXDBcMOxcMFwwXDBcMVwwXApcMjRcMFwwXDBGXDBAXDBMQMBcMGSAXDBcMUyAwFwwZFwwXDFcMVwzMMBcMoBMwUBcMmSBXDBcMYxcMcFcMqSBXDBcMcxBQVwzQFwyXDBcMOSBgFwxzIHBXDPkgVwwXDHiQVwwXDBcMzBcMFwwgGZcMVwwXDFpQFwwXDDqQPxcMTI3RsBBXDCBXDBcMlwwZEBcMFwxJlwwgFwwXDlcMFwwXDBcNFw4U2Vzc2lvblw0XDExZ2V0X3RyYWNrc1w0XDVpdGVyXDRcOXRvX3RyYWNrXDRcOXBsYXlsaXN0XDRcMTNyZWdpb25fYnlfaWRcNFw2aXNuaWxcNFw3YXNzZXJ0XDE5XDBcMFwwXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDDvXDBcMFww81wwXDBcMFwxXDBcMlw0XDBcMFwwUlwwQFwwUUCAgGZcMFwwXDEmXDCAXDBcMlwwXDBcMFwxOVwxMlwwXDBcMFwwXDBcMFwwXDE5XDJcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMC5cMVwwXDAwMDBcMVwwXDBcMlwwXDZcOFwwXDBcMIVcMFwwXDCMXDBAXDFcNVwxgFwwXDE4XDGBXDBBQVwwXDClXDBcMFwyplwwXDBcMCZcMIBcMFwyXDBcMFwwXDRcOXByb2dyZXNzXDRcCkFuYWx5emluZ1wyXDBcMFwwXDElXDFcIlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAwMDFcMVwwXDAwMDNcMVwwXDBcMlwwXDZcOFwwXDBcMIVcMFwwXDCMXDBAXDFcNVwxgFwwXDE4XDGBXDBBQVwwXDClXDBcMFwyplwwXDBcMCZcMIBcMFwyXDBcMFwwXDRcOXByb2dyZXNzXDRcMTJUcmFuc3Bvc2luZ1wyXDBcMFwwXDElXDFcIlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzY3JpcHRzWzEwXVsibiJdID0gIlBpdGNoIC0gQ2hhbmdlIHRoZSBwaXRjaCBvZiBhdWRpbyBsb29wIGJ5IGtleSIgICBzY3JpcHRzWzExXSA9IHt9IHNjcmlwdHNbMTFdWyJzIl0gPSAiYXJkb3VyIHtcCiBbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcCiBuYW1lID0gXCJTZXNzaW9uIFBsYXllciAtIENoYW5nZSBJbnN0cnVtZW50IFBsdWdpbiBmb3IgU2Vzc2lvbiBQbGF5ZXJcIixcCiBhdXRob3IgICAgICA9IFwiSnVzdGluIEVocmxpY2htYW5cIixcCmRlc2NyaXB0aW9uID0gW1tcClJlcGxhY2UgSW5zdHJ1bWVudCBQbHVnaW4gb24gY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrXApdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKXAogIC0tIENoZWNrIGlmIG5vIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbDplbXB0eSgpIG9yIHNlbC50cmFja3M6cm91dGVsaXN0KCk6ZW1wdHkoKSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKXAogIC0tIENoZWNrIGlmIG1vcmUgdGhhbiBvbmUgdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTpzaXplKCkgPiAxIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXApcClwKICAgICBtaWRpVHJhY2tGb3VuZCA9IGZhbHNlIC0tIEZsYWcgdG8gY2hlY2sgaWYgYW55IE1JREkgdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fbWlkaV90cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgIG1pZGlUcmFja0ZvdW5kID0gdHJ1ZVwKICAgICAgIHByaW50KFwiaXMgYSBtaWRpIHRyYWNrXCIpXAogICAgICBlbmRcCiAgICBlbmRcClwKICAgICAgIGlmICBtaWRpVHJhY2tGb3VuZCA9PSBmYWxzZSB0aGVuXAogICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gTUlESSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIE1JREkgdHJhY2suXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cCiAgICBlbmRcClwKICAgLS0gZm9yIHIgaW4gU2Vzc2lvbjpnZXRfcm91dGVzKCk6aXRlcigpIGRvIC0tIGZvciBldmVyeSB0cmFjay9idXNcClwKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXApcCiAgICBsb2NhbCBwcm9jID0gcjpudGhfcGx1Z2luKDApIC0tIGZvciBldmVyeSBwbHVnaW5cCiAgICBpZiBwcm9jOmlzbmlsKCkgdGhlbiBicmVhayBlbmRcCiAgICBsb2NhbCBwaSA9IHByb2M6dG9faW5zZXJ0KClcCiAgICBsb2NhbCBwbHVnaW5fbmFtZSA9IHBpOnBsdWdpbigwKTpuYW1lKClcCiAgICBpZiBwbHVnaW5fbmFtZSA9PSBcIkFycGVnZ2lhdG9yXCIgdGhlblwKXAogICAgICBwcmludChcInRydWVcIilcCiAgICAgIGVsc2VcCiAgICAgICAgcHJpbnQgKHBsdWdpbl9uYW1lKVwKICAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIG5vdCBhIFNlc3Npb24gUGxheWVyIHRyYWNrKE5vIEFycGVnZ2lhdG9yIGZvdW5kIG9yIEFycGVnZ2lhdG9yIGluIHdyb25nIG9yZGVyKS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKXAogICAgZW5kXApcCiAgICAgICBsb2NhbCBwcm9jMiA9IHI6bnRoX3BsdWdpbigxKSAtLSBmb3IgZXZlcnkgcGx1Z2luXAogICAgaWYgcHJvYzI6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpMiA9IHByb2MyOnRvX2luc2VydCgpXAogICAgbG9jYWwgcGx1Z2luX25hbWUyID0gcGkyOnBsdWdpbigxKTpuYW1lKClcCiAgICBpZiBwbHVnaW5fbmFtZTIgPT0gXCJNSURJIFN0cnVtXCIgdGhlblwKICAgICAgcHJpbnQoXCJ0cnVlXCIpXApcCiAgICAgIGVsc2VcCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIG5vdCBhIFNlc3Npb24gUGxheWVyIHRyYWNrKE5vIE1JREkgU3RydW0gZm91bmQgb3IgTUlESSBTdHJ1bSBub3QgaW4gY29ycmVjdCBvcmRlcikuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cCiAgICBlbmRcCiBlbmRcClwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwiZHJvcGRvd25cIiwgdGl0bGUgPSBcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiLCB2YWx1ZXMgPVwKICAge1wKICAgIFtcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiXSA9IDEsIFtcIkFDRSBGbHVpZCBTeW50aFwiXSA9IDIsXAogICAgW1wiWW9zaGltaVwiXSA9IDMsXAogICAgW1wiU3VyZ2UgWFRcIl0gPSA0LFwKICAgICBbXCJDb25uZWN0IFJpcGNob3JkXCJdID0gNVwKICAgfSxcCiAgIGRlZmF1bHQgPSBcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiXAogIH1cCn1cClwKbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiLCBkaWFsb2dfb3B0aW9ucylcCmxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKaWYgbm90IHJ2IHRoZW5cCiAgICByZXR1cm5cCmVuZFwKXApsb2NhbCBwbHVnaW5fbmFtZSA9IG5pbFwKbG9jYWwgdHJhY2tfbmFtZSA9IG5pbFwKbG9jYWwgcHJlc2V0X25hbWUgPSBuaWxcCmxvY2FsIG5ldyA9IG5pbFwKbG9jYWwgcmlwY2hvcmQgPSBcIm5vdCBzZXRcIlwKXAppZiBydltcImRyb3Bkb3duXCJdID09IDEgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJQbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgcGx1Z2luLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgIHJldHVyblwKZW5kXApcCmlmIHJ2W1wiZHJvcGRvd25cIl0gPT0gMiB0aGVuXAogICAgcHJpbnQoXCJZb3UgQ2hvc2UgQUNFIEZsdWlkIFN5bnRoXCIpXAogICAgcGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXAogICAgcHJlc2V0X25hbWUgPSBcImdtXCJcCiAgICB0cmFja19uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGggU2Vzc2lvblwiXAogICAgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXAplbmRcClwKaWYgcnZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cCiAgICBwcmludChcIllvdSBDaG9zZSBZb3NoaW1pXCIpXAogICAgcGx1Z2luX25hbWUgPSBcIllvc2hpbWlcIlwKICAgIHRyYWNrX25hbWUgPSBcIllvc2hpbWkgU2Vzc2lvblwiXAogICAgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXAplbmRcClwKaWYgcnZbXCJkcm9wZG93blwiXSA9PSA0IHRoZW5cCiAgICBwcmludChcIllvdSBDaG9zZSBTdXJnZSBYVFwiKVwKICAgIHBsdWdpbl9uYW1lID0gXCJTdXJnZSBYVFwiXAogICAgdHJhY2tfbmFtZSA9IFwiU3VyZ2UgWFQgU2Vzc2lvblwiXAogICAgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5WU1QzLCBcIlwiKVwKZW5kXApcCmlmIHJ2W1wiZHJvcGRvd25cIl0gPT0gNSB0aGVuXAogICAgcHJpbnQoXCJSaXBjaG9yZFwiKVwKICAgIHBsdWdpbl9uYW1lID0gXCJSaXBjaG9yZFwiXAogICAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICAgIHRoZV9uYW1lID0gcjpuYW1lKClcCiAgICAgICAgcHJpbnQodGhlX25hbWUpXAogICAgICAgIHJpcGNob3JkID0gXCJzZXRcIlwKICAgIGVuZFwKICAgIFwKICAgIGxvY2FsIHVzZXJfY29uZmlnX2RpcmVjdG9yeSA9IEFSRE9VUi51c2VyX2NvbmZpZ19kaXJlY3RvcnkoOClcCiAgICBwcmludCh1c2VyX2NvbmZpZ19kaXJlY3RvcnkpXAogICAgbG9jYWwgc3ViZGlyID0gXCJyb3V0ZV90ZW1wbGF0ZXNcIlwKICAgIGxvY2FsIGZ1bGxfcGF0aCA9IHVzZXJfY29uZmlnX2RpcmVjdG9yeSAuLiBcIi9cIiAuLiBzdWJkaXJcCiAgICBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1JpcGNob3JkLnRlbXBsYXRlXCJcCiAgICBsb2NhbCB0cmFja19uYW1lID0gXCJSaXBjaG9yZCBcIi4udGhlX25hbWVcClwKICAgIFNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXAogICAgXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgICAgaWYgbm90IHI6dG9fdHJhY2soKTppc25pbCgpIGFuZCBub3Qgcjp0b190cmFjaygpOnRvX21pZGlfdHJhY2soKTppc25pbCgpIHRoZW5cCiAgICAgICAgICAgIGxvY2FsIG91dHB1dG1pZGlwb3J0ID0gcjpvdXRwdXQoKTptaWRpKDApXAogICAgICAgICAgICBvdXRwdXRtaWRpcG9ydDpjb25uZWN0KHRoZV9uYW1lIC4uIFwiL21pZGlfaW4gMVwiKVwKICAgICAgICBlbmRcCiAgICBlbmRcCiAgICByZXR1cm5cCmVuZFwKXAppZiB0cmFja19uYW1lID09IG5pbCB0aGVuXAogICAgcmV0dXJuXAplbmRcClwKbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSB0aGVuXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgICAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgICAgICAgICBvbGQgPSByOm50aF9wbHVnaW4oMilcCiAgICAgICAgICAgIHI6cmVwbGFjZV9wcm9jZXNzb3IgKG9sZCwgbmV3LCBuaWwpXAogICAgICAgICAgICByOnNldF9uYW1lKHRyYWNrX25hbWUsIG5pbClcClwKICAgICAgICAgICAgaWYgcGx1Z2luX25hbWUgPT0gXCJBQ0UgRmx1aWQgU3ludGhcIiBhbmQgcHJlc2V0X25hbWUgdGhlblwKICAgICAgICAgICAgICAgIGxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUodHJhY2tfbmFtZSk6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKICAgICAgICAgICAgICAgIGxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKHByZXNldF9uYW1lKVwKICAgICAgICAgICAgICAgIHByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKICAgICAgICAgICAgZW5kXAogICAgICAgIGVuZFwKICAgIGVuZFwKZW5kXApcCi0tIENoZWNrIGZvciByaXBjaG9yZFwKaWYgcmlwY2hvcmQgPT0gXCJub3Qgc2V0XCIgdGhlblwKICAgIGxvY2FsIGEgPSBTZXNzaW9uOmVuZ2luZSgpXAogICAgXywgdCA9IGE6Z2V0X3BvcnRzKEFSRE9VUi5EYXRhVHlwZShcIm1pZGlcIiksIEFSRE9VUi5Qb3J0TGlzdCgpKVwKICAgIFwKICAgIGxvY2FsIGNvcnJlY3RfbmFtZVwKICAgIGZvciBwIGluIHRbMl06aXRlcigpIGRvXAogICAgICAgIGxvY2FsIG5hbWUgPSBwOm5hbWUoKVwKICAgICAgICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXAogICAgICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICAgICAgICBsb2NhbCBjdXJyZW50X3RyYWNrID0gcjpuYW1lKClcCiAgICAgICAgICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19taWRpX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICAgICAgICAgICAgbG9jYWwgaW5wdXRtaWRpcG9ydCA9IHI6aW5wdXQoKTptaWRpKDApXAogICAgICAgICAgICAgICAgaWYgaW5wdXRtaWRpcG9ydDpjb25uZWN0ZWRfdG8obmFtZSkgPT0gdHJ1ZSB0aGVuXAogICAgICAgICAgICAgICAgICAgIGlmIG5hbWU6ZmluZChcIi9taWRpX291dCAxXCIpIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3RfbmFtZSA9IG5hbWU6bWF0Y2goXCIoLispL21pZGlfb3V0IDFcIilcCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KFwiQ29ycmVjdCBuYW1lIGlzIFwiIC4uIGNvcnJlY3RfbmFtZSlcCiAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXAogICAgZW5kXApcCiAgICBpZiBjb3JyZWN0X25hbWUgdGhlblwKICAgICAgICBsb2NhbCB0cmFjayA9IFNlc3Npb246cm91dGVfYnlfbmFtZShjb3JyZWN0X25hbWUpOnRvX3RyYWNrKClcCiAgICAgICAgaWYgbm90IHRyYWNrOmlzbmlsKCkgdGhlblwKICAgICAgICAgICAgbG9jYWwgaSA9IDBcCiAgICAgICAgICAgIGxvY2FsIGZvdW5kX3JpcGNob3JkID0gZmFsc2VcCiAgICAgICAgICAgIHJlcGVhdFwKICAgICAgICAgICAgICAgIGxvY2FsIHByb2MgPSB0cmFjazpudGhfcHJvY2Vzc29yKGkpXAogICAgICAgICAgICAgICAgaWYgbm90IHByb2M6aXNuaWwoKSB0aGVuXAogICAgICAgICAgICAgICAgICAgIGxvY2FsIHByb2NfbmFtZSA9IHByb2M6ZGlzcGxheV9uYW1lKClcCiAgICAgICAgICAgICAgICAgICAgaWYgcHJvY19uYW1lID09IFwiUmlwY2hvcmRcIiB0aGVuXAogICAgICAgICAgICAgICAgICAgICAgICBmb3VuZF9yaXBjaG9yZCA9IHRydWVcCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrOnNldF9uYW1lKFwiUmlwY2hvcmQgXCIuLnRyYWNrX25hbWUpXAogICAgICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgICAgIGkgPSBpICsgMVwKICAgICAgICAgICAgdW50aWwgcHJvYzppc25pbCgpXApcCiAgICAgICAgICAgIGlmIG5vdCBmb3VuZF9yaXBjaG9yZCB0aGVuXAogICAgICAgICAgICAgICAgcHJpbnQoXCJSaXBjaG9yZCBub3QgZm91bmRcIilcCiAgICAgICAgICAgIGVuZFwKICAgICAgICBlbHNlXAogICAgICAgICAgICBwcmludChcIlRyYWNrICdcIiAuLiBjb3JyZWN0X25hbWUgLi4gXCInIG5vdCBmb3VuZFwiKVwKICAgICAgICBlbmRcCiAgICBlbmRcCmVuZFwKXAplbmQgZW5kXApcClwKXApcClwKXAoiICBzY3JpcHRzWzExXVsiYSJdID0ge30gc2NyaXB0c1sxMV1bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL3Nlc3Npb25wbGF5ZXIubHVhIiAgIHNjcmlwdHNbMTFdWyJjIl0gPSB0cnVlIHNjcmlwdHNbMTFdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFww4FwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMOBcMFwwXDBcMVwxXDI4K1wyXDBcMEZcMEBcMExAwFwwZIBcMFwxjIDAXDCkgFwwXDGiQFwwXDBcMzCAXDGAh8DAXDCMXDBBXDGkgFwwXDGMgEBcMaSAXDBcMaJcMFwwXDBcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxXDFcMlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4fBQlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYxAQ1wxpIBcMFwxIIBcMIdcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxwVwzXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMFw4QESIh8DAXDCMXDBBXDGkgFwwXDGMgERcMaRcMFwxXDFcMzBAXDSAjMHEXDKkgVwwXDGMXDFFXDOkgVwwXDGiQVwwXDBcMzDAXDKAjMHEXDKkgVwwXDGMQUVcM6SBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMIBcOIBFiIbBRVwwwVwxXDZcMKRBXDBcMalAXDBcMCrB+lwxMjeGXDBEXDBcMzFARFwxXDMwQFwzgIZAQVwwh4BBXDHBwFwxXDBcMUFcNlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4eBRlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMIBcMTeAjMHGXDJcMVwyXDdcMKSBgFwxzFwxRVwz5IFcMFwx4kFcMFwwXDMwQFwxNoDMQUdcM+SBXDBcMVwxMoLHXDOBXDJcN1wwJIKAXDFcMTLCR1w0JIJcMFwxXDMxXDBIXDRcMzDAXDCARsJFXDCBQlw4XDBkQlwwXDFcMzBcMFw0gEbCRVwwgFwyXDBcNGRCXDBcMUZCQVwwR4LBXDSBwlwxXDDBglw4XDBcNkNBXDBcN0NCXDZcN8NBXDZGQ0FcMEeDwlw2R4PGXDZkgoBcMkxcMsNcNGRCXDBcMSZcMIBcMEzCxlwywYJcM1wwZIKAXDGMXDLFXDSkglwwXDGiQlwwXDBcMzBcMFw3gIxCx1w0pIJcMFwxzIJHXDVBg1wzXDDkgoBcMczCx1w15IJcMFwxXDMxwMhcNVwzMMBcMIBcNsNFXDBBQ1w4XDAkQ1wwXDFcMzBAXDOAXDZDQVwwXDeDQVw2QcNcMVwwgVwzXDlcMMZDQVwwx0PCXDfHw8FcN1w2REFcMFw3hEJcOFw3hEZcOCSDgFwyXDEyXDNDXDYkQ1wwXDEmXDCAXDCpQFwwXDAqge1cMTI3i1wwgFwwy0BcMVwwyoDJksqAyZPKQEqUXDExQVwxXDBcCoHDlFwKXDHLlVwKgcuWXApcMcyXXAqBzJjKXDBcMZXKQMqZq0CAXDDGQEFcMMdcMM1cMVwxQVwKXDBAXDFcMFwx5ICAXDFcMTJcMcNcMSSBXDBcMVwiQVwwXDBcMzBcMFwwgCZcMIBcMERcMYBcMUFCXDEzXDCHgklcMlwzMYBDXDVcMzBAXDOAhkJBXDCHgkFcNcHCXDFcMFwxg1wxM1wwRkNBXDBHQ8JcNkfDwVw2hkNBXDCHg0JcN4eDRlw3pIKAXDKMXDJDXDWkQlwwXDEmXDCAXDCHgklcMlwzMVwwS1w1XDMwXDBcNICGwkVcMMHCXDEzXDCkQlwwXDFBwVwKXDDBXDFcMTRcMIFBXDE0XDCGgk5cMIfCTlw1h1wyT1w1xkJPXDBcMFwzgFwyRoNOXDBHg89cNkfDz1w2gVwzXDE2XDCkgoBcMlwwXDJcMFw1h4JJXDJcMzGAS1w1XDMwwFwzgIbCRVwwwUJcMTZcMKRCXDBcMUFBXDExXDCBgVwxNlwwhoJOXDCHwk5cNYdcMk9cNcZCT1wwXDBcM4BcMkaDTlwwR4PPXDZHw89cNoFcM1wxNlwwpIKAXDJcMFwyXDBcNYeCSVwyXDMxXDBMXDVcMzDAXDOAhsJFXDDBwlwxNlwwpEJcMFwxQcFcMTFcMIFcMVwxN1wwhoJOXDCHwk5cNYdcMk9cNcZCT1wwXDBcM4BcMkaDTlwwR4PPXDZHQ9FcNoFcM1wxNlwwpIKAXDJcMFwyXDBcNYeCSVwyXDMxgExcNVwzMFwwXDIxgIbCRVwwwYJcMTdcMKRCXDBcMUGBXDE3XDCGXDJAXDCMQkBcNaSCXDBcMcfCQFw1zFwywVw15IJcMFwxzILEXDXkXDJcMVwxXDMwgFwxgMzDR1w35INcMFwxXDjAg6PGw0VcMFw2xFFcMORDXDBcMUFcMlwxOFww6UJcMFwwaoP9XDEyN8aCTlwwx0LSXDVcMYNcMThcMOSCXDBcMVw2w0VcMEBcM4BcNSRDXDBcMVwxw1wxOFwwQFwzgFw1gVwzXDE5XDDAXDNcMFw2XcODXDaAXDOAXDbBQ1wxOVwwncNcM1w3wYNcMTlcMFw2xFFcMN1cM4RcN1w2RE9cMFwxMsRTXDiBhFwzXDDGhE5cMMdcNNRcOcdE1Fw5XDBcNVwwXDdAXDWAXDeGhU5cMIeFVFwxMYfFVFwxMSREgFwzXDfEQFw1XDEyXDRBXDgkhFwwXDFcMTKERFw4JFw0XDFcMVwzMMBcNYBcMTLFxFw5JIVcMFwxXDEyXDVFXAokhVwwXDFcIkVcMFwwXDMwQFw0gFwxMsXEXDkkhVwwXDFcMTJFRVwKJIVcMFwxXDEyXDVFXAokhVwwXDFcIkVcMFwwXDMwQFwygFwxMlw11Vw5JIVcMFwxXDEyRVVcCoFcNVw3XDAkhYBcMUyFVVwKxsVRXDBcMcZcMjFcMN1cNYZcMTFkRYBcMSlEXDBcMKpE+VwxMjcmXDCAXDBcMzFcMFZcM1wzMFwwXDCAJlwwgFwwhlwyQFwwjEJAXDWkglwwXDHMgkBcNeSCXDBcMeJCXDBcMFwzMEBcMTSAx8JAXDXMXDLBXDXkglwwXDHMgsBcNeSCXDBcMeJCXDBcMFwzMIBcMTKAx8JAXDXMXDLBXDXkglwwXDHMgsRcNeRcMlwxXDFcMzCAXAqAzMNEXDfkg1wwXDHMXDPFXDfkg1wwXDHiQ1wwXDBcMzBcMFw5gMzDRlw3QVw0XDExXDDkg4BcMVw4wIOszINWXDdGRFZcMIBcNFwwXDTEXDRcMFww5EOAXDLMw1ZcN0BcNFwwXDOEXDRcMFww5ENcMFwyXDMxwMpcMlwzMEBcNYDiXDFcMFwwXDMwwFw0gMZDT1wwzFwz11w3QFw0XDBcM+SDgFwxzMPEXDfkg1wwXDHMw8ZcN0FcNFwxMVww5IOAXDHMQ8dcN+SDXDBcMcyDx1w3QVw0XDExXDDkg4BcMVwxMkTXXDeAXDSAXDMkhIBcMUyE11w3wFw0XDBcOGREgFwx6UJcMFwwaoP0XDEyN1wzMUDNXDRcMzCAXDMwgMZCT1wwzMLXXDXkglwwXDFcMTKD2Fw1hoNOXDCHw1hcN8FDXDIxXDCkg1wwXDHGg05cMMdcM9lcN+RcM4BcMCTDXDBcMFw4QIOwXDhcMFwzsFw0XDNcMFwwRkNYXDBHXDPLXDZMg8RcNmRcM1wxXDFcMzBcMFwxM4BMxEdcOGSEXDBcMYZcNEBcMIxEQFw5pIRcMFwxx8RAXDnMXDTBXDnkhFwwXDHMhMRcOeRcNFwxXDFcMzDAXDmAzMVHXDEx5IVcMFwxXDEyxkRcMTEkhlwwXDFcMTJcNkVcMTIkhlwwXDFcIkZcMFwwXDMwwFw3gFwxMsZEXDExJIZcMFwxXDEyRkVcMTIkhlwwXDFcMTJcNkVcMTIkhlwwXDFcIkZcMFwwXDMwwFw1gFwxMkZZXDExJIZcMFwxXDEyRlVcMTKBXDZcN1wwJIaAXDFMhllcMTLAXDaAXDhkhoBcMVwzMYDFXDEyXDMwQFwzgEzG2Vw4wVw2XDI2XDBkhoBcMWJcNlwwXDBcMzBcMFwygExG2lw4wYZcMjZcMGSGgFwxXDBcM4BcMTJGxkVcMIHGXDI2XDDAXDZcMFw2ncZcNlwxM2RGXDBcMelEXDBcMGpF9VwxMjdpQ1wwXDDqXDPyXDEyN1wiXDNcMFwwXDMwQFwxMYBGQ09cMExcM9dcNsBcM1wwXDZkg4BcMUzDxFw2ZINcMFwxjFwzxVw2pINcMFwxokNcMFwwXDMwQFw3gIFcM1w3XDDDXDNcMFwwXDEyXDTbXDaAXDRcMFw3JISAXDFMXDRFXDhkhFwwXDFiRFwwXDBcMzBAXDKATERbXDhkhFwwXDFcMzGA0Vw4XDMwQFwxgMNcM4BcMIzE1lw2XDGFXDE5XDBAXDVcMFwzXDI5RVw1XAqkRIBcMY2DQ1w3TFw0RVw4ZIRcMFwxYlw0XDBcMFwzMED6XDEyN+JDXDBcMFwzMEBcMoBcNsRFXDBBhFwyN1wwJERcMFwxXDMwQFwxgIbDRVwwwcNcMjdcMFwwXDRcMFw2QVw0XDI4XDDdQ4RcN6RDXDBcMSZcMIBcMHFcMFwwXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDRcNmVtcHR5XDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw2RXJyb3JcMDIwNk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXDRcMTJNZXNzYWdlVHlwZVw0XDExQnV0dG9uVHlwZVw0XDNPS1w0XDRydW5cNFw1c2l6ZVwxOVwxXDBcMFwwXDBcMFwwXDBcMjBITW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cNFwxNW1pZGlUcmFja0ZvdW5kXDFcMFw0XDVpdGVyXDRcOXRvX3RyYWNrXDRcNmlzbmlsXDRcMTR0b19taWRpX3RyYWNrXDFcMVw0XDZwcmludFw0XDE2aXMgYSBtaWRpIHRyYWNrXDAyMDRObyBNSURJIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgTUlESSB0cmFjay5cNFw2Q2xvc2VcNFwxMW50aF9wbHVnaW5cMTlcMFwwXDBcMFwwXDBcMFwwXDRcCnRvX2luc2VydFw0XDdwbHVnaW5cNFw1bmFtZVw0XDEyQXJwZWdnaWF0b3JcNFw1dHJ1ZVwyMHBUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIG5vdCBhIFNlc3Npb24gUGxheWVyIHRyYWNrKE5vIEFycGVnZ2lhdG9yIGZvdW5kIG9yIEFycGVnZ2lhdG9yIGluIHdyb25nIG9yZGVyKS5cNFwxMU1JREkgU3RydW1cMjB0VGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBub3QgYSBTZXNzaW9uIFBsYXllciB0cmFjayhObyBNSURJIFN0cnVtIGZvdW5kIG9yIE1JREkgU3RydW0gbm90IGluIGNvcnJlY3Qgb3JkZXIpLlw0XDV0eXBlXDRcOWRyb3Bkb3duXDRcNGtleVw0XDZ0aXRsZVw0XDI1Q2hvb3NlIEluc3RydW1lbnQgUGx1Z2luXDRcN3ZhbHVlc1w0XDE2QUNFIEZsdWlkIFN5bnRoXDE5XDJcMFwwXDBcMFwwXDBcMFw0XDhZb3NoaW1pXDE5XDNcMFwwXDBcMFwwXDBcMFw0XDlTdXJnZSBYVFwxOVw0XDBcMFwwXDBcMFwwXDBcNFwxN0Nvbm5lY3QgUmlwY2hvcmRcMTlcNVwwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFw3RGlhbG9nXDRcOG5vdCBzZXRcNCRQbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgcGx1Z2luLlw0XDI2WW91IENob3NlIEFDRSBGbHVpZCBTeW50aFw0XDNnbVw0XDI0QUNFIEZsdWlkIFN5bnRoIFNlc3Npb25cNFw3QVJET1VSXDRcN0x1YUFQSVw0XDExbmV3X3BsdWdpblw0XDhTZXNzaW9uXDRcMTFQbHVnaW5UeXBlXDRcNExWMlw0XDFcNFwxOFlvdSBDaG9zZSBZb3NoaW1pXDRcMTZZb3NoaW1pIFNlc3Npb25cNFwxOVlvdSBDaG9zZSBTdXJnZSBYVFw0XDE3U3VyZ2UgWFQgU2Vzc2lvblw0XDVWU1QzXDRcOVJpcGNob3JkXDRcOXRoZV9uYW1lXDRcNHNldFw0XDIydXNlcl9jb25maWdfZGlyZWN0b3J5XDE5XDhcMFwwXDBcMFwwXDBcMFw0XDE2cm91dGVfdGVtcGxhdGVzXDRcMi9cNFwxOS9SaXBjaG9yZC50ZW1wbGF0ZVw0XApSaXBjaG9yZCBcNFwyNG5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlXDRcMTdQcmVzZW50YXRpb25JbmZvXDRcCm1heF9vcmRlclw0XDIwUGxheWxpc3REaXNwb3NpdGlvblw0XDEyTmV3UGxheWxpc3RcNFw3b3V0cHV0XDRcNW1pZGlcNFw4Y29ubmVjdFw0XDExL21pZGlfaW4gMVwwXDRcNG9sZFw0XDE4cmVwbGFjZV9wcm9jZXNzb3JcNFw5c2V0X25hbWVcNFwxNHJvdXRlX2J5X25hbWVcNFwxNnByZXNldF9ieV9sYWJlbFw0XDEybG9hZF9wcmVzZXRcNFw3ZW5naW5lXDRcMl9cNFwydFw0XApnZXRfcG9ydHNcNFw5RGF0YVR5cGVcNFw5UG9ydExpc3RcNFw2aW5wdXRcNFwxM2Nvbm5lY3RlZF90b1w0XDVmaW5kXDRcMTIvbWlkaV9vdXQgMVw0XDZtYXRjaFw0XDE2KC4rKS9taWRpX291dCAxXDRcMTdDb3JyZWN0IG5hbWUgaXMgXDRcMTRudGhfcHJvY2Vzc29yXDRcMTNkaXNwbGF5X25hbWVcNFwxOVJpcGNob3JkIG5vdCBmb3VuZFw0XDhUcmFjayAnXDRcMTInIG5vdCBmb3VuZFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzY3JpcHRzWzExXVsibiJdID0gIlNlc3Npb24gUGxheWVyIC0gQ2hhbmdlIEluc3RydW1lbnQgUGx1Z2luIGZvciBTZXNzaW9uIFBsYXllciIgICBzY3JpcHRzWzEyXSA9IHt9IHNjcmlwdHNbMTJdWyJzIl0gPSAiYXJkb3VyIHtcCiBbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcCiBuYW1lID0gXCJCUE0gY2hhbmdlIC0gQWRqdXN0ICh0aW1lc3RyZXRjaCkgdGVtcG8gb2YgYW4gYXVkaW9cIixcCiBhdXRob3IgICAgICA9IFwiSnVzdGluIEVocmxpY2htYW5cIixcCiBkZXNjcmlwdGlvbiA9IFtbXApDaGFuZ2UgdGhlIHRlbXBvIG9mIGF1ZGlvIGxvb3AgaW4gQmVhdHMgUGVyIE1pbnV0ZSAoQlBNKSBieSB1aXNuZyBlaXRoZXIgcHJvamVjdCB0ZW1wbyBvciBlbnRlcmluZyBhIHRlbXBvIG1hbnVhbGx5XApdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIFwKICAgIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXAogICAgICAgIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCiAgICAgICAgbG9jYWwgY291bnQgPSAwXApcCiAgICAgICAgZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCgpOml0ZXIoKSBkb1wKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDFcCiAgICAgICAgICAgIGlmIHI6dG9fYXVkaW9yZWdpb24oKTppc25pbCgpIHRoZW5cCiAgICAgICAgICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiQWRqdXN0IFRlbXBvXCIsIFwiVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYW4gYXVkaW8gcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICAgICAgICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgICAgICAgICBtZCA9IG5pbFwKICAgICAgICAgICAgICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICAgICAgICAgICAgICByZXR1cm5cCiAgICAgICAgICAgIGVsc2VcCiAgICAgICAgICAgICAgICBhdWRpb19yZWdpb24gPSByXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXApcCiAgICAgICAgaWYgY291bnQgfj0gMSB0aGVuXAogICAgICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiQWRqdXN0IFRlbXBvXCIsIFwiUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICAgICAgICAgIHByaW50KG1kOnJ1bigpKVwKICAgICAgICAgICAgbWQgPSBuaWxcCiAgICAgICAgICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICAgICAgICAgIHJldHVyblwKICAgICAgICBlbmRcClwKICAgICAgICBsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAgICAgICAgICAgIHtcCiAgICAgICAgICAgICAgICB0eXBlID0gXCJkcm9wZG93blwiLCBcCiAgICAgICAgICAgICAgICBrZXkgPSBcImRyb3Bkb3duXCIsIFwKICAgICAgICAgICAgICAgIHRpdGxlID0gXCJDaG9vc2UgaG93IHlvdSB3YW50IHRvIGFkanVzdCBCUE1cIiwgXAogICAgICAgICAgICAgICAgdmFsdWVzID0ge1wKICAgICAgICAgICAgICAgICAgICBbXCJDaG9vc2UgaG93IHRvIGFkanVzdCBCUE1cIl0gPSAxLCBcCiAgICAgICAgICAgICAgICAgICAgW1wiRnJvbSBwcm9qZWN0IHRlbXBvIChiZWdpbm5pbmcgb2YgdGltZWxpbmUpXCJdID0gMixcCiAgICAgICAgICAgICAgICAgICAgW1wiU2V0IHlvdXIgQlBNXCJdID0gM1wKICAgICAgICAgICAgICAgIH0sXAogICAgICAgICAgICAgICAgZGVmYXVsdCA9IFwiQ2hvb3NlIGhvdyB0byBhZGp1c3QgQlBNXCJcCiAgICAgICAgICAgIH1cCiAgICAgICAgfVwKXAogICAgICAgIC0tIENyZWF0ZSBhbmQgZGlzcGxheSB0aGUgZGlhbG9nXAogICAgICAgIG9iID0gTHVhRGlhbG9nLkRpYWxvZyAoXCJCUE0gQ2hhbmdlXCIsIGRpYWxvZ19vcHRpb25zKVwKICAgICAgICBhdiA9IG9iOnJ1bigpICAtLSBDYXB0dXJlIHRoZSB1c2VyIGlucHV0XApcCiAgICAgICAgLS0gQ2hlY2sgaWYgdGhlIHVzZXIgcHJlc3NlZCBjYW5jZWxcCiAgICAgICAgaWYgbm90IGF2IHRoZW5cCiAgICAgICAgICAgIHJldHVybiAgLS0gRXhpdCBpZiB0aGUgdXNlciBjYW5jZWxzIHRoZSBkaWFsb2dcCiAgICAgICAgZW5kXApcCiAgICAgICAgaWYgYXYgYW5kIGF2W1wiZHJvcGRvd25cIl0gPT0gMiB0aGVuXAogICAgICAgICAgICB0cCA9IFRlbXBvcmFsLnRpbWVwb3NfdCAoU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpICogMSlcCiAgICAgICAgICAgIHRtID0gVGVtcG9yYWwuVGVtcG9NYXAucmVhZCAoKVwKICAgICAgICAgICAgdGFyZ2V0X3RlbXBvID0gKHRtOnF1YXJ0ZXJzX3Blcl9taW51dGVfYXQgKHRwKSlcCiAgICAgICAgICAgIHByaW50ICh0bTpxdWFydGVyc19wZXJfbWludXRlX2F0ICh0cCkpXAogICAgICAgICAgICBwcmludCAodGFyZ2V0X3RlbXBvKVwKICAgICAgICBlbmRcClwKICAgICAgICBpZiBhdiBhbmQgYXZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cCiAgICAgICAgICAgIC0tIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBpbnB1dCBpcyBhIHZhbGlkIDIgb3IgMyBkaWdpdCBudW1iZXIsIGFsbG93aW5nIGRlY2ltYWxzXAogICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBpc192YWxpZF9udW1iZXIoaW5wdXQpXAogICAgICAgICAgICAgICAgLS0gQ29udmVydCBzdHJpbmcgdG8gbnVtYmVyXAogICAgICAgICAgICAgICAgbG9jYWwgbnVtID0gdG9udW1iZXIoaW5wdXQpXApcCiAgICAgICAgICAgICAgICAtLSBJZiB0aGUgY29udmVyc2lvbiBmYWlsZWQsIHJldHVybiBmYWxzZVwKICAgICAgICAgICAgICAgIGlmIG5vdCBudW0gdGhlblwKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcCiAgICAgICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgICAgIC0tIEV4dHJhY3QgdGhlIHBhcnQgb2YgdGhlIG51bWJlciBiZWZvcmUgdGhlIGRlY2ltYWxcCiAgICAgICAgICAgICAgICBsb2NhbCBpbnRlZ2VyX3BhcnQgPSBpbnB1dDptYXRjaChcIl4oJWQrKVwiKVwKXAogICAgICAgICAgICAgICAgLS0gRW5zdXJlIHRoZSBpbnRlZ2VyIHBhcnQgaGFzIDIgb3IgMyBkaWdpdHNcCiAgICAgICAgICAgICAgICBpZiBpbnRlZ2VyX3BhcnQgYW5kICNpbnRlZ2VyX3BhcnQgPj0gMiBhbmQgI2ludGVnZXJfcGFydCA8PSAzIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcCiAgICAgICAgICAgICAgICBlbHNlXAogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVwKICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgIC0tIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhbmQgc2hvdyB0aGUgbWFpbiBkaWFsb2cgZm9yIHVzZXIgaW5wdXRcCiAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIHNob3dfbWFpbl9kaWFsb2coKVwKICAgICAgICAgICAgICAgIGxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICAgICAgICAgICAgICAgICAgICB7IHR5cGUgPSBcImVudHJ5XCIsIGtleSA9IFwidGV4dFwiLCBkZWZhdWx0ID0gXCIxMjBcIiwgdGl0bGUgPSBcImJwbVwiIH0sXAogICAgICAgICAgICAgICAgfVwKICAgICAgICAgICAgICAgIGxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyAoXCJDaGFuZ2UgdGVtcG9cIiwgZGlhbG9nX29wdGlvbnMpXAogICAgICAgICAgICAgICAgbG9jYWwgcnYgPSBvZDpydW4oKVwKICAgICAgICAgICAgICAgIHJldHVybiBydiAgLS0gUmV0dXJuIHRoZSBkaWFsb2cgcmVzdWx0ICh0YWJsZSBvciBuaWwpXAogICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgLS0gRnVuY3Rpb24gdG8gc2hvdyBlcnJvciBkaWFsb2dcCiAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIHNob3dfZXJyb3JfZGlhbG9nKClcCiAgICAgICAgICAgICAgICBsb2NhbCBlcnJvcl9kaWFsb2dfb3B0aW9ucyA9IHtcCiAgICAgICAgICAgICAgICAgICAgeyB0eXBlID0gXCJsYWJlbFwiLCB0aXRsZSA9IFwiSW52YWxpZCBpbnB1dCEgUGxlYXNlIGVudGVyIGEgMiBvciAzIGRpZ2l0IG51bWJlciAoZGVjaW1hbHMgYWxsb3dlZCkuXCIsIHRleHQgPSBcIkludmFsaWQgaW5wdXQhIFBsZWFzZSBlbnRlciBhIDIgb3IgMyBkaWdpdCBudW1iZXIgKGRlY2ltYWxzIGFsbG93ZWQpLlwiIH0sXAogICAgICAgICAgICAgICAgfVwKICAgICAgICAgICAgICAgIGxvY2FsIGVycm9yX2RpYWxvZyA9IEx1YURpYWxvZy5EaWFsb2coXCJJbnZhbGlkIElucHV0XCIsIGVycm9yX2RpYWxvZ19vcHRpb25zKVwKICAgICAgICAgICAgICAgIGVycm9yX2RpYWxvZzpydW4oKSAgLS0gRGlzcGxheSB0aGUgZXJyb3IgZGlhbG9nXAogICAgICAgICAgICAgICAgZXJyb3JfZGlhbG9nID0gbmlsICAtLSBDbGVhciB0aGUgZXJyb3IgZGlhbG9nIGFmdGVyIGl0IGNsb3Nlc1wKICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgIC0tIEtlZXAgYXNraW5nIGZvciBpbnB1dCB1bnRpbCB2YWxpZCBvciBjYW5jZWwgaXMgcHJlc3NlZFwKICAgICAgICAgICAgd2hpbGUgdHJ1ZSBkb1wKICAgICAgICAgICAgICAgIGxvY2FsIHJ2ID0gc2hvd19tYWluX2RpYWxvZygpXApcCiAgICAgICAgICAgICAgICAtLSBFeGl0IHRoZSBzY3JpcHQgaWYgXCJDYW5jZWxcIiBpcyBwcmVzc2VkIChydiBpcyBuaWwpXAogICAgICAgICAgICAgICAgaWYgcnYgPT0gbmlsIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoXCJEaWFsb2cgd2FzIGNhbmNlbGVkLiBFeGl0aW5nLlwiKVwKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIC0tIEV4aXQgdGhlIGZ1bmN0aW9uXAogICAgICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgICAgICBudW1iZXIgPSBydltcInRleHRcIl1cCiAgICAgICAgICAgICAgICBwcmludCAobnVtYmVyKVwKXAogICAgICAgICAgICAgICAgaWYgaXNfdmFsaWRfbnVtYmVyKG51bWJlcikgdGhlblwKICAgICAgICAgICAgICAgICAgICAtLSBDb252ZXJ0IHN0cmluZyB0byBhIG51bWJlciBmb3IgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnNcCiAgICAgICAgICAgICAgICAgICAgbnVtZXJpY192YWx1ZSA9IHRvbnVtYmVyKG51bWJlcilcCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X3RlbXBvID0gbnVtZXJpY192YWx1ZVwKICAgICAgICAgICAgICAgICAgICBicmVhayAgLS0gRXhpdCB0aGUgbG9vcCB3aGVuIHZhbGlkIGlucHV0IGlzIHJlY2VpdmVkXAogICAgICAgICAgICAgICAgZWxzZVwKICAgICAgICAgICAgICAgICAgICBzaG93X2Vycm9yX2RpYWxvZygpICAtLSBTaG93IGVycm9yIGRpYWxvZyBpZiBpbnB1dCBpcyBpbnZhbGlkXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXApcCiAgICAgICAgcHJpbnQodGFyZ2V0X3RlbXBvKVwKXAogICAgICAgIGxvY2FsIHJuID0gYXVkaW9fcmVnaW9uOm5hbWUoKSAgLS0gR2V0IHRoZSByZWdpb24gbmFtZVwKICAgICAgICBwcmludChybilcClwKICAgICAgICBzb3VyY2UgPSBhdWRpb19yZWdpb246c291cmNlKDApOnRvX2ZpbGVzb3VyY2UoKTpwYXRoKClcCiAgICAgICAgZmlsZXBhdGggPSBzb3VyY2VcClwKICAgICAgICBsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXAogICAgICAgIGZ1bmN0aW9uIGV4dHJhY3RCUE0ocm4pXAogICAgICAgICAgICBsb2NhbCBicG0gPSBzdHJpbmcubWF0Y2gocm4sIFwiKCVkJWQ/JWQ/KVstX10/JXMqW2JCXVtwUF1bbU1dXCIsIDEpXAogICAgICAgICAgICBpZiBub3QgYnBtIHRoZW5cCiAgICAgICAgICAgICAgICBicG0gPSBzdHJpbmcubWF0Y2gocm4sIFwiW2JCXVtwUF1bbU1dJXMqW18tXT8oJWQrKVwiLCAxKVwKICAgICAgICAgICAgZW5kXAogICAgICAgICAgICByZXR1cm4gYnBtXAogICAgICAgIGVuZFwKXAogICAgICAgIC0tIEV4YW1wbGUgdXNhZ2U6XAogICAgICAgIGxvY2FsIGJwbSA9IGV4dHJhY3RCUE0ocm4pXAogICAgICAgIGlmIGJwbSB0aGVuXAogICAgICAgICAgICBwcmludChicG0pXAogICAgICAgICAgICBsb2NhbCByZXN1bHQgPSBicG1cClwKICAgICAgICAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkVzdGltYXRlIFRlbXBvXCIsIHJlc3VsdCwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgICAgICAgICAgcHJpbnQobWQ6cnVuKCkpXAogICAgICAgICAgICBtZCA9IG5pbFwKICAgICAgICAgICAgY29sbGVjdGdhcmJhZ2UoKVwKXAogICAgICAgICAgICBsb2NhbCBudW0gPSB0b251bWJlcihyZXN1bHQpXApcCiAgICAgICAgICAgIC0tIHRvIGRvLCBhZGQgdGVtcG8gbWFya2VycyBhbmQgcHJvbXB0IHdoZXRoZXIgb3Igbm90IHlvdSB3YW50IHRvIHRlbXBvIG1hcmtlcnNcClwKICAgICAgICAgICAgLS0gc2V0IGEgdGVtcG8gbWFwXAogICAgICAgICAgICBsb2NhbCB0bSA9IFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgICAgICAgICAgaWYgZHVyID09IHRydWUgdGhlblwKICAgICAgICAgICAgICAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbyhudW0sIG51bSwgNCksIHN0KVwKICAgICAgICAgICAgICAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbygxMjAsIDEyMCwgNCksIGV0KVwKICAgICAgICAgICAgZWxzZVwKICAgICAgICAgICAgICAgIHRwID0gVGVtcG9yYWwudGltZXBvc190IChTZXNzaW9uOm5vbWluYWxfc2FtcGxlX3JhdGUgKCkgKiAwKVwKICAgICAgICAgICAgICAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbyhudW0sIG51bSwgNCksIHRwKVwKICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgIFNlc3Npb246YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kKFwiQ2hhbmdlIFRlbXBvIE1hcFwiKVwKICAgICAgICAgICAgVGVtcG9yYWwuVGVtcG9NYXAudXBkYXRlKHRtKVwKICAgICAgICAgICAgaWYgbm90IFNlc3Npb246YWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kKCkgdGhlblwKICAgICAgICAgICAgICAgIFNlc3Npb246Y29tbWl0X3JldmVyc2libGVfY29tbWFuZChuaWwpXAogICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgdG0gPSBuaWxcClwKICAgICAgICAgICAgLS0gQWJvcnQgRWRpdCBleGFtcGxlXAogICAgICAgICAgICAtLSBhZnRlciBldmVyeSBjYWxsIHRvIFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgICAgICAgICAgLS0gdGhlcmUgbXVzdCBiZSBhIG1hdGNoaW5nIGNhbGwgdG9cCiAgICAgICAgICAgIC0tIFRlbXBvcmFsLlRlbXBvTWFwLnVwZGF0ZSgpIG9yIFRlbXBvcmFsLlRlbXBvTWFwLmFib3J0X3VwZGF0ZSgpXAogICAgICAgICAgICBUZW1wb3JhbC5UZW1wb01hcC53cml0ZV9jb3B5KClcCiAgICAgICAgICAgIFRlbXBvcmFsLlRlbXBvTWFwLmFib3J0X3VwZGF0ZSgpXAogICAgICAgIGVsc2VcCiAgICAgICAgICAgIHByaW50KFwiQlBNIG5vdCBmb3VuZCBpbiBmaWxlbmFtZS5cIilcClwKICAgICAgICAgICAgbG9jYWwgY29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL21pbmlicG0gIFwiIC4ucXVvdGVkZmlsZXBhdGguLlwiID4gL3RtcC9icG0udHh0XCJcCiAgICAgICAgICAgIG9zLmV4ZWN1dGUoY29tbWFuZClcClwKICAgICAgICAgICAgLS0gUmVhZCB0aGUgZmlsZVwKICAgICAgICAgICAgZmlsZSA9IGlvLm9wZW4oXCIvdG1wL2JwbS50eHRcIiwgXCJyXCIpXAogICAgICAgICAgICBjb250ZW50ID0gZmlsZTpyZWFkKFwiKmFsbFwiKVwKICAgICAgICAgICAgZmlsZTpjbG9zZSgpXApcCiAgICAgICAgICAgIC0tIEV4dHJhY3QgdGhlIG51bWJlciBhZnRlciBcIkVzdGltYXRlZCBCUE06XCJcCiAgICAgICAgICAgIGJwbV9zdHJpbmcgPSBjb250ZW50Om1hdGNoKFwiRXN0aW1hdGVkIEJQTTolcyooWyVkJS5dKylcIilcCiAgICAgICAgICAgIGlmIGJwbV9zdHJpbmcgPT0gbmlsIHRoZW5cCiAgICAgICAgICAgICAgICAtLSBGYWxsYmFjazogdXNlIHNveCB8IGJwbSBpZiBtaW5pYnBtIGRpZCBub3QgcHJvZHVjZSBhIHJlc3VsdFwKICAgICAgICAgICAgICAgIGxvY2FsIGZhbGxiYWNrX2NvbW1hbmQgPSBcInNveCBcIiAuLiBxdW90ZWRmaWxlcGF0aCAuLiBcIiAtdCByYXcgLXIgNDgwMDAgLWUgZmxvYXQgLWMgMSAtIHwgYnBtID4gL3RtcC9icG0udHh0XCJcCiAgICAgICAgICAgICAgICBvcy5leGVjdXRlKGZhbGxiYWNrX2NvbW1hbmQpXAogICAgICAgICAgICAgICAgZmlsZSA9IGlvLm9wZW4oXCIvdG1wL2JwbS50eHRcIiwgXCJyXCIpXAogICAgICAgICAgICAgICAgY29udGVudCA9IGZpbGU6cmVhZChcIiphbGxcIilcCiAgICAgICAgICAgICAgICBmaWxlOmNsb3NlKClcCiAgICAgICAgICAgICAgICAtLSBUcnkgdG8gZXh0cmFjdCBCUE0gZnJvbSB0aGUgZmFsbGJhY2sgb3V0cHV0IChhc3N1bWluZyBicG0gb3V0cHV0cyBqdXN0IHRoZSBudW1iZXIgb3Igc2ltaWxhcilcCiAgICAgICAgICAgICAgICBicG1fc3RyaW5nID0gY29udGVudDptYXRjaChcIihbJWQlLl0rKVwiKVwKICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBicG1fbnVtYmVyID0gdG9udW1iZXIoYnBtX3N0cmluZylcCiAgICAgICAgICAgIHByaW50KGJwbV9udW1iZXIpXAogICAgICAgICAgICBudW0gPSBicG1fbnVtYmVyXApcCiAgICAgICAgICAgIGZpcnN0cmVzdWx0ID0gYnBtX251bWJlclwKICAgICAgICAgICAgcHJpbnQoZmlyc3RyZXN1bHQpXApcCiAgICAgICAgICAgIC0tIENvbnZlcnQgdGhlIGNvbnRlbnQgdG8gYSBudW1iZXIgYW5kIHN0b3JlIGl0IGluIGEgdmFyaWFibGVcCiAgICAgICAgICAgIGN1cnJlbnRfdGVtcG8gPSB0b251bWJlcihmaXJzdHJlc3VsdClcCiAgICAgICAgZW5kXApcCiAgICAgICAgLS0gaGVscGVyIGZ1bmN0aW9uIC0tXAogICAgICAgIC0tIHRoZXJlIGlzIGN1cnJlbnRseSBubyBkaXJlY3Qgd2F5IHRvIGZpbmQgdGhlIHRyYWNrXAogICAgICAgIC0tIGNvcnJlc3BvbmRpbmcgdG8gYSBbc2VsZWN0ZWRdIHJlZ2lvblwKICAgICAgICBmdW5jdGlvbiBmaW5kX3RyYWNrX2Zvcl9yZWdpb24gKHJlZ2lvbl9pZClcCiAgICAgICAgICAgIGZvciByb3V0ZSBpbiBTZXNzaW9uOmdldF90cmFja3MgKCk6aXRlciAoKSBkb1wKICAgICAgICAgICAgICAgIGxvY2FsIHRyYWNrID0gcm91dGU6dG9fdHJhY2sgKClcCiAgICAgICAgICAgICAgICBsb2NhbCBwbCA9IHRyYWNrOnBsYXlsaXN0ICgpXAogICAgICAgICAgICAgICAgaWYgbm90IHBsOnJlZ2lvbl9ieV9pZCAocmVnaW9uX2lkKTppc25pbCAoKSB0aGVuXAogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFja1wKICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBhc3NlcnQgKDApIC0tIGNhbid0IGhhcHBlbiwgcmVnaW9uIG11c3QgYmUgaW4gYSBwbGF5bGlzdFwKICAgICAgICBlbmRcClwKICAgICAgICBwcmludCAoXCJibGFuayBpcyBcIi4uY3VycmVudF90ZW1wbylcClwKICAgICAgICBicG1zaGlmdCA9IGN1cnJlbnRfdGVtcG8vdGFyZ2V0X3RlbXBvXApcCiAgICAgICAgcHJpbnQoYnBtc2hpZnQpXApcCiAgICAgICAgLS0gZ2V0IEVkaXRvciBzZWxlY3Rpb25cCiAgICAgICAgLS0gaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBcmRvdXJVSTpFZGl0b3JcCiAgICAgICAgLS0gaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBcmRvdXJVSTpTZWxlY3Rpb25cCiAgICAgICAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcClwKICAgICAgICAtLSBJbnN0YW50aWF0ZSB0aGUgUU0gQmFyQmVhdCBUcmFja2VyXAogICAgICAgIC0tIHNlZSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0FSRE9VUjpMdWFBUEk6VmFtcFwKICAgICAgICAtLSBodHRwOi8vdmFtcC1wbHVnaW5zLm9yZy9wbHVnaW4tZG9jL3FtLXZhbXAtcGx1Z2lucy5odG1sI3FtLWJhcmJlYXR0cmFja2VyXAogICAgICAgIGxvY2FsIHZhbXAgPSBBUkRPVVIuTHVhQVBJLlZhbXAgKFwibGliYXJkb3VydmFtcHBsdWdpbnM6cW0tYmFyYmVhdHRyYWNrZXJcIiwgU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpKVwKXAogICAgICAgIC0tIHByZXBhcmUgdW5kbyBvcGVyYXRpb25cCiAgICAgICAgU2Vzc2lvbjpiZWdpbl9yZXZlcnNpYmxlX2NvbW1hbmQgKFwiUnViYmVyYmFuZCBSZWdpb25zXCIpXApcCiAgICAgICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgcmVnaW9uXAogICAgICAgIC0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6UmVnaW9uU2VsZWN0aW9uXAogICAgICAgIGZvciByIGluIHNlbC5yZWdpb25zOnJlZ2lvbmxpc3QgKCk6aXRlciAoKSBkb1wKICAgICAgICAgICAgLS0gXCJyXCIgaXMtYSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0FSRE9VUjpSZWdpb25cClwKICAgICAgICAgICAgLS0gdGVzdCBpZiBpdCdzIGFuIGF1ZGlvIHJlZ2lvblwKICAgICAgICAgICAgbG9jYWwgYXIgPSByOnRvX2F1ZGlvcmVnaW9uICgpXAogICAgICAgICAgICBpZiBhcjppc25pbCAoKSB0aGVuXAogICAgICAgICAgICAgICAgZ290byBuZXh0XAogICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgLS0gY3JlYXRlIFJ1YmJlcmJhbmQgc3RyZXRjaGVyXAogICAgICAgICAgICBsb2NhbCByYiA9IEFSRE9VUi5MdWFBUEkuUnViYmVyYmFuZCAoYXIsIGZhbHNlKVwKXAogICAgICAgICAgICAtLSB0aGUgcnViYmVyYmFuZC1maWx0ZXIgYWxzbyBpbXBsZW1lbnRzIHRoZSByZWFkYWJsZSBBUEkuXAogICAgICAgICAgICAtLSBodHRwczovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6QXVkaW9SZWFkYWJsZVwKICAgICAgICAgICAgLS0gVGhpcyBhbGxvd3MgdG8gcmVhZCBmcm9tIHRoZSBtYXN0ZXItc291cmNlIG9mIHRoZSBnaXZlbiBhdWRpby1yZWdpb24uXAogICAgICAgICAgICAtLSBBbnkgcHJpb3IgdGltZS1zdHJldGNoIG9yIHBpdGNoLXNoaWZ0IGFyZSBpZ25vcmVkIHdoZW4gcmVhZGluZywgaG93ZXZlclwKICAgICAgICAgICAgLS0gcHJvY2Vzc2luZyByZXRhaW5zIHRoZSBwcmV2aW91cyBzZXR0aW5nc1wKICAgICAgICAgICAgbG9jYWwgbWF4X3BvcyA9IHJiOnJlYWRhYmxlICgpOnJlYWRhYmxlX2xlbmd0aCAoKVwKXAogICAgICAgICAgICAtLSBwcmVwYXJlIHRhYmxlIHRvIGhvbGQgYW5hbHlzaXMgcmVzdWx0c1wKICAgICAgICAgICAgLS0gdGhlIGJlYXQtbWFwIGlzIGEgdGFibGUgaG9sZGluZyBhdWRpby1zYW1wbGUgcG9zaXRpb25zOlwKICAgICAgICAgICAgLS0gW2Zyb21dID0gdG9cCiAgICAgICAgICAgIGxvY2FsIGJlYXRfbWFwID0ge31cCiAgICAgICAgICAgIGxvY2FsIHByZXZfYmVhdCA9IDBcClwKICAgICAgICAgICAgLS0gY29uc3RydWN0IGEgcHJvZ3Jlc3MtZGlhbG9nIHdpdGggY2FuY2VsIGJ1dHRvblwKICAgICAgICAgICAgbG9jYWwgcGRpYWxvZyA9IEx1YURpYWxvZy5Qcm9ncmVzc1dpbmRvdyAoXCJSdWJiZXJiYW5kXCIsIHRydWUpXAogICAgICAgICAgICAtLSBwcm9ncmVzcyBkaWFsb2cgY2FsbGJhY2tzXAogICAgICAgICAgICBmdW5jdGlvbiB2YW1wX2NhbGxiYWNrIChfLCBwb3MpXAogICAgICAgICAgICAgICAgcmV0dXJuIHBkaWFsb2c6cHJvZ3Jlc3MgKHBvcyAvIG1heF9wb3MsIFwiQW5hbHl6aW5nXCIpXAogICAgICAgICAgICBlbmRcCiAgICAgICAgICAgIGZ1bmN0aW9uIHJiX3Byb2dyZXNzIChfLCBwb3MpXAogICAgICAgICAgICAgICAgcmV0dXJuIHBkaWFsb2c6cHJvZ3Jlc3MgKHBvcyAvIG1heF9wb3MsIFwiU3RyZXRjaGluZ1wiKVwKICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgIC0tIHJ1biBWQU1QIHBsdWdpbiwgYW5hbHl6ZSB0aGUgZmlyc3QgY2hhbm5lbCBvZiB0aGUgYXVkaW8tcmVnaW9uXAogICAgICAgICAgICB2YW1wOmFuYWx5emUgKHJiOnJlYWRhYmxlICgpLCAwLCB2YW1wX2NhbGxiYWNrKVwKXAogICAgICAgICAgICAtLSBnZXRSZW1haW5pbmdGZWF0dXJlcyByZXR1cm5zIGEgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNWYW1wOlBsdWdpbjpGZWF0dXJlU2V0XAogICAgICAgICAgICAtLSBnZXQgdGhlIGZpcnN0IG91dHB1dC4gaGVyZTogQmVhdHMsIGVzdGltYXRlZCBiZWF0IGxvY2F0aW9ucyAmIGJlYXQtbnVtYmVyXAogICAgICAgICAgICAtLSBcImZsXCIgaXMtYSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI1ZhbXA6UGx1Z2luOkZlYXR1cmVMaXN0XAogICAgICAgICAgICBsb2NhbCBmbCA9IHZhbXA6cGx1Z2luICgpOmdldFJlbWFpbmluZ0ZlYXR1cmVzICgpOmF0ICgwKVwKICAgICAgICAgICAgbG9jYWwgYmVhdGNvdW50ID0gMFwKICAgICAgICAgICAgLS0gaXRlcmF0ZSBvdmVyIHJldHVybmVkIGZlYXR1cmVzXAogICAgICAgICAgICBmb3IgZiBpbiBmbDppdGVyICgpIGRvXAogICAgICAgICAgICAgICAgLS0gXCJmXCIgaXMtYSAgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNWYW1wOlBsdWdpbjpGZWF0dXJlXAogICAgICAgICAgICAgICAgbG9jYWwgZm4gPSBWYW1wLlJlYWxUaW1lLnJlYWxUaW1lMkZyYW1lIChmLnRpbWVzdGFtcCwgU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpKVwKICAgICAgICAgICAgICAgIGJlYXRfbWFwW2ZuXSA9IGZuIC0tIGtlZXAgYmVhdHMgKDEvNCBub3RlcykgdW5jaGFuZ2VkXAogICAgICAgICAgICAgICAgaWYgcHJldl9iZWF0ID4gMCB0aGVuXAogICAgICAgICAgICAgICAgICAgIC0tIG1vdmUgdGhlIGhhbGYgYmVhdHMgKDEvOHRoKSBiYWNrXAogICAgICAgICAgICAgICAgICAgIGxvY2FsIGRpZmYgPSAoZm4gLSBwcmV2X2JlYXQpIC8gMlwKICAgICAgICAgICAgICAgICAgICBiZWF0X21hcFtmbiAtIGRpZmZdID0gZm4gLSBkaWZmICsgZGlmZiAvIDMgLS0gbW9kZXJhdGUgc3dpbmcgMjoxICh0cmlwbGV0KVwKICAgICAgICAgICAgICAgICAgICAtLWJlYXRfbWFwW2ZuIC0gZGlmZl0gPSBmbiAtIGRpZmYgKyBkaWZmIC8gMiAtLSBoYXJkIHN3aW5nIDM6MSAoZG90dGVkIDh0aClcCiAgICAgICAgICAgICAgICAgICAgYmVhdGNvdW50ID0gYmVhdGNvdW50ICsgMVwKICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgICAgIHByZXZfYmVhdCA9IGZuXAogICAgICAgICAgICBlbmRcCiAgICAgICAgICAgIC0tIHJlc2V0IHRoZSBwbHVnaW4gc3RhdGUgKHByZXBhcmUgZm9yIG5leHQgaXRlcmF0aW9uKVwKICAgICAgICAgICAgdmFtcDpyZXNldCAoKVwKXAogICAgICAgICAgICBpZiBwZGlhbG9nOmNhbmNlbGVkICgpIHRoZW4gZ290byBvdXQgZW5kXApcCiAgICAgICAgICAgIC0tIHNraXAgcmVnaW9ucyBzaG9ydGVyIHRoYW4gYSBiYXJcCiAgICAgICAgICAgIGlmIGJlYXRjb3VudCA8IDggdGhlblwKICAgICAgICAgICAgICAgIHBkaWFsb2c6ZG9uZSAoKVwKICAgICAgICAgICAgICAgIGdvdG8gbmV4dFwKICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgIC0tIGNvbmZpZ3VyZSBydWJiZXJiYW5kIHN0cmV0Y2ggdG9vbFwKICAgICAgICAgICAgcmI6c2V0X3N0cmVjaF9hbmRfcGl0Y2ggKGJwbXNoaWZ0LCAxKSAtLSBubyBvdmVyYWxsIHN0cmV0Y2hpbmcsIG5vIHBpdGNoLXNoaWZ0XAogICAgICAgICAgICAtLXJiOnNldF9tYXBwaW5nIChiZWF0X21hcCkgLS0gYXBwbHkgYmVhdC1tYXAgZnJvbS90b1wKXAogICAgICAgICAgICAtLSBub3cgc3RyZXRjaCB0aGUgcmVnaW9uXAogICAgICAgICAgICBsb2NhbCBuYXIgPSByYjpwcm9jZXNzIChyYl9wcm9ncmVzcylcClwKICAgICAgICAgICAgaWYgcGRpYWxvZzpjYW5jZWxlZCAoKSB0aGVuIGdvdG8gb3V0IGVuZFwKXAogICAgICAgICAgICAtLSBoaWRlIG1vZGFsIHByb2dyZXNzIGRpYWxvZyBhbmQgZGVzdHJveSBpdFwKICAgICAgICAgICAgcGRpYWxvZzpkb25lICgpXAogICAgICAgICAgICBwZGlhbG9nID0gbmlsXApcCiAgICAgICAgICAgIC0tIHJlcGxhY2UgcmVnaW9uXAogICAgICAgICAgICBpZiBub3QgbmFyOmlzbmlsICgpIHRoZW5cCiAgICAgICAgICAgICAgICBwcmludCAoXCJuZXcgYXVkaW8gcmVnaW9uOiBcIiwgbmFyOm5hbWUgKCksIG5hcjpsZW5ndGggKCkpXAogICAgICAgICAgICAgICAgbG9jYWwgdHJhY2sgPSBmaW5kX3RyYWNrX2Zvcl9yZWdpb24gKHI6dG9fc3RhdGVmdWwgKCk6aWQgKCkpXAogICAgICAgICAgICAgICAgbG9jYWwgcGxheWxpc3QgPSB0cmFjazpwbGF5bGlzdCAoKVwKICAgICAgICAgICAgICAgIHBsYXlsaXN0OnRvX3N0YXRlZnVsICgpOmNsZWFyX2NoYW5nZXMgKCkgLS0gcHJlcGFyZSB1bmRvXAogICAgICAgICAgICAgICAgcGxheWxpc3Q6cmVtb3ZlX3JlZ2lvbiAocilcCiAgICAgICAgICAgICAgICBwbGF5bGlzdDphZGRfcmVnaW9uIChuYXIsIHI6cG9zaXRpb24gKCksIDEsIGZhbHNlKVwKICAgICAgICAgICAgICAgIC0tIGNyZWF0ZSBhIGRpZmYgb2YgdGhlIHBlcmZvcm1lZCB3b3JrLCBhZGQgaXQgdG8gdGhlIHNlc3Npb24ncyB1bmRvIHN0YWNrXAogICAgICAgICAgICAgICAgLS0gYW5kIGNoZWNrIGlmIGl0IGlzIG5vdCBlbXB0eVwKICAgICAgICAgICAgICAgIFNlc3Npb246YWRkX3N0YXRlZnVsX2RpZmZfY29tbWFuZCAocGxheWxpc3Q6dG9fc3RhdGVmdWxkZXN0cnVjdGlibGUgKCkpXAogICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgOjpuZXh0OjpcCiAgICAgICAgZW5kXApcCiAgICAgICAgOjpvdXQ6OlwKXAogICAgICAgIC0tIGFsbCBkb25lLCBjb21taXQgdGhlIGNvbWJpbmVkIFVuZG8gT3BlcmF0aW9uXAogICAgICAgIGlmIG5vdCBTZXNzaW9uOmFib3J0X2VtcHR5X3JldmVyc2libGVfY29tbWFuZCAoKSB0aGVuXAogICAgICAgICAgICBTZXNzaW9uOmNvbW1pdF9yZXZlcnNpYmxlX2NvbW1hbmQgKG5pbClcCiAgICAgICAgZW5kXAogICAgZW5kXAplbmRcClwKIiAgc2NyaXB0c1sxMl1bImEiXSA9IHt9IHNjcmlwdHNbMTJdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9icG1jaGFuZ2UubHVhIiAgIHNjcmlwdHNbMTJdWyJjIl0gPSB0cnVlIHNjcmlwdHNbMTJdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwa1wxXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMTFcMFwwXDBqXDFcMFwwXDFcMVwzMFwzMFwyXDBcMEZcMEBcMExAwFwwZIBcMFwxgYBcMFwwx8DAXDDMXDDBXDHkgFwwXDHMQMFcMeRcMFwxXDFcMzDAXDaAjYBBXDHMwUFcM+SBXDBcMcxcMcJcM+SBXDBcMeJcMVwwXDBcMzDAXDSAxkFCXDDHgcJcM1wxwlwyXDBBXDJcM1wwhkJCXDCHQkNcNYeCQ1w1xkJCXDDHwsNcNcdcMsRcNeSBgFwyXDZCRFwwTILEXDNkXDJcMFwxJEJcMFwwxFwxXDBcMFw2wkRcMCRCgFwwJlwwgFwwXDMwXDBcMIBcOIBcMYrpQFwwXDBqQfhcMTI3X4BBXDFcMzCAXDSAxkBCXDDHgMJcMVwxwVwyXDBBQVw1XDCGQUJcMIdBQ1wzh4FDXDPGQUJcMMfBw1wzx1wxxFwz5ICAXDJcNkFEXDBMgcRcMWRcMVwwXDEkQVwwXDDEXDBcMFwwXDbBRFwwJEGAXDAmXDCAXDDLXDCAXDBcMTFBXDFcMFwKwUWLXArBRYxcCoHGjEvBXDBcMEqBQY5KgceOSlwxyI9cCkGBjVwKXDHHkOtAgFwwXDZBQlwwXDfBSFwyQVwxXDlcMIBcMYBcMSSBgFwxXDhcMFwxkVw2gUhcMFwxMoFEXDIkgVwwXDFcOFwwgZJcNkFJXDBcIkFcMFwwXDMwXDBcMIAmXDCAXDBcNkFJXDBcIlwxXDBcMFwzMIBcN4BcNkFJXDBcN8FFXDJcMzGAR1wyXDMwgFw2gFw2wUlcMFw3XDFKXDJGQUpcMEyBylwyZIFcMFwxT4HBXDIkgVwwXDFcOFwwXDGTXDbBSVwwXDdcMUtcMlw3QUtcMiSBgFwwXDhcMIGVXDbBSlwwXDEywUtcMoaBSVwwJIGAXDFcOFwwXDGXXDZBRFwwRsFKXDBMwctcMsaBSVwwZFwxgFwxJEFcMFwwXDZBRFwwRoFLXDAkQVwwXDFcNkFJXDBcIlwxXDBcMFwzMMBcOIBcNkFJXDBcN8FFXDJcMzFcMEhcMlwzMMBcN4AsXDFcMFwwbEFcMFwwrIFcMFwwwFwxgFwy5IGAXDBcMzFcMMxcM1wzMMBcMIBcNkJEXDBBQlwxMlwwJEJcMFwxJlwwgFwwXDfCzFwzXDhcMFwymVw2QkRcMEaCTFwwJEJcMFwxXDBcMlwwXDJGgkxcMCSCXDBcMVwiXDJcMFwwXDMwwFwxgFw2Qk1cMEaCTFwwJIJcMFwxXDhcMFwymlw2XDJNXDBcOFwwXDKXXDMwwFwwgFwzMED5XDEyN1wwXDJcMFwzJEKAXDBcMzCA+FwxMjdcNkFEXDBGgUtcMCRBXDBcMVw2XDFFXDBcMTKBTVwyJIFcMFwxRkFEXDCAXDFcMFwyZEFcMFwxRlwxRVwwTMHNXDLBgVwwXDBkgYBcMUxcMc5cMmSBXDBcMUxBzlwyZIFcMFwxXDhAgZtGwU1cMFw4QFwxnUHBXDE0XDCGgU5cMMHBXDE0XDBdwYFcMqzBXDBcMFw4gFwxnoZcMU9cMMBcMVwwXDKkgVwwXDGiXDFcMFwwXDMwwFwyM4DGQURcMFwwXDJcMFwz5EFcMFwxwFwxXDBcM1w2Qk9cMFw3gkJcNEGCXDE1XDCAXDKAXDPGQk9cMMdCw1w1x4LDXDVcNkNPXDBcN8NDXDZcN1wzRFw2JIKAXDJGQkRcMIzCT1w0pFwyXDBcMWRCXDBcMFw0XDJcMFwwRsJEXDBkQoBcMEZCTVwwgFwygFwzZIJcMFwxhsJJXDCHXDJLXDWHXDJQXDWkgoBcMMZCUFwwXDMxgNBcNVwzMIBcNIDMwlBcNUbDSVwwR1wz0Vw2gFwzgFw0wFwzgFw0XDFEXDE3XDBkg1wwXDKGg1FcMORCXDBcMszCUFw1RsNJXDBHXDPRXDaBw1wxN1wwwcNcMTdcMFwxRFwxN1wwZINcMFwyhlwzUlww5EJcMFwyXDMwXDBcNIDGwklcMMdcMspcNVw2Q0pcMFwxMoNKXDYkg1wwXDFcMTWDQFw25IJcMFwxXDjAXDKTzMJQXDVGw0lcMEdcM9FcNoBcM4BcNMBcM4BcNFwxRFwxN1wwZINcMFwyhoNJXDDkQlwwXDLGQkpcMMxC0lw1QYNcMThcMORCgFwxxsJJXDDHXDLLXDXHwtJcNVwwXDNcMFw15EJcMFwxxkJKXDDMXDLTXDXkglwwXDHiQlwwXDBcMzDAXDCAxkJKXDDMQtNcNURcM1wwXDDkQoBcMYRcMlwwXDDGwklcMMdcMstcNcdcMtBcNeRCgFwwxsJJXDDHXDLLXDXHgtNcNeRCgFwwXDMwQFwxOYDGQURcMFwxwlwxOVww5EFcMFwxwVwxXDIwXDBcMFwygFwyQUJcMjBcMN1BglwzXDaCVFwwXDfCVFw0QFwygFwzJEJcMFwxXDZCVVwwXDeCVVw0QcJcMjFcMIFcMlwyMlwwJIKAXDFcOFwwXDKqXDZcMlVcMFwxMkJLXDSBglwyMlwwJIKAXDFcOFwwgqxcNlwyVVwwXDEywlZcNCRCXDBcMVw2QlZcMFwxMkJXXDSBglwyM1wwJIKAXDFcOFwwXDKuXDZcMldcMFwzMVwwTFw0XDMwgFw2gFwxwlwyM1wwQFwygFwygVwyXDI0XDBcMjmCXDJcNEaCVFwwR8LUXDSAXDJcMFw0ZEJcMFwxRkJVXDBHgtVcNIHCXDIxXDDBXDJcMjJcMGSCgFwxXDhAXDKqRlwyVVwwTELLXDTBglwyMlwwZIKAXDFcOECCrEZcMlVcMEzC1lw0ZEJcMFwxRkJWXDBMQtdcNMFCXDI0XDBkgoBcMVw4QFwyrlw2Qk1cMEZcMldcMCSCXDBcMVw4XDBcMrFcNkJEXDBGglhcMCRCXDBcMVw2glhcMFw4XDCCsVw2glhcMFw4XDBcMrJcNkJEXDBGXDJZXDAkQlwwXDFcNkJNXDBGXDJZXDAkglwwXDFcOFwwgrLsXDFcMVwwXDjAXDGzxkFEXDBcMcJcMjVcMEZCWVwwXDI5QlwyXDTkQVwwXDHGQVlcMFw2gktcMNJcMYJcM1w4wFwxtMZBRFwwXDZcMlpcMORBXDBcMcZcMUBcMMxBwFwz5IFcMFwxXDZCWlwwXDeCWlw0XDfCWlw0QVwyXDI3XDCGQltcMIyCSlw1pFwyXDBcMSSCXDBcMEZCW1wwTELSXDTBglwyN1wwZEKAXDFHwsBcM0xcMsFcNGSCXDBcMUzC21w0ZFwyXDFcMVwzMEAggEzDQVw2ZINcMFwxjFwz3Fw2pINcMFwxokNcMFwwnsNcMzCAhkNaXDCHg1pcN4dDXFxcN8BcM4BcNlwzXDRcMFwwpIOAXDHMg1xcXDfkg1wwXDHMw9xcN+SDXDBcMVwxMVw0XDBcMEFcNFwyOVwwhkRPXDCHRF1cOcFEXDI4XDBcM1w1gFwwpISAXDHsRFwxXDBcOMBcNLvshFwxXDBcOMCEu8xcNF5cNEyFXFxcN2SFXDBcMYFcNVwyOVwwxoVdXDDkRIBcMsxEXlw05IRcMFwxzITeXDnkhFwwXDHMxN5cOUFcNVwyOVww5ISAXDFcMVw1XDI5XDBMxdtcOWRcNVwxXDFcMzDAXDSARsZaXDBHXDbfXDEyR0bfXDEyh4ZfXDEyxkZbXDDMhspcMTPkXDZcMFwxZIZcMFwwXApEhlwxMiBAXDS6XDMwwFwxgI5GhFwxMpLGX1wxM86GhlwxMlwxNIeGXDEyUlw3YFwxM1wxM0dcN1wxNFwKXDSHXDEzXDEzRWBcCkBcNIBcMTJpRVwwXDDqRfpcMTI3TIVgXDRkRVwwXDFMxWBcOWSFXDBcMWJFXDBcMJ7DXDE0gCBcMGFcClwzMIBcMIBMRWFcOWRFXDBcMZ5cM1wxM4BMhWFcN8ZcNVpcMFwxRiBcMGRFXDBcMkzFYVw3xsVdXDBkhYBcMYzFYFw5pIVcMFwxokVcMFwwnsNcCoCMRWFcOaRFXDBcMYRcNFwwXDCMXDXcXAqkhVwwXDGiRVwwXDCeg1w4gIZFRFwwwVw1XCJcMFwxMobNXAokhlwwXDFMRuJcCmRcNlwwXDGkRVwwXDCGhVlcMMyFYlw25IVcMFwxzMXiXDEx5Fw1XDBcMaSFXDBcMMxcNWNcMTHkhVwwXDFcMTKG4lwxMSSGXDBcMVwxMkZjXDEyJEZcMFwxXDEyhuNcMTGAXDZcMFw2JEaAXDFcMTLG41wxMYBcNoBcCsxcNmRcNuSGXDBcMVwxRyBcMENcN1wwXDAkRlwwXDNcNkZbXDBcMTJGZFwxMoyG5FwxMaRcNlwwXDEkRlwwXDCew/9cMTI3aUJcMFww6sLeXDEyN0ZCW1wwTFwy01w0ZIJcMFwxYkJcMFwwXDMwwFwwgEZCW1wwTELTXDTEXDJcMFwwZEKAXDEmXDCAXDCTXDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFwxM0FkanVzdCBUZW1wb1wyMCtUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb25cNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw2cHJpbnRcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVw0XDEzYXVkaW9fcmVnaW9uXDQlUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcIkNob29zZSBob3cgeW91IHdhbnQgdG8gYWRqdXN0IEJQTVw0XDd2YWx1ZXNcNFwyNUNob29zZSBob3cgdG8gYWRqdXN0IEJQTVwyMCtGcm9tIHByb2plY3QgdGVtcG8gKGJlZ2lubmluZyBvZiB0aW1lbGluZSlcMTlcMlwwXDBcMFwwXDBcMFwwXDRcMTNTZXQgeW91ciBCUE1cMTlcM1wwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFwzb2JcNFw3RGlhbG9nXDRcMTFCUE0gQ2hhbmdlXDRcM2F2XDRcM3RwXDRcOVRlbXBvcmFsXDRcCnRpbWVwb3NfdFw0XDhTZXNzaW9uXDRcMjBub21pbmFsX3NhbXBsZV9yYXRlXDRcM3RtXDRcOVRlbXBvTWFwXDRcNXJlYWRcNFwxM3RhcmdldF90ZW1wb1w0XDIzcXVhcnRlcnNfcGVyX21pbnV0ZV9hdFwwXDRcMzBEaWFsb2cgd2FzIGNhbmNlbGVkLiBFeGl0aW5nLlw0XDdudW1iZXJcNFw1dGV4dFw0XDE0bnVtZXJpY192YWx1ZVw0XDl0b251bWJlclw0XDVuYW1lXDRcN3NvdXJjZVw0XDE0dG9fZmlsZXNvdXJjZVw0XDVwYXRoXDRcOWZpbGVwYXRoXDRcMlwiXDRcMTFleHRyYWN0QlBNXDRcCkx1YURpYWxvZ1w0XDE1RXN0aW1hdGUgVGVtcG9cNFw0cnVuXDRcMTF3cml0ZV9jb3B5XDRcNGR1clwxXDFcNFwKc2V0X3RlbXBvXDRcNlRlbXBvXDE5XDRcMFwwXDBcMFwwXDBcMFw0XDNzdFwxOXhcMFwwXDBcMFwwXDBcMFw0XDNldFw0XDI1YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kXDRcMTdDaGFuZ2UgVGVtcG8gTWFwXDRcN3VwZGF0ZVw0XDMxYWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kXDRcMjZjb21taXRfcmV2ZXJzaWJsZV9jb21tYW5kXDRcMTNhYm9ydF91cGRhdGVcNFwyN0JQTSBub3QgZm91bmQgaW4gZmlsZW5hbWUuXDRcMjkvb3B0L0xvZ2ljYWxBcmRvdXIvbWluaWJwbSAgXDRcMTYgPiAvdG1wL2JwbS50eHRcNFwzb3NcNFw4ZXhlY3V0ZVw0XDVmaWxlXDRcM2lvXDRcNW9wZW5cNFwxMy90bXAvYnBtLnR4dFw0XDJyXDRcOGNvbnRlbnRcNFw1KmFsbFw0XDZjbG9zZVw0XDExYnBtX3N0cmluZ1w0XDZtYXRjaFw0XDI3RXN0aW1hdGVkIEJQTTolcyooWyVkJS5dKylcNFw1c294IFwwMjA2IC10IHJhdyAtciA0ODAwMCAtZSBmbG9hdCAtYyAxIC0gfCBicG0gPiAvdG1wL2JwbS50eHRcNFwKKFslZCUuXSspXDRcMTFicG1fbnVtYmVyXDRcNG51bVw0XDEyZmlyc3RyZXN1bHRcNFwxNGN1cnJlbnRfdGVtcG9cNFwyMmZpbmRfdHJhY2tfZm9yX3JlZ2lvblw0XApibGFuayBpcyBcNFw5YnBtc2hpZnRcNFw3QVJET1VSXDRcN0x1YUFQSVw0XDVWYW1wXDQnbGliYXJkb3VydmFtcHBsdWdpbnM6cW0tYmFyYmVhdHRyYWNrZXJcNFw4U2Vzc2lvblw0XDE5UnViYmVyYmFuZCBSZWdpb25zXDRcNWl0ZXJcNFw2aXNuaWxcNFwxMVJ1YmJlcmJhbmRcNFw5cmVhZGFibGVcNFwxNnJlYWRhYmxlX2xlbmd0aFwxOVwwXDBcMFwwXDBcMFwwXDBcNFwxNVByb2dyZXNzV2luZG93XDRcMTR2YW1wX2NhbGxiYWNrXDRcMTJyYl9wcm9ncmVzc1w0XDhhbmFseXplXDRcN3BsdWdpblw0XDIxZ2V0UmVtYWluaW5nRmVhdHVyZXNcNFwzYXRcNFw5UmVhbFRpbWVcNFwxNXJlYWxUaW1lMkZyYW1lXDRcCnRpbWVzdGFtcFwxOVwyXDBcMFwwXDBcMFwwXDBcMTlcM1wwXDBcMFwwXDBcMFwwXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDZyZXNldFw0XDljYW5jZWxlZFwxOVw4XDBcMFwwXDBcMFwwXDBcNFw1ZG9uZVw0XDIxc2V0X3N0cmVjaF9hbmRfcGl0Y2hcNFw4cHJvY2Vzc1w0XDE5bmV3IGF1ZGlvIHJlZ2lvbjogXDRcN2xlbmd0aFw0XDEydG9fc3RhdGVmdWxcNFwzaWRcNFw5cGxheWxpc3RcNFwxNGNsZWFyX2NoYW5nZXNcNFwxNHJlbW92ZV9yZWdpb25cNFwxMWFkZF9yZWdpb25cNFw5cG9zaXRpb25cNFwyNmFkZF9zdGF0ZWZ1bF9kaWZmX2NvbW1hbmRcNFwyNHRvX3N0YXRlZnVsZGVzdHJ1Y3RpYmxlXDFcMFwwXDBcMFwwXDdcMFwwXDBcMEVcMFwwXDBXXDBcMFwwXDFcMFw1XDI0XDBcMFwwRlwwQFwwgFwwXDBcMGSAXDBcMWJAXDBcMFwzMEBcMICDXDBcMFwwplwwXDBcMYxAQFwwXDGBXDBcMKSAgFwxolwwXDBcMFwzMFwwXDKA3FwwXDBcMSHAgIFcMzBAXDGA3FwwXDBcMSFcMMFcMVwzMIBcMIDDXDCAXDDmXDBcMFwxXDMwQFwwgMNcMFwwXDDmXDBcMFwxJlwwgFwwXDVcMFwwXDBcNFw5dG9udW1iZXJcNFw2bWF0Y2hcNFw3XiglZCspXDE5XDJcMFwwXDBcMFwwXDBcMFwxOVwzXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwWlwwXDBcMGFcMFwwXDBcMFwwXDRcMTZcMFwwXDBcMTFcMIBcMEtcMFwxXDBKQECASsBAgUpAQYJKwEGDK0CAXDBGXDBCXDBHQMJcMIGAXDJcMMBcMFwwXDBkgIBcMYzAwlwwpIBcMFwxplwwXDBcMSZcMIBcMFwxMlwwXDBcMFw0XDV0eXBlXDRcNmVudHJ5XDRcNGtleVw0XDV0ZXh0XDRcOGRlZmF1bHRcNFwwMDQxMjBcNFw2dGl0bGVcNFw0YnBtXDRcCkx1YURpYWxvZ1w0XDdEaWFsb2dcNFwxM0NoYW5nZSB0ZW1wb1w0XDRydW5cMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwZFwwXDBcMGtcMFwwXDBcMFwwXDRcMTVcMFwwXDBcMTFcMIBcMEvAXDBcMEpAQIBKwECBSsBAgitAgFwwRkBBXDBHgMFcMIHAXDFcMMBcMFwwXDBkgIBcMYxcMMJcMKRAXDBcMURcMFwwXDAmXDCAXDBcOVwwXDBcMFw0XDV0eXBlXDRcNmxhYmVsXDRcNnRpdGxlXDIwRkludmFsaWQgaW5wdXQhIFBsZWFzZSBlbnRlciBhIDIgb3IgMyBkaWdpdCBudW1iZXIgKGRlY2ltYWxzIGFsbG93ZWQpLlw0XDV0ZXh0XDRcCkx1YURpYWxvZ1w0XDdEaWFsb2dcNFwxNEludmFsaWQgSW5wdXRcNFw0cnVuXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMI9cMFwwXDCVXDBcMFwwXDFcMFw2XDE3XDBcMFwwRlwwQFwwR0DAXDCAXDBcMFwwwYBcMFwwXDHBXDBcMGSAXDBcMmJAXDBcMFwzMIBcMYCGXDBAXDCHQEBcMcBcMFwwXDBcMVwxXDFcMEHBXDBcMKSAXDBcMkBcMFwwXDFmXDBcMFwxJlwwgFwwXDVcMFwwXDBcNFw3c3RyaW5nXDRcNm1hdGNoXDRcMzEoJWQlZD8lZD8pWy1fXT8lcypbYkJdW3BQXVttTV1cMTlcMVwwXDBcMFwwXDBcMFwwXDRcMjZbYkJdW3BQXVttTV0lcypbXy1dPyglZCspXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMONcMFwwXDDsXDBcMFwwXDFcMFwKXDI0XDBcMFwwRlwwQFwwTEDAXDBkgFwwXDFMgMBcMGRcMFwxXDFcMzDAXDKATMFAXDJkgVwwXDGMXDHBXDKkgVwwXDHMQUFcM0BcMlwwXDDkgYBcMcyBwVwz5IFcMFwx4kFcMFwwXDMwXDBcMIBmXDFcMFwxaUBcMFww6kD8XDEyN0bAQVwwgVwwXDJcMGRAXDBcMSZcMIBcMFw5XDBcMFwwXDRcOFNlc3Npb25cNFwxMWdldF90cmFja3NcNFw1aXRlclw0XDl0b190cmFja1w0XDlwbGF5bGlzdFw0XDEzcmVnaW9uX2J5X2lkXDRcNmlzbmlsXDRcN2Fzc2VydFwxOVwwXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDMxXDFcMFwwIVwxXDBcMFwyXDBcNlw4XDBcMFwwhVwwXDBcMIxcMEBcMVw1XDGAXDBcMThcMYFcMEFBXDBcMKVcMFwwXDKmXDBcMFwwJlwwgFwwXDJcMFwwXDBcNFw5cHJvZ3Jlc3NcNFwKQW5hbHl6aW5nXDJcMFwwXDBcMVwxOFwxXDE1XDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwiXDFcMFwwJFwxXDBcMFwyXDBcNlw4XDBcMFwwhVwwXDBcMIxcMEBcMVw1XDGAXDBcMThcMYFcMEFBXDBcMKVcMFwwXDKmXDBcMFwwJlwwgFwwXDJcMFwwXDBcNFw5cHJvZ3Jlc3NcNFwxMVN0cmV0Y2hpbmdcMlwwXDBcMFwxXDE4XDFcMTVcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc2NyaXB0c1sxMl1bIm4iXSA9ICJCUE0gY2hhbmdlIC0gQWRqdXN0ICh0aW1lc3RyZXRjaCkgdGVtcG8gb2YgYW4gYXVkaW8iICAgc2NyaXB0c1sxM10gPSB7fSBzY3JpcHRzWzEzXVsicyJdID0gImFyZG91ciB7XApcOVtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKXDluYW1lID0gXCJTdGVtIFNlcGFyYXRpb25cIixcClw5YXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApkZXNjcmlwdGlvbiA9IFtbXApQZXJmb3JtIHN0ZW0gc2VwYXJhdGlvbiBvbiBhbiBpbXBvcnRlZCBzb25nXApdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcCmxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCmxvY2FsIGNvdW50ID0gMFwKbG9jYWwgbWlkaV9yZWdpb25cClwKZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCgpOml0ZXIoKSBkb1wKICAgIGNvdW50ID0gY291bnQgKyAxXAogICAgaWYgcjp0b19hdWRpb3JlZ2lvbigpOmlzbmlsKCkgdGhlblwKICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiU3RlbSBTZXBhcmF0aW9uXCIsIFwiVGhlIHNlbGVjdGVkIHJlZ2lvbiBpcyBub3QgYW4gYXVkaW8gcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICAgICAgcHJpbnQobWQ6cnVuKCkpXAogICAgICAgIG1kID0gbmlsXAogICAgICAgIGNvbGxlY3RnYXJiYWdlKClcClwKICAgICAgICByZXR1cm5cCiAgICBlbHNlXAogICAgICAgIGF1ZGlvX3JlZ2lvbiA9IHJcCiAgICBlbmRcCmVuZFwKXAppZiBjb3VudCB+PSAxIHRoZW5cCiAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiU3RlbSBTZXBhcmF0aW9uXCIsIFwiUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICBwcmludChtZDpydW4oKSlcCiAgICBtZCA9IG5pbFwKICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICByZXR1cm5cCmVuZFwKXApsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAgeyB0eXBlID0gXCJjaGVja2JveFwiLCBrZXkgPSBcIkRydW1zXCIsIGRlZmF1bHQgPSB0cnVlLCB0aXRsZSA9IFwiRHJ1bXNcIiB9LFwKICB7IHR5cGUgPSBcImNoZWNrYm94XCIsIGtleSA9IFwiVm9jYWxzXCIsIGRlZmF1bHQgPSB0cnVlLCB0aXRsZSA9IFwiVm9jYWxzXCIgfSxcCiAgeyB0eXBlID0gXCJjaGVja2JveFwiLCBrZXkgPSBcIkJhc3NcIiwgZGVmYXVsdCA9IHRydWUsIHRpdGxlID0gXCJCYXNzXCIgfSxcCiAgeyB0eXBlID0gXCJjaGVja2JveFwiLCBrZXkgPSBcIk90aGVyXCIsIGRlZmF1bHQgPSB0cnVlLCB0aXRsZSA9IFwiT3RoZXJcIiB9LFwKfVwKXAotLSBEaXNwbGF5IHRoZSBkaWFsb2dcCmxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyhcIlNlbGVjdCBPcHRpb25zXCIsIGRpYWxvZ19vcHRpb25zKVwKbG9jYWwgcnYgPSBvZDpydW4oKVwKXApcClwKXAotLSBDbGVhbnVwIHRoZSBkaWFsb2dcCmNvbGxlY3RnYXJiYWdlICgpXApcClwKbG9jYWwgcm4gPSBhdWRpb19yZWdpb246bmFtZSgpXApsb2NhbCBzb3VyY2UgPSBhdWRpb19yZWdpb246c291cmNlKDApOnRvX2ZpbGVzb3VyY2UoKTpwYXRoKClcCnByaW50KHNvdXJjZSlcCmxvY2FsIGZpbGVwYXRoID0gc291cmNlXApcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKXAotLSBFeGFtcGxlIHVzYWdlOlwKbG9jYWwgZmlsZW5hbWUgPSBxdW90ZWRmaWxlcGF0aFwKXApyZW5hbWUgPSBcImNwIFwiLi5xdW90ZWRmaWxlcGF0aC4uXCIgL2hvbWUvanVzdGluL2RlbXVjcy9pbnB1dC9zZXAud2F2XCJcClwKXApcClwKIGNvbW1hbmQgPSAneHRlcm0gLWUgXCIvaG9tZS9qdXN0aW4vZGVtdWNzL3J1bi5zaCBzZXAud2F2XCInXApcClwKXApcClwKXApcCi0tIE9wZW4gdGhlIGZpbGUgXCJtc2NvcmUuc2hcIiBmb3Igd3JpdGluZ1wKbG9jYWwgZmlsZSA9IGlvLm9wZW4oXCJyZW5hbWUuc2hcIiwgXCJ3XCIpXApcClwKXAppZiBub3QgZmlsZSB0aGVuXAogICAgLS0gSGFuZGxlIGVycm9yIGlmIGZpbGUgY291bGRuJ3QgYmUgb3BlbmVkXAogICAgcHJpbnQoXCJFcnJvcjogRmFpbGVkIHRvIGNyZWF0ZSBmaWxlICdtc2NvcmUuc2gnXCIpXAplbHNlXAogICAgLS0gV3JpdGUgdGhlIGNvbW1hbmQgY29udGVudCB0byB0aGUgZmlsZVwKXApcCiAgICBmaWxlOndyaXRlKHJlbmFtZSAuLiBcIlxcblwiKSAtLSBXcml0ZSB0aGUgY29tbWFuZCB0byB0aGUgZmlsZVwKXAogICAgLS0gQ2xvc2UgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKClcClwKICAgIHByaW50KFwiRmlsZSAnbXNjb3JlLnNoJyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSFcIilcClwKICAgIC0tIERlbGV0ZSB0aGUgZmlsZSBhZnRlciBwcmludGluZyB0aGUgc3VjY2VzcyBtZXNzYWdlXApcCmVuZFwKXApsb2NhbCBtdiA9IFwibXYgcmVuYW1lLnNoIC90bXAvcmVuYW1lLnNoXCJcClwKb3MuZXhlY3V0ZShtdilcClwKY2htb2QgPSBcImNobW9kICt4IHJlbmFtZS5zaFwiXApcCm9zLmV4ZWN1dGUoY2htb2QpXApcCm9zLmZvcmtleGVjKFwiL2Jpbi9iYXNoXCIsIFwiL3RtcC9yZW5hbWUuc2hcIilcClwKb3MuZXhlY3V0ZShjb21tYW5kKVwKXApcClwKXAotLSBDaGVjayBpZiB0aGUgZGlhbG9nIHdhcyBjb25maXJtZWRcCmlmIHJ2IHRoZW5cCiAgLS0gRm9yIGVhY2ggb3B0aW9uLCBleGVjdXRlIGNvZGUgaWYgdGhlIGNoZWNrYm94IGlzIHNlbGVjdGVkXAogIGlmIHJ2LkRydW1zIHRoZW5cCiAgICAtLSBDb2RlIHRvIGV4ZWN1dGUgaWYgRHJ1bXMgaXMgc2VsZWN0ZWRcCiAgICAgbG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpXAogICAgcHJpbnQoXCJEcnVtcyBzZWxlY3RlZFwiKVwKICAgICAgIGZpbGVzOnB1c2hfYmFjayhcIi9ob21lL2p1c3Rpbi9kZW11Y3Mvb3V0cHV0L2h0ZGVtdWNzL3NlcC9kcnVtcy53YXZcIilcClwKICAgIGxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXAogICAgLS0gUmVwbGFjZSBBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lIGFuZCBvdGhlciBjb25zdGFudHMgd2l0aCBrbm93biBpbnRlZ2VyIHZhbHVlcyBpZiB0aGV5IHJldHVybiBuaWxcCiAgICBFZGl0b3I6ZG9faW1wb3J0KGZpbGVzLFwKICAgICAgICBFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsICAtLSBNb2RlXAogICAgICAgIEVkaXRpbmcuSW1wb3J0QXNUcmFjaywgICAgICAgIC0tIEltcG9ydCBhcyBUcmFja1wKICAgICAgICBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LCAgICAtLSBCZXN0IHNvdXJjZSBxdWFsaXR5XAogICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIFJlcGxhY2Ugd2l0aCBhY3R1YWwgaW50ZWdlciBpZiBuZWVkZWRcCiAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gUmVwbGFjZSB3aXRoIGFjdHVhbCBpbnRlZ2VyIGlmIG5lZWRlZFwKICAgICAgICBwb3MsXAogICAgICAgIEFSRE9VUi5QbHVnaW5JbmZvKCksXAogICAgICAgIEFSRE9VUi5UcmFjaygpLFwKICAgICAgICBmYWxzZVwKICAgIClcClwKXAogIGVuZFwKXAogIGlmIHJ2LlZvY2FscyB0aGVuXAogICAgLS0gQ29kZSB0byBleGVjdXRlIGlmIFZvY2FscyBpcyBzZWxlY3RlZFwKICAgIHByaW50KFwiVm9jYWxzIHNlbGVjdGVkXCIpXAogICAgIGxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKVwKXApcClwKICAgIGZpbGVzOnB1c2hfYmFjayhcIi9ob21lL2p1c3Rpbi9kZW11Y3Mvb3V0cHV0L2h0ZGVtdWNzL3NlcC92b2NhbHMud2F2XCIpXApcCiAgICBsb2NhbCBwb3MgPSBUZW1wb3JhbC50aW1lcG9zX3QoMClcClwKICAgIC0tIFJlcGxhY2UgQVJET1VSLk1pZGlUcmFja05hbWVTb3VyY2UuU01GRmlsZUFuZFRyYWNrTmFtZSBhbmQgb3RoZXIgY29uc3RhbnRzIHdpdGgga25vd24gaW50ZWdlciB2YWx1ZXMgaWYgdGhleSByZXR1cm4gbmlsXAogICAgRWRpdG9yOmRvX2ltcG9ydChmaWxlcyxcCiAgICAgICAgRWRpdGluZy5JbXBvcnREaXN0aW5jdEZpbGVzLCAgLS0gTW9kZVwKICAgICAgICBFZGl0aW5nLkltcG9ydEFzVHJhY2ssICAgICAgICAtLSBJbXBvcnQgYXMgVHJhY2tcCiAgICAgICAgQVJET1VSLlNyY1F1YWxpdHkuU3JjQmVzdCwgICAgLS0gQmVzdCBzb3VyY2UgcXVhbGl0eVwKICAgICAgICAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBSZXBsYWNlIHdpdGggYWN0dWFsIGludGVnZXIgaWYgbmVlZGVkXAogICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIFJlcGxhY2Ugd2l0aCBhY3R1YWwgaW50ZWdlciBpZiBuZWVkZWRcCiAgICAgICAgcG9zLFwKICAgICAgICBBUkRPVVIuUGx1Z2luSW5mbygpLFwKICAgICAgICBBUkRPVVIuVHJhY2soKSxcCiAgICAgICAgZmFsc2VcCiAgICApXApcClwKICBlbmRcClwKICBpZiBydi5CYXNzIHRoZW5cCiAgIGxvY2FsIGZpbGVzID0gQy5TdHJpbmdWZWN0b3IoKVwKICAgIC0tIENvZGUgdG8gZXhlY3V0ZSBpZiBCYXNzIGlzIHNlbGVjdGVkXAogICAgcHJpbnQoXCJCYXNzIHNlbGVjdGVkXCIpXAogICAgIGZpbGVzOnB1c2hfYmFjayhcIi9ob21lL2p1c3Rpbi9kZW11Y3Mvb3V0cHV0L2h0ZGVtdWNzL3NlcC9iYXNzLndhdlwiKVwKXAogICAgbG9jYWwgcG9zID0gVGVtcG9yYWwudGltZXBvc190KDApXApcCiAgICAtLSBSZXBsYWNlIEFSRE9VUi5NaWRpVHJhY2tOYW1lU291cmNlLlNNRkZpbGVBbmRUcmFja05hbWUgYW5kIG90aGVyIGNvbnN0YW50cyB3aXRoIGtub3duIGludGVnZXIgdmFsdWVzIGlmIHRoZXkgcmV0dXJuIG5pbFwKICAgIEVkaXRvcjpkb19pbXBvcnQoZmlsZXMsXAogICAgICAgIEVkaXRpbmcuSW1wb3J0RGlzdGluY3RGaWxlcywgIC0tIE1vZGVcCiAgICAgICAgRWRpdGluZy5JbXBvcnRBc1RyYWNrLCAgICAgICAgLS0gSW1wb3J0IGFzIFRyYWNrXAogICAgICAgIEFSRE9VUi5TcmNRdWFsaXR5LlNyY0Jlc3QsICAgIC0tIEJlc3Qgc291cmNlIHF1YWxpdHlcCiAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gUmVwbGFjZSB3aXRoIGFjdHVhbCBpbnRlZ2VyIGlmIG5lZWRlZFwKICAgICAgICAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBSZXBsYWNlIHdpdGggYWN0dWFsIGludGVnZXIgaWYgbmVlZGVkXAogICAgICAgIHBvcyxcCiAgICAgICAgQVJET1VSLlBsdWdpbkluZm8oKSxcCiAgICAgICAgQVJET1VSLlRyYWNrKCksXAogICAgICAgIGZhbHNlXAogICAgKVwKXAogIGVuZFwKXAogIGlmIHJ2Lk90aGVyIHRoZW5cCiAgICAtLSBDb2RlIHRvIGV4ZWN1dGUgaWYgT3RoZXIgaXMgc2VsZWN0ZWRcCiAgICAgbG9jYWwgZmlsZXMgPSBDLlN0cmluZ1ZlY3RvcigpXAogICAgIGZpbGVzOnB1c2hfYmFjayhcIi9ob21lL2p1c3Rpbi9kZW11Y3Mvb3V0cHV0L2h0ZGVtdWNzL3NlcC9vdGhlci53YXZcIilcClwKICAgIGxvY2FsIHBvcyA9IFRlbXBvcmFsLnRpbWVwb3NfdCgwKVwKXAogICAgLS0gUmVwbGFjZSBBUkRPVVIuTWlkaVRyYWNrTmFtZVNvdXJjZS5TTUZGaWxlQW5kVHJhY2tOYW1lIGFuZCBvdGhlciBjb25zdGFudHMgd2l0aCBrbm93biBpbnRlZ2VyIHZhbHVlcyBpZiB0aGV5IHJldHVybiBuaWxcCiAgICBFZGl0b3I6ZG9faW1wb3J0KGZpbGVzLFwKICAgICAgICBFZGl0aW5nLkltcG9ydERpc3RpbmN0RmlsZXMsICAtLSBNb2RlXAogICAgICAgIEVkaXRpbmcuSW1wb3J0QXNUcmFjaywgICAgICAgIC0tIEltcG9ydCBhcyBUcmFja1wKICAgICAgICBBUkRPVVIuU3JjUXVhbGl0eS5TcmNCZXN0LCAgICAtLSBCZXN0IHNvdXJjZSBxdWFsaXR5XAogICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIFJlcGxhY2Ugd2l0aCBhY3R1YWwgaW50ZWdlciBpZiBuZWVkZWRcCiAgICAgICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gUmVwbGFjZSB3aXRoIGFjdHVhbCBpbnRlZ2VyIGlmIG5lZWRlZFwKICAgICAgICBwb3MsXAogICAgICAgIEFSRE9VUi5QbHVnaW5JbmZvKCksXAogICAgICAgIEFSRE9VUi5UcmFjaygpLFwKICAgICAgICBmYWxzZVwKICAgIClcCmVuZFwKZW5kXApjb2xsZWN0Z2FyYmFnZSgpXApcClwKXApcClwKXApcCmVuZCBlbmRcClwKXApcClwKXAoiICBzY3JpcHRzWzEzXVsiYSJdID0ge30gc2NyaXB0c1sxM11bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL3N0ZW1zZXAubHVhIiAgIHNjcmlwdHNbMTNdWyJjIl0gPSB0cnVlIHNjcmlwdHNbMTNdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFww4VwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMOFcMFwwXDBcMVwxXDAyODVcMVwwXDBGXDBAXDBMQMBcMGSAXDBcMYGAXDBcMMRcMFwwXDBcN8HAXDBcMTJcMUFcMiSBXDBcMVwxMkFBXDIkXDFcMVwxXDMwwFw2gI2AQVwxXDEywsFcMySCXDBcMVwxMlwyQlw0JIJcMFwxXCJcMlwwXDBcMzDAXDSAXDZCQlwwXDeCQlw0QcJcMlwwgVwyXDNcMMZCQlwwx0LDXDXHgsNcNVw2Q0JcMFw3w0NcNlw3XDNEXDYkgoBcMkZCRFwwjIJEXDSkXDJcMFwxZEJcMFwwXDRcMlwwXDBGwkRcMGRCgFwwJlwwgFwwXDMwXDBcMIBcOMBcMYopQVwwXDCqQfhcMTI3X4BBXDFcMzCAXDSAXDZBQlwwXDeBQlwyQcFcMlwwgUFcNVwwxkFCXDDHQcNcM8eBw1wzXDZCQlwwXDfCQ1w0XDdcMkRcNCSBgFwyRkFEXDCMgURcMqRcMVwwXDFkQVwwXDBcNFwxXDBcMEbBRFwwZEGAXDAmXDCAXDBcMTFcMVwwXDJLXDFcMVwwSsFFi0pBRoxKwUaNSkFGjotcMVwxXDCKwUWLikFHjIrBRo2KQUeOy1wxXDFcMMrBRYvKgUeMysFGjcqBR45cMTFcMlwxXDBcCsJFi1wKwkeMXArCRo1cCsJHjitBXDBcMkZBQlwwR1wxyFwygUFcOFwwwFwxXDBcMmSBgFwxjIHEXDKkgVwwXDHGwURcMORBgFwwxlwxRVwwzIHIXDPkgVwwXDFcNlwyRVwwXDEywkhcNIGCXDBcMCSCgFwxXDEyXDJJXDQkglwwXDFcMTJCSVw0JIJcMFwxRkJEXDCAXDJcMFw0ZEJcMFwxQFwyXDBcNIGCXDlcMMBcMoBcNFwxg1w5XDCdXDJcM1w1wFwyXDBcNVwxXDNcClwwQFwzXDBcNYFDXApcMFwyOYNcM1w2XDhcMIOTXDjASpVcNlwzS1wwXDdDS1w2QYNcMTFcMIHDXDExXDAkg4BcMVwiQ1wwXDBcMzDAXDCARkNEXDCBXDNcMTJcMGRDXDBcMVwzMEBcMoBMQ0xcNsbDSVwwXDGEXDEyXDDdXDOEXDdkQ4BcMUzDTFw2ZENcMFwxRkNEXDCBXDNcMTNcMGRDXDBcMUFDXDEzXDCGg01cMIfDTVw3wFwzgFw2pENcMFwxXDhATpyGg01cMIfDTVw3xlwzTlwwpENcMFwxhoNNXDCHg05cN8HDXDE0XDBcMVw0XDE1XDCkQ4BcMYaDTVwwh8NNXDfGg0pcMKRDXDBcMaJcMVwwXDBcMzBcMCSAh0NGXDOiXDNcMFwwXDMwQFw4gIZDT1wwh4NPXDekg4BcMMZDRFwwXDHEXDE1XDDkQ1wwXDHMXDNQXDdBRFwxNlww5EOAXDHGg1BcMMfD0Fw3XDGEXDBcMOSDXDBcMVw2XDRAXDBcMTJcNFFcOIBcNFwwXDfGRFFcMMeE0Vw5XDZFUVwwXDfFUVwKRlw1UlwwR0XSXApHhdJcCoGFXDBcMMGFXDBcMFwwXDaAXDdGXDZSXDBHxtJcMTJkhoBcMIZcNlJcMIdcNlNcMTOkhoBcMMNcNlwwXDAkRFwwXDaHQ0dcM6JcM1wwXDBcMzBAXDiAhkNEXDDBQ1wxOVwwpENcMFwxhkNPXDCHg09cN6SDgFwwzFwzUFw3QYRcMTlcMORDgFwxxoNQXDDHw9BcN1wxhFwwXDDkg1wwXDFcNlw0QFwwXDEyXDRRXDiAXDRcMFw3xkRRXDDHhNFcOVw2RVFcMFw3xVFcCkZcNVJcMEdF0lwKR4XSXAqBhVwwXDDBhVwwXDBcMFw2gFw3Rlw2UlwwR8bSXDEyZIaAXDCGXDZSXDCHXDZTXDEzpIaAXDDDXDZcMFwwJERcMFw2h4NHXDOiXDNcMFwwXDMwQFw4gIZDT1wwh4NPXDekg4BcMMZDRFwwXDHEXDE5XDDkQ1wwXDHMXDNQXDdBXDRcMjBcMORDgFwxxoNQXDDHw9BcN1wxhFwwXDDkg1wwXDFcNlw0QFwwXDEyXDRRXDiAXDRcMFw3xkRRXDDHhNFcOVw2RVFcMFw3xVFcCkZcNVJcMEdF0lwKR4XSXAqBhVwwXDDBhVwwXDBcMFw2gFw3Rlw2UlwwR8bSXDEyZIaAXDCGXDZSXDCHXDZTXDEzpIaAXDDDXDZcMFwwJERcMFw2h8NHXDOiXDNcMFwwXDMwgFw3gIZDT1wwh4NPXDekg4BcMMxcM1BcN0FEXDIwXDDkQ4BcMcaDUFwwx8PQXDdcMYRcMFww5INcMFwxXDZcNEBcMFwxMlw0UVw4gFw0XDBcN8ZEUVwwx4TRXDlcNkVRXDBcN8VRXApGXDVSXDBHRdJcCkeF0lwKgYVcMFwwwYVcMFwwXDBcNoBcN0ZcNlJcMEfG0lwxMmSGgFwwhlw2Ulwwh1w2U1wxM6SGgFwww1w2XDBcMCREXDBcNobDRFwwpEOAXDAmXDCAXDBSXDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFwxNlN0ZW0gU2VwYXJhdGlvblwyMCtUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb25cNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw2cHJpbnRcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVw0XDEzYXVkaW9fcmVnaW9uXDQlUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXDRcNXR5cGVcNFw5Y2hlY2tib3hcNFw0a2V5XDRcNkRydW1zXDRcOGRlZmF1bHRcMVwxXDRcNnRpdGxlXDRcN1ZvY2Fsc1w0XDVCYXNzXDRcNk90aGVyXDRcN0RpYWxvZ1w0XDE1U2VsZWN0IE9wdGlvbnNcNFw1bmFtZVw0XDdzb3VyY2VcNFwxNHRvX2ZpbGVzb3VyY2VcNFw1cGF0aFw0XDJcIlw0XDdyZW5hbWVcNFw0Y3AgXDQjIC9ob21lL2p1c3Rpbi9kZW11Y3MvaW5wdXQvc2VwLndhdlw0XDhjb21tYW5kXDIwLnh0ZXJtIC1lIFwiL2hvbWUvanVzdGluL2RlbXVjcy9ydW4uc2ggc2VwLndhdlwiXDRcM2lvXDRcNW9wZW5cNFwKcmVuYW1lLnNoXDRcMndcNClFcnJvcjogRmFpbGVkIHRvIGNyZWF0ZSBmaWxlICdtc2NvcmUuc2gnXDRcNndyaXRlXDRcMlwKXDRcNmNsb3NlXDQnRmlsZSAnbXNjb3JlLnNoJyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSFcNFwyOG12IHJlbmFtZS5zaCAvdG1wL3JlbmFtZS5zaFw0XDNvc1w0XDhleGVjdXRlXDRcNmNobW9kXDRcMTljaG1vZCAreCByZW5hbWUuc2hcNFw5Zm9ya2V4ZWNcNFwKL2Jpbi9iYXNoXDRcMTUvdG1wL3JlbmFtZS5zaFw0XDJDXDRcMTNTdHJpbmdWZWN0b3JcNFwxNURydW1zIHNlbGVjdGVkXDRcCnB1c2hfYmFja1wwMjAyL2hvbWUvanVzdGluL2RlbXVjcy9vdXRwdXQvaHRkZW11Y3Mvc2VwL2RydW1zLndhdlw0XDlUZW1wb3JhbFw0XAp0aW1lcG9zX3RcNFwKZG9faW1wb3J0XDRcOEVkaXRpbmdcNFwyMEltcG9ydERpc3RpbmN0RmlsZXNcNFwxNEltcG9ydEFzVHJhY2tcNFw3QVJET1VSXDRcMTFTcmNRdWFsaXR5XDRcOFNyY0Jlc3RcNFwxMVBsdWdpbkluZm9cNFw2VHJhY2tcNFwxNlZvY2FscyBzZWxlY3RlZFwwMjAzL2hvbWUvanVzdGluL2RlbXVjcy9vdXRwdXQvaHRkZW11Y3Mvc2VwL3ZvY2Fscy53YXZcNFwxNEJhc3Mgc2VsZWN0ZWRcMDIwMS9ob21lL2p1c3Rpbi9kZW11Y3Mvb3V0cHV0L2h0ZGVtdWNzL3NlcC9iYXNzLndhdlwwMjAyL2hvbWUvanVzdGluL2RlbXVjcy9vdXRwdXQvaHRkZW11Y3Mvc2VwL290aGVyLndhdlwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzY3JpcHRzWzEzXVsibiJdID0gIlN0ZW0gU2VwYXJhdGlvbiIgICBzY3JpcHRzWzE0XSA9IHt9IHNjcmlwdHNbMTRdWyJzIl0gPSAiYXJkb3VyIHtcCiAgICBbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcCiAgICBuYW1lID0gXCJEcnVtIExvb3AgRWRpdG9yXCIsXAogICAgbGljZW5zZSA9IFwiTUlUXCIsXAogICAgYXV0aG9yID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKICAgIGRlc2NyaXB0aW9uID0gXCJEeW5hbWljYWxseSBhZGRzIGFuZCAncmVtb3ZlcycgZHJ1bSBub3RlcyBmcm9tIGEgbWlkaSBkcnVtIGxvb3AgYmFzZWQgb24gYSBwZXJjZW50YWdlLidSZW1vdmVzJyBpcyBpbiBxdW90ZXMgYmVjYXVzZSBpdCBkb2Vzbid0IGFjdHVhbGx5IHJlbW92ZSB0aGUgbm90ZSBqdXN0IHR1cm5zIG9mZiAob3IgYmFjayBvbikgdGhlIHZlbG9jaXR5IG9mICBleGlzdGluZyBub3Rlcy5cIlwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoKVwKICAgIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCiAgICBsb2NhbCBtaWRpX3JlZ2lvbiA9IG5pbFwKXAogICAgLS0gRmluZCB0aGUgc2VsZWN0ZWQgTUlESSByZWdpb25cCiAgICBmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0KCk6aXRlcigpIGRvXAogICAgICAgIG1pZGlfcmVnaW9uID0gcjp0b19taWRpcmVnaW9uKClcCiAgICAgICAgaWYgbWlkaV9yZWdpb24gdGhlbiBicmVhayBlbmRcCiAgICBlbmRcClwKICAgIGlmIG5vdCBtaWRpX3JlZ2lvbiB0aGVuXAogICAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiQWRkIE5vdGVzIHRvIE1JRElcIiwgXCJObyBNSURJIHJlZ2lvbiBzZWxlY3RlZC5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgICAgcmV0dXJuXAogICAgZW5kXApcCiAgICAtLSBTZXQgdGhpcyB0byB0cnVlIGZvciBkZWJ1Z2dpbmcgb3V0cHV0IGluIHRoZSBzY3JpcHRpbmcgY29uc29sZS5cCmxvY2FsIGRlYnVnID0gdHJ1ZVwKXAotLSBTZXQgdGhpcyB0byB0cnVlIHRvIHByb21wdCBmb3IgdGhlIHZlbG9jaXR5IHBhcmFtZXRlcnMuXApsb2NhbCBpbnRlcmFjdGl2ZSA9IHRydWVcClwKLS0gU2V0IHRoaXMgdG8gdGhlIGRlZmF1bHQgdmVsb2NpdGllcyBhbmQgaW5zdHJ1bWVudCBzdGF0ZXNcCmxvY2FsIHBhcmFtID0ge1wKICAgIGtpY2tfdmVsID0gMTAwLFwKICAgIHNuYXJlX3ZlbCA9IDEwMCxcCiAgICBjbGFwX3ZlbCA9IDEwMCxcCiAgICB0YW1iX3ZlbCA9IDEwMCxcCiAgICBtYXJhY2FfdmVsID0gMTAwLFwKICAgIGtpY2tfcGVyY2VudCA9IDAsXAogICAgc25hcmVfcGVyY2VudCA9IDAsXAogICAgY2xhcF9wZXJjZW50ID0gMCxcCiAgICB0YW1iX3BlcmNlbnQgPSAwLFwKICAgIG1hcmFjYV9wZXJjZW50ID0gMFwKfVwKXAotLSBEb24ndCBsb2FkIGFueSBzYXZlZCBzdGF0ZSAtIGFsd2F5cyB1c2UgZGVmYXVsdHNcCi0tIGlmIG1ldGVyX2dsb2JhbF9wYXJhbSB0aGVuXAotLSAgICBwYXJhbS5raWNrX3ZlbCA9IG1ldGVyX2dsb2JhbF9wYXJhbS5raWNrX3ZlbFwKLS0gICAgcGFyYW0uc25hcmVfdmVsID0gbWV0ZXJfZ2xvYmFsX3BhcmFtLnNuYXJlX3ZlbFwKLS0gICAgcGFyYW0uY2xhcF92ZWwgPSBtZXRlcl9nbG9iYWxfcGFyYW0uY2xhcF92ZWxcCi0tICAgIHBhcmFtLnRhbWJfdmVsID0gbWV0ZXJfZ2xvYmFsX3BhcmFtLnRhbWJfdmVsXAotLSAgICBwYXJhbS5tYXJhY2FfdmVsID0gbWV0ZXJfZ2xvYmFsX3BhcmFtLm1hcmFjYV92ZWxcCi0tIGVuZFwKXAotLSBEZWZpbmUgaW5zdHJ1bWVudHMgd2l0aCB0aGVpciBNSURJIG5vdGVzXApsb2NhbCBpbnN0cnVtZW50cyA9IHtcCiAgICB7bmFtZSA9IFwiS2lja1wiLCBwaXRjaCA9IDM2LCBtaW5fbm90ZXMgPSAxLCBtYXhfbm90ZXMgPSAzfSxcCiAgICB7bmFtZSA9IFwiU25hcmVcIiwgcGl0Y2ggPSAzOCwgbWluX25vdGVzID0gMSwgbWF4X25vdGVzID0gM30sXAogICAge25hbWUgPSBcIkNsYXBcIiwgcGl0Y2ggPSAzOSwgbWluX25vdGVzID0gMSwgbWF4X25vdGVzID0gM30sXAogICAge25hbWUgPSBcIlRhbWJcIiwgcGl0Y2ggPSA1NCwgbWluX25vdGVzID0gMSwgbWF4X25vdGVzID0gM30sXAogICAge25hbWUgPSBcIk1hcmFjYVwiLCBwaXRjaCA9IDcwLCBtaW5fbm90ZXMgPSAxLCBtYXhfbm90ZXMgPSAzfVwKfVwKXAppZiBpbnRlcmFjdGl2ZSB0aGVuXAogICBsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAgICAgIHsgdHlwZSA9IFwibGFiZWxcIiwgdGl0bGUgPSBcIkRydW0gTG9vcCBFZGl0b3JcIiB9LFwKICAgfVwKXAogICAtLSBBZGQgY29udHJvbHMgZm9yIGFsbCBpbnN0cnVtZW50c1wKICAgZm9yIF8sIGluc3RydW1lbnQgaW4gaXBhaXJzKGluc3RydW1lbnRzKSBkb1wKICAgICAgbG9jYWwgdmVsX2tleSA9IGluc3RydW1lbnQubmFtZTpsb3dlcigpIC4uIFwiX3ZlbFwiXAogICAgICBsb2NhbCBwZXJjZW50X2tleSA9IGluc3RydW1lbnQubmFtZTpsb3dlcigpIC4uIFwiX3BlcmNlbnRcIlwKICAgICAgXAogICAgICAtLSBBZGQgcGVyY2VudGFnZSBpbnB1dCBib3ggZm9yIG5vdGUgcGxhY2VtZW50XAogICAgICB0YWJsZS5pbnNlcnQoZGlhbG9nX29wdGlvbnMsIHtcCiAgICAgICAgIHR5cGUgPSBcIm51bWJlclwiLFwKICAgICAgICAga2V5ID0gcGVyY2VudF9rZXksXAogICAgICAgICB0aXRsZSA9IGluc3RydW1lbnQubmFtZSAuLiBcIiBQbGFjZW1lbnQgUGVyY2VudGFnZVwiLFwKICAgICAgICAgbWluID0gMCxcCiAgICAgICAgIG1heCA9IDEwMCxcCiAgICAgICAgIHN0ZXAgPSAxLFwKICAgICAgICAgZGlnaXRzID0gMCxcCiAgICAgICAgIGRlZmF1bHQgPSAwICAtLSBBbHdheXMgZGVmYXVsdCB0byAwXAogICAgICB9KVwKICAgICAgXAogICAgICAtLSBBZGQgdmVsb2NpdHkgc2xpZGVyXAogICAgICB0YWJsZS5pbnNlcnQoZGlhbG9nX29wdGlvbnMsIHtcCiAgICAgICAgIHR5cGUgPSBcInNsaWRlclwiLFwKICAgICAgICAga2V5ID0gdmVsX2tleSxcCiAgICAgICAgIHRpdGxlID0gaW5zdHJ1bWVudC5uYW1lIC4uIFwiIE5vdGUgT24vT2ZmIFByb2JhYmlsaXR5XCIsXAogICAgICAgICBtaW4gPSAwLFwKICAgICAgICAgbWF4ID0gMTAwLFwKICAgICAgICAgc3RlcCA9IDEsXAogICAgICAgICBkaWdpdHMgPSAwLFwKICAgICAgICAgZGVmYXVsdCA9IDEwMCAgLS0gQWx3YXlzIGRlZmF1bHQgdG8gMTAwXAogICAgICB9KVwKICAgICAgXAogICAgICB0YWJsZS5pbnNlcnQoZGlhbG9nX29wdGlvbnMsIHtcCiAgICAgICAgIHR5cGUgPSBcImJ1dHRvblwiLFwKICAgICAgICAga2V5ID0gXCJyZXNldF9cIiAuLiBpbnN0cnVtZW50Lm5hbWU6bG93ZXIoKSxcCiAgICAgICAgIHRpdGxlID0gXCJSZXNldCBcIiAuLiBpbnN0cnVtZW50Lm5hbWUgLi4gXCIgU2V0dGluZ3NcIlwKICAgICAgfSlcClwKICAgICAgLS0gQWRkIHNlcGFyYXRvciBiZXR3ZWVuIGluc3RydW1lbnRzXAogICAgICBpZiBpbnN0cnVtZW50Lm5hbWUgfj0gXCJNYXJhY2FcIiB0aGVuXAogICAgICAgICB0YWJsZS5pbnNlcnQoZGlhbG9nX29wdGlvbnMsIHsgdHlwZSA9IFwic2VwYXJhdG9yXCIgfSlcCiAgICAgIGVuZFwKICAgZW5kXApcCiAgIGxvY2FsIGRnID0gTHVhRGlhbG9nLkRpYWxvZyhcIkRydW0gUGF0dGVybiBTZXR1cFwiLCBkaWFsb2dfb3B0aW9ucylcCiAgIGxvY2FsIHJlc3VsdCA9IGRnOnJ1bigpXAogICBpZiByZXN1bHQgdGhlblwKICAgICAgLS0gVXBkYXRlIGFsbCBwYXJhbWV0ZXJzXAogICAgICBmb3IgXywgaW5zdHJ1bWVudCBpbiBpcGFpcnMoaW5zdHJ1bWVudHMpIGRvXAogICAgICAgICBsb2NhbCB2ZWxfa2V5ID0gaW5zdHJ1bWVudC5uYW1lOmxvd2VyKCkgLi4gXCJfdmVsXCJcCiAgICAgICAgIGxvY2FsIHBlcmNlbnRfa2V5ID0gaW5zdHJ1bWVudC5uYW1lOmxvd2VyKCkgLi4gXCJfcGVyY2VudFwiXAogICAgICAgICBsb2NhbCByZXNldF9rZXkgPSBcInJlc2V0X1wiIC4uIGluc3RydW1lbnQubmFtZTpsb3dlcigpXApcCiAgICAgICAgIC0tIEhhbmRsZSByZXNldCBidXR0b25zXAogICAgICAgICBpZiByZXN1bHRbcmVzZXRfa2V5XSB0aGVuXAogICAgICAgICAgICBwYXJhbVt2ZWxfa2V5XSA9IDEwMFwKICAgICAgICAgICAgcGFyYW1bcGVyY2VudF9rZXldID0gMFwKICAgICAgICAgZW5kXApcCiAgICAgICAgIHBhcmFtW3ZlbF9rZXldID0gcmVzdWx0W3ZlbF9rZXldXAogICAgICAgICBwYXJhbVtwZXJjZW50X2tleV0gPSByZXN1bHRbcGVyY2VudF9rZXldXAogICAgICAgICBpbnN0cnVtZW50LmVuYWJsZWQgPSByZXN1bHRbcGVyY2VudF9rZXldID4gMFwKICAgICAgICAgaW5zdHJ1bWVudC5wbGFjZW1lbnRfcGVyY2VudCA9IHJlc3VsdFtwZXJjZW50X2tleV1cCiAgICAgIGVuZFwKXAogICAgICAtLSBzYXZlIHRoZSBkYXRhIGZvciB0aGUgbmV4dCBpbnZvY2F0aW9uXAogICAgICBtZXRlcl9nbG9iYWxfcGFyYW0gPSBwYXJhbVwKICAgZWxzZVwKICAgICAgLS0gZGlhbG9nIGNhbmNlbGVkLCBleGl0XAogICAgICByZXR1cm5cCiAgIGVuZFwKZW5kXApcCmxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0ICgpOml0ZXIgKCkgZG9cCiAgIGxvY2FsIG1yID0gcjp0b19taWRpcmVnaW9uICgpXAogICBpZiBtcjppc25pbCAoKSB0aGVuIGdvdG8gbmV4dCBlbmRcClwKICAgbG9jYWwgbW0gPSBtcjptb2RlbCAoKVwKICAgbG9jYWwgbmwgPSBBUkRPVVIuTHVhQVBJLm5vdGVfbGlzdCAobW0pXAogICBsb2NhbCBtYyA9IG1tOm5ld19ub3RlX2RpZmZfY29tbWFuZCAoXCJEcnVtIFZlbG9jaXR5XCIpXAogICBmb3IgbiBpbiBubDppdGVyICgpIGRvXAogICAgICBsb2NhbCB2ZWwgPSBuOnZlbG9jaXR5ICgpXAogICAgICBsb2NhbCBub3RlID0gbjpub3RlKClcClwKICAgICAgLS0gQ2hlY2sgaWYgaXQncyBhIGtpY2sgb3Igc25hcmUgbm90ZSBhbmQgYXBwbHkgdmVsb2NpdHkgcmVkdWN0aW9uXAogICAgICBpZiBub3RlID09IDM2IHRoZW4gLS0gS2lja1wKICAgICAgICAgaWYgcGFyYW0ua2lja192ZWwgPCAxMDAgdGhlblwKICAgICAgICAgICAgLS0gRm9yIHZhbHVlcyBsZXNzIHRoYW4gMTAwLCByYW5kb21seSBzZXQgdmVsb2NpdHkgdG8gMCBvciBtYXhcCiAgICAgICAgICAgIGlmIG1hdGgucmFuZG9tKDEwMCkgPiBwYXJhbS5raWNrX3ZlbCB0aGVuXAogICAgICAgICAgICAgICB2ZWwgPSAwXAogICAgICAgICAgICBlbHNlXAogICAgICAgICAgICAgICB2ZWwgPSAxMjdcCiAgICAgICAgICAgIGVuZFwKICAgICAgICAgZWxzZVwKICAgICAgICAgICAgLS0gV2hlbiBraWNrX3ZlbCBpcyAxMDAsIHJlc3RvcmUgbWF4aW11bSB2ZWxvY2l0eVwKICAgICAgICAgICAgdmVsID0gMTI3XAogICAgICAgICBlbmRcCiAgICAgIGVsc2VpZiBub3RlID09IDM4IHRoZW4gLS0gU25hcmVcCiAgICAgICAgIGlmIHBhcmFtLnNuYXJlX3ZlbCA8IDEwMCB0aGVuXAogICAgICAgICAgICAtLSBGb3IgdmFsdWVzIGxlc3MgdGhhbiAxMDAsIHJhbmRvbWx5IHNldCB2ZWxvY2l0eSB0byAwIG9yIG1heFwKICAgICAgICAgICAgaWYgbWF0aC5yYW5kb20oMTAwKSA+IHBhcmFtLnNuYXJlX3ZlbCB0aGVuXAogICAgICAgICAgICAgICB2ZWwgPSAwXAogICAgICAgICAgICBlbHNlXAogICAgICAgICAgICAgICB2ZWwgPSAxMjdcCiAgICAgICAgICAgIGVuZFwKICAgICAgICAgZWxzZVwKICAgICAgICAgICAgLS0gV2hlbiBzbmFyZV92ZWwgaXMgMTAwLCByZXN0b3JlIG1heGltdW0gdmVsb2NpdHlcCiAgICAgICAgICAgIHZlbCA9IDEyN1wKICAgICAgICAgZW5kXAogICAgICBlbHNlaWYgbm90ZSA9PSAzOSB0aGVuIC0tIENsYXBcCiAgICAgICAgIGlmIHBhcmFtLmNsYXBfdmVsIDwgMTAwIHRoZW5cCiAgICAgICAgICAgIC0tIEZvciB2YWx1ZXMgbGVzcyB0aGFuIDEwMCwgcmFuZG9tbHkgc2V0IHZlbG9jaXR5IHRvIDAgb3IgbWF4XAogICAgICAgICAgICBpZiBtYXRoLnJhbmRvbSgxMDApID4gcGFyYW0uY2xhcF92ZWwgdGhlblwKICAgICAgICAgICAgICAgdmVsID0gMFwKICAgICAgICAgICAgZWxzZVwKICAgICAgICAgICAgICAgdmVsID0gMTI3XAogICAgICAgICAgICBlbmRcCiAgICAgICAgIGVsc2VcCiAgICAgICAgICAgIC0tIFdoZW4gY2xhcF92ZWwgaXMgMTAwLCByZXN0b3JlIG1heGltdW0gdmVsb2NpdHlcCiAgICAgICAgICAgIHZlbCA9IDEyN1wKICAgICAgICAgZW5kXAogICAgICBlbHNlaWYgbm90ZSA9PSA1NCB0aGVuIC0tIFRhbWJcCiAgICAgICAgIGlmIHBhcmFtLnRhbWJfdmVsIDwgMTAwIHRoZW5cCiAgICAgICAgICAgIC0tIEZvciB2YWx1ZXMgbGVzcyB0aGFuIDEwMCwgcmFuZG9tbHkgc2V0IHZlbG9jaXR5IHRvIDAgb3IgbWF4XAogICAgICAgICAgICBpZiBtYXRoLnJhbmRvbSgxMDApID4gcGFyYW0udGFtYl92ZWwgdGhlblwKICAgICAgICAgICAgICAgdmVsID0gMFwKICAgICAgICAgICAgZWxzZVwKICAgICAgICAgICAgICAgdmVsID0gMTI3XAogICAgICAgICAgICBlbmRcCiAgICAgICAgIGVsc2VcCiAgICAgICAgICAgIC0tIFdoZW4gdGFtYl92ZWwgaXMgMTAwLCByZXN0b3JlIG1heGltdW0gdmVsb2NpdHlcCiAgICAgICAgICAgIHZlbCA9IDEyN1wKICAgICAgICAgZW5kXAogICAgICBlbHNlaWYgbm90ZSA9PSA3MCB0aGVuIC0tIE1hcmFjYVwKICAgICAgICAgaWYgcGFyYW0ubWFyYWNhX3ZlbCA8IDEwMCB0aGVuXAogICAgICAgICAgICAtLSBGb3IgdmFsdWVzIGxlc3MgdGhhbiAxMDAsIHJhbmRvbWx5IHNldCB2ZWxvY2l0eSB0byAwIG9yIG1heFwKICAgICAgICAgICAgaWYgbWF0aC5yYW5kb20oMTAwKSA+IHBhcmFtLm1hcmFjYV92ZWwgdGhlblwKICAgICAgICAgICAgICAgdmVsID0gMFwKICAgICAgICAgICAgZWxzZVwKICAgICAgICAgICAgICAgdmVsID0gMTI3XAogICAgICAgICAgICBlbmRcCiAgICAgICAgIGVsc2VcCiAgICAgICAgICAgIC0tIFdoZW4gbWFyYWNhX3ZlbCBpcyAxMDAsIHJlc3RvcmUgbWF4aW11bSB2ZWxvY2l0eVwKICAgICAgICAgICAgdmVsID0gMTI3XAogICAgICAgICBlbmRcCiAgICAgIGVuZFwKXAogICAgICAtLSBPbmx5IG1vZGlmeSB0aGUgbm90ZSBpZiB2ZWxvY2l0eSBjaGFuZ2VkXAogICAgICBpZiB2ZWwgfj0gbjp2ZWxvY2l0eSgpIHRoZW5cCiAgICAgICAgIGxvY2FsIG4yID0gQVJET1VSLkx1YUFQSS5uZXdfbm90ZXB0cihuOmNoYW5uZWwoKSwgbjp0aW1lKCksIG46bGVuZ3RoKCksIG46bm90ZSgpLCB2ZWwpXAogICAgICAgICBtYzpyZW1vdmUobilcCiAgICAgICAgIG1jOmFkZChuMilcCiAgICAgIGVuZFwKICAgZW5kXAogICBtbTphcHBseV9jb21tYW5kKFNlc3Npb24sIG1jKVwKICAgOjpuZXh0OjpcCmVuZFwKXAogICAgbG9jYWwgbW0gPSBtaWRpX3JlZ2lvbjptaWRpX3NvdXJjZSgwKTptb2RlbCgpXAogICAgbG9jYWwgbWlkaV9jb21tYW5kID0gbW06bmV3X25vdGVfZGlmZl9jb21tYW5kKFwiQWRkUmFuZG9tTm90ZXNcIilcClwKICAgIGxvY2FsIHRtID0gVGVtcG9yYWwuVGVtcG9NYXAucmVhZCgpXAogICAgbG9jYWwgbWlkaV9zdGFydCA9IG1pZGlfcmVnaW9uOnBvc2l0aW9uKClcCiAgICBsb2NhbCBtaWRpX2VuZCA9IG1pZGlfc3RhcnQgKyBtaWRpX3JlZ2lvbjpsZW5ndGgoKVwKXAogICAgLS0gQ2FsY3VsYXRlIGJlYXQgcG9zaXRpb25zXAogICAgbG9jYWwgbWV0ZXIgPSB0bTptZXRlcl9hdChtaWRpX3N0YXJ0KVwKICAgIGxvY2FsIGJlYXRzX3Blcl9iYXIgPSBtZXRlcjpkaXZpc2lvbnNfcGVyX2JhcigpXAogICAgbG9jYWwgc3IgPSBTZXNzaW9uOm5vbWluYWxfc2FtcGxlX3JhdGUoKVwKXAogICAgLS0gR2V0IHRlbXBvIGF0IHN0YXJ0IHRvIGVzdGltYXRlIGJlYXQgbGVuZ3RoXAogICAgbG9jYWwgdGVtcG8gPSB0bTp0ZW1wb19hdChtaWRpX3N0YXJ0KVwKICAgIGxvY2FsIGJwbSA9IHRlbXBvOm5vdGVfdHlwZXNfcGVyX21pbnV0ZSgpXAogICAgbG9jYWwgc2Vjb25kc19wZXJfYmVhdCA9IDYwLjAgLyBicG1cCiAgICBsb2NhbCBzYW1wbGVzX3Blcl9iZWF0ID0gc2Vjb25kc19wZXJfYmVhdCAqIHNyXApcCiAgICAtLSBGaW5kIGFsbCBiZWF0IHBvc2l0aW9ucyB3aXRoaW4gdGhlIHJlZ2lvblwKICAgIGxvY2FsIGJlYXRfcG9zaXRpb25zID0ge31cCiAgICBsb2NhbCByZWdpb25fbGVuZ3RoX3NhbXBsZXMgPSBtaWRpX3JlZ2lvbjpsZW5ndGgoKTpzYW1wbGVzKClcClwKICAgIC0tIFN0YXJ0IGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgcmVnaW9uIGFuZCBhZGQgYmVhdCBpbnRlcnZhbHNcCiAgICBsb2NhbCBjdXJyZW50X29mZnNldCA9IDBcCiAgICB3aGlsZSBjdXJyZW50X29mZnNldCA8IHJlZ2lvbl9sZW5ndGhfc2FtcGxlcyBkb1wKICAgICAgICBsb2NhbCBiZWF0X3Bvc2l0aW9uID0gbWlkaV9zdGFydCArIFRlbXBvcmFsLnRpbWVjbnRfdChtYXRoLmZsb29yKGN1cnJlbnRfb2Zmc2V0KSlcCiAgICAgICAgdGFibGUuaW5zZXJ0KGJlYXRfcG9zaXRpb25zLCBiZWF0X3Bvc2l0aW9uKVwKICAgICAgICBjdXJyZW50X29mZnNldCA9IGN1cnJlbnRfb2Zmc2V0ICsgc2FtcGxlc19wZXJfYmVhdFwKICAgIGVuZFwKXAogICAgLS0gR2VuZXJhdGUgcmFuZG9tIG5vdGVzIGZvciBlYWNoIGVuYWJsZWQgaW5zdHJ1bWVudCBhdCBiZWF0IHBvc2l0aW9uc1wKICAgIGZvciBfLCBpbnN0cnVtZW50IGluIGlwYWlycyhpbnN0cnVtZW50cykgZG9cCiAgICAgICAgaWYgaW5zdHJ1bWVudC5lbmFibGVkIHRoZW5cCiAgICAgICAgICAgIGxvY2FsIHZlbF9rZXkgPSBpbnN0cnVtZW50Lm5hbWU6bG93ZXIoKSAuLiBcIl92ZWxcIlwKICAgICAgICAgICAgbG9jYWwgdmVsb2NpdHlfcGVyY2VudGFnZSA9IHBhcmFtW3ZlbF9rZXldXAogICAgICAgICAgICBsb2NhbCBwbGFjZW1lbnRfcGVyY2VudGFnZSA9IGluc3RydW1lbnQucGxhY2VtZW50X3BlcmNlbnRcClwKICAgICAgICAgICAgLS0gU2VsZWN0IGJlYXRzIGJhc2VkIG9uIHBsYWNlbWVudCBwZXJjZW50YWdlXAogICAgICAgICAgICBsb2NhbCBzZWxlY3RlZF9iZWF0cyA9IHt9XAogICAgICAgICAgICBmb3IgaSA9IDEsICNiZWF0X3Bvc2l0aW9ucyBkb1wKICAgICAgICAgICAgICAgIGlmIG1hdGgucmFuZG9tKDEwMCkgPD0gcGxhY2VtZW50X3BlcmNlbnRhZ2UgdGhlblwKICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoc2VsZWN0ZWRfYmVhdHMsIGkpXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgLS0gRGV0ZXJtaW5lIHdoaWNoIG9mIHRob3NlIG5vdGVzIHdpbGwgYmUgYWN0aXZlIGJhc2VkIG9uIHZlbG9jaXR5IHBlcmNlbnRhZ2VcCiAgICAgICAgICAgIGxvY2FsIGFjdGl2ZV9iZWF0cyA9IHt9XAogICAgICAgICAgICBmb3IgaSA9IDEsICNzZWxlY3RlZF9iZWF0cyBkb1wKICAgICAgICAgICAgICAgIGlmIG1hdGgucmFuZG9tKDEwMCkgPD0gdmVsb2NpdHlfcGVyY2VudGFnZSB0aGVuXAogICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChhY3RpdmVfYmVhdHMsIHNlbGVjdGVkX2JlYXRzW2ldKVwKICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgIC0tIENyZWF0ZSBub3RlcyBhdCBzZWxlY3RlZCBiZWF0IHBvc2l0aW9uc1wKICAgICAgICAgICAgZm9yIF8sIGJlYXRfaW5kZXggaW4gaXBhaXJzKHNlbGVjdGVkX2JlYXRzKSBkb1wKICAgICAgICAgICAgICAgIGxvY2FsIGJlYXRfcG9zaXRpb24gPSBiZWF0X3Bvc2l0aW9uc1tiZWF0X2luZGV4XVwKXAogICAgICAgICAgICAgICAgLS0gUmFuZG9tIGxlbmd0aCBiZXR3ZWVuIDAuMSBhbmQgMC41IHNlY29uZHNcCiAgICAgICAgICAgICAgICBsb2NhbCByYW5kb21fbGVuZ3RoID0gMC4xICsgbWF0aC5yYW5kb20oKSAqIDAuNFwKXAogICAgICAgICAgICAgICAgLS0gU2V0IHZlbG9jaXR5IGJhc2VkIG9uIHdoZXRoZXIgdGhpcyBub3RlIGlzIGluIHRoZSBhY3RpdmUgc2V0XAogICAgICAgICAgICAgICAgbG9jYWwgcmFuZG9tX3ZlbG9jaXR5ID0gMFwKICAgICAgICAgICAgICAgIGZvciBfLCBhY3RpdmVfYmVhdCBpbiBpcGFpcnMoYWN0aXZlX2JlYXRzKSBkb1wKICAgICAgICAgICAgICAgICAgICBpZiBhY3RpdmVfYmVhdCA9PSBiZWF0X2luZGV4IHRoZW5cCiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbV92ZWxvY2l0eSA9IDEyN1wKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcCiAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgZW5kXApcCiAgICAgICAgICAgICAgICBsb2NhbCBzciA9IFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSgpXAogICAgICAgICAgICAgICAgbG9jYWwgbGVuX3NhbXBsZXMgPSBUZW1wb3JhbC50aW1lY250X3QobWF0aC5mbG9vcihyYW5kb21fbGVuZ3RoICogc3IpKVwKICAgICAgICAgICAgICAgIGxvY2FsIHBvcyA9IHRtOnF1YXJ0ZXJzX2F0KGJlYXRfcG9zaXRpb24sIDApXAogICAgICAgICAgICAgICAgbG9jYWwgbGVuID0gdG06cXVhcnRlcnNfYXQoYmVhdF9wb3NpdGlvbiArIGxlbl9zYW1wbGVzLCAwKSAtIHBvc1wKXAogICAgICAgICAgICAgICAgbG9jYWwgbmV3X25vdGUgPSBBUkRPVVIuTHVhQVBJLm5ld19ub3RlcHRyKDAsIHBvcywgbGVuLCBpbnN0cnVtZW50LnBpdGNoLCByYW5kb21fdmVsb2NpdHkpXAogICAgICAgICAgICAgICAgbWlkaV9jb21tYW5kOmFkZChuZXdfbm90ZSlcCiAgICAgICAgICAgIGVuZFwKICAgICAgICBlbmRcCiAgICBlbmRcClwKICAgIG1tOmFwcGx5X2NvbW1hbmQoU2Vzc2lvbiwgbWlkaV9jb21tYW5kKVwKZW5kIGVuZFwKIiAgc2NyaXB0c1sxNF1bImEiXSA9IHt9IHNjcmlwdHNbMTRdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9kcnVtbG9vcGVkaXQubHVhIiAgIHNjcmlwdHNbMTRdWyJjIl0gPSB0cnVlIHNjcmlwdHNbMTRdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFw5XDBcMFwwMDAwXDFcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFw5XDBcMFwwMDAwXDFcMFwwXDBcMDAwMlw4XDJcMFwwXDZcMEBcMFwxMkBAXDAkgFwwXDFEXDBcMFwwh4BAXDCMwEBcMaSAXDBcMYxcMEFcMaRcMFwxXDFcMzBcMFwxgIxBwVwypIFcMFwxQFwwXDBcM2JAXDBcMFwzMEBcMICpQFwwXDAqXDH+XDEyN2JAXDBcMFwzMEBcM4CGgEFcMIfAQVwxwVwwXDJcMFwxQVwyXDBGgUFcMEeBwlwyR8HCXDKGgUFcMIdcMUNcM4dBQ1wzpICAXDKMgENcMaRAXDBcMSZcMIBcMINcMIBcMMNcMIBcMFwxMYFcMlwwXApcMcSHXApcMcSIXApcMUSJXApcMcSJXApcMUSKXAqBxYpcCoHFi1wKgUWMXAqBxYxcCoFFjUtcMYBcMotcMVwxXDCKXDHHjYqBx46KXDHIj4qByJDLXDFcMVwwysHIjcpcMcmOylwxyI/KgciQXDExXDJcMVwwXApCyY1cCoLJjlwKXDLIj1wKgsiQS1wyXDFcMErCyY1KXDLKjkpcMsiPSoLIkItcMlwxXDCKQsqNioLKjopcMsiPioLIkGtBgFwy4lwwXDBcMFwzMFwwIICLXDGAXDDLgVwwXDDKXDHLlcqBy5arQYBcMMbBS1wwXDBcMoBcMuRcMVwxXDFcMzDAXDE2gFw3w8ZcNVwxMlwzTFw2JINcMFwxQUNcMTJcMFwyOUNcM1w2R8PGXDVMXDPMXDZkg1wwXDGBg1wxMlwwXYODXDaGw0xcMIdcM01cN8BcM1wwXDNcMTFcNFwyXDBcCkTNlVwKRFwzm0fExlw1gcRcMTNcMF2EhFw4XApEhJZcCoRFnFwKXDTEnFwKXDRInVwKhMWdXAqERZ6kQ4BcMYbDTFwwh1wzTVw3wFwzXDBcM1wxMVw0XDJcMFwKRM+VXApcNFwzm0fExlw1gYRcMTVcMF2EhFw4XApEhJZcCoRFnFwKXDTEnFwKXDRInVwKhMWdXApcNESepEOAXDGGw0xcMIdcM01cN8BcM1wwXDNcMTHEXDBcMFwKxM+VQVw0XDE2XDCHxMZcNYxcNExcOaSEXDBcMV2EhFw4XApEXDSbQURcMTZcMIfExlw1wYRcMTZcMF3EhFw4XApEhJakQ4BcMYfDxlw1X0BKXDdcMzBAXDGAhsNMXDCHXDNNXDfAXDNcMFwzXDExRFwwXDBcCsTQlaRDgFwx6YFcMFwwakLuXDEyN8aBQVwwx1wx0VwzXDFCXDE3XDBAXDJcMFwz5IGAXDFcMTKCw1wzJIJcMFwxXCJcMlwwXDBcMzDAXDmARsJLXDCAXDKAXDJkXDJcMVwxXDMwwFw3gIfDxlw2jFwzTFw3pINcMFwxwUNcMTJcMJ3DXDNcN8fDxlw2zFwzzFw35INcMFwxXDGEXDEyXDDdXDOEXDdcMVw0XDE2XDBHxMZcNkxcNMxcOGSEXDBcMVwyOURcNFw4R1w0XDRcNGJcNFwwXDBcMzBAXDCAXApcMURcN1wKgcVcN0eEXDNcNFwKQVw0XDdHxFwzXDRcCkGEXDdHxFwzXDRgQFw0i1wzMFwwXDCAQ0RcMFwwQ1w0gFwwSkNcNKNHxFwzXDRKQ4SjaYJcMFww6kL3XDEyN1w4XDBcMaRcMzBcMFwwgCZcMIBcMIZcMUBcMIxBQFwzpIFcMFwxx4FAXDPMwcBcM+SBXDBcMcxcMcFcM+RcMVwxXDFcMzBcMCOAzEJBXDXkglwwXDFcMTJD0lw1JINcMFwxXCJDXDBcMFwzMIAhgFwxMoPSXDUkg1wwXDFGw1JcMEdcM9NcNkdD01w2gFwzXDBcNmSDXDBcMYyDU1w2XDHEXDE5XDCkg4BcMcxcM8FcNuRcM1wxXDFcMzDAXDI4gMxcNFRcOeSEXDBcMVwxMkVUXDkkhVwwXDFcMzGAR1wKXDMwwFwzgEfFQ1wyIFwwxFwKXDMwgFwygEaFVFwwR8XUXAqBXDVcNFwwZIVcMFwxh8VDXDIgQFw1XDExXDMwQFwwgMGEXDVcMFwzMIBcMTiAwVw0XDIxXDBcMzBcMFwxOIDBXDRcMjFcMFwzMIBcMTeAXDMxXDBJXApcMzDAXDOAR0VEXDIgXDDEXApcMzCAXDKARoVUXDBHxdRcCoFcNVw0XDBkhVwwXDGHRURcMiBAXDVcMTFcMzBAXDCAwYRcNVwwXDMwXDBcMTSAwVw0XDIxXDBcMzCAXDEzgMFcNFwyMVwwXDMwXDBcMTOAXDMxgElcClwzMMBcM4BHhURcMiBcMMRcClwzMIBcMoBGhVRcMEfF1FwKgVw1XDRcMGSFXDBcMYeFRFwyIEBcNVwxMVwzMEBcMIDBhFw1XDBcMzCAXDmAwVw0XDIxXDBcMzBcMFw5gMFcNFwyMVwwXDMwgFw4gFwzMVwwSlwKXDMwwFwzgEfFRFwyIFwwxFwKXDMwgFwygEaFVFwwR8XUXAqBXDVcNFwwZIVcMFwxh8VEXDIgQFw1XDExXDMwQFwwgMGEXDVcMFwzMFwwXDWAwVw0XDIxXDBcMzCAXDSAwVw0XDIxXDBcMzBcMFw0gFwzMYBKXApcMzCAXDOAR1w1RVwyIFwwxFwKXDMwgFwygEaFVFwwR8XUXAqBXDVcNFwwZIVcMFwxh1w1RVwyIEBcNVwxMVwzMEBcMIDBhFw1XDBcMzCAXDCAwVw0XDIxXDBcMzBcMFwwgMFcNFwyMVwwTFw1VFw5ZIVcMFwxX0CFXDlcMzCAXDSARsVSXDBHXDXTXApHRdVcCoyFVVw5pIVcMFwxzMVVXDnkhVwwXDFcMTJcNlZcOSSGXDBcMUxGVFw5ZIZcMFwxgFw2gFw5ZIVcMFwzjEVWXDdcMFw2XDBcOaRFgFwxjIVWXDdcMFw2gFwKpEWAXDHpQ1wwXDBqROJcMTI3zMNWXDZGXDRXXDCAXDRcMFw35ENcMFwy6UFcMFwwalwy3FwxMjfMQddcMEGCXDVcMOSBgFwxzIHSXDPkgVwwXDFcMTKC01wzgYJcMjNcMCSCgFwxRsJXXDBHXDLYXDRHQthcNGSCgFwwjILYXDCkglwwXDHMXDLWXDDkglwwXDHNwlwyXDVcMTLD2Fw0gFwzXDBcNSSDgFwxTFwzWVw2ZINcMFwxhlwzV1wwjENZXDekg1wwXDHMg9lcNEBcNFwwXDXkg4BcMVwxMsTZXDckhFwwXDFSXDRcNLSPhINcOMtcNFwwXDBcMTJcNdZcMCSFXDBcMVwxMkVaXAokhVwwXDFBhVw1XDAgXDCFXApcMzCAXDOAhsVXXDCHhVpcMTHGhVRcMMfF2lwxMVwwXDaAXArkXDVcMFwxpIVcMFwwjYVcNVw1xsVMXDDHXDXNXDExXDBcNoBcOUBcNlwwXDEx5EWAXDFNhYRcClwzMID7XDEyN4bFS1wwwFw1gFwypFw1XDFcMVwzMEBcMjSAx4ZRXDEz4lw2XDBcMFwzMIBcMjOAx8ZGXDEzzFw2zFwxM+SGXDBcMVwxR1wxMlww3Vw2h1wxM1w3x1w2XDJHx1FcMTOLXDdcMFwwwVw3XDhcMFwyOFw4gFw5QVw4XDhcMOiHXDKAxohUXDDHyNRcMTdcMVw5XDRcMOSIXDBcMSFAh1wxN1wzMFwwXDGAxshMXDDHXDjNXDE3XDBcOVwwXDE1QFw5XDBcMTfkSIBcMefH/FwxMjfLXDdcMFwwXDFcOFw4XDBcXFw4XDBcMTWBXDhcOFwwKIhcMoBcNolUXDBcN8lUXDE4QVw5XDRcMCSJXDBcMSFcMFw3XDE4XDMwXDBcMYBcNslMXDBcN1w5TVwxOEBcOYBcMTWHyVw4XDE1JEmAXDEnyPxcMTI3XDbIS1wwQFw4XDBcMTUkXDhcMVwxXDMwwFwxMYBHXDmJXDmGiVRcMIfJVFwxOaSJgFwwj1w5W1wxOY2JibbBiVw1XDBcNspLXDBAXAqAXDE1JFwKXDFcMVwzMMBcMIBcMzFcMFw5XDIyXDMwQFwwgMFcOVwyMVwwXDMwQFwwgCmKXDBcMKpK/lwxMjdcNlwKV1wwXDEySllcMjAkilwwXDFGyldcMEeK2lwyMIaKVFwwh8paXDIxz1wKXApcMTmkXApcMFwxZIpcMFwwjIrbXDRcMFwxMYBcMThBi1w1XDCkilwwXDLMittcNE1LilwxOIGLXDVcMOSKXDBcMs6KilwyMVw2y1JcMFw3XDExU1wyMlw3S1VcMjJBi1w1XDCAXDExXDBcMjHAXDExgFwyMVw3TEdcMTNAXDEygFwxOSSLXDBcM0yLVlw0wFwxMVwwXDIyZEuAXDEpiFwwXDCqSPNcMTI3qYVcMFwwKsbmXDEyN4zF1lwzXDZcNldcMEBcNlwwXDSkRVwwXDImXDCAXDBvXDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDhyZWdpb25zXDRcMTFyZWdpb25saXN0XDRcNWl0ZXJcNFwxNHRvX21pZGlyZWdpb25cNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFwxOEFkZCBOb3RlcyB0byBNSURJXDRcMjVObyBNSURJIHJlZ2lvbiBzZWxlY3RlZC5cNFwxMk1lc3NhZ2VUeXBlXDRcNkVycm9yXDRcMTFCdXR0b25UeXBlXDRcNkNsb3NlXDRcNHJ1blw0XDlraWNrX3ZlbFwxOWRcMFwwXDBcMFwwXDBcMFw0XApzbmFyZV92ZWxcNFw5Y2xhcF92ZWxcNFw5dGFtYl92ZWxcNFwxMW1hcmFjYV92ZWxcNFwxM2tpY2tfcGVyY2VudFwxOVwwXDBcMFwwXDBcMFwwXDBcNFwxNHNuYXJlX3BlcmNlbnRcNFwxM2NsYXBfcGVyY2VudFw0XDEzdGFtYl9wZXJjZW50XDRcMTVtYXJhY2FfcGVyY2VudFw0XDVuYW1lXDRcNUtpY2tcNFw2cGl0Y2hcMTkkXDBcMFwwXDBcMFwwXDBcNFwKbWluX25vdGVzXDE5XDFcMFwwXDBcMFwwXDBcMFw0XAptYXhfbm90ZXNcMTlcM1wwXDBcMFwwXDBcMFwwXDRcNlNuYXJlXDE5JlwwXDBcMFwwXDBcMFwwXDRcNUNsYXBcMTknXDBcMFwwXDBcMFwwXDBcNFw1VGFtYlwwMTk2XDBcMFwwXDBcMFwwXDBcNFw3TWFyYWNhXDE5RlwwXDBcMFwwXDBcMFwwXDRcNXR5cGVcNFw2bGFiZWxcNFw2dGl0bGVcNFwxN0RydW0gTG9vcCBFZGl0b3JcNFw3aXBhaXJzXDRcNmxvd2VyXDRcNV92ZWxcNFw5X3BlcmNlbnRcNFw2dGFibGVcNFw3aW5zZXJ0XDRcN251bWJlclw0XDRrZXlcNFwyMiBQbGFjZW1lbnQgUGVyY2VudGFnZVw0XDRtaW5cNFw0bWF4XDRcNXN0ZXBcNFw3ZGlnaXRzXDRcOGRlZmF1bHRcNFw3c2xpZGVyXDRcMjUgTm90ZSBPbi9PZmYgUHJvYmFiaWxpdHlcNFw3YnV0dG9uXDRcN3Jlc2V0X1w0XDdSZXNldCBcNFwKIFNldHRpbmdzXDRcCnNlcGFyYXRvclw0XDdEaWFsb2dcNFwxOURydW0gUGF0dGVybiBTZXR1cFw0XDhlbmFibGVkXDRcMThwbGFjZW1lbnRfcGVyY2VudFw0XDE5bWV0ZXJfZ2xvYmFsX3BhcmFtXDRcNmlzbmlsXDRcNm1vZGVsXDRcN0FSRE9VUlw0XDdMdWFBUElcNFwKbm90ZV9saXN0XDRcMjJuZXdfbm90ZV9kaWZmX2NvbW1hbmRcNFwxNERydW0gVmVsb2NpdHlcNFw5dmVsb2NpdHlcNFw1bm90ZVw0XDVtYXRoXDRcN3JhbmRvbVwxOVwxMjdcMFwwXDBcMFwwXDBcMFw0XDEybmV3X25vdGVwdHJcNFw4Y2hhbm5lbFw0XDV0aW1lXDRcN2xlbmd0aFw0XDdyZW1vdmVcNFw0YWRkXDRcMTRhcHBseV9jb21tYW5kXDRcOFNlc3Npb25cNFwxMm1pZGlfc291cmNlXDRcMTVBZGRSYW5kb21Ob3Rlc1w0XDlUZW1wb3JhbFw0XDlUZW1wb01hcFw0XDVyZWFkXDRcOXBvc2l0aW9uXDRcOW1ldGVyX2F0XDRcMThkaXZpc2lvbnNfcGVyX2Jhclw0XDIwbm9taW5hbF9zYW1wbGVfcmF0ZVw0XDl0ZW1wb19hdFw0XDIybm90ZV90eXBlc19wZXJfbWludXRlXDNcMFwwXDBcMFwwXDBOQFw0XDhzYW1wbGVzXDRcCnRpbWVjbnRfdFw0XDZmbG9vclwzmpmZmZmZ2T9cM5qZmZmZmbk/XDRcMTJxdWFydGVyc19hdFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzY3JpcHRzWzE0XVsibiJdID0gIkRydW0gTG9vcCBFZGl0b3IiICAg</ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="1618" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbInMiXSA9ICJhcmRvdXIge1wKIFtcInR5cGVcIl0gICAgPSBcIkVkaXRvckhvb2tcIixcCiBuYW1lICAgICAgICA9IFwiYXV0byBzYXZlIHNuYXBzaG90XCIsXAogYXV0aG9yICAgICAgPSBcIkFyZG91ciBUZWFtXCIsXAogZGVzY3JpcHRpb24gPSBcIlNhdmUgYSBzZXNzaW9uLXNuYXBzaG90IHBlcmlvZGljYWxseSAoZXZlcnkgbWludXRlKSBuYW1lZCBhZnRlciB0aGUgY3VycmVudCBkYXRlLXRpbWUgaW4gYSBzdWJmb2xkZXJcIixcCn1cClwKXAotLSBzdWJzY3JpYmUgdG8gc2lnbmFsc1wKZnVuY3Rpb24gc2lnbmFscyAoKVwKICByZXR1cm4gTHVhU2lnbmFsLlNldCgpOmFkZCAoe1tMdWFTaWduYWwuTHVhVGltZXJTXSA9IHRydWV9KVwKZW5kXApcCi0tIGNyZWF0ZSBjYWxsYmFjayBmdW5jdGlvblwKZnVuY3Rpb24gZmFjdG9yeSAoKVwKICBsb2NhbCBfbGFzdF9zbmFwc2hvdF90aW1lID0gMCAtLSBwZXJzaXN0ZW50IHZhcmlhYmxlXAogIGxvY2FsIF9zbmFwc2hvdF9pbnRlcnZhbCA9IDYwICogMSAtLSBpbnRlcnZhbCBpbiBzZWNvbmRzIChjdXJyZW50bHkgc2V0IHRvIDYwIHNlYylcClwKXApcCiAgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIHJlZiwgLi4uKVwKICAgIGxvY2FsIG5vdyA9IG9zLnRpbWUoKSAtLSB1bml4LXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MFwKXAogICAgLS0gc2tpcCBpbml0aWFsIHNhdmUgd2hlbiBzY3JpcHQgaXMgbG9hZGVkXAogICAgaWYgKF9sYXN0X3NuYXBzaG90X3RpbWUgPT0gMCkgdGhlblwKICAgICAgX2xhc3Rfc25hcHNob3RfdGltZSA9IG5vd1wKICAgIGVuZFwKXAogICAgaWYgKG5vdyA+IF9sYXN0X3NuYXBzaG90X3RpbWUgKyBfc25hcHNob3RfaW50ZXJ2YWwpIHRoZW5cCiAgICAgIC0tIGRvbid0IHNhdmUgd2hpbGUgcmVjb3JkaW5nLCBtYXkgaW50ZXJmZXJlIHdpdGggcmVjb3JkaW5nXAogICAgICBpZiBTZXNzaW9uOmFjdGl2ZWx5X3JlY29yZGluZygpIHRoZW5cCiAgICAgICAgLS0gcXVldWUgMzAgc2VjIGFmdGVyIHJlYy1zdG9wXAogICAgICAgIF9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3cgLSBfc25hcHNob3RfaW50ZXJ2YWwgKyAzMFwKICAgICAgICByZXR1cm5cCiAgICAgIGVuZFwKXAogICAgICAgc3BhdGggPSBTZXNzaW9uOnBhdGgoKVwKLS0gRGVmaW5lIHRoZSBiYWNrdXAgc3ViZm9sZGVyIG5hbWUgKHJlbGF0aXZlIHRvIHRoZSBzZXNzaW9uIGZvbGRlcilcCmxvY2FsIGJhY2t1cF9mb2xkZXIgPSBzcGF0aC4uXCIvYmFja3Vwc1wiXApcCi0tIENyZWF0ZSB0aGUgYmFja3VwIGZvbGRlciBpZiBpdCBkb2Vzbid0IGV4aXN0IChMaW51eC9tYWNPUyB2ZXJzaW9uOyBhZGp1c3QgZm9yIFdpbmRvd3MgaWYgbmVlZGVkKVwKb3MuZXhlY3V0ZShcIm1rZGlyIC1wIFwiIC4uIGJhY2t1cF9mb2xkZXIpXApcCiAgICAgIF9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3dcCiAgICAgIC0tIGZvcm1hdCBkYXRlLXRpbWUgKGF2b2lkIGNvbG9uKVwKICAgICAgbG9jYWwgc25hcHNob3RfbmFtZSA9IG9zLmRhdGUgKFwiJVktJW0tJWQgJUguJU0uJVNcIiwgbm93KVwKICAgICAgLS0gc2F2ZSBzZXNzaW9uIHNuYXBzaG90IHRvIHRoZSBiYWNrdXAgc3ViZm9sZGVyXAogICAgICBTZXNzaW9uOnNhdmVfc3RhdGUoYmFja3VwX2ZvbGRlciAuLiBcIi9iYWNrdXAgXCIgLi4gc25hcHNob3RfbmFtZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSlcCiAgICBlbmRcClwKICBlbmRcCmVuZFwKIiAgc1siZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcMTVcMFwwXDAwMDRcMFwwXDBcMFwwXDNcNVwwXDBcMFwxXDBcMFwwQUBcMFwwrFwwXDBcMKZcMFwwXDEmXDCAXDBcMlwwXDBcMFwxOVwwXDBcMFwwXDBcMFwwXDBcMTk8XDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDIxXDBcMFwwMDAzXDBcMFwwXDJcMVwwMTE0XDBcMFwwhlwwQFwwh0BAXDGkgIBcMMVcMIBcMFwzMYDAXDFcMzBcMFwwgIlcMIBcMMVcMIBcMFw1XDFcMFwxzVwwgVwxIICAXDFcMzCAXDmAxsBAXDDMXDDBXDHkgFwwXDHiXDBcMFwwXDMwXDBcMYDFXDBcMFwxzsBcMFwxzUDBXDHJXDCAXDAmXDCAXDDGwEBcMMzAwVwx5IBcMFwxXDjAXDCDxoBBXDBcMVwxXDJcMN1cMIFcMVw2XDFAXDBcN0FCXDJBgVwyXDCAXDGAXDFdgYFcMiRBXDBcMYlcMIBcMFw2XDFAXDBcN8FCXDJBXDFcM1wwgFwxXDBcMSSBgFwxRsFAXDBMQcNcMsBcMYBcMVwxglwzXDBAXDJcMFwy3UGCXDNcM1wyXDBcMENcMlwwXDCDXDJcMFwwZEFcMFwzJlwwgFwwXDE1XDBcMFwwXDRcM29zXDRcNXRpbWVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOFNlc3Npb25cNFwxOWFjdGl2ZWx5X3JlY29yZGluZ1wxOVwzMFwwXDBcMFwwXDBcMFwwXDRcNnNwYXRoXDRcNXBhdGhcNFw5L2JhY2t1cHNcNFw4ZXhlY3V0ZVw0XApta2RpciAtcCBcNFw1ZGF0ZVw0XDE4JVktJW0tJWQgJUguJU0uJVNcNFwxMXNhdmVfc3RhdGVcNFw5L2JhY2t1cCBcM1wwXDBcMFwwXDBcMVwwXDFcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9hdXRvc2F2ZS5sdWEiICAgc1sibiJdID0gImF1dG8gc2F2ZSBzbmFwc2hvdCIgIA==</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="6461" name="Create key file" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbIm4iXSA9ICJDcmVhdGUga2V5IGZpbGUiICBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy93cml0ZWtleWZpbGUubHVhIiAgIHNbImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE2XDBcMFwwMDA4XDBcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwxNlwwXDBcMDAwOFwwXDBcMFwxXDFcN1wyNlwwXDBcMEZcMEBcMExAwFwwZIBcMFwxhoBAXDDAXDCAXDCkQFwwXDGsXDBcMFww7EBcMFwwXDBcMYBcMUBcMYBcMCSBXDBcMVwiXDFcMFwwXDMwXDBcMoBBXDFcMVwwgFwxgFwwXYGBXDJcOECBgUZBQVwwR4HBXDKGwUBcMGRBXDBcMVwzMIBcMIBGgUBcMIHBXDFcMGRBXDBcMSZcMIBcMFw4XDBcMFwwXDRcOFNlc3Npb25cNFw1cGF0aFw0XDZwcmludFw0XDExa2V5Y29tbWFuZFw0IC9vcHQvTG9naWNhbEFyZG91ci9rZXlzdG9yZS5zaCBcNFwzb3NcNFw4ZXhlY3V0ZVwyMCtTZXNzaW9uIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ29cMVwwXDBcMFwwXDBcMlwwXDBcMFwwXDIyXDBcMFwwXDI4XDBcMFwwXDFcMFw2XDE3XDBcMFwwQVwwXDBcMIBcMFwwXDBdgIBcMIZAQFwwh4BAXDHAXDCAXDCkgFwwXDHMwEBcMUFcMVwxXDDkgIBcMVwxMkFBXDEkQVwwXDFcNoFBXDBAXDGAXDElXDFcMFwxJlwxXDBcMCZcMIBcMFw3XDBcMFwwXDRcMTJzdGF0IC1jICVXIFw0XDNpb1w0XDZwb3Blblw0XDVyZWFkXDRcMyphXDRcNmNsb3NlXDRcOXRvbnVtYmVyXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwzMVwwXDBcMChcMFwwXDBcMVwwXDVcMThcMFwwXDBFXDBcMFwwgFwwXDBcMGSAXDBcMWJcMFwwXDBcMzBAXDKAhlwwwFwwh0BAXDGkgIBcMM5AXDBcMWCAwFwxXDMwXDBcMIBcM0FcMFwwXDNcMYBcMCZcMVwwXDFcMzBAXDCAg1wwXDBcMKZcMFwwXDEmXDCAXDBcM1wwXDBcMFw0XDNvc1w0XDV0aW1lXDE5PFwwXDBcMFwwXDBcMFwwXDJcMFwwXDBcMVwyXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSAgICA9IFwiRWRpdG9ySG9va1wiLFwKXDluYW1lICAgICAgICA9IFwiQ3JlYXRlIGtleSBmaWxlXCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKXDlkZXNjcmlwdGlvbiA9IFwiQ3JlYXRlIHRleHQgZmlsZSB0byBzdG9yZSB0aGUgcHJvamVjdHMgY3VycmVudCBrZXkgZm9yIGF1dG90dW5lIGFuZCB0cmFuc3Bvc2l0aW9uXCIsXAp9XApcClwKXApmdW5jdGlvbiBzaWduYWxzICgpXApcOXMgPSBMdWFTaWduYWwuU2V0KClcClw5czphZGQgKHtbTHVhU2lnbmFsLlNldFNlc3Npb25dID0gdHJ1ZX0pXApcOXJldHVybiBzXAplbmRcClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApcCmxvY2FsIHBhdGggID0gU2Vzc2lvbjpwYXRoKClcCnByaW50KHBhdGgpXApcCmxvY2FsIGZ1bmN0aW9uIGdldF9mb2xkZXJfYmlydGhfdGltZShwYXRoKVwKICAgIGxvY2FsIGNvbW1hbmQgPSBcInN0YXQgLWMgJVcgXCIgLi4gcGF0aFwKICAgIGxvY2FsIGhhbmRsZSA9IGlvLnBvcGVuKGNvbW1hbmQpXAogICAgbG9jYWwgcmVzdWx0ID0gaGFuZGxlOnJlYWQoXCIqYVwiKVwKICAgIGhhbmRsZTpjbG9zZSgpXAogICAgcmV0dXJuIHRvbnVtYmVyKHJlc3VsdClcCmVuZFwKXApcCmxvY2FsIGZ1bmN0aW9uIGZvbGRlcl9jcmVhdGVkX2xlc3NfdGhhbl9taW51dGVfYWdvKHBhdGgpXAogICAgbG9jYWwgZm9sZGVyX2JpcnRoX3RpbWUgPSBnZXRfZm9sZGVyX2JpcnRoX3RpbWUocGF0aClcCiAgICBpZiBmb2xkZXJfYmlydGhfdGltZSB0aGVuXAogICAgICAgIGxvY2FsIGN1cnJlbnRfdGltZSA9IG9zLnRpbWUoKVwKICAgICAgICBsb2NhbCBkaWZmZXJlbmNlID0gY3VycmVudF90aW1lIC0gZm9sZGVyX2JpcnRoX3RpbWVcCiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2UgPCA2MCAgLS0gNjAgc2Vjb25kcyA9IDEgbWludXRlXAogICAgZWxzZVwKICAgICAgICByZXR1cm4gZmFsc2UgIC0tIFVuYWJsZSB0byBnZXQgdGhlIGJpcnRoIHRpbWVcCiAgICBlbmRcCmVuZFwKbG9jYWwgaXNfbGVzc190aGFuX21pbnV0ZV9hZ28gPSBmb2xkZXJfY3JlYXRlZF9sZXNzX3RoYW5fbWludXRlX2FnbyhwYXRoKVwKXAppZiBpc19sZXNzX3RoYW5fbWludXRlX2FnbyB0aGVuXApcCmtleWNvbW1hbmQgPSBcIi9vcHQvTG9naWNhbEFyZG91ci9rZXlzdG9yZS5zaCBcIi4ucGF0aFwKXApvcy5leGVjdXRlKGtleWNvbW1hbmQpXAplbHNlXApcCnByaW50KFwiU2Vzc2lvbiBub3QgY3JlYXRlZCBsZXNzIHRoYW4gYSBtaW51dGUgYWdvXCIpXApcCmVuZFwKXApcClwKZW5kIGVuZFwKIiAg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="28095" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbIm4iXSA9ICJMb2FkIGd1aWRlZCBtZW51IiAgc1sicyJdID0gImFyZG91ciB7XApcOVtcInR5cGVcIl0gICAgPSBcIkVkaXRvckhvb2tcIixcClw5bmFtZSAgICAgICAgPSBcIkxvYWQgZ3VpZGVkIG1lbnVcIixcClw5YXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApcOWRlc2NyaXB0aW9uID0gXCJQcmVzZW50IGEgbWVudSBvbiBuZXcgc2Vzc2lvbiB0byBsb2FkIHVwIGRpZmZlcmVudCB0cmFjayB0ZW1wbGF0ZXNcIixcCn1cClwKXApcCmZ1bmN0aW9uIHNpZ25hbHMgKClcClw5cyA9IEx1YVNpZ25hbC5TZXQoKVwKXDlzOmFkZCAoe1tMdWFTaWduYWwuU2V0U2Vzc2lvbl0gPSB0cnVlfSlcClw5cmV0dXJuIHNcCmVuZFwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcClwKbG9jYWwgcGF0aCAgPSBTZXNzaW9uOnBhdGgoKVwKcHJpbnQocGF0aClcClwKXApsb2NhbCBmdW5jdGlvbiBnZXRfZm9sZGVyX2JpcnRoX3RpbWUocGF0aClcCiAgICBsb2NhbCBjb21tYW5kID0gXCJzdGF0IC1jICVXIFwiIC4uIHBhdGhcCiAgICBsb2NhbCBoYW5kbGUgPSBpby5wb3Blbihjb21tYW5kKVwKICAgIGxvY2FsIHJlc3VsdCA9IGhhbmRsZTpyZWFkKFwiKmFcIilcCiAgICBoYW5kbGU6Y2xvc2UoKVwKICAgIHJldHVybiB0b251bWJlcihyZXN1bHQpXAplbmRcClwKXApsb2NhbCBmdW5jdGlvbiBmb2xkZXJfY3JlYXRlZF9sZXNzX3RoYW5fbWludXRlX2FnbyhwYXRoKVwKICAgIGxvY2FsIGZvbGRlcl9iaXJ0aF90aW1lID0gZ2V0X2ZvbGRlcl9iaXJ0aF90aW1lKHBhdGgpXAogICAgaWYgZm9sZGVyX2JpcnRoX3RpbWUgdGhlblwKICAgICAgICBsb2NhbCBjdXJyZW50X3RpbWUgPSBvcy50aW1lKClcCiAgICAgICAgbG9jYWwgZGlmZmVyZW5jZSA9IGN1cnJlbnRfdGltZSAtIGZvbGRlcl9iaXJ0aF90aW1lXAogICAgICAgIHJldHVybiBkaWZmZXJlbmNlIDwgNjAgIC0tIDYwIHNlY29uZHMgPSAxIG1pbnV0ZVwKICAgIGVsc2VcCiAgICAgICAgcmV0dXJuIGZhbHNlICAtLSBVbmFibGUgdG8gZ2V0IHRoZSBiaXJ0aCB0aW1lXAogICAgZW5kXAplbmRcClwKXApcCmxvY2FsIGlzX2xlc3NfdGhhbl9taW51dGVfYWdvID0gZm9sZGVyX2NyZWF0ZWRfbGVzc190aGFuX21pbnV0ZV9hZ28ocGF0aClcClwKaWYgaXNfbGVzc190aGFuX21pbnV0ZV9hZ28gdGhlblwKXAogRWRpdG9yOmFjY2Vzc19hY3Rpb24oXCJMdWFBY3Rpb25cIiwgXCJzY3JpcHQtMVwiKVwKXApcClwKXApcClwKXApcClwKZWxzZVwKICAgIHByaW50KFwiVGhlIGZvbGRlciB3YXMgbm90IGNyZWF0ZWQgbGVzcyB0aGFuIGEgbWludXRlIGFnby5cIilcCmVuZFwKXApcClwKXApcClwKXAplbmQgZW5kXAoiICBzWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwxNlwwXDBcMEVcMFwwXDBcMFwwXDJcM1wwXDBcMCxcMFwwXDAmXDBcMFwxJlwwgFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDE2XDBcMFwwRVwwXDBcMFwxXDFcOVwyM1wwXDBcMEZcMEBcMExAwFwwZIBcMFwxhoBAXDDAXDCAXDCkQFwwXDGsXDBcMFww7EBcMFwwXDBcMYBcMUBcMYBcMCSBXDBcMVwiXDFcMFwwXDMwQFwxgEbBQFwwTFwxwVwywUFcMVwwXDGCXDFcMGRBXDBcMlwzMIBcMIBGgUBcMIHBXDFcMGRBXDBcMSZcMIBcMFw4XDBcMFwwXDRcOFNlc3Npb25cNFw1cGF0aFw0XDZwcmludFw0XDdFZGl0b3JcNFwxNGFjY2Vzc19hY3Rpb25cNFwKTHVhQWN0aW9uXDRcOXNjcmlwdC0xXDAyMDNUaGUgZm9sZGVyIHdhcyBub3QgY3JlYXRlZCBsZXNzIHRoYW4gYSBtaW51dGUgYWdvLlwxXDBcMFwwXDBcMFwyXDBcMFwwXDBcMjNcMFwwXDBcMjlcMFwwXDBcMVwwXDZcMTdcMFwwXDBBXDBcMFwwgFwwXDBcMF2AgFwwhkBAXDCHgEBcMcBcMIBcMKSAXDBcMczAQFwxQVwxXDFcMOSAgFwxXDEyQUFcMSRBXDBcMVw2gUFcMEBcMYBcMSVcMVwwXDEmXDFcMFwwJlwwgFwwXDdcMFwwXDBcNFwxMnN0YXQgLWMgJVcgXDRcM2lvXDRcNnBvcGVuXDRcNXJlYWRcNFwzKmFcNFw2Y2xvc2VcNFw5dG9udW1iZXJcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIFwwXDBcMClcMFwwXDBcMVwwXDVcMThcMFwwXDBFXDBcMFwwgFwwXDBcMGSAXDBcMWJcMFwwXDBcMzBAXDKAhlwwwFwwh0BAXDGkgIBcMM5AXDBcMWCAwFwxXDMwXDBcMIBcM0FcMFwwXDNcMYBcMCZcMVwwXDFcMzBAXDCAg1wwXDBcMKZcMFwwXDEmXDCAXDBcM1wwXDBcMFw0XDNvc1w0XDV0aW1lXDE5PFwwXDBcMFwwXDBcMFwwXDJcMFwwXDBcMVwyXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9zZXNzaW9udHJhY2subHVhIiAgIA==</LuaCallback>
  </ActionHooks>
</UIScripts>

<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="1618" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbInMiXSA9ICJhcmRvdXIge1wKIFtcInR5cGVcIl0gICAgPSBcIkVkaXRvckhvb2tcIixcCiBuYW1lICAgICAgICA9IFwiYXV0byBzYXZlIHNuYXBzaG90XCIsXAogYXV0aG9yICAgICAgPSBcIkFyZG91ciBUZWFtXCIsXAogZGVzY3JpcHRpb24gPSBcIlNhdmUgYSBzZXNzaW9uLXNuYXBzaG90IHBlcmlvZGljYWxseSAoZXZlcnkgbWludXRlKSBuYW1lZCBhZnRlciB0aGUgY3VycmVudCBkYXRlLXRpbWUgaW4gYSBzdWJmb2xkZXJcIixcCn1cClwKXAotLSBzdWJzY3JpYmUgdG8gc2lnbmFsc1wKZnVuY3Rpb24gc2lnbmFscyAoKVwKICByZXR1cm4gTHVhU2lnbmFsLlNldCgpOmFkZCAoe1tMdWFTaWduYWwuTHVhVGltZXJTXSA9IHRydWV9KVwKZW5kXApcCi0tIGNyZWF0ZSBjYWxsYmFjayBmdW5jdGlvblwKZnVuY3Rpb24gZmFjdG9yeSAoKVwKICBsb2NhbCBfbGFzdF9zbmFwc2hvdF90aW1lID0gMCAtLSBwZXJzaXN0ZW50IHZhcmlhYmxlXAogIGxvY2FsIF9zbmFwc2hvdF9pbnRlcnZhbCA9IDYwICogMSAtLSBpbnRlcnZhbCBpbiBzZWNvbmRzIChjdXJyZW50bHkgc2V0IHRvIDYwIHNlYylcClwKXApcCiAgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIHJlZiwgLi4uKVwKICAgIGxvY2FsIG5vdyA9IG9zLnRpbWUoKSAtLSB1bml4LXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MFwKXAogICAgLS0gc2tpcCBpbml0aWFsIHNhdmUgd2hlbiBzY3JpcHQgaXMgbG9hZGVkXAogICAgaWYgKF9sYXN0X3NuYXBzaG90X3RpbWUgPT0gMCkgdGhlblwKICAgICAgX2xhc3Rfc25hcHNob3RfdGltZSA9IG5vd1wKICAgIGVuZFwKXAogICAgaWYgKG5vdyA+IF9sYXN0X3NuYXBzaG90X3RpbWUgKyBfc25hcHNob3RfaW50ZXJ2YWwpIHRoZW5cCiAgICAgIC0tIGRvbid0IHNhdmUgd2hpbGUgcmVjb3JkaW5nLCBtYXkgaW50ZXJmZXJlIHdpdGggcmVjb3JkaW5nXAogICAgICBpZiBTZXNzaW9uOmFjdGl2ZWx5X3JlY29yZGluZygpIHRoZW5cCiAgICAgICAgLS0gcXVldWUgMzAgc2VjIGFmdGVyIHJlYy1zdG9wXAogICAgICAgIF9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3cgLSBfc25hcHNob3RfaW50ZXJ2YWwgKyAzMFwKICAgICAgICByZXR1cm5cCiAgICAgIGVuZFwKXAogICAgICAgc3BhdGggPSBTZXNzaW9uOnBhdGgoKVwKLS0gRGVmaW5lIHRoZSBiYWNrdXAgc3ViZm9sZGVyIG5hbWUgKHJlbGF0aXZlIHRvIHRoZSBzZXNzaW9uIGZvbGRlcilcCmxvY2FsIGJhY2t1cF9mb2xkZXIgPSBzcGF0aC4uXCIvYmFja3Vwc1wiXApcCi0tIENyZWF0ZSB0aGUgYmFja3VwIGZvbGRlciBpZiBpdCBkb2Vzbid0IGV4aXN0IChMaW51eC9tYWNPUyB2ZXJzaW9uOyBhZGp1c3QgZm9yIFdpbmRvd3MgaWYgbmVlZGVkKVwKb3MuZXhlY3V0ZShcIm1rZGlyIC1wIFwiIC4uIGJhY2t1cF9mb2xkZXIpXApcCiAgICAgIF9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3dcCiAgICAgIC0tIGZvcm1hdCBkYXRlLXRpbWUgKGF2b2lkIGNvbG9uKVwKICAgICAgbG9jYWwgc25hcHNob3RfbmFtZSA9IG9zLmRhdGUgKFwiJVktJW0tJWQgJUguJU0uJVNcIiwgbm93KVwKICAgICAgLS0gc2F2ZSBzZXNzaW9uIHNuYXBzaG90IHRvIHRoZSBiYWNrdXAgc3ViZm9sZGVyXAogICAgICBTZXNzaW9uOnNhdmVfc3RhdGUoYmFja3VwX2ZvbGRlciAuLiBcIi9iYWNrdXAgXCIgLi4gc25hcHNob3RfbmFtZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSlcCiAgICBlbmRcClwKICBlbmRcCmVuZFwKIiAgc1siZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcMTVcMFwwXDAwMDRcMFwwXDBcMFwwXDNcNVwwXDBcMFwxXDBcMFwwQUBcMFwwrFwwXDBcMKZcMFwwXDEmXDCAXDBcMlwwXDBcMFwxOVwwXDBcMFwwXDBcMFwwXDBcMTk8XDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDIxXDBcMFwwMDAzXDBcMFwwXDJcMVwwMTE0XDBcMFwwhlwwQFwwh0BAXDGkgIBcMMVcMIBcMFwzMYDAXDFcMzBcMFwwgIlcMIBcMMVcMIBcMFw1XDFcMFwxzVwwgVwxIICAXDFcMzCAXDmAxsBAXDDMXDDBXDHkgFwwXDHiXDBcMFwwXDMwXDBcMYDFXDBcMFwxzsBcMFwxzUDBXDHJXDCAXDAmXDCAXDDGwEBcMMzAwVwx5IBcMFwxXDjAXDCDxoBBXDBcMVwxXDJcMN1cMIFcMVw2XDFAXDBcN0FCXDJBgVwyXDCAXDGAXDFdgYFcMiRBXDBcMYlcMIBcMFw2XDFAXDBcN8FCXDJBXDFcM1wwgFwxXDBcMSSBgFwxRsFAXDBMQcNcMsBcMYBcMVwxglwzXDBAXDJcMFwy3UGCXDNcM1wyXDBcMENcMlwwXDCDXDJcMFwwZEFcMFwzJlwwgFwwXDE1XDBcMFwwXDRcM29zXDRcNXRpbWVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOFNlc3Npb25cNFwxOWFjdGl2ZWx5X3JlY29yZGluZ1wxOVwzMFwwXDBcMFwwXDBcMFwwXDRcNnNwYXRoXDRcNXBhdGhcNFw5L2JhY2t1cHNcNFw4ZXhlY3V0ZVw0XApta2RpciAtcCBcNFw1ZGF0ZVw0XDE4JVktJW0tJWQgJUguJU0uJVNcNFwxMXNhdmVfc3RhdGVcNFw5L2JhY2t1cCBcM1wwXDBcMFwwXDBcMVwwXDFcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9hdXRvc2F2ZS5sdWEiICAgc1sibiJdID0gImF1dG8gc2F2ZSBzbmFwc2hvdCIgIA==</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="6461" name="Create key file" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE2XDBcMFwwMDA4XDBcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwxNlwwXDBcMDAwOFwwXDBcMFwxXDFcN1wyNlwwXDBcMEZcMEBcMExAwFwwZIBcMFwxhoBAXDDAXDCAXDCkQFwwXDGsXDBcMFww7EBcMFwwXDBcMYBcMUBcMYBcMCSBXDBcMVwiXDFcMFwwXDMwXDBcMoBBXDFcMVwwgFwxgFwwXYGBXDJcOECBgUZBQVwwR4HBXDKGwUBcMGRBXDBcMVwzMIBcMIBGgUBcMIHBXDFcMGRBXDBcMSZcMIBcMFw4XDBcMFwwXDRcOFNlc3Npb25cNFw1cGF0aFw0XDZwcmludFw0XDExa2V5Y29tbWFuZFw0IC9vcHQvTG9naWNhbEFyZG91ci9rZXlzdG9yZS5zaCBcNFwzb3NcNFw4ZXhlY3V0ZVwyMCtTZXNzaW9uIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ29cMVwwXDBcMFwwXDBcMlwwXDBcMFwwXDIyXDBcMFwwXDI4XDBcMFwwXDFcMFw2XDE3XDBcMFwwQVwwXDBcMIBcMFwwXDBdgIBcMIZAQFwwh4BAXDHAXDCAXDCkgFwwXDHMwEBcMUFcMVwxXDDkgIBcMVwxMkFBXDEkQVwwXDFcNoFBXDBAXDGAXDElXDFcMFwxJlwxXDBcMCZcMIBcMFw3XDBcMFwwXDRcMTJzdGF0IC1jICVXIFw0XDNpb1w0XDZwb3Blblw0XDVyZWFkXDRcMyphXDRcNmNsb3NlXDRcOXRvbnVtYmVyXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwzMVwwXDBcMChcMFwwXDBcMVwwXDVcMThcMFwwXDBFXDBcMFwwgFwwXDBcMGSAXDBcMWJcMFwwXDBcMzBAXDKAhlwwwFwwh0BAXDGkgIBcMM5AXDBcMWCAwFwxXDMwXDBcMIBcM0FcMFwwXDNcMYBcMCZcMVwwXDFcMzBAXDCAg1wwXDBcMKZcMFwwXDEmXDCAXDBcM1wwXDBcMFw0XDNvc1w0XDV0aW1lXDE5PFwwXDBcMFwwXDBcMFwwXDJcMFwwXDBcMVwyXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy93cml0ZWtleWZpbGUubHVhIiAgIHNbIm4iXSA9ICJDcmVhdGUga2V5IGZpbGUiICBzWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSAgICA9IFwiRWRpdG9ySG9va1wiLFwKXDluYW1lICAgICAgICA9IFwiQ3JlYXRlIGtleSBmaWxlXCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKXDlkZXNjcmlwdGlvbiA9IFwiQ3JlYXRlIHRleHQgZmlsZSB0byBzdG9yZSB0aGUgcHJvamVjdHMgY3VycmVudCBrZXkgZm9yIGF1dG90dW5lIGFuZCB0cmFuc3Bvc2l0aW9uXCIsXAp9XApcClwKXApmdW5jdGlvbiBzaWduYWxzICgpXApcOXMgPSBMdWFTaWduYWwuU2V0KClcClw5czphZGQgKHtbTHVhU2lnbmFsLlNldFNlc3Npb25dID0gdHJ1ZX0pXApcOXJldHVybiBzXAplbmRcClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApcCmxvY2FsIHBhdGggID0gU2Vzc2lvbjpwYXRoKClcCnByaW50KHBhdGgpXApcCmxvY2FsIGZ1bmN0aW9uIGdldF9mb2xkZXJfYmlydGhfdGltZShwYXRoKVwKICAgIGxvY2FsIGNvbW1hbmQgPSBcInN0YXQgLWMgJVcgXCIgLi4gcGF0aFwKICAgIGxvY2FsIGhhbmRsZSA9IGlvLnBvcGVuKGNvbW1hbmQpXAogICAgbG9jYWwgcmVzdWx0ID0gaGFuZGxlOnJlYWQoXCIqYVwiKVwKICAgIGhhbmRsZTpjbG9zZSgpXAogICAgcmV0dXJuIHRvbnVtYmVyKHJlc3VsdClcCmVuZFwKXApcCmxvY2FsIGZ1bmN0aW9uIGZvbGRlcl9jcmVhdGVkX2xlc3NfdGhhbl9taW51dGVfYWdvKHBhdGgpXAogICAgbG9jYWwgZm9sZGVyX2JpcnRoX3RpbWUgPSBnZXRfZm9sZGVyX2JpcnRoX3RpbWUocGF0aClcCiAgICBpZiBmb2xkZXJfYmlydGhfdGltZSB0aGVuXAogICAgICAgIGxvY2FsIGN1cnJlbnRfdGltZSA9IG9zLnRpbWUoKVwKICAgICAgICBsb2NhbCBkaWZmZXJlbmNlID0gY3VycmVudF90aW1lIC0gZm9sZGVyX2JpcnRoX3RpbWVcCiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2UgPCA2MCAgLS0gNjAgc2Vjb25kcyA9IDEgbWludXRlXAogICAgZWxzZVwKICAgICAgICByZXR1cm4gZmFsc2UgIC0tIFVuYWJsZSB0byBnZXQgdGhlIGJpcnRoIHRpbWVcCiAgICBlbmRcCmVuZFwKbG9jYWwgaXNfbGVzc190aGFuX21pbnV0ZV9hZ28gPSBmb2xkZXJfY3JlYXRlZF9sZXNzX3RoYW5fbWludXRlX2FnbyhwYXRoKVwKXAppZiBpc19sZXNzX3RoYW5fbWludXRlX2FnbyB0aGVuXApcCmtleWNvbW1hbmQgPSBcIi9vcHQvTG9naWNhbEFyZG91ci9rZXlzdG9yZS5zaCBcIi4ucGF0aFwKXApvcy5leGVjdXRlKGtleWNvbW1hbmQpXAplbHNlXApcCnByaW50KFwiU2Vzc2lvbiBub3QgY3JlYXRlZCBsZXNzIHRoYW4gYSBtaW51dGUgYWdvXCIpXApcCmVuZFwKXApcClwKZW5kIGVuZFwKIiAg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="28095" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdICAgID0gXCJFZGl0b3JIb29rXCIsXApcOW5hbWUgICAgICAgID0gXCJMb2FkIGd1aWRlZCBtZW51XCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKXDlkZXNjcmlwdGlvbiA9IFwiUHJlc2VudCBhIG1lbnUgb24gbmV3IHNlc3Npb24gdG8gbG9hZCB1cCBkaWZmZXJlbnQgdHJhY2sgdGVtcGxhdGVzXCIsXAp9XApcClwKXApmdW5jdGlvbiBzaWduYWxzICgpXApcOXMgPSBMdWFTaWduYWwuU2V0KClcClw5czphZGQgKHtbTHVhU2lnbmFsLlNldFNlc3Npb25dID0gdHJ1ZX0pXApcOXJldHVybiBzXAplbmRcClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApcCmxvY2FsIHBhdGggID0gU2Vzc2lvbjpwYXRoKClcCnByaW50KHBhdGgpXApcClwKbG9jYWwgZnVuY3Rpb24gZ2V0X2ZvbGRlcl9iaXJ0aF90aW1lKHBhdGgpXAogICAgbG9jYWwgY29tbWFuZCA9IFwic3RhdCAtYyAlVyBcIiAuLiBwYXRoXAogICAgbG9jYWwgaGFuZGxlID0gaW8ucG9wZW4oY29tbWFuZClcCiAgICBsb2NhbCByZXN1bHQgPSBoYW5kbGU6cmVhZChcIiphXCIpXAogICAgaGFuZGxlOmNsb3NlKClcCiAgICByZXR1cm4gdG9udW1iZXIocmVzdWx0KVwKZW5kXApcClwKbG9jYWwgZnVuY3Rpb24gZm9sZGVyX2NyZWF0ZWRfbGVzc190aGFuX21pbnV0ZV9hZ28ocGF0aClcCiAgICBsb2NhbCBmb2xkZXJfYmlydGhfdGltZSA9IGdldF9mb2xkZXJfYmlydGhfdGltZShwYXRoKVwKICAgIGlmIGZvbGRlcl9iaXJ0aF90aW1lIHRoZW5cCiAgICAgICAgbG9jYWwgY3VycmVudF90aW1lID0gb3MudGltZSgpXAogICAgICAgIGxvY2FsIGRpZmZlcmVuY2UgPSBjdXJyZW50X3RpbWUgLSBmb2xkZXJfYmlydGhfdGltZVwKICAgICAgICByZXR1cm4gZGlmZmVyZW5jZSA8IDYwICAtLSA2MCBzZWNvbmRzID0gMSBtaW51dGVcCiAgICBlbHNlXAogICAgICAgIHJldHVybiBmYWxzZSAgLS0gVW5hYmxlIHRvIGdldCB0aGUgYmlydGggdGltZVwKICAgIGVuZFwKZW5kXApcClwKXApsb2NhbCBpc19sZXNzX3RoYW5fbWludXRlX2FnbyA9IGZvbGRlcl9jcmVhdGVkX2xlc3NfdGhhbl9taW51dGVfYWdvKHBhdGgpXApcCmlmIGlzX2xlc3NfdGhhbl9taW51dGVfYWdvIHRoZW5cClwKIEVkaXRvcjphY2Nlc3NfYWN0aW9uKFwiTHVhQWN0aW9uXCIsIFwic2NyaXB0LTFcIilcClwKXApcClwKXApcClwKXApcCmVsc2VcCiAgICBwcmludChcIlRoZSBmb2xkZXIgd2FzIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ28uXCIpXAplbmRcClwKXApcClwKXApcClwKZW5kIGVuZFwKIiAgc1siZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcMTZcMFwwXDBFXDBcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwxNlwwXDBcMEVcMFwwXDBcMVwxXDlcMjNcMFwwXDBGXDBAXDBMQMBcMGSAXDBcMYaAQFwwwFwwgFwwpEBcMFwxrFwwXDBcMOxAXDBcMFwwXDGAXDFAXDGAXDAkgVwwXDFcIlwxXDBcMFwzMEBcMYBGwUBcMExcMcFcMsFBXDFcMFwxglwxXDBkQVwwXDJcMzCAXDCARoFAXDCBwVwxXDBkQVwwXDEmXDCAXDBcOFwwXDBcMFw0XDhTZXNzaW9uXDRcNXBhdGhcNFw2cHJpbnRcNFw3RWRpdG9yXDRcMTRhY2Nlc3NfYWN0aW9uXDRcCkx1YUFjdGlvblw0XDlzY3JpcHQtMVwwMjAzVGhlIGZvbGRlciB3YXMgbm90IGNyZWF0ZWQgbGVzcyB0aGFuIGEgbWludXRlIGFnby5cMVwwXDBcMFwwXDBcMlwwXDBcMFwwXDIzXDBcMFwwXDI5XDBcMFwwXDFcMFw2XDE3XDBcMFwwQVwwXDBcMIBcMFwwXDBdgIBcMIZAQFwwh4BAXDHAXDCAXDCkgFwwXDHMwEBcMUFcMVwxXDDkgIBcMVwxMkFBXDEkQVwwXDFcNoFBXDBAXDGAXDElXDFcMFwxJlwxXDBcMCZcMIBcMFw3XDBcMFwwXDRcMTJzdGF0IC1jICVXIFw0XDNpb1w0XDZwb3Blblw0XDVyZWFkXDRcMyphXDRcNmNsb3NlXDRcOXRvbnVtYmVyXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCBcMFwwXDApXDBcMFwwXDFcMFw1XDE4XDBcMFwwRVwwXDBcMIBcMFwwXDBkgFwwXDFiXDBcMFwwXDMwQFwygIZcMMBcMIdAQFwxpICAXDDOQFwwXDFggMBcMVwzMFwwXDCAXDNBXDBcMFwzXDGAXDAmXDFcMFwxXDMwQFwwgINcMFwwXDCmXDBcMFwxJlwwgFwwXDNcMFwwXDBcNFwzb3NcNFw1dGltZVwxOTxcMFwwXDBcMFwwXDBcMFwyXDBcMFwwXDFcMlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc1siYSJdID0ge30gc1siYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvc2Vzc2lvbnRyYWNrLmx1YSIgICBzWyJuIl0gPSAiTG9hZCBndWlkZWQgbWVudSIgIA==</LuaCallback>
  </ActionHooks>
</UIScripts>

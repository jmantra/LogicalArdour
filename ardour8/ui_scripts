<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3">c2NyaXB0cyA9IHt9IHNjcmlwdHNbMV0gPSB7fSBzY3JpcHRzWzFdWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgPSBcIk5ldyBUcmFjayAtIERpYWxvZyBNZW51XCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKZGVzY3JpcHRpb24gPSBbW1wKQnJpbmdzIHVwIGEgZGlhbG9nIG1lbnUgdG8gc2VsZWN0IHRyYWNrIHR5cGVzIGJhc2VkIG9uIHRlbXBsYXRlc1wKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcImRyb3Bkb3duXCIsIHRpdGxlID0gXCJDaG9vc2UgVHJhY2tcIiwgdmFsdWVzID0ge1wKICAgICAgW1wiQ2hvb3NlIGEgdHJhY2sgVHlwZVwiXSA9IDEsXAogICAgICBbXCJEcnVtIFRyYWNrXCJdID0ge1wKICAgICAgICBbXCJSZWQgWmVwcGxpblwiXSA9IFwicnpcIiwgW1wiQmxhY2sgUGVhcmxcIl0gPSBcImJwXCIsIFtcIkJsb25kZSBCb3BcIl0gPSBcImJvXCIsXAogICAgICAgIFtcIlN0YW5kYXJkIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJzdGRcIiwgW1wiU3RhbmRhcmQgMiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwic3QyXCIsXAogICAgICAgIFtcIkVsZWN0cm9uaWMgRHJ1bXNcIl0gPSBcImVsZFwiLCBbXCJSb29tIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCJybWRcIixcCiAgICAgICAgW1wiUG93ZXIgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcInB3ZFwiLCBbXCJEYW5jZSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwiZGFkXCIsXAogICAgICAgIFtcIkphenogRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImp6ZFwiLCBbXCI4MDgvODA5IERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gXCI4MDhcIixcCiAgICAgICAgW1wiQnJ1c2ggRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcImJyZFwiLCBbXCJPcmNoZXN0cmFsIFBlcmMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSBcIm9ycFwiLFwKICAgICAgICBbXCJTb25pTmVrbyBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwic29uXCIsIFtcIkFsZXNpcyBEcnVta2l0cyAoVXNlIEMxIHRvIGNoYW5nZSBraXRzKSAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IFwiYWxcIlwKICAgICAgfSxcCiAgICAgIFtcIlBsYXkgU29mdHdhcmUgSW5zdHJ1bWVudHNcIl0gPSB7XAogICAgICAgIFtcIkFDRSBGbHVpZCAoVHJhZGl0aW9uYWwgSW5zdHJ1bWVudHMpXCJdID0gXCJhY1wiLCBbXCJaeW5hZGRzdWJmeCAoVHJhZGl0aW9uYWwgU3ludGgpXCJdID0gXCJ6YVwiLFwKICAgICAgICBbXCJTdXJnZSBYVCAoU3ludGggd2l0aCBhIExPVCBvZiBwcmVzZXRzKVwiXSA9IFwic3RcIixbXCJTYW1wbHYxIFNhbXBsZXJcIl0gPSBcInNhbXBcIlwKICAgICAgfSxcCiAgICAgIFtcIlNlc3Npb24gUGxheWVyXCJdID0ge1wKICAgICAgICBbXCJBQ0UgRmx1aWQgKFRyYWRpdGlvbmFsIEluc3RydW1lbnRzKVwiXSA9IFwiYWNzXCIsIFtcIlp5bmFkZHN1YmZ4IChUcmFkaXRpb25hbCBTeW50aClcIl0gPSBcInphc1wiLFwKICAgICAgICBbXCJTdXJnZSBYVCAoU3ludGggd2l0aCBhIExPVCBvZiBwcmVzZXRzKVwiXSA9IFwic3RzXCJcCiAgICAgIH0sXAogICAgICBbXCJSZWNvcmQgQXVkaW9cIl0gPSB7XAogICAgICAgIFtcIlZvY2Fsc1wiXSA9IHtcCiAgICAgICAgICBbXCJDbGFzc2ljXCJdID0gXCJjbHZcIiwgW1wiQnJpZ2h0XCJdID0gXCJicnZcIiwgW1wiQ29tcHJlc3NlZFwiXSA9IFwiY292XCIsXAogICAgICAgICAgW1wiVGVsZXBob25lXCJdID0gXCJ0bHZcIiwgW1wiRGFuY2VcIl0gPSBcImRhdlwiLCBbXCJOYXR1cmFsXCJdID0gXCJuYXZcIixcCiAgICAgICAgICBbXCJFZGdlXCJdID0gXCJlZHZcIiwgW1wiRnV6elwiXSA9IFwiZnp2XCIsIFtcIlR1YmUgVm9jYWxzXCJdID0gXCJ0dWJcIixcCiAgICAgICAgICBbXCJEZWVwZXIgVm9jYWxzXCJdID0gXCJkcFwiLCBbXCJSb2JvdCBWb2NhbHNcIl0gPSBcInJvYlwiXAogICAgICAgIH0sXAogICAgICAgIFtcIkJsYW5rIEF1ZGlvIFRyYWNrXCJdID0gXCJhdWRpb1wiXAogICAgICB9LFwKICAgICAgW1wiUmVjb3JkIEd1aXRhciBvciBCYXNzXCJdID0ge1wKICAgICAgICBbXCJHdWl0YXJpeFwiXSA9IFwiZ3hcIiwgW1wiUmF0YXRvdWlsbGVcIl0gPSBcInJhXCJcCiAgICAgIH1cCiAgICB9LFwKICAgIGRlZmF1bHQgPSBcIkNob29zZSBhIHRyYWNrIHR5cGVcIlwKICB9XAp9XApcClwKXDktLSBGZXRjaCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgPSBBUkRPVVIudXNlcl9jb25maWdfZGlyZWN0b3J5KDgpIC0tIGdldCB0aGUgY29uZmlnIGRpcmVjdG9yeSAodXNpbmcgdmVyc2lvbiA4KVwKXAotLSBQcmludCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApwcmludCh1c2VyX2NvbmZpZ19kaXJlY3RvcnkpXApcClwKXApcClwKLS0gRGVmaW5lIHRoZSBzdWJkaXJlY3RvcnkgeW91IHdhbnQgdG8gY29uY2F0ZW5hdGVcCmxvY2FsIHN1YmRpciA9IFwicm91dGVfdGVtcGxhdGVzXCJcClwKLS0gQ29uY2F0ZW5hdGUgdGhlIGNvbmZpZyBkaXJlY3Rvcnkgd2l0aCB0aGUgc3ViZGlyZWN0b3J5XApsb2NhbCBmdWxsX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIvXCIgLi4gc3ViZGlyXApcCi0tIFByaW50IHRoZSBmdWxsIHBhdGhcClwKXApwcmludCAoZnVsbF9wYXRoKVwKXApcClw5bG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBUcmFja1wiLCBkaWFsb2dfb3B0aW9ucylcClw5bG9jYWwgcnYgPSBvZDpydW4oKVwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicnpcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgY2hvc2UgUmVkIFplcHBsaW5cIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOS0tIGxvY2FsIHRlbXBsYXRlX3BhdGggPSBcIi9ob21lL2ptYW4vdGVtcGxhdGVzL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSZWQgWmVwcGxpblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYnBcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIEJsYWNrIFBlYXJsXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9CbGFjayBQZWFybCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJCbGFjayBQZWFybCBEcnVtIEtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcClwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYm9cIiB0aGVuXApcOVw5cHJpbnQoXCJibG9uZCBib3BcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOS0tbG9jYWwgdGVtcGxhdGVfcGF0aCA9IFwiL2hvbWUvam1hbi90ZW1wbGF0ZXMvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJsb25kZSBCb3AgRHJ1bWtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJhY1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9GbHVpZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQWNlIEZsdWlkIFN5bnRoXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInphXCIgdGhlblwKXDlcOXByaW50KFwiWnluYWRkc3ViZnhcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvemZ4LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJaeW5hZGRzdWJmeFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdFwiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gXCIvaG9tZS9qbWFuL3RlbXBsYXRlcy9TdXJnZSBYVC50ZW1wbGF0ZVwiXApcOVw5IGxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlN1cmdlIFhUXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicmFcIiB0aGVuXApcOVw5cHJpbnQoXCJOQU1cIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvUmF0YXRvdWlsbGUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJhdGF0b3VpbGxlXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJneFwiIHRoZW5cClw5XDlwcmludChcIkd1dGlhcml4XCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5ICBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0d1aXRhcml4LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJHdWl0YXJpeFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJjbHZcIiB0aGVuXApcOVw5cHJpbnQoXCJDbGFzc2ljIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvY2xhc3NpYy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiY2xhc3NpY1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJicnZcIiB0aGVuXApcOVw5cHJpbnQoXCJCcmlnaHQgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9icmlnaHQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcImJyaWdodFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJjb3ZcIiB0aGVuXApcOVw5cHJpbnQoXCJDb21wcmVzc2VkIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvY29tcHJlc3NlZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiY29tcHJlc3NlZFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInRsdlwiIHRoZW5cClw5XDlwcmludChcInRlbGVwaG9uZSBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3RlbGVwaG9uZS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwidGVsZXBob25lXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcClw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZGF2XCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9kYW5jZS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiZGFuY2VcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJuYXZcIiB0aGVuXApcOVw5cHJpbnQoXCJOYXR1cmFsIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvbmF0dXJhbC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwibmF0dXJhbFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RkXCIgdGhlblwKXDlcOXByaW50KFwiU3RhbmRhcmQgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdDJcIiB0aGVuXApcOVw5cHJpbnQoXCJTdGFuZGFyZCAyIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3RhbmRhcmQgMiBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgMiBEcnVtc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZWxkXCIgdGhlblwKXDlcOXByaW50KFwiRWxlY3Ryb25pYyBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0VsZWN0cm9uaWMgRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkVsZWN0cm9uaWMgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicm1kXCIgdGhlblwKXDlcOXByaW50KFwiUm9vbSBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1Jvb20gRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvb20gRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicHdkXCIgdGhlblwKXDlcOXByaW50KFwiUG93ZXIgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiUG93ZXIgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZGFkXCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9EYW5jZSBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRGFuY2UgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwianpkXCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9KYXp6IERydW1zLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJKYXp6IERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImFjc1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9HTSBTZXNzaW9uLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJBY2UgRmx1aWQgU3ludGggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInphc1wiIHRoZW5cClw5XDlwcmludChcIlp5bmFkZHN1YmZ4XCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3phZnggc2Vzc2lvbi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiWnluYWRkc3ViZnggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0c1wiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gXCIvaG9tZS9qbWFuL3RlbXBsYXRlcy9TdXJnZSBYVC50ZW1wbGF0ZVwiXApcOVw5IGxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQgU2Vzc2lvbi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3VyZ2UgWFQgU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImVkdlwiIHRoZW5cClw5XDlwcmludChcIkVkZ2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9FZGdlIFZvY2Fscy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRWRnZSBWb2NhbHNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJmenZcIiB0aGVuXApcOVw5cHJpbnQoXCJGdXp6IFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvRnV6eiBWb2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkZ1enogVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiODA4XCIgdGhlblwKXDlcOXByaW50KFwiODA4IERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi84MDgtZHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIjgwOC84MDkgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRybFwiIHRoZW5cClw5XDlwcmludChcIjgwOCBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvZHJ1bWxhYm9vaC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiZHJ1bWxhYm9vaFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJicmRcIiB0aGVuXApcOVw5cHJpbnQoXCJCcnVzaCBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQnJ1c2ggRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJydXNoIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcIm9ycFwiIHRoZW5cClw5XDlwcmludChcIk9yY2hlc3RyYWwgUGVyY1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvT3JjaGVzdHJhbCBQZXJjLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJPcmNoZXN0cmFsIFBlcmNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzb25cIiB0aGVuXApcOVw5cHJpbnQoXCJTb25pTmVrbyBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvc29uaS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU29uaU5la28gRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYWxcIiB0aGVuXApcOXByaW50KFwiQWxlc2lzIERydW1raXRzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9hbC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQWxlc2lzIERydW1raXRzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJ0dWJcIiB0aGVuXApcOXByaW50KFwiVHViZSBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3R1YmUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlR1YmUgVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRwXCIgdGhlblwKXDlwcmludChcIkRlZXBlciBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL2RlZXBlci50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRGVlcGVyIFZvY2Fsc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJyb2JcIiB0aGVuXApcOXByaW50KFwiUm9ib3QgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9yb2JvdCB2b2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvYm90IFZvY2Fsc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImF1ZGlvXCIgdGhlblwKXDlwcmludChcIkF1ZGlvXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9hdWRpby50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiYXVkaW9cIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJyb2JcIiB0aGVuXApcOXByaW50KFwiUm9ib3QgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9yb2JvdCB2b2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvYm90IFZvY2Fsc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInNhbXBcIiB0aGVuXApcOXByaW50KFwiU2FtcGx2MSBTYW1wbGVyXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9zYW1wbGVyLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJTYW1wbHYxIFNhbXBsZXJcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXApcClwKXApcCmVuZCBlbmRcClwKXAoiICBzY3JpcHRzWzFdWyJjIl0gPSB0cnVlIHNjcmlwdHNbMV1bIm4iXSA9ICJOZXcgVHJhY2sgLSBEaWFsb2cgTWVudSIgIHNjcmlwdHNbMV1bImEiXSA9IHt9IHNjcmlwdHNbMV1bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL25ld3RyYWNrLmx1YSIgICBzY3JpcHRzWzFdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwMDAzXDJcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwMDAzXDJcMFwwXDFcMVwxNuFcM1wwXDBLXDCAXDCLQFwxXDCKQECAikBAgYpcMMGBy4BcMVwwysBBg1wxMcFcM1wwXAqBwoRcClwxw4VcCoHDhlwKXDHEh1wKgcSIXApcMcWJXAqBxYpcClwxxotcCoHGjFwKXDHHjVwKgceOXApcMciPXAqByJBcClwxyZFcCoHJkspcMFwxhFwxMVwxXDFcMFwKQUqUXArBSpVcCkFLllwKwUuXylwwgZNcMTHBXDBcMFwKQUyUXAqBTJVcCsFMlspcMFwxmFwxMYFcMFwwS8FcMlwwSsFNm0pBTpxKwU6dSkFPnkrBT59KQVCgSsFQoUpBUaJKwVGjSkFSpErBUqVcCkGBmlwKQVOmylwwXDGaXDExgVwwXDBcClwx1KdcCoHUqMpcMFwxp4rAgIKKXDDVqWtAgFwwhkBVXDCHgFVcMcHAXDIxXDCkgFwwXDHGXDBWXDBcMFwxXDBcMeRAXDBcMcFAXDIyXDBcMFwxXDBcMUGBXDIyXDCAXDGAXDFcMjmBXDFcMkZcMVZcMIBcMVwwXDJkQVwwXDFGwVZcMEdcMddcMoFcMVwxXDDAXDGAXDBkgYBcMYxB11wypIFcMFwxolwxXDBcMFwzMEBcNYDHQUBcM1wzMYDCXDNcMzCAXDSAxlwxVlwwXDGCXDIzXDDkQVwwXDHAXDFcMFwyXDHCXDIzXDDdXDGCXDNcMUJcMlwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMVwww1wzXDMwgFw0gMZcMVZcMFwxglwyNVww5EFcMFwxwFwxXDBcMlwxwlwyNVww3VwxglwzXDFcMlwyNlwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMYDDXDNcMzCAXDSAxlwxVlwwXDFCXDI2XDDkQVwwXDHAXDFcMFwyXDGCXDI2XDDdXDGCXDNcMcJcMjZcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzFAylwzXDMwgFw0gMZcMVZcMFwxXDJcMjdcMORBXDBcMcBcMVwwXDJcMUJcMjdcMN1cMYJcM1wxXDJcMjdcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzHAylwzXDMwgFw0gMZcMVZcMFwxglwyN1ww5EFcMFwxwFwxXDBcMlwxwlwyN1ww3VwxglwzXDGCXDI3XDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQMtcM1wzMIBcNIDGXDFWXDBcMVwyXDI4XDDkQVwwXDHAXDFcMFwyXDFCXDI4XDDdXDGCXDNcMVwyXDI4XDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxgNRcM1wzMIBcNIDGXDFWXDBcMYJcMjhcMORBXDBcMcBcMVwwXDJcMcJcMjhcMN1cMYJcM1wxQlwyMFwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMVww1FwzXDMwgFw0gMZcMVZcMFwxXDJcMjlcMORBXDBcMcBcMVwwXDJcMUJcMjlcMN1cMYJcM1wxwlwxOVwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDNXDNcMzCAXDSAxlwxVlwwXDGCXDI5XDDkQVwwXDHAXDFcMFwyXDHCXDI5XDDdXDGCXDNcMVwyXDMwXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQM5cM1wzMIBcNIDGXDFWXDBcMUJcMzBcMORBXDBcMcBcMVwwXDJcMYJcMzBcMN1cMYJcM1wxwlwzMFwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDOXDNcMzCAXDSAxlwxVlwwXDFcMlwzMVww5EFcMFwxwFwxXDBcMlwxQlwzMVww3VwxglwzXDGCXDMxXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQM9cM1wzMIBcNIDGXDFWXDBcMcJcMzFcMORBXDBcMcBcMVwwXDJcMVwyIFww3VwxglwzXDFCIFwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDPXDNcMzCAXDSAxlwxVlwwXDGCIFww5EFcMFwxwFwxXDBcMlwxwiBcMN1cMYJcM1wxXDIhXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQNBcM1wzMIBcNIDGXDFWXDBcMUIhXDDkQVwwXDHAXDFcMFwyXDGCIVww3VwxglwzXDHCIVwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMVwwxFwzXDMwgFw0gMZcMVZcMFwxXDJcIlww5EFcMFwxwFwxXDBcMlwxQlwiXDDdXDGCXDNcMVwyXCJcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzGAxFwzXDMwgFw0gMZcMVZcMFwxglwiXDDkQVwwXDHAXDFcMFwyXDHCXCJcMN1cMYJcM1wxglwiXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxXDDFXDNcMzCAXDSAxlwxVlwwXDHCXDRcMORBXDBcMcBcMVwwXDJcMVwyI1ww3VwxglwzXDHCXDRcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzGAxVwzXDMwgFw0gMZcMVZcMFwxQiNcMORBXDBcMcBcMVwwXDJcMYIjXDDdXDGCXDNcMUIjXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxXDDGXDNcMzCAXDSAxlwxVlwwXDHCI1ww5EFcMFwxwFwxXDBcMlwxXDIkXDDdXDGCXDNcMcIjXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxgMZcM1wzMIBcNIDGXDFWXDBcMUIkXDDkQVwwXDHAXDFcMFwyXDGCJFww3VwxglwzXDFCJFwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMVwwx1wzXDMwgFw0gMZcMVZcMFwxQiRcMORBXDBcMcBcMVwwXDJcMcIkXDDdXDGCXDNcMVwyJVwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMUDMXDNcMzCAXDSAxlwxVlwwXDFcMlwyN1ww5EFcMFwxwFwxXDBcMlwxQiVcMN1cMYJcM1wxgiVcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzGAzFwzXDMwgFw0gMZcMVZcMFwxglwyN1ww5EFcMFwxwFwxXDBcMlwxwiVcMN1cMYJcM1wxXDImXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxwMxcM1wzMIBcNIDGXDFWXDBcMVwyXDI4XDDkQVwwXDHAXDFcMFwyXDFCJlww3VwxglwzXDGCJlwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDQXDNcMzCAXDSAxlwxVlwwXDHCJlww5EFcMFwxwFwxXDBcMlwxXDInXDDdXDGCXDNcMcImXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQNFcM1wzMIBcNIDGXDFWXDBcMUInXDDkQVwwXDHAXDFcMFwyXDGCJ1ww3VwxglwzXDFCJ1wwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMYDHXDNcMzCAXDSAxlwxVlwwXDHCJ1ww5EFcMFwxwFwxXDBcMlwxXDIoXDDdXDGCXDNcMUIoXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxgOhcM1wzMIBcNIDGXDFWXDBcMcInXDDkQVwwXDHAXDFcMFwyXDHCKFww3VwxglwzXDFcMilcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzFcMMhcM1wzMIBcNIDGXDFWXDBcMUIpXDDkQVwwXDHAXDFcMFwyXDGCKVww3VwxglwzXDFCKVwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMYDIXDNcMzCAXDSAxlwxVlwwXDHCKVww5EFcMFwxwFwxXDBcMlwxXDIqXDDdXDGCXDNcMcIpXDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxXDDJXDNcMzCAXDSAxlwxVlwwXDFCKlww5EFcMFwxwFwxXDBcMlwxgipcMN1cMYJcM1wxQipcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcM6JcMVwwXDBcMzBAXDWAx0FAXDNcMzGAyVwzXDMwgFw0gMZcMVZcMFwxwipcMORBXDBcMcBcMVwwXDJcMVwyK1ww3VwxglwzXDHCKlwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDRXDNcMzCAXDSAxlwxVlwwXDGCXDE3XDDkQVwwXDHAXDFcMFwyXDFCK1ww3VwxglwzXDGCXDE3XDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQNJcM1wzMIBcNIDGXDFWXDBcMVwyXDE4XDDkQVwwXDHAXDFcMFwyXDGCK1ww3VwxglwzXDFcMlwxOFwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDSXDNcMzCAXDSAxlwxVlwwXDGCXDE4XDDkQVwwXDHAXDFcMFwyXDHCK1ww3VwxglwzXDGCXDE4XDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxQNNcM1wzMIBcNIDGXDFWXDBcMVwyLFww5EFcMFwxwFwxXDBcMlwxQixcMN1cMYJcM1wxQlwxOVwwRlwyWFwwTELYXDTBwlwxXDBcNkNVXDBcN4NYXDZcN8NYXDZAXDOAXDOAXDNcMFw0xkNVXDDHXDPZXDfHQ9lcN2RCgFwzolwxXDBcMFwzMEBcNYDHQUBcM1wzMcDSXDNcMzCAXDSAxlwxVlwwXDGCXDE4XDDkQVwwXDHAXDFcMFwyXDHCK1ww3VwxglwzXDGCXDE4XDBGXDJYXDBMQthcNMHCXDFcMFw2Q1VcMFw3g1hcNlw3w1hcNkBcM4BcM4BcM1wwXDTGQ1VcMMdcM9lcN8dD2Vw3ZEKAXDOiXDFcMFwwXDMwQFw1gMdBQFwzXDMxwMtcM1wzMIBcNIDGXDFWXDBcMYJcMTFcMORBXDBcMcBcMVwwXDJcMYIsXDDdXDGCXDNcMYJcMTFcMEZcMlhcMExC2Fw0wcJcMVwwXDZDVVwwXDeDWFw2XDfDWFw2QFwzgFwzgFwzXDBcNMZDVVwwx1wz2Vw3x0PZXDdkQoBcMyZcMIBcMLNcMFwwXDBcNFw1dHlwZVw0XDlkcm9wZG93blw0XDRrZXlcNFw2dGl0bGVcNFwxM0Nob29zZSBUcmFja1w0XDd2YWx1ZXNcNFwyMENob29zZSBhIHRyYWNrIFR5cGVcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMTFEcnVtIFRyYWNrXDRcMTJSZWQgWmVwcGxpblw0XDNyelw0XDEyQmxhY2sgUGVhcmxcNFwzYnBcNFwxMUJsb25kZSBCb3BcNFwzYm9cNCFTdGFuZGFyZCBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRzdGRcNCNTdGFuZGFyZCAyIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNHN0Mlw0XDE3RWxlY3Ryb25pYyBEcnVtc1w0XDRlbGRcNFwyOVJvb20gRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcNFw0cm1kXDRcMzBQb3dlciBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRwd2RcNFwzMERhbmNlIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNGRhZFw0XDI5SmF6eiBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRqemRcNCA4MDgvODA5IERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcMDA0ODA4XDRcMzBCcnVzaCBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVw0XDRicmRcNFwiT3JjaGVzdHJhbCBQZXJjIChBQ0UgRmx1aWQgU3ludGgpXDRcNG9ycFw0IVNvbmlOZWtvIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDRcNHNvblwyMDpBbGVzaXMgRHJ1bWtpdHMgKFVzZSBDMSB0byBjaGFuZ2Uga2l0cykgKEFDRSBGbHVpZCBTeW50aClcNFwzYWxcNFwyNlBsYXkgU29mdHdhcmUgSW5zdHJ1bWVudHNcNCRBQ0UgRmx1aWQgKFRyYWRpdGlvbmFsIEluc3RydW1lbnRzKVw0XDNhY1w0IFp5bmFkZHN1YmZ4IChUcmFkaXRpb25hbCBTeW50aClcNFwzemFcNCdTdXJnZSBYVCAoU3ludGggd2l0aCBhIExPVCBvZiBwcmVzZXRzKVw0XDNzdFw0XDE2U2FtcGx2MSBTYW1wbGVyXDRcNXNhbXBcNFwxNVNlc3Npb24gUGxheWVyXDRcNGFjc1w0XDR6YXNcNFw0c3RzXDRcMTNSZWNvcmQgQXVkaW9cNFw3Vm9jYWxzXDRcOENsYXNzaWNcNFw0Y2x2XDRcN0JyaWdodFw0XDRicnZcNFwxMUNvbXByZXNzZWRcNFw0Y292XDRcClRlbGVwaG9uZVw0XDR0bHZcNFw2RGFuY2VcNFw0ZGF2XDRcOE5hdHVyYWxcNFw0bmF2XDRcNUVkZ2VcNFw0ZWR2XDRcNUZ1enpcNFw0Znp2XDRcMTJUdWJlIFZvY2Fsc1w0XDR0dWJcNFwxNERlZXBlciBWb2NhbHNcNFwzZHBcNFwxM1JvYm90IFZvY2Fsc1w0XDRyb2JcNFwxOEJsYW5rIEF1ZGlvIFRyYWNrXDRcNmF1ZGlvXDRcMjJSZWNvcmQgR3VpdGFyIG9yIEJhc3NcNFw5R3VpdGFyaXhcNFwzZ3hcNFwxMlJhdGF0b3VpbGxlXDRcM3JhXDRcOGRlZmF1bHRcNFwyMENob29zZSBhIHRyYWNrIHR5cGVcNFw3QVJET1VSXDRcMjJ1c2VyX2NvbmZpZ19kaXJlY3RvcnlcMTlcOFwwXDBcMFwwXDBcMFwwXDRcNnByaW50XDRcMTZyb3V0ZV90ZW1wbGF0ZXNcNFwyL1w0XApMdWFEaWFsb2dcNFw3RGlhbG9nXDRcNHJ1blw0XDIyWW91IGNob3NlIFJlZCBaZXBwbGluXDRcMjIvcmVkIHplcHBsaW4udGVtcGxhdGVcNFw4U2Vzc2lvblw0XDI0bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGVcNFwxN1ByZXNlbnRhdGlvbkluZm9cNFwKbWF4X29yZGVyXDRcMjBQbGF5bGlzdERpc3Bvc2l0aW9uXDRcMTJOZXdQbGF5bGlzdFw0XDIzWW91IHBpY2tlZCBCbGFjayBQZWFybFw0XDMwL0JsYWNrIFBlYXJsIERydW1raXQudGVtcGxhdGVcNFwyMUJsYWNrIFBlYXJsIERydW0gS2l0XDRcCmJsb25kIGJvcFw0XDI5L0Jsb25kZSBCb3AgRHJ1bWtpdC50ZW1wbGF0ZVw0XDE5QmxvbmRlIEJvcCBEcnVta2l0XDRcMTZBY2UgRmx1aWQgU3ludGhcNFwxNi9GbHVpZC50ZW1wbGF0ZVw0XDEyWnluYWRkc3ViZnhcNFwxNC96ZngudGVtcGxhdGVcNFw5U3VyZ2UgWFRcNFwxOS9TdXJnZSBYVC50ZW1wbGF0ZVw0XDROQU1cNFwyMi9SYXRhdG91aWxsZS50ZW1wbGF0ZVw0XDlHdXRpYXJpeFw0XDE5L0d1aXRhcml4LnRlbXBsYXRlXDRcMTVDbGFzc2ljIFZvY2Fsc1w0XDE4L2NsYXNzaWMudGVtcGxhdGVcNFw4Y2xhc3NpY1w0XDE0QnJpZ2h0IFZvY2Fsc1w0XDE3L2JyaWdodC50ZW1wbGF0ZVw0XDdicmlnaHRcNFwxOENvbXByZXNzZWQgVm9jYWxzXDRcMjEvY29tcHJlc3NlZC50ZW1wbGF0ZVw0XDExY29tcHJlc3NlZFw0XDE3dGVsZXBob25lIFZvY2Fsc1w0XDIwL3RlbGVwaG9uZS50ZW1wbGF0ZVw0XAp0ZWxlcGhvbmVcNFwxM0RhbmNlIFZvY2Fsc1w0XDE2L2RhbmNlLnRlbXBsYXRlXDRcNmRhbmNlXDRcMTVOYXR1cmFsIFZvY2Fsc1w0XDE4L25hdHVyYWwudGVtcGxhdGVcNFw4bmF0dXJhbFw0XDE1U3RhbmRhcmQgRHJ1bXNcNFwyNS9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVw0XDE3U3RhbmRhcmQgMiBEcnVtc1w0XDI3L1N0YW5kYXJkIDIgRHJ1bXMudGVtcGxhdGVcNFwyNy9FbGVjdHJvbmljIERydW1zLnRlbXBsYXRlXDRcMTFSb29tIERydW1zXDRcMjEvUm9vbSBEcnVtcy50ZW1wbGF0ZVw0XDEyUG93ZXIgRHJ1bXNcNFwyMi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVw0XDEyRGFuY2UgRHJ1bXNcNFwyMi9EYW5jZSBEcnVtcy50ZW1wbGF0ZVw0XDIxL0phenogRHJ1bXMudGVtcGxhdGVcNFwxMUphenogRHJ1bXNcNFwyMS9HTSBTZXNzaW9uLnRlbXBsYXRlXDRcMjRBY2UgRmx1aWQgU3ludGggU2Vzc2lvblw0XDIzL3phZnggc2Vzc2lvbi50ZW1wbGF0ZVw0XDIwWnluYWRkc3ViZnggU2Vzc2lvblw0XDI3L1N1cmdlIFhUIFNlc3Npb24udGVtcGxhdGVcNFwxN1N1cmdlIFhUIFNlc3Npb25cNFwxMkVkZ2UgVm9jYWxzXDRcMjIvRWRnZSBWb2NhbHMudGVtcGxhdGVcNFwxMkZ1enogVm9jYWxzXDRcMjIvRnV6eiBWb2NhbHMudGVtcGxhdGVcNFwKODA4IERydW1zXDRcMjAvODA4LWRydW1zLnRlbXBsYXRlXDRcMDE0ODA4LzgwOSBEcnVtc1w0XDRkcmxcNFwyMS9kcnVtbGFib29oLnRlbXBsYXRlXDRcMTFkcnVtbGFib29oXDRcMTJCcnVzaCBEcnVtc1w0XDIyL0JydXNoIERydW1zLnRlbXBsYXRlXDRcMTZPcmNoZXN0cmFsIFBlcmNcNFwyNi9PcmNoZXN0cmFsIFBlcmMudGVtcGxhdGVcNFwxNVNvbmlOZWtvIERydW1zXDRcMTUvc29uaS50ZW1wbGF0ZVw0XDE2QWxlc2lzIERydW1raXRzXDRcMTMvYWwudGVtcGxhdGVcNFwxNS90dWJlLnRlbXBsYXRlXDRcMTcvZGVlcGVyLnRlbXBsYXRlXDRcMjMvcm9ib3Qgdm9jYWxzLnRlbXBsYXRlXDRcNkF1ZGlvXDRcMTYvYXVkaW8udGVtcGxhdGVcNFwxOC9zYW1wbGVyLnRlbXBsYXRlXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiICBzY3JpcHRzWzJdID0ge30gc2NyaXB0c1syXVsicyJdID0gImFyZG91ciB7XAogW1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXAogbmFtZSA9IFwiSW5zdHJ1bWVudCAtIENoYW5nZSBJbnN0cnVtZW50IFBsdWdpblwiLFwKIGF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKZGVzY3JpcHRpb24gPSBbW1wKUmVwbGFjZSBJbnN0cnVtZW50IFBsdWdpbiBvbiBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2tcCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKXAogIC0tIENoZWNrIGlmIG5vIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbDplbXB0eSgpIG9yIHNlbC50cmFja3M6cm91dGVsaXN0KCk6ZW1wdHkoKSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKXAogIC0tIENoZWNrIGlmIG1vcmUgdGhhbiBvbmUgdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTpzaXplKCkgPiAxIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXApcClwKICAgICBtaWRpVHJhY2tGb3VuZCA9IGZhbHNlIC0tIEZsYWcgdG8gY2hlY2sgaWYgYW55IE1JREkgdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fbWlkaV90cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgIG1pZGlUcmFja0ZvdW5kID0gdHJ1ZVwKICAgICAgIHByaW50KFwiaXMgYSBtaWRpIHRyYWNrXCIpXAogICAgICBlbmRcCiAgICBlbmRcClwKICAgICAgIGlmICBtaWRpVHJhY2tGb3VuZCA9PSBmYWxzZSB0aGVuXAogICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gTUlESSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIE1JREkgdHJhY2suXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cCiAgICBlbmRcClwKXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cClwKICAgIGxvY2FsIHByb2MgPSByOm50aF9wbHVnaW4oMCkgLS0gZm9yIGV2ZXJ5IHBsdWdpblwKICAgIGlmIHByb2M6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpID0gcHJvYzp0b19pbnNlcnQoKVwKICAgIGxvY2FsIHBsdWdpbl9uYW1lID0gcGk6cGx1Z2luKDApOm5hbWUoKVwKICAgIGlmIHBsdWdpbl9uYW1lID09IFwiQXJwZWdnaWF0b3JcIiB0aGVuXApcCiAgICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFNlc3Npb24gUGxheWVyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgdHJhY2suXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cClwKICAgIGVuZFwKXAogICAgICAgbG9jYWwgcHJvYzIgPSByOm50aF9wbHVnaW4oMSkgLS0gZm9yIGV2ZXJ5IHBsdWdpblwKICAgIGlmIHByb2MyOmlzbmlsKCkgdGhlbiBicmVhayBlbmRcCiAgICBsb2NhbCBwaTIgPSBwcm9jMjp0b19pbnNlcnQoKVwKICAgIGxvY2FsIHBsdWdpbl9uYW1lMiA9IHBpMjpwbHVnaW4oMSk6bmFtZSgpXAogICAgaWYgcGx1Z2luX25hbWUyID09IFwiTUlESSBTdHJ1bVwiIHRoZW5cClwKXApcCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2ssIHBsZWFzZSBzZWxlY3QgYW4gaW5zdHJ1bWVudCkuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cClwKXApcCiAgICBlbmRcClwKIGVuZFwKXApcCmxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcImRyb3Bkb3duXCIsIHRpdGxlID0gXCJDaG9vc2UgSW5zdHJ1bWVudCBQbHVnaW5cIiwgdmFsdWVzID1cCiAgIHtcCiAgICBbXCJDaG9vc2UgSW5zdHJ1bWVudCBQbHVnaW5cIl0gPSAxLCBbXCJBQ0UgRmx1aWQgU3ludGhcIl0gPSAyLFwKICAgIFtcIlp5bmFkZHN1YmZ4XCJdID0gMyxcCiAgICBbXCJTdXJnZSBYVFwiXSA9IDQsXAogICAgW1wiU2FtcGx2MSBTYW1wbGVyXCJdID0gNVwKXAogICB9LFwKICAgZGVmYXVsdCA9IFwiQ2hvb3NlIEluc3RydW1lbnQgUGx1Z2luXCJcCiAgfVwKIH1cClwKIGxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyAoXCJDaG9vc2UgSW5zdHJ1bWVudCBQbHVnaW5cIiwgZGlhbG9nX29wdGlvbnMpXAogbG9jYWwgcnYgPSBvZDpydW4oKVwKXAogbG9jYWwgcGx1Z2luX25hbWUgPSBuaWxcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMiB0aGVuXApcOVw5cHJpbnQoXCJBQ0UgRmx1aWQgU3ludGhcIilcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gcGx1Z2luX25hbWVcClw5XDlwcmVzZXRfbmFtZSA9IFwiZ21cIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXApcCiBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDMgdGhlblwKXDlcOXByaW50KFwiWW91IENob3NlIFp5bkFkZFN1YkZYXCIpXApcOVw5cGx1Z2luX25hbWUgPSBcIlp5bkFkZFN1YkZYXCJcClw5XDl0cmFja19uYW1lID0gcGx1Z2luX25hbWVcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXAogXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA0IHRoZW5cClw5XDlwcmludChcIllvdSBDaG9zZSBTdXJnZSBYVFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIlN1cmdlIFhUXCJcClw5XDl0cmFja19uYW1lID0gcGx1Z2luX25hbWVcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5WU1QzLCBcIlwiKVwKXDkgZW5kXApcClw5ICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDUgdGhlblwKXDlcOXByaW50KFwiWW91IENob3NlIFNhbXBsdjFcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJzYW1wbHYxXCJcClw5XDl0cmFja19uYW1lID0gXCJTYW1wbHYxIFNhbXBsZXJcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXApsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKICAgICAgcjpyZXBsYWNlX3Byb2Nlc3NvciAob2xkLCBuZXcsIG5pbClcCiAgICAgICAgcjpzZXRfbmFtZSh0cmFja19uYW1lLCBuaWwpXApcCiBpZiBwbHVnaW5fbmFtZSA9PSBcIkFDRSBGbHVpZCBTeW50aFwiIHRoZW5cClwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKHRyYWNrX25hbWUpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKHByZXNldF9uYW1lKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAplbmRcClwKXAogICAgZW5kXAogIGVuZFwKZW5kXApcCmVuZCBlbmRcClwKXApcClwKXApcCiIgIHNjcmlwdHNbMl1bImMiXSA9IHRydWUgc2NyaXB0c1syXVsibiJdID0gIkluc3RydW1lbnQgLSBDaGFuZ2UgSW5zdHJ1bWVudCBQbHVnaW4iICBzY3JpcHRzWzJdWyJhIl0gPSB7fSBzY3JpcHRzWzJdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9pbnN0cnVtZW50Lmx1YSIgICBzY3JpcHRzWzJdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwo1wwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMKNcMFwwXDBcMVwxXDE3TFwxXDBcMEZcMEBcMExAwFwwZIBcMFwxjIDAXDCkgFwwXDGiQFwwXDBcMzCAXDGAh8DAXDCMXDBBXDGkgFwwXDGMgEBcMaSAXDBcMaJcMFwwXDBcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxXDFcMlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4fBQlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYxAQ1wxpIBcMFwxIIBcMIdcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxwVwzXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMFw4QESIh8DAXDCMXDBBXDGkgFwwXDGMgERcMaRcMFwxXDFcMzBAXDSAjMHEXDKkgVwwXDGMXDFFXDOkgVwwXDGiQVwwXDBcMzDAXDKAjMHEXDKkgVwwXDGMQUVcM6SBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMIBcOIBFiIbBRVwwwVwxXDZcMKRBXDBcMalAXDBcMCrB+lwxMjeGXDBEXDBcMzFARFwxXDMwQFwzgIZAQVwwh4BBXDHBwFwxXDBcMUFcNlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4eBRlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMMBcMTSAjMHGXDJcMVwyXDdcMKSBgFwxzFwxRVwz5IFcMFwx4kFcMFwwXDMwgFwxM4DMQUdcM+SBXDBcMVwxMoLHXDOBXDJcN1wwJIKAXDFcMTLCR1w0JIJcMFwxXDMxXDBIXDRcMzBAXDOARkJBXDBHgsFcNIHCXDFcMMFCXDhcMFw2Q0FcMFw3Q0JcNlw3w0FcNkZDQVwwR4PCXDZHg8ZcNmSCgFwyTFwyw1w0ZEJcMFwxJlwwgFwwTMLGXDLBglwzXDBkgoBcMYxcMsVcNKSCXDBcMaJCXDBcMFwzMFwwXDaAjELHXDSkglwwXDHMgkdcNUGDXDNcMOSCgFwxzMLHXDXkglwwXDFcMzGAyFw1XDMwQFwzgFw2Q0FcMFw3g0FcNkHDXDFcMIHDXDhcMMZDQVwwx0PCXDfHw8FcN1w2REFcMFw3hEJcOFw3hEZcOCSDgFwyXDEyXDNDXDYkQ1wwXDEmXDCAXDCpQFwwXDAqQfBcMTI3i1wwgFwwy0BcMVwwykBJkspASZPKXDDKk1wxMUFcMVwwXAqBQ5RcCsFKlVwKQUuWXArBS5dcCkFMmMpcMIGUylwwSpmrQIBcMMZAQVwwx8DMXDFcMVwxXApcMEBcMVwwXDHkgIBcMVwxMlwxw1wxJIFcMFwxRFwxXDBcMFwiXDFcMFwwXDMwwFw0gIdBSVwyXDMxwEpcM1wzMFwwXDSAhsFFXDDBgVwKXDCkQVwwXDFBgVwKXDBcOEBcMZpcOIDNmoZcMU5cMIdBTlwzh4FOXDPGwU5cMFwwXDKAXDJGXDJOXDBHXDLPXDRHQs9cNIGCXDE1XDCkgYBcMlw4gIGbXCJcMVwwXDBcMzCAXDSAh0FJXDJcMzFAS1wzXDMwwFwzgIbBRVwwwcFcMTVcMKRBXDBcMUFcMVwxNlwwXDhAXDGahlwxTlwwh0FOXDOHgU5cM8bBTlwwXDBcMoBcMkZcMk5cMEdcMs9cNEdCz1w0gYJcMTVcMKSBgFwyXDiAgZtcIlwxXDBcMFwzMIBcNICHQUlcMlwzMcBLXDNcMzDAXDOAhsFFXDDBQVwxNlwwpEFcMFwxQYFcMTFcMFw4QFwxmoZcMU5cMIdBTlwzh4FOXDPGwU5cMFwwXDKAXDJGXDJOXDBHXDLPXDRHgtBcNIGCXDE1XDCkgYBcMlw4gIGbXCJcMVwwXDBcMzCAXDSAh0FJXDJcMzFATFwzXDMwwFwzgIbBRVwwwcFcMTZcMKRBXDBcMUFcMVwxN1wwXDhcMEyahlwxTlwwh0FOXDOHgU5cM8bBTlwwXDBcMoBcMkZcMk5cMEdcMs9cNEdCz1w0gYJcMTVcMKSBgFwyXDiAgZuGXDFAXDCMQUBcM6SBXDBcMcyBQFwz5IFcMFwx4kFcMFwwXDMwwFwxM4DHwUBcM8xcMcFcM+SBXDBcMcyBwFwz5IFcMFwx4kFcMFwwXDMwXDBcMTKAx8FAXDPMXDHBXDPkgVwwXDHMgcRcM+RcMVwxXDFcMzBcMFwKgMzCRFw15IJcMFwxzFwyxVw15IJcMFwx4kJcMFwwXDMwgFw4gMzCRlw1QVwzXDdcMOSCgFwxXDjAgqLMglFcNUZDUVwwhsNNXDDEXDNcMFww5EKAXDLMwlFcNUZcM01cMIRcM1wwXDDkQlwwXDJcMzGAylwyXDMwwFw0gMbCTlwwzFwy0lw1RlwzTVww5IKAXDHMwsRcNeSCXDBcMczCxlw1QVwzXDdcMOSCgFwxzELHXDXkglwwXDHMgsdcNUFcM1w3XDDkgoBcMVwxMkPSXDWGQ01cMCSDgFwxTIPSXDXAXDNcMFw2ZEOAXDHpQVwwXDBqXDL1XDEyNyZcMIBcMEtcMFwwXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDRcNmVtcHR5XDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw2RXJyb3JcMDIwNk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXDRcMTJNZXNzYWdlVHlwZVw0XDExQnV0dG9uVHlwZVw0XDNPS1w0XDRydW5cNFw1c2l6ZVwxOVwxXDBcMFwwXDBcMFwwXDBcMjBITW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cNFwxNW1pZGlUcmFja0ZvdW5kXDFcMFw0XDVpdGVyXDRcOXRvX3RyYWNrXDRcNmlzbmlsXDRcMTR0b19taWRpX3RyYWNrXDFcMVw0XDZwcmludFw0XDE2aXMgYSBtaWRpIHRyYWNrXDAyMDRObyBNSURJIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgTUlESSB0cmFjay5cNFw2Q2xvc2VcNFwxMW50aF9wbHVnaW5cMTlcMFwwXDBcMFwwXDBcMFwwXDRcCnRvX2luc2VydFw0XDdwbHVnaW5cNFw1bmFtZVw0XDEyQXJwZWdnaWF0b3JcMjBbVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFNlc3Npb24gUGxheWVyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGFuIGluc3RydW1lbnQgdHJhY2suXDRcMTFNSURJIFN0cnVtXDIwVlRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTZXNzaW9uIFBsYXllciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVtZW50KS5cNFw1dHlwZVw0XDlkcm9wZG93blw0XDRrZXlcNFw2dGl0bGVcNFwyNUNob29zZSBJbnN0cnVtZW50IFBsdWdpblw0XDd2YWx1ZXNcNFwxNkFDRSBGbHVpZCBTeW50aFwxOVwyXDBcMFwwXDBcMFwwXDBcNFwxMlp5bmFkZHN1YmZ4XDE5XDNcMFwwXDBcMFwwXDBcMFw0XDlTdXJnZSBYVFwxOVw0XDBcMFwwXDBcMFwwXDBcNFwxNlNhbXBsdjEgU2FtcGxlclwxOVw1XDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFwxMXRyYWNrX25hbWVcNFwxMnByZXNldF9uYW1lXDRcM2dtXDRcNG5ld1w0XDdBUkRPVVJcNFw3THVhQVBJXDRcMTFuZXdfcGx1Z2luXDRcOFNlc3Npb25cNFwxMVBsdWdpblR5cGVcNFw0TFYyXDRcMVw0XDIyWW91IENob3NlIFp5bkFkZFN1YkZYXDRcMTJaeW5BZGRTdWJGWFw0XDE5WW91IENob3NlIFN1cmdlIFhUXDRcNVZTVDNcNFwxOFlvdSBDaG9zZSBTYW1wbHYxXDRcOHNhbXBsdjFcNFw0b2xkXDRcMThyZXBsYWNlX3Byb2Nlc3Nvclw0XDlzZXRfbmFtZVw0XDE0cm91dGVfYnlfbmFtZVw0XDE2cHJlc2V0X2J5X2xhYmVsXDRcMTJsb2FkX3ByZXNldFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiAgc2NyaXB0c1szXSA9IHt9IHNjcmlwdHNbM11bInMiXSA9ICJhcmRvdXIge1wKIFtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKIG5hbWUgPSBcIkRydW0gLSBDaGFuZ2UgRHJ1bSBQbHVnaW5cIixcCiBhdXRob3IgICAgICA9IFwiSnVzdGluIEVocmxpY2htYW5cIixcCmRlc2NyaXB0aW9uID0gW1tcClJlcGxhY2UgRHJ1bSBQbHVnaW4gb24gY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrXApdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKXAogIC0tIENoZWNrIGlmIG5vIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbDplbXB0eSgpIG9yIHNlbC50cmFja3M6cm91dGVsaXN0KCk6ZW1wdHkoKSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKXAogIC0tIENoZWNrIGlmIG1vcmUgdGhhbiBvbmUgdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTpzaXplKCkgPiAxIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXApcClwKICAgICBtaWRpVHJhY2tGb3VuZCA9IGZhbHNlIC0tIEZsYWcgdG8gY2hlY2sgaWYgYW55IE1JREkgdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fbWlkaV90cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgIG1pZGlUcmFja0ZvdW5kID0gdHJ1ZVwKICAgICAgIHByaW50KFwiaXMgYSBtaWRpIHRyYWNrXCIpXAogICAgICBlbmRcCiAgICBlbmRcClwKICAgICAgIGlmICBtaWRpVHJhY2tGb3VuZCA9PSBmYWxzZSB0aGVuXAogICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gTUlESSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIE1JREkgdHJhY2suXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1bigpXAogICAgICByZXR1cm5cCiAgICBlbmRcClwKXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cClwKICAgIGxvY2FsIHByb2MgPSByOm50aF9wbHVnaW4oMCkgLS0gZm9yIGV2ZXJ5IHBsdWdpblwKICAgIGlmIHByb2M6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpID0gcHJvYzp0b19pbnNlcnQoKVwKICAgIGxvY2FsIHBsdWdpbl9uYW1lID0gcGk6cGx1Z2luKDApOm5hbWUoKVwKICAgIGlmIHBsdWdpbl9uYW1lID09IFwiQXJwZWdnaWF0b3JcIiB0aGVuXApcCiAgICAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBhIFNlc3Npb24gUGxheWVyIHRyYWNrLCBwbGVhc2Ugc2VsZWN0IGEgZHJ1bSB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKXAogICAgZW5kXApcCiAgICAgICBsb2NhbCBwcm9jMiA9IHI6bnRoX3BsdWdpbigxKSAtLSBmb3IgZXZlcnkgcGx1Z2luXAogICAgaWYgcHJvYzI6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpMiA9IHByb2MyOnRvX2luc2VydCgpXAogICAgbG9jYWwgcGx1Z2luX25hbWUyID0gcGkyOnBsdWdpbigxKTpuYW1lKClcCiAgICBpZiBwbHVnaW5fbmFtZTIgPT0gXCJNSURJIFN0cnVtXCIgdGhlblwKXApcClwKICAgICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIlRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTZXNzaW9uIFBsYXllciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhIGRydW0gdHJhY2spLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgICAgcmV0dXJuXApcClwKXAogICAgZW5kXApcCiBlbmRcClwKXApcClwKXApcClwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogIHtcCiAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwiZHJvcGRvd25cIiwgdGl0bGUgPSBcIkNob29zZSBEcnVtIFBsdWdpblwiLCB2YWx1ZXMgPVwKICAge1wKICAgIFtcIkNob29zZSBEcnVtIFBsdWdpblwiXSA9IDEsXAogICAgW1wiUmVkIFplcHBlbGluIChBVkwgRHJ1bWtpdHMpXCJdID0gMyxcCiAgICBbXCJCbGFjayBQZWFybCAoQVZMIERydW1raXRzKVwiXSA9IDQsXAogICAgICAgIFtcIkJsb25kZSBCb3AoQVZMIERydW1raXRzKVwiXSA9IDYsXAogICAgICAgIFtcIjgwOC84MDkgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSA3LFwKICAgICAgICAgW1wiU3RhbmRhcmQgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSA4LFwKICAgICAgICAgIFtcIlN0YW5kYXJkIDIgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSA5LFwKICAgICAgICAgICBbXCJFbGVjdHJvbmljIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gMTAsXAogICAgICAgICAgICAgICAgICBbXCJSb29tIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gMTEsXAogICAgICAgICAgICAgICAgICAgICAgW1wiUG93ZXIgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSAxMixcCiAgICAgICAgICAgICAgICAgICAgICAgW1wiRGFuY2UgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSAxMyxcClw5XDlcOVw5XDlcOVtcIkphenogRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcIl0gPSAxNCxcClw5XDlcOVw5XDlcOVtcIlNvbmlOZWtvIChBQ0UgRmx1aWQgU3ludGgpXCJdID0xNSxcClw5XDlcOVw5XDlbXCJOSU4gRHJ1bWtpdCAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9MTYsXApcOVw5XDlcOVw5XDkgW1wiQWxlc2lzIERydW1raXRzKFVzZSBDMSB0byBjaGFuZ2Uga2l0cykgKEFDRSBGbHVpZCBTeW50aClcIl0gPTE3LFwKXDlcOVw5XDlcOVw5W1wiQnJ1c2ggRHJ1bSAoQUNFIEZsdWlkIFN5bnRoKVwiXSA9IDE4LFwKXDlcOVw5XDlcOVw5W1wiT3JjaGVzdHJhbCBQZXJjIChBQ0UgRmx1aWQgU3ludGgpXCJdID0gMTlcClwKICAgfSxcCiAgIGRlZmF1bHQgPSBcIkNob29zZSBEcnVtIFBsdWdpblwiXAogIH1cCiB9XApcCiBsb2NhbCBvZCA9IEx1YURpYWxvZy5EaWFsb2cgKFwiQ2hvb3NlIERydW0gUGx1Z2luXCIsIGRpYWxvZ19vcHRpb25zKVwKIGxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKIGxvY2FsIHBsdWdpbl9uYW1lID0gbmlsXApcClwKXApcClwKXAogXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cClw5XDlwcmludChcIllvdSBDaG9zZSBSZWQgWmVwcGVsaW4gRHJ1bWtpdFwiKVwKXDlcOXBsdWdpbl9uYW1lID0gXCJSZWQgWmVwcGVsaW4gRHJ1bWtpdFwiXApcOVw5dHJhY2tfbmFtZSA9IHBsdWdpbl9uYW1lXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gNCB0aGVuXApcOVw5cHJpbnQoXCJZb3UgQ2hvc2UgQmxhY2sgUGVhcmwgRHJ1bWtpdFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkJsYWNrIFBlYXJsIERydW1raXRcIlwKXDlcOXRyYWNrX25hbWUgPSBwbHVnaW5fbmFtZVwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXDkgIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gNiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgQ2hvc2UgQmxvbmRlIEJvcCBEcnVta2l0XCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQmxvbmRlIEJvcCBEcnVta2l0XCJcClw5XDl0cmFja19uYW1lID0gcGx1Z2luX25hbWVcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcOSAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA3IHRoZW5cClw5XDlwcmludChcIjgwOC84MDlcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIjgwOC04MDkgRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJlaWdodFwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA4IHRoZW5cClw5XDlwcmludChcIlN0YW5kYXJkIERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJTdGFuZGFyZCBEcnVtc1wiXApcOVw5cHJlc2V0X25hbWUgPSBcIlN0YW5kYXJkIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA5IHRoZW5cClw5XDlwcmludChcIlN0YW5kYXJkIDIgRHJ1bXNcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlN0YW5kYXJkIDIgRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJTdGFuZGFyZCAyIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxMCB0aGVuXApcOVw5cHJpbnQoXCJFbGVjdHJvbmljIERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJFbGVjdHJvbmljIERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiRWxlY3Ryb25pYyBEcnVtc1wiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDExIHRoZW5cClw5XDlwcmludChcIlJvb20gRHJ1bXNcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlJvb20gRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJSb29tIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcOSAgIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMTIgdGhlblwKXDlcOXByaW50KFwiUG93ZXIgRHJ1bXNcIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlBvd2VyIERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiUG93ZXIgRHJ1bXNcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxMyB0aGVuXApcOVw5cHJpbnQoXCJEYW5jZSBEcnVtc1wiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiRGFuY2UgRHJ1bXNcIlwKXDlcOXByZXNldF9uYW1lID0gXCJkYW5jZVwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5IFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxNCB0aGVuXApcOVw5cHJpbnQoXCJKYXp6IERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJKYXp6IERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiSmF6eiBEcnVtc1wiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClw5ICBcOSAgIFw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMTUgdGhlblwKXDlcOXByaW50KFwiU29uaU5la29cIilcClwKXDlcOXBsdWdpbl9uYW1lID0gXCJBQ0UgRmx1aWQgU3ludGhcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlNvbmlOZWtvIERydW1zXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwic29uaVwiXApcClw5IG5ldyA9IEFSRE9VUi5MdWFBUEkubmV3X3BsdWdpbihTZXNzaW9uLCBwbHVnaW5fbmFtZSwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCBcIlwiKVwKXDkgZW5kXApcClwKXApcClwKXDkgIFw5ICAgXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxNiB0aGVuXApcOVw5cHJpbnQoXCJOSU4gRHJ1bWtpdFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiTklOIERydW1raXRcIlwKXDlcOXByZXNldF9uYW1lID0gXCJuaW5cIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcOSBcOSAgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDE3IHRoZW5cClw5XDlwcmludChcIkFsZXNpcyBEcnVta2l0c1wiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiQWxlc2lzIERydW1raXRzXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiYWxcIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcClwKXApcClwKXDkgXDkgXDkgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDE4IHRoZW5cClw5XDlwcmludChcIkJydXNoIERydW1zXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDl0cmFja19uYW1lID0gXCJCcnVzaCBEcnVtc1wiXApcOVw5cHJlc2V0X25hbWUgPSBcIkJydXNoIERydW1zXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXDkgXDkgXDkgXDkgXDkgICBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDE5IHRoZW5cClw5XDlwcmludChcIkFDRSBGbHVpZCBTeW50aFwiKVwKXApcOVw5cGx1Z2luX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aFwiXApcOVw5dHJhY2tfbmFtZSA9IFwiT3JjaGVzdHJhbCBQZXJjXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiT3JjaGVzdHJhbCBQZXJjXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcClwKXApcClwKXApsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKICAgICAgcjpyZXBsYWNlX3Byb2Nlc3NvciAob2xkLCBuZXcsIG5pbClcCiAgICAgICAgcjpzZXRfbmFtZSh0cmFja19uYW1lLCBuaWwpXApcCiBpZiBwbHVnaW5fbmFtZSA9PSBcIkFDRSBGbHVpZCBTeW50aFwiIHRoZW5cClwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKHRyYWNrX25hbWUpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKHByZXNldF9uYW1lKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAplbmRcClwKXApcClwKXApcClwKICAgIGVuZFwKICBlbmRcCmVuZFwKXAplbmQgZW5kXApcClwKIiAgc2NyaXB0c1szXVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzNdWyJuIl0gPSAiRHJ1bSAtIENoYW5nZSBEcnVtIFBsdWdpbiIgIHNjcmlwdHNbM11bImEiXSA9IHt9IHNjcmlwdHNbM11bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2RydW0ubHVhIiAgIHNjcmlwdHNbM11bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXApcMFwwXDBMXDFcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwTFwxXDBcMFwxXDFcMTdgXDJcMFwwRlwwQFwwTEDAXDBkgFwwXDGMgMBcMKSAXDBcMaJAXDBcMFwzMIBcMYCHwMBcMIxcMEFcMaSAXDBcMYyAQFwxpIBcMFwxolwwXDBcMFwzMEBcM4CGQEFcMIeAQVwxwcBcMVwwXDFcMVwyXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMIfAwFwwjFwwQVwxpIBcMFwxjEBDXDGkgFwwXDEggFwwh1wzMEBcM4CGQEFcMIeAQVwxwcBcMVwwXDHBXDNcMEZBQVwwR0HCXDJHwcFcMoZBQVwwh4FCXDOHwUJcM6SAgFwyjFwwQ1wxpEBcMFwxJlwwgFwwXDhARIiHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMEBcNICMwcRcMqSBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMoCMwcRcMqSBXDBcMYxBRVwzpIFcMFwxjFwxRVwzpIFcMFwxokFcMFwwXDMwwFwwgFw4gEWIhsFFXDDBXDFcNlwwpEFcMFwxqUBcMFwwKsH6XDEyN4ZcMERcMFwzMUBEXDFcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxQVw2XDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh4FGXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMIfAwFwwjFwwQVwxpIBcMFwxjIBEXDGkXDBcMVwxXDMwwFwxNICMwcZcMlwxXDJcN1wwpIGAXDHMXDFFXDPkgVwwXDHiQVwwXDBcMzCAXDEzgMxBR1wz5IFcMFwxXDEygsdcM4FcMlw3XDAkgoBcMVwxMsJHXDQkglwwXDFcMzFcMEhcNFwzMEBcM4BGQkFcMEeCwVw0gcJcMVwwwUJcOFwwXDZDQVwwXDdDQlw2XDfDQVw2RkNBXDBHg8JcNkeDxlw2ZIKAXDJMXDLDXDRkQlwwXDEmXDCAXDBMwsZcMsGCXDNcMGSCgFwxjFwyxVw0pIJcMFwxokJcMFwwXDMwXDBcNoCMQsdcNKSCXDBcMcyCR1w1QYNcM1ww5IKAXDHMwsdcNeSCXDBcMVwzMYDIXDVcMzBAXDOAXDZDQVwwXDeDQVw2QcNcMVwwgcNcOFwwxkNBXDDHQ8JcN8fDwVw3XDZEQVwwXDeEQlw4XDeERlw4JIOAXDJcMTJcM0NcNiRDXDBcMSZcMIBcMKlAXDBcMCpB8FwxMjeLXDCAXDDLQFwxXDDKQEmSykBJk8pcMMqTXDExQVw0XDBcCoFDlFwKwUqVXApBS5ZcCsFLl1wKQUyYXArBTJlcCkFNmlwKwU2bXApBTpxcCsFOnVwKQU+eXArBT59cCkFQoFwKwVChXApBUaJcCsFRo1wKQVKkylwwgZTKXDBKpatAgFwwxkBBXDDHwNJcMVwxXDFcClwwQFwxXDBcMeSAgFwxXDEyXDHDXDEkgVwwXDFEXDFcMFwwXCJcMVwwXDBcMzCAXDSAh0FJXDJcMzHASlwzXDMwwFwzgIbBRVwwwVwxXDE5XDCkQVwwXDFBQVwxOVwwXDhAXDGnhlwxVFwwh0FUXDOHgVRcM8bBVFwwXDBcMoBcMkZcMlRcMEdcMtVcNEdC1Vw0gYJcMjFcMKSBgFwyXDiAgadcIlwxXDBcMFwzMIBcNICHQUlcMlwzMUBLXDNcMzDAXDOAhsFFXDDBwVwyMVwwpEFcMFwxQVwxXDIyXDBcOEBcMaeGXDFUXDCHQVRcM4eBVFwzxsFUXDBcMFwygFwyRlwyVFwwR1wy1Vw0R0LVXDSBglwyMVwwpIGAXDJcOICBp1wiXDFcMFwwXDMwgFw0gIdBSVwyXDMxwEtcM1wzMMBcM4CGwUVcMMFBXDIyXDCkQVwwXDFBgVwyMlwwXDhAXDGnhlwxVFwwh0FUXDOHgVRcM8bBVFwwXDBcMoBcMkZcMlRcMEdcMtVcNEdC1Vw0gYJcMjFcMKSBgFwyXDiAgadcIlwxXDBcMFwzMMBcNICHQUlcMlwzMUBMXDNcMzBcMFw0gIbBRVwwwcFcMjJcMKRBXDBcMUFcMVwyM1wwXDhAV6dcOMBXr4ZcMVRcMIdBVFwzh4FUXDPGwVRcMFwwXDKAXDJGXDJUXDBHXDLVXDRHQtVcNIGCXDIxXDCkgYBcMlw4gIGnXCJcMVwwXDBcMzDAXDSAh0FJXDJcMzHATFwzXDMwXDBcNICGwUVcMMFcMVwyNFwwpEFcMFwxQVwxXDIzXDBcOFwwWKdcOFwwWK+GXDFUXDCHQVRcM4eBVFwzxsFUXDBcMFwygFwyRlwyVFwwR1wy1Vw0R0LVXDSBglwyMVwwpIGAXDJcOICBp1wiXDFcMFwwXDMwwFw0gIdBSVwyXDMxQE1cM1wzMFwwXDSAhsFFXDDBQVwyNFwwpEFcMFwxQVwxXDIzXDBcOEBYp1w4QFivhlwxVFwwh0FUXDOHgVRcM8bBVFwwXDBcMoBcMkZcMlRcMEdcMtVcNEdC1Vw0gYJcMjFcMKSBgFwyXDiAgadcIlwxXDBcMFwzMMBcNICHQUlcMlwzMcBNXDNcMzBcMFw0gIbBRVwwwYFcMjRcMKRBXDBcMUFcMVwyM1wwXDiAWKdcOIBYr4ZcMVRcMIdBVFwzh4FUXDPGwVRcMFwwXDKAXDJGXDJUXDBHXDLVXDRHQtVcNIGCXDIxXDCkgYBcMlw4gIGnXCJcMVwwXDBcMzDAXDSAh0FJXDJcMzFATlwzXDMwXDBcNICGwUVcMMHBXDI0XDCkQVwwXDFBXDFcMjNcMFw4wFinXDjAWK+GXDFUXDCHQVRcM4eBVFwzxsFUXDBcMFwygFwyRlwyVFwwR1wy1Vw0R0LVXDSBglwyMVwwpIGAXDJcOICBp1wiXDFcMFwwXDMwwFw0gIdBSVwyXDMxwE5cM1wzMFwwXDSAhsFFXDDBXDFcMjVcMKRBXDBcMUFcMVwyM1wwXDhcMFmnXDhcMFmvhlwxVFwwh0FUXDOHgVRcM8bBVFwwXDBcMoBcMkZcMlRcMEdcMtVcNEdC1Vw0gYJcMjFcMKSBgFwyXDiAgadcIlwxXDBcMFwzMMBcNICHQUlcMlwzMUBPXDNcMzBcMFw0gIbBRVwwwUFcMjVcMKRBXDBcMUFcMVwyM1wwXDhAWadcOIBZr4ZcMVRcMIdBVFwzh4FUXDPGwVRcMFwwXDKAXDJGXDJUXDBHXDLVXDRHQtVcNIGCXDIxXDCkgYBcMlw4gIGnXCJcMVwwXDBcMzDAXDSAh0FJXDJcMzHAT1wzXDMwXDBcNICGwUVcMMHBXDI1XDCkQVwwXDFBXDFcMjNcMFw4wFmnXDjAWa+GXDFUXDCHQVRcM4eBVFwzxsFUXDBcMFwygFwyRlwyVFwwR1wy1Vw0R0LVXDSBglwyMVwwpIGAXDJcOICBp1wiXDFcMFwwXDMwwFw0gIdBSVwyXDMxQFBcM1wzMFwwXDSAhsFFXDDBXDFcMjZcMKRBXDBcMUFcMVwyM1wwXDhAWqdcOIBar4ZcMVRcMIdBVFwzh4FUXDPGwVRcMFwwXDKAXDJGXDJUXDBHXDLVXDRHQtVcNIGCXDIxXDCkgYBcMlw4gIGnXCJcMVwwXDBcMzDAXDSAh0FJXDJcMzHAUFwzXDMwXDBcNICGwUVcMMHBXDI2XDCkQVwwXDFBXDFcMjNcMFw4wFqnXDhcMFuvhlwxVFwwh0FUXDOHgVRcM8bBVFwwXDBcMoBcMkZcMlRcMEdcMtVcNEdC1Vw0gYJcMjFcMKSBgFwyXDiAgadcIlwxXDBcMFwzMMBcNICHQUlcMlwzMUBRXDNcMzBcMFw0gIbBRVwwwUFcMjdcMKRBXDBcMUFcMVwyM1wwXDhAW6dcOIBbr4ZcMVRcMIdBVFwzh4FUXDPGwVRcMFwwXDKAXDJGXDJUXDBHXDLVXDRHQtVcNIGCXDIxXDCkgYBcMlw4gIGnXCJcMVwwXDBcMzDAXDSAh0FJXDJcMzHAUVwzXDMwXDBcNICGwUVcMMHBXDI3XDCkQVwwXDFBXDFcMjNcMFw4wFunXDjAW6+GXDFUXDCHQVRcM4eBVFwzxsFUXDBcMFwygFwyRlwyVFwwR1wy1Vw0R0LVXDSBglwyMVwwpIGAXDJcOICBp1wiXDFcMFwwXDMwwFw0gIdBSVwyXDMxQFJcM1wzMFwwXDSAhsFFXDDBXDFcMjNcMKRBXDBcMUFcMVwyM1wwXDhcMFxcp1w4XDBcXK+GXDFUXDCHQVRcM4eBVFwzxsFUXDBcMFwygFwyRlwyVFwwR1wy1Vw0R0LVXDSBglwyMVwwpIGAXDJcOICBp4ZcMUBcMIxBQFwzpIFcMFwxzIFAXDPkgVwwXDHiQVwwXDBcMzDAXDEzgMfBQFwzzFwxwVwz5IFcMFwxzIHAXDPkgVwwXDHiQVwwXDBcMzBcMFwxMoDHwUBcM8xcMcFcM+SBXDBcMcyBxFwz5FwxXDFcMVwzMFwwXAqAzMJEXDXkglwwXDHMXDLFXDXkglwwXDHiQlwwXDBcMzCAXDiAzMJGXDVBXDNcN1ww5IKAXDFcOMCCuMyCXFxcNUZDXFxcMIbDU1wwxFwzXDBcMORCgFwyzMJcXFw1RoNTXDCEXDNcMFww5EJcMFwyXDMxXDDXXDJcMzDAXDSAxsJUXDDMXDLdXDVGg1NcMOSCgFwxzMLEXDXkglwwXDHMwsZcNUFcM1w3XDDkgoBcMcxCx1w15IJcMFwxzILHXDVBXDNcN1ww5IKAXDFcMTJD3Vw1hoNXXDAkg4BcMUyD3Vw1wFwzXDBcNmRDgFwx6UFcMFwwalwy9VwxMjcmXDCAXDB3XDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDZlbXB0eVw0XDd0cmFja3NcNFwKcm91dGVsaXN0XDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcNkVycm9yXDAyMDZObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlw0XDEyTWVzc2FnZVR5cGVcNFwxMUJ1dHRvblR5cGVcNFwzT0tcNFw0cnVuXDRcNXNpemVcMTlcMVwwXDBcMFwwXDBcMFwwXDIwSE1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXDRcMTVtaWRpVHJhY2tGb3VuZFwxXDBcNFw1aXRlclw0XDl0b190cmFja1w0XDZpc25pbFw0XDE0dG9fbWlkaV90cmFja1wxXDFcNFw2cHJpbnRcNFwxNmlzIGEgbWlkaSB0cmFja1wwMjA0Tm8gTUlESSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIE1JREkgdHJhY2suXDRcNkNsb3NlXDRcMTFudGhfcGx1Z2luXDE5XDBcMFwwXDBcMFwwXDBcMFw0XAp0b19pbnNlcnRcNFw3cGx1Z2luXDRcNW5hbWVcNFwxMkFycGVnZ2lhdG9yXDIwVFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTZXNzaW9uIFBsYXllciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhIGRydW0gdHJhY2suXDRcMTFNSURJIFN0cnVtXDIwVVRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgYSBTZXNzaW9uIFBsYXllciB0cmFjaywgcGxlYXNlIHNlbGVjdCBhIGRydW0gdHJhY2spLlw0XDV0eXBlXDRcOWRyb3Bkb3duXDRcNGtleVw0XDZ0aXRsZVw0XDE5Q2hvb3NlIERydW0gUGx1Z2luXDRcN3ZhbHVlc1w0XDI4UmVkIFplcHBlbGluIChBVkwgRHJ1bWtpdHMpXDE5XDNcMFwwXDBcMFwwXDBcMFw0XDI3QmxhY2sgUGVhcmwgKEFWTCBEcnVta2l0cylcMTlcNFwwXDBcMFwwXDBcMFwwXDRcMjVCbG9uZGUgQm9wKEFWTCBEcnVta2l0cylcMTlcNlwwXDBcMFwwXDBcMFwwXDQgODA4LzgwOSBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwxOVw3XDBcMFwwXDBcMFwwXDBcNCFTdGFuZGFyZCBEcnVtcyAoQUNFIEZsdWlkIFN5bnRoKVwxOVw4XDBcMFwwXDBcMFwwXDBcNCNTdGFuZGFyZCAyIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDE5XDlcMFwwXDBcMFwwXDBcMFw0I0VsZWN0cm9uaWMgRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcMTlcClwwXDBcMFwwXDBcMFwwXDRcMjlSb29tIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDE5XDExXDBcMFwwXDBcMFwwXDBcNFwzMFBvd2VyIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDE5XDEyXDBcMFwwXDBcMFwwXDBcNFwzMERhbmNlIERydW1zIChBQ0UgRmx1aWQgU3ludGgpXDE5XDEzXDBcMFwwXDBcMFwwXDBcNFwyOUphenogRHJ1bXMgKEFDRSBGbHVpZCBTeW50aClcMTlcMTRcMFwwXDBcMFwwXDBcMFw0XDI3U29uaU5la28gKEFDRSBGbHVpZCBTeW50aClcMTlcMTVcMFwwXDBcMFwwXDBcMFw0XDMwTklOIERydW1raXQgKEFDRSBGbHVpZCBTeW50aClcMTlcMTZcMFwwXDBcMFwwXDBcMFwwMjA5QWxlc2lzIERydW1raXRzKFVzZSBDMSB0byBjaGFuZ2Uga2l0cykgKEFDRSBGbHVpZCBTeW50aClcMTlcMTdcMFwwXDBcMFwwXDBcMFw0XDI5QnJ1c2ggRHJ1bSAoQUNFIEZsdWlkIFN5bnRoKVwxOVwxOFwwXDBcMFwwXDBcMFwwXDRcIk9yY2hlc3RyYWwgUGVyYyAoQUNFIEZsdWlkIFN5bnRoKVwxOVwxOVwwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFw3RGlhbG9nXDRcMzFZb3UgQ2hvc2UgUmVkIFplcHBlbGluIERydW1raXRcNFwyMVJlZCBaZXBwZWxpbiBEcnVta2l0XDRcMTF0cmFja19uYW1lXDRcNG5ld1w0XDdBUkRPVVJcNFw3THVhQVBJXDRcMTFuZXdfcGx1Z2luXDRcOFNlc3Npb25cNFwxMVBsdWdpblR5cGVcNFw0TFYyXDRcMVw0XDMwWW91IENob3NlIEJsYWNrIFBlYXJsIERydW1raXRcNFwyMEJsYWNrIFBlYXJsIERydW1raXRcNFwyOVlvdSBDaG9zZSBCbG9uZGUgQm9wIERydW1raXRcNFwxOUJsb25kZSBCb3AgRHJ1bWtpdFw0XDAwODgwOC84MDlcNFwxNkFDRSBGbHVpZCBTeW50aFw0XDAxNDgwOC04MDkgRHJ1bXNcNFwxMnByZXNldF9uYW1lXDRcNmVpZ2h0XDRcMTVTdGFuZGFyZCBEcnVtc1w0XDE3U3RhbmRhcmQgMiBEcnVtc1w0XDE3RWxlY3Ryb25pYyBEcnVtc1w0XDExUm9vbSBEcnVtc1w0XDEyUG93ZXIgRHJ1bXNcNFwxMkRhbmNlIERydW1zXDRcNmRhbmNlXDRcMTFKYXp6IERydW1zXDRcOVNvbmlOZWtvXDRcMTVTb25pTmVrbyBEcnVtc1w0XDVzb25pXDRcMTJOSU4gRHJ1bWtpdFw0XDRuaW5cNFwxNkFsZXNpcyBEcnVta2l0c1w0XDNhbFw0XDEyQnJ1c2ggRHJ1bXNcNFwxNk9yY2hlc3RyYWwgUGVyY1w0XDRvbGRcNFwxOHJlcGxhY2VfcHJvY2Vzc29yXDRcOXNldF9uYW1lXDRcMTRyb3V0ZV9ieV9uYW1lXDRcMTZwcmVzZXRfYnlfbGFiZWxcNFwxMmxvYWRfcHJlc2V0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiICBzY3JpcHRzWzRdID0ge30gc2NyaXB0c1s0XVsicyJdID0gImFyZG91ciB7XAogIFtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKICBuYW1lID0gXCJHdWl0YXIgLSBDaGFuZ2UgR3VpdGFyIFBsdWdpblwiLFwKICBhdXRob3IgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXAogIGRlc2NyaXB0aW9uID0gW1tcClJlcGxhY2UgR3VpdGFyIFBsdWdpbiBvbiBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2tcCiAgXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXAogICBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKXAogIC0tIENoZWNrIGlmIG5vIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbDplbXB0eSgpIG9yIHNlbC50cmFja3M6cm91dGVsaXN0KCk6ZW1wdHkoKSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKXAogIC0tIENoZWNrIGlmIG1vcmUgdGhhbiBvbmUgdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTpzaXplKCkgPiAxIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXAphdWRpb1RyYWNrRm91bmQgPSBmYWxzZSAtLSBGbGFnIHRvIGNoZWNrIGlmIGFueSBhdWRpbyB0cmFjayBpcyBzZWxlY3RlZFwKXAogICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2svYnVzXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19hdWRpb190cmFjaygpOmlzbmlsKCkgdGhlblwKICAgICAgIGF1ZGlvVHJhY2tGb3VuZCA9IHRydWVcCiAgICAgICBwcmludChcImlzIGFuIGF1ZGlvIHRyYWNrXCIpXAogICAgICBlbmRcCiAgICBlbmRcClwKICAgICAgIGlmICBhdWRpb1RyYWNrRm91bmQgPT0gZmFsc2UgdGhlblwKICAgICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk5vIGF1ZGlvIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGFuIGF1ZGlvIHRyYWNrLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgICAgcmV0dXJuXAogICAgZW5kXApcCiAgbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XAogICAge1wKICAgICAgdHlwZSA9IFwiZHJvcGRvd25cIiwga2V5ID0gXCJkcm9wZG93blwiLCB0aXRsZSA9IFwiQ2hvb3NlIEd1aXRhciBQbHVnaW5cIiwgdmFsdWVzID1cCiAgICAgIHtcCiAgICAgICAgW1wiQ2hvb3NlIEd1aXRhciBQbHVnaW5cIl0gPSAxLCBbXCJSYXRhdG91aWxsZVwiXSA9IDIsXAogICAgICAgIFtcIkd1aXRhcml4XCJdID0gM1wKICAgICAgfSxcCiAgICAgIGRlZmF1bHQgPSBcIkNob29zZSBHdWl0YXIgUGx1Z2luXCJcCiAgICB9XAogIH1cClwKICBsb2NhbCBvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJDaG9vc2UgR3VpdGFyIFBsdWdpblwiLCBkaWFsb2dfb3B0aW9ucylcCiAgbG9jYWwgcnYgPSBvZDpydW4oKVwKICBsb2NhbCBwbHVnaW5fbmFtZSA9IG5pbFwKICBsb2NhbCBuZXcgPSBuaWxcClwKICBpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyIHRoZW5cCiAgICBwcmludChcIllvdSBDaG9zZSBSYXRhdG91aWxsZVwiKVwKICAgIHBsdWdpbl9uYW1lID0gXCJSYXRhdG91aWxsZVwiXAogICAgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXAogIGVsc2VpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cCiAgICBwcmludChcIllvdSBDaG9zZSBHdWl0YXJpeFwiKVwKICAgIHBsdWdpbl9uYW1lID0gXCJHdWl0YXJpeFwiXAogICAgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5WU1QzLCBcIlwiKVwKICBlbHNlXAogICAgcmV0dXJuXAogIGVuZFwKXAogIC0tIEZvciB0aGUgc2VsZWN0ZWQgdHJhY2ssIHJlcGxhY2UgdGhlIHBsdWdpblwKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOml0ZXIoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICBsb2NhbCBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIHI6cmVwbGFjZV9wcm9jZXNzb3Iob2xkLCBuZXcsIG5pbClcCiAgICAgIHI6c2V0X25hbWUocGx1Z2luX25hbWUsIG5pbClcCiAgICBlbmRcCiAgZW5kXApcCiAgaWYgcGx1Z2luX25hbWUgPT0gXCJSYXRhdG91aWxsZVwiIHRoZW5cClwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiUmF0YXRvdWlsbGVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKXApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcIm5ld1wiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAplbmRcClwKZW5kIGVuZFwKIiAgc2NyaXB0c1s0XVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzRdWyJuIl0gPSAiR3VpdGFyIC0gQ2hhbmdlIEd1aXRhciBQbHVnaW4iICBzY3JpcHRzWzRdWyJhIl0gPSB7fSBzY3JpcHRzWzRdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9ndWl0YXIubHVhIiAgIHNjcmlwdHNbNF1bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXApcMFwwXDBbXDBcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwW1wwXDBcMFwxXDFcMTfNXDBcMFwwRlwwQFwwTEDAXDBkgFwwXDGMgMBcMKSAXDBcMaJAXDBcMFwzMIBcMYCHwMBcMIxcMEFcMaSAXDBcMYyAQFwxpIBcMFwxolwwXDBcMFwzMEBcM4CGQEFcMIeAQVwxwcBcMVwwXDFcMVwyXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMIfAwFwwjFwwQVwxpIBcMFwxjEBDXDGkgFwwXDEggFwwh1wzMEBcM4CGQEFcMIeAQVwxwcBcMVwwXDHBXDNcMEZBQVwwR0HCXDJHwcFcMoZBQVwwh4FCXDOHwUJcM6SAgFwyjFwwQ1wxpEBcMFwxJlwwgFwwXDhARIiHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMEBcNICMwcRcMqSBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMoCMwcRcMqSBXDBcMYxBRVwzpIFcMFwxjFwxRVwzpIFcMFwxokFcMFwwXDMwwFwwgFw4gEWIhsFFXDDBXDFcNlwwpEFcMFwxqUBcMFwwKsH6XDEyN4ZcMERcMFwzMUBEXDFcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxQVw2XDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh4FGXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMItcMIBcMMtAXDFcMMpcMMeNylwwx47KwEePXDExwVwwXDBcCoHDj1wKgciQXApcMcmRylwwXDGQysDHkqtAgFwwxkBBXDDHgMlcMVwxwVw3XDBAXDFcMFwx5ICAXDFcMTJcMcNcMSSBXDBcMURcMYBcMFwiXDFcMFwwXDMwgFw0gMdcMUdcMlwzMYDIXDNcMzDAXDOAxsFFXDBcMcJcOVww5EFcMFwxQUFcOFwwxlwxSlwwx0HKXDPHgcpcM1w2wkpcMEBcMoBcMoZcMkpcMIdcMktcNYdCS1w1wYJcMTFcMOSBgFwygFwxgFwzXDMwQFw1gFwiXDFcMFwwXDMwgFw0gMdcMUdcMlwzMVwwyVwzXDMwwFwzgMbBRVwwXDHCXDExXDDkQVwwXDFBwVw4XDDGXDFKXDDHQcpcM8eBylwzXDbCSlwwQFwygFwyhlwySlwwh1wyS1w1h1wyTFw1wYJcMTFcMOSBgFwygFwxgFwzXDMwXDBcMIAmXDCAXDDHwcBcMMxcMcFcM+SBXDBcMcyBxFwz5FwxXDFcMVwzMEBcNIDMwkRcNeSCXDBcMcxcMsVcNeSCXDBcMeJCXDBcMFwzMMBcMoDMQkxcNUGDXDEyXDDkgoBcMVwxMsNMXDWAXDOAXDXAXDNcMFwzXDRcNFwwXDAkQ4BcMlwxMlwzTVw1gFwzgFwyxFwzXDBcMCRDXDBcMulBXDBcMGrC+lwxMjdcMzFAyFwyXDMwwFw0gMbBSlwwzEHNXDNBQlw4XDDkgYBcMczBxFwz5IFcMFwxzEHMXDNBglwxMlww5IGAXDHMgc1cM+SBXDBcMczBzVwzQYJcMTJcMOSBgFwxXDEyXDLOXDOBQlwxNFwwJIKAXDFMgs5cM8BcMlwwXDRkQoBcMSZcMIBcMDtcMFwwXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDRcNmVtcHR5XDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw2RXJyb3JcMDIwNk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXDRcMTJNZXNzYWdlVHlwZVw0XDExQnV0dG9uVHlwZVw0XDNPS1w0XDRydW5cNFw1c2l6ZVwxOVwxXDBcMFwwXDBcMFwwXDBcMjBITW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cNFwxNmF1ZGlvVHJhY2tGb3VuZFwxXDBcNFw1aXRlclw0XDl0b190cmFja1w0XDZpc25pbFw0XDE1dG9fYXVkaW9fdHJhY2tcMVwxXDRcNnByaW50XDRcMThpcyBhbiBhdWRpbyB0cmFja1wwMjA3Tm8gYXVkaW8gdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3QgYW4gYXVkaW8gdHJhY2suXDRcNkNsb3NlXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcMjFDaG9vc2UgR3VpdGFyIFBsdWdpblw0XDd2YWx1ZXNcNFwxMlJhdGF0b3VpbGxlXDE5XDJcMFwwXDBcMFwwXDBcMFw0XDlHdWl0YXJpeFwxOVwzXDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFwyMllvdSBDaG9zZSBSYXRhdG91aWxsZVw0XDdBUkRPVVJcNFw3THVhQVBJXDRcMTFuZXdfcGx1Z2luXDRcOFNlc3Npb25cNFwxMVBsdWdpblR5cGVcNFw0TFYyXDRcMVw0XDE5WW91IENob3NlIEd1aXRhcml4XDRcNVZTVDNcNFwxMW50aF9wbHVnaW5cMTlcMFwwXDBcMFwwXDBcMFwwXDRcMThyZXBsYWNlX3Byb2Nlc3Nvclw0XDlzZXRfbmFtZVw0XDE0cm91dGVfYnlfbmFtZVw0XAp0b19pbnNlcnRcNFw3cGx1Z2luXDRcMTZwcmVzZXRfYnlfbGFiZWxcNFw0bmV3XDRcMTJsb2FkX3ByZXNldFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiAgc2NyaXB0c1s1XSA9IHt9IHNjcmlwdHNbNV1bInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcClw5bmFtZSA9IFwiTXVzZXNjb3JlIC0gT3BlbiBNaWRpIHJlZ2lvbiBpbiBtdXNpY2FsIG5vdGF0aW9uIGZvcm1hdFwiLFwKXDlhdXRob3IgICAgICA9IFwiSnVzdGluIEVocmxpY2htYW5cIixcCmRlc2NyaXB0aW9uID0gW1tcClRha2VzIGEgc2VsZWN0ZWQgTUlESSByZWdpb24gYW5kIG9wZW5zIGl0IGluIE11c2VzY29yZVwKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlIChcIk9wZW4gTXVzaWNhbCBTY29yZVwiLCBcIklmIE11c2VzY29yZSBzaG93cyBhIGJsYW5rIHBhZ2UsIHlvdSBtYXkgaGF2ZSB0byB3YWl0IGEgbWludXRlIG9yIHR3byBmb3IgQXJkb3VyIHRvIHdyaXRlIHRoZSBmaWxlIHRvIGRpc2tcIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKXDlwcmludCAobWQ6cnVuKCkpXApcClw5bWQgPSBuaWxcClw5Y29sbGVjdGdhcmJhZ2UgKClcClwKXApcClwKXApcCmxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCmxvY2FsIGNvdW50ID0gMFwKbG9jYWwgbWlkaV9yZWdpb25cClwKZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCgpOml0ZXIoKSBkb1wKICAgIGNvdW50ID0gY291bnQgKyAxXAogICAgaWYgcjp0b19taWRpcmVnaW9uKCk6aXNuaWwoKSB0aGVuXAogICAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZSAoXCJPcGVuIGluIE11c2VzY29yZVwiLCBcIlRoZSBzZWxlY3RlZCByZWdpb24gaXMgbm90IGEgbWlkaVwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXApcOXByaW50IChtZDpydW4oKSlcCiAgICAgICAgIG1kID0gbmlsXApcOWNvbGxlY3RnYXJiYWdlICgpXAogICAgICAgIHJldHVyblwKICAgIGVsc2VcCiAgICAgICAgbWlkaV9yZWdpb24gPSByXAogICAgZW5kXAplbmRcClwKaWYgY291bnQgfj0gMSB0aGVuXAogICAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZSAoXCJPcGVuIGluIE11c2VzY29yZVwiLCBcIlBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIG1pZGkgcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcClw5cHJpbnQgKG1kOnJ1bigpKVwKICAgICAgICAgbWQgPSBuaWxcClw5Y29sbGVjdGdhcmJhZ2UgKClcCiAgICByZXR1cm5cCmVuZFwKXApsb2NhbCBybiA9IG1pZGlfcmVnaW9uOm5hbWUoKVwKbG9jYWwgc291cmNlID0gbWlkaV9yZWdpb246c291cmNlKDApOnRvX2ZpbGVzb3VyY2UoKTpwYXRoKClcCnByaW50KHNvdXJjZSlcCmxvY2FsIGZpbGVwYXRoID0gc291cmNlXAogcm91dGUgPSBtaWRpX3JlZ2lvbjpwbGF5bGlzdCgpOm5hbWUoKVwKcHJpbnQgKCB0cmFjaylcClw5cGlkID0gbWlkaV9yZWdpb246cGxheWxpc3QoKTpnZXRfb3JpZ190cmFja19pZCAoKVwKcHJpbnQgKHBpZClcClwKXApsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXApsb2NhbCBjb21tYW5kID0gXCJtc2NvcmUgLWEgamFjayAtbyAvdG1wL291dHB1dC5wZGYgIFwiIC4ucXVvdGVkZmlsZXBhdGhcClwKLS0gT3BlbiB0aGUgZmlsZSBcIm1zY29yZS5zaFwiIGZvciB3cml0aW5nXApsb2NhbCBmaWxlID0gaW8ub3BlbihcIm1zY29yZS5zaFwiLCBcIndcIilcClwKXApcCmlmIG5vdCBmaWxlIHRoZW5cCiAgICAtLSBIYW5kbGUgZXJyb3IgaWYgZmlsZSBjb3VsZG4ndCBiZSBvcGVuZWRcCiAgICBwcmludChcIkVycm9yOiBGYWlsZWQgdG8gY3JlYXRlIGZpbGUgJ21zY29yZS5zaCdcIilcCmVsc2VcCiAgICAtLSBXcml0ZSB0aGUgY29tbWFuZCBjb250ZW50IHRvIHRoZSBmaWxlXApcClwKICAgIGZpbGU6d3JpdGUoY29tbWFuZCAuLiBcIlxcblwiKSAtLSBXcml0ZSB0aGUgY29tbWFuZCB0byB0aGUgZmlsZVwKXAogICAgLS0gQ2xvc2UgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKClcClwKICAgIHByaW50KFwiRmlsZSAnbXNjb3JlLnNoJyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSFcIilcClwKICAgIC0tIERlbGV0ZSB0aGUgZmlsZSBhZnRlciBwcmludGluZyB0aGUgc3VjY2VzcyBtZXNzYWdlXApcCmVuZFwKXApsb2NhbCBtdiA9IFwibXYgbXNjb3JlLnNoIC90bXAvbXNjb3JlLnNoXCJcClwKb3MuZXhlY3V0ZShtdilcClwKb3MuZm9ya2V4ZWMoXCIvYmluL2Jhc2hcIiwgXCIvdG1wL21zY29yZS5zaFwiKVwKXAotLW9zLmV4ZWN1dGUoXCJmaXJlZm94IGZpbGU6Ly8vdG1wL291dHB1dC5wZGZcIilcClwKIG9zLnJlbW92ZShcIi90bXAvbXNjb3JlLnNoXCIpXApcClwKXAotLSBPcGVuIHRoZSBmaWxlIFwibXNjb3JlLnNoXCIgZm9yIHdyaXRpbmdcCmxvY2FsIGZpbGUgPSBpby5vcGVuKFwibXNjb3JlLnNoXCIsIFwid1wiKVwKXApcClwKaWYgbm90IGZpbGUgdGhlblwKICAgIC0tIEhhbmRsZSBlcnJvciBpZiBmaWxlIGNvdWxkbid0IGJlIG9wZW5lZFwKICAgIHByaW50KFwiRXJyb3I6IEZhaWxlZCB0byBjcmVhdGUgZmlsZSAnbXNjb3JlLnNoJ1wiKVwKZWxzZVwKICAgIC0tIFdyaXRlIHRoZSBjb21tYW5kIGNvbnRlbnQgdG8gdGhlIGZpbGVcCiBsb2NhbCBjb21tYW5kID0gXCJtc2NvcmUgXCIgLi5xdW90ZWRmaWxlcGF0aFwKXAogICAgZmlsZTp3cml0ZShjb21tYW5kIC4uIFwiXFxuXCIpIC0tIFdyaXRlIHRoZSBjb21tYW5kIHRvIHRoZSBmaWxlXApcCiAgICAtLSBDbG9zZSB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKVwKXAogICAgcHJpbnQoXCJGaWxlICdtc2NvcmUuc2gnIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVwiKVwKXAogICAgLS0gRGVsZXRlIHRoZSBmaWxlIGFmdGVyIHByaW50aW5nIHRoZSBzdWNjZXNzIG1lc3NhZ2VcClwKZW5kXApcCmxvY2FsIG12ID0gXCJtdiBtc2NvcmUuc2ggL3RtcC9tc2NvcmUuc2hcIlwKXApvcy5leGVjdXRlKG12KVwKXApvcy5mb3JrZXhlYyhcIi9iaW4vYmFzaFwiLCBcIi90bXAvbXNjb3JlLnNoXCIpXApcCmZvciByIGluIFNlc3Npb246Z2V0X3JvdXRlcyAoKTppdGVyICgpIGRvXAogICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSBhbmQgbm90IHI6dG9fdHJhY2sgKCk6dG9fbWlkaV90cmFjayAoKTppc25pbCAoKSB0aGVuXApcClwKXApcCm9zLmV4ZWN1dGUoXCJzbGVlcCAyXCIpXApcClwKXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X2lkKHBpZCk6dG9fdHJhY2soKVwKXApcOVw5XDlcOWxvY2FsIGlucHV0bWlkaXBvcnQgPSByOmlucHV0KCk6bWlkaSgwKVwKXDlcOVw5XDktLSBwcmludChpbnB1dG1pZGlwb3J0Om5hbWUoKSlcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgKHByb2M6bmFtZSgpKVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1pZGlwb3J0OmRpc2Nvbm5lY3QoXCJtc2NvcmU6bXNjb3JlLW1pZGktMVwiKVwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgY29ycmVjdHBvcnQgPSBwcm9jOmlucHV0KCk6bWlkaSgwKVwKXApcClw5XDlcOVw5IGNvcnJlY3Rwb3J0OmNvbm5lY3QoXCJtc2NvcmU6bXNjb3JlLW1pZGktMVwiKVwKXDlcOVw5ZW5kXApcOWVuZFwKXApcClwKXApcClwKXApcCmVuZCBlbmRcClwKXApcClwKXAoiICBzY3JpcHRzWzVdWyJjIl0gPSB0cnVlIHNjcmlwdHNbNV1bIm4iXSA9ICJNdXNlc2NvcmUgLSBPcGVuIE1pZGkgcmVnaW9uIGluIG11c2ljYWwgbm90YXRpb24gZm9ybWF0IiAgc2NyaXB0c1s1XVsiYSJdID0ge30gc2NyaXB0c1s1XVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvbXNjb3JlZXgubHVhIiAgIHNjcmlwdHNbNV1bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXApcMFwwXDCdXDBcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwnVwwXDBcMFwxXDFcMjTuXDBcMFwwRlwwQFwwR0DAXDCBgFwwXDDBwFwwXDBcNlwxQFwwXDdcMUFcMlw3QUFcMkZcMUBcMEeBwVwyR8HBXDJkgIBcMoZcMEJcMMxAwlww5FwwXDBcMaRAXDBcMERcMFwwXDCGgEJcMKRAgFwwhsBCXDCMXDBDXDGkgFwwXDHBQFwzXDBcNFwxXDBcMEeBQ1wxTMHDXDJkgVwwXDFMXDHEXDJkXDFcMVwxXDMwwFw2gM1AxFwxTIJEXDRkglwwXDFMwsRcNGSCXDBcMWJcMlwwXDBcMzDAXDSARlwyQFwwR0LAXDSBXDJcNVwwwUJcNVwwXDZcM0BcMFw3XDNBXDZcN0NBXDZGXDNAXDBHg8FcNkfDwVw2ZIKAXDKGXDJCXDDMQsJcNORcMlwwXDGkQlwwXDBEXDJcMFwwhoJCXDCkQoBcMCZcMIBcMFwzMFwwXDCAXDBcMVwwXDRpQVwwXDDqQfhcMTI3X0DEXDFcMzCAXDSARlwxQFwwR0HAXDKBXDFcNVwwwYFcNVwwXDZcMkBcMFw3XDJBXDRcN0JBXDRGXDJAXDBHgsFcNEfCwVw0ZIGAXDKGXDFCXDDMQcJcMuRcMVwwXDGkQVwwXDBEXDFcMFwwhoFCXDCkQYBcMCZcMIBcMEzBRVwyZIFcMFwxjFwxRlwyXDFCXDNcMKSBgFwxjEFGXDOkgVwwXDGMgUZcM6SBXDBcMcZcMUJcMFwwXDJcMFwz5EFcMFwxwFwxXDBcM1wxMlwyR1wyJIJcMFwxXDEywkVcNCSCXDBcMVw4XDCCjVw2XDJCXDBGQkdcMCRCXDBcMVwxMlwyR1wyJIJcMFwxXDEywkdcNCSCXDBcMVw4XDBcMo9cNlwyQlwwRoJHXDAkQlwwXDFcMVwyXDhcMEBcMoBcM4FcMlw4XDBcMjmCXDJcNEFCXDhcMIBcMlwwXDRdgoJcNIaCSFwwh8JIXDXBXDJcOVwwXDFDXDlcMKSCgFwxokJcMFwwXDMwwFwwgMZcMkJcMFwxg1w5XDDkQlwwXDFcMzBAXDKAzMJJXDVAXDOAXDSBXDNcClwwXYODXDbkQoBcMcxCSlw15EJcMFwxxlwyQlwwXDGDXApcMORCXDBcMcHCXApcMFw2XDNLXDBcN0NLXDZAXDOAXDUkQ1wwXDFcNlwzS1wwXDeDS1w2QcNcMTFcMIFcM1wxMlwwJEOAXDFcNlwzS1wwXDdDTFw2QVwzXDEyXDAkQ1wwXDFcNoNIXDBcN8NIXDZBXDNcOVwwgUNcOVwwJIOAXDFcIkNcMFwwXDMwwFwwgEZcM0JcMIGDXDlcMGRDXDBcMVwzMFwwXDOAQYNcMTJcMIBcM1wwXDRdg4NcNozDSVw2XDBcNIBcNkFcNFwKXDBcMjlEXDRcOKRDgFwxjENKXDakQ1wwXDGGXDNCXDDBg1wKXDCkQ1wwXDFBw1wKXDCGXDNLXDCHQ0tcN8BcM4BcNqRDXDBcMYZcM0tcMIeDS1w3wcNcMTFcMFwxXDRcMTJcMKRDgFwxhsNMXDCMXDNNXDekg1wwXDGMXDNEXDekXDNcMVwxXDMwwFwKgIxEzVw4pIRcMFwxjMREXDmkhFwwXDGiRFwwXDBcMzBAXDmAjETNXDikhFwwXDGMhE1cOaSEXDBcMYzERFw5pIRcMFwxokRcMFwwXDMwQFw3gIZcNEtcMIdES1w5wcRcMTNcMKREXDBcMYbETFwwjFw0Tlw5XDaFR1wwpISAXDGMRE1cOaSEXDBcMcxEzlw45IRcMFwxzITOXDlBRVwzXDDkhIBcMVw2XDVCXDBMxUVcOWRcNVwwXDEkRVwwXDBcMTLFzlw5gVw1XDE1XDAkRYBcMVwxMkVOXDkkhVwwXDFcMTKFTlwKgUVcM1wwJIWAXDFMRU9cCsFcNVwxNVwwZEWAXDGpQ1wwXDAqRPRcMTI3JlwwgFwwPlwwXDBcMFw0XApMdWFEaWFsb2dcNFw4TWVzc2FnZVw0XDE5T3BlbiBNdXNpY2FsIFNjb3JlXDIwa0lmIE11c2VzY29yZSBzaG93cyBhIGJsYW5rIHBhZ2UsIHlvdSBtYXkgaGF2ZSB0byB3YWl0IGEgbWludXRlIG9yIHR3byBmb3IgQXJkb3VyIHRvIHdyaXRlIHRoZSBmaWxlIHRvIGRpc2tcNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw2cHJpbnRcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cMTlcMFwwXDBcMFwwXDBcMFwwXDRcOHJlZ2lvbnNcNFwxMXJlZ2lvbmxpc3RcNFw1aXRlclwxOVwxXDBcMFwwXDBcMFwwXDBcNFwxNHRvX21pZGlyZWdpb25cNFw2aXNuaWxcNFwxOE9wZW4gaW4gTXVzZXNjb3JlXDRcIlRoZSBzZWxlY3RlZCByZWdpb24gaXMgbm90IGEgbWlkaVw0JFBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIG1pZGkgcmVnaW9uXDRcNW5hbWVcNFw3c291cmNlXDRcMTR0b19maWxlc291cmNlXDRcNXBhdGhcNFw2cm91dGVcNFw5cGxheWxpc3RcNFw2dHJhY2tcNFw0cGlkXDRcMThnZXRfb3JpZ190cmFja19pZFw0XDJcIlw0JG1zY29yZSAtYSBqYWNrIC1vIC90bXAvb3V0cHV0LnBkZiAgXDRcM2lvXDRcNW9wZW5cNFwKbXNjb3JlLnNoXDRcMndcNClFcnJvcjogRmFpbGVkIHRvIGNyZWF0ZSBmaWxlICdtc2NvcmUuc2gnXDRcNndyaXRlXDRcMlwKXDRcNmNsb3NlXDQnRmlsZSAnbXNjb3JlLnNoJyBjcmVhdGVkIHN1Y2Nlc3NmdWxseSFcNFwyOG12IG1zY29yZS5zaCAvdG1wL21zY29yZS5zaFw0XDNvc1w0XDhleGVjdXRlXDRcOWZvcmtleGVjXDRcCi9iaW4vYmFzaFw0XDE1L3RtcC9tc2NvcmUuc2hcNFw3cmVtb3ZlXDRcOG1zY29yZSBcNFw4U2Vzc2lvblw0XDExZ2V0X3JvdXRlc1w0XDl0b190cmFja1w0XDE0dG9fbWlkaV90cmFja1w0XDhzbGVlcCAyXDRcMTJyb3V0ZV9ieV9pZFw0XDZpbnB1dFw0XDVtaWRpXDRcMTFkaXNjb25uZWN0XDRcMjFtc2NvcmU6bXNjb3JlLW1pZGktMVw0XDhjb25uZWN0XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiICBzY3JpcHRzWzZdID0ge30gc2NyaXB0c1s2XVsicyJdID0gImFyZG91ciB7XApcOVtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKXDluYW1lID0gXCJUZW1wbyAtIEVzdGltYXRlICBhbmQgc2V0IHRlbXBvXCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKZGVzY3JpcHRpb24gPSBbW1wKRXN0aW1hdGUgdGhlIHRlbXBvIG9mIGEgc2VsZWN0ZWQgYXVkaW8gcmVnaW9uIGFuZCBzZXQgdGVtcG8gbWFya2VycyBvciBzZXQgdGhlIGVzdGltYXRlZCB0ZW1wbyBmb3IgdGhlIGVudGlyZSBwcm9qZWN0XApdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcCmxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICAgdHlwZSA9IFwiZHJvcGRvd25cIiwga2V5ID0gXCJkcm9wZG93blwiLCB0aXRsZSA9IFwiQ2hvb3NlIGhvdyB0byBzZXQgdGVtcG9cIiwgdmFsdWVzID1cCiAgICB7XAogICAgICBbXCJTZXQgdGVtcG8gZm9yIGVudGlyZSBwcm9qZWN0XCJdID0gMSwgW1wiU2V0IHRlbXBvIGZvciBsZW5ndGggb2YgdGhlIGF1ZGlvIGxvb3BcIl0gPSAyXAogICAgfSxcCiAgICBkZWZhdWx0ID0gXCJTZXQgdGVtcG8gZm9yIGVudGlyZSBwcm9qZWN0XCJcCiAgfVwKfVwKXApsb2NhbCBvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJDaG9vc2UgaG93IHRvIHNldCB0ZW1wb1wiLCBkaWFsb2dfb3B0aW9ucylcCmxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKLS0gRXhpdCB0aGUgc2NyaXB0IGlmICdDYW5jZWwnIGlzIHByZXNzZWQgb3IgdGhlIGRpYWxvZyBpcyBjbG9zZWRcCmlmIG5vdCBydiB0aGVuXAogIHJldHVybiAtLSBFeGl0cyB0aGUgc2NyaXB0XAplbmRcClwKaWYgcnZbXCJkcm9wZG93blwiXSA9PSAyIHRoZW5cCiAgZHVyID0gdHJ1ZVwKZWxzZVwKICBkdXIgPSBmYWxzZVwKZW5kXApcClwKXApcClwKbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKbG9jYWwgY291bnQgPSAwXApcClwKZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCgpOml0ZXIoKSBkb1wKICAgIGNvdW50ID0gY291bnQgKyAxXAogICAgaWYgcjp0b19hdWRpb3JlZ2lvbigpOmlzbmlsKCkgdGhlblwKICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiRXN0aW1hdGUgVGVtcG9cIiwgXCJUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb25cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgbWQgPSBuaWxcCiAgICAgICAgY29sbGVjdGdhcmJhZ2UoKVwKICAgICAgICByZXR1cm5cCiAgICBlbHNlXAogICAgICAgIGF1ZGlvX3JlZ2lvbiA9IHJcCiAgICBlbmRcCmVuZFwKXAppZiBjb3VudCB+PSAxIHRoZW5cCiAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiRXN0aW1hdGUgVGVtcG9cIiwgXCJQbGVhc2Ugc2VsZWN0IGV4YWN0bHkgMSBhdWRpbyByZWdpb25cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgIHByaW50KG1kOnJ1bigpKVwKICAgIG1kID0gbmlsXAogICAgY29sbGVjdGdhcmJhZ2UoKVwKICAgIHJldHVyblwKZW5kXApcCmxvY2FsIHJuID0gYXVkaW9fcmVnaW9uOm5hbWUoKVwKcHJpbnQgKHJuKVwKbG9jYWwgc291cmNlID0gYXVkaW9fcmVnaW9uOnNvdXJjZSgwKTp0b19maWxlc291cmNlKCk6cGF0aCgpXAotLXByaW50KHNvdXJjZSlcCmxvY2FsIGZpbGVwYXRoID0gc291cmNlXApcCmxvY2FsIHN0ID0gYXVkaW9fcmVnaW9uOnBvc2l0aW9uKClcClwKcHJpbnQgKHN0KVwKXApsb2NhbCBsbiA9IGF1ZGlvX3JlZ2lvbjpsZW5ndGgoKVwKbG9jYWwgZXQgPSBzdCArIGxuXApwcmludChldClcClwKbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKZnVuY3Rpb24gZXh0cmFjdEJQTShybilcCiAgICBsb2NhbCBicG0gPSBzdHJpbmcubWF0Y2gocm4sIFwiKCVkJWQ/JWQ/KVstX10/JXMqW2JCXVtwUF1bbU1dXCIsIDEpXAogICAgaWYgbm90IGJwbSB0aGVuXAogICAgICAgIGJwbSA9IHN0cmluZy5tYXRjaChybiwgXCJbYkJdW3BQXVttTV0lcypbXy1dPyglZCspXCIsIDEpXAogICAgZW5kXAogICAgcmV0dXJuIGJwbVwKZW5kXApcCi0tIEV4YW1wbGUgdXNhZ2U6XApcCmxvY2FsIGJwbSA9IGV4dHJhY3RCUE0ocm4pXAppZiBicG0gdGhlblwKICAgIHByaW50KGJwbSlcCiAgICBsb2NhbCByZXN1bHQgPSBicG1cClwKICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJFc3RpbWF0ZSBUZW1wb1wiLCByZXN1bHQsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICBwcmludChtZDpydW4oKSlcCiAgICBtZCA9IG5pbFwKICAgIGNvbGxlY3RnYXJiYWdlKClcClwKICAgIGxvY2FsIG51bSA9IHRvbnVtYmVyKHJlc3VsdClcClwKICAgIC0tIHRvIGRvLCBhZGQgdGVtcG8gbWFya2VycyBhbmQgcHJvbXB0IHdoZXRoZXIgb3Igbm90IHlvdSB3YW50IHRvIHRlbXBvIG1hcmtlcnNcClwKICAgIC0tIHNldCBhIHRlbXBvIG1hcFwKICAgIGxvY2FsIHRtID0gVGVtcG9yYWwuVGVtcG9NYXAud3JpdGVfY29weSgpXAogICAgaWYgZHVyID09IHRydWUgdGhlblwKICAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbyhudW0sIG51bSwgNCksIHN0KVwKICAgdG06c2V0X3RlbXBvKFRlbXBvcmFsLlRlbXBvKDEyMCwgMTIwLCA0KSwgZXQpXAogICBlbHNlXApcCiAgICB0cCA9IFRlbXBvcmFsLnRpbWVwb3NfdCAoU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpICogMClcClwKXAogICAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbyhudW0sIG51bSwgNCksIHRwKVwKXAogICAgIGVuZFwKXAogICAgU2Vzc2lvbjpiZWdpbl9yZXZlcnNpYmxlX2NvbW1hbmQoXCJDaGFuZ2UgVGVtcG8gTWFwXCIpXAogICAgVGVtcG9yYWwuVGVtcG9NYXAudXBkYXRlKHRtKVwKICAgIGlmIG5vdCBTZXNzaW9uOmFib3J0X2VtcHR5X3JldmVyc2libGVfY29tbWFuZCgpIHRoZW5cCiAgICAgICAgU2Vzc2lvbjpjb21taXRfcmV2ZXJzaWJsZV9jb21tYW5kKG5pbClcCiAgICBlbmRcClwKICAgIHRtID0gbmlsXApcCiAgICAtLSBBYm9ydCBFZGl0IGV4YW1wbGVcCiAgICAtLSBhZnRlciBldmVyeSBjYWxsIHRvIFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgIC0tIHRoZXJlIG11c3QgYmUgYSBtYXRjaGluZyBjYWxsIHRvXAogICAgLS0gVGVtcG9yYWwuVGVtcG9NYXAudXBkYXRlKCkgb3IgVGVtcG9yYWwuVGVtcG9NYXAuYWJvcnRfdXBkYXRlKClcCiAgICBUZW1wb3JhbC5UZW1wb01hcC53cml0ZV9jb3B5KClcCiAgICBUZW1wb3JhbC5UZW1wb01hcC5hYm9ydF91cGRhdGUoKVwKZWxzZVwKICAgIHByaW50KFwiQlBNIG5vdCBmb3VuZCBpbiBmaWxlbmFtZS5cIilcClwKICAgICAtLSBnZXQgRWRpdG9yIHNlbGVjdGlvblwKICAgIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcCiAgICAtLSBJbnN0YW50aWF0ZSB0aGUgUU0gQmFyQmVhdCBUcmFja2VyXAogICAgbG9jYWwgdmFtcCA9IEFSRE9VUi5MdWFBUEkuVmFtcChcImxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLWJhcmJlYXR0cmFja2VyXCIsIFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSgpKVwKXAogICAgLS0gcHJlcGFyZSB0YWJsZXMgdG8gaG9sZCByZXN1bHRzXAogICAgbG9jYWwgYmVhdHMgPSB7fVwKICAgIGxvY2FsIGJhcnMgPSB7fVwKXAogICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgcmVnaW9uXAogICAgZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCAoKTppdGVyICgpIGRvXAogICAgICAgIGxvY2FsIGFyID0gcjp0b19hdWRpb3JlZ2lvbiAoKVwKICAgICAgICBpZiBhcjppc25pbCAoKSB0aGVuXAogICAgICAgICAgICBnb3RvIG5leHRcCiAgICAgICAgZW5kXApcCiAgICAgICAgYmVhdHNbcjpuYW1lICgpXSA9IHt9XAogICAgICAgIGJhcnNbcjpuYW1lICgpXSA9IHt9XApcCiAgICAgICAgLS0gY2FsbGJhY2sgdG8gaGFuZGxlIFZhbXAtUGx1Z2luIGFuYWx5c2lzIHJlc3VsdHNcCiAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2sgKGZlYXRzKVwKICAgICAgICAgICAgbG9jYWwgZmwgPSBmZWF0czp0YWJsZSgpWzBdXAogICAgICAgICAgICBpZiBmbCB0aGVuXAogICAgICAgICAgICAgICAgZm9yIGYgaW4gZmw6aXRlciAoKSBkb1wKICAgICAgICAgICAgICAgICAgICBpZiBmLmhhc1RpbWVzdGFtcCB0aGVuXAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBmbiA9IFZhbXAuUmVhbFRpbWUucmVhbFRpbWUyRnJhbWUoZi50aW1lc3RhbXAsIDQ4MDAwKVwKICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGJlYXRzW3I6bmFtZSAoKV0sIHtwb3MgPSBmbiwgYmVhdCA9IHRvbnVtYmVyKGYubGFiZWwpfSlcCiAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcClwKICAgICAgICAgICAgbG9jYWwgZmwgPSBmZWF0czp0YWJsZSgpWzFdXAogICAgICAgICAgICBpZiBmbCB0aGVuXAogICAgICAgICAgICAgICAgZm9yIGYgaW4gZmw6aXRlciAoKSBkb1wKICAgICAgICAgICAgICAgICAgICBpZiBmLmhhc1RpbWVzdGFtcCB0aGVuXAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBmbiA9IFZhbXAuUmVhbFRpbWUucmVhbFRpbWUyRnJhbWUoZi50aW1lc3RhbXAsIDQ4MDAwKVwKICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGJhcnNbcjpuYW1lICgpXSwgZm4pXAogICAgICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgZW5kXAogICAgICAgICAgICByZXR1cm4gZmFsc2UgLS0gY29udGludWUsIGRvbid0IGNhbmNlbFwKICAgICAgICBlbmRcClwKICAgICAgICB2YW1wOnBsdWdpbigpOnNldFBhcmFtZXRlcihcIkJlYXRzIFBlciBCYXJcIiwgNClcClwKICAgICAgICB2YW1wOmFuYWx5emUoYXI6dG9fcmVhZGFibGUoKSwgMCwgY2FsbGJhY2spXAogICAgICAgIGNhbGxiYWNrKHZhbXA6cGx1Z2luKCk6Z2V0UmVtYWluaW5nRmVhdHVyZXMoKSlcCiAgICAgICAgdmFtcDpyZXNldCgpXAogICAgICAgIDo6bmV4dDo6XAogICAgZW5kXApcCiAgICAtLSBDYWxjdWxhdGUgZGlzdGFuY2VzIGJldHdlZW4gYmVhdHMsIGlnbm9yaW5nIHRoZSBmaXJzdCBCZWF0IDQsIGFuZCB0aGVuIGF2ZXJhZ2VcCiAgICBsb2NhbCBmaXJzdF9iZWF0XzRfc2tpcHBlZCA9IGZhbHNlXAogICAgbG9jYWwgdG90YWxfZGlzdGFuY2UgPSAwXAogICAgbG9jYWwgZGlzdGFuY2VfY291bnQgPSAwXApcCiAgICBmb3IgbiwgbyBpbiBwYWlycyhiZWF0cykgZG9cCiAgICAgICAgcHJpbnQoXCJEaXN0YW5jZSBiZXR3ZWVuIGJlYXRzIGZvciByZWdpb246XCIsIG4pXApcCiAgICAgICAgLS0gSXRlcmF0ZSBvdmVyIHRoZSBiZWF0c1wKICAgICAgICBmb3IgaSA9IDIsICNvIGRvXAogICAgICAgICAgICBsb2NhbCBjdXJyZW50X2JlYXQgPSBvW2ldWydiZWF0J11cCiAgICAgICAgICAgIGxvY2FsIHByZXZpb3VzX2JlYXQgPSBvW2ktMV1bJ2JlYXQnXVwKXAogICAgICAgICAgICAtLSBTa2lwIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIEJlYXQgNFwKICAgICAgICAgICAgaWYgY3VycmVudF9iZWF0ID09IDQgYW5kIG5vdCBmaXJzdF9iZWF0XzRfc2tpcHBlZCB0aGVuXAogICAgICAgICAgICAgICAgZmlyc3RfYmVhdF80X3NraXBwZWQgPSB0cnVlXAogICAgICAgICAgICBlbHNlXAogICAgICAgICAgICAgICAgbG9jYWwgZGlzdGFuY2UgPSBvW2ldWydwb3MnXSAtIG9baS0xXVsncG9zJ11cCiAgICAgICAgICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IHRvdGFsX2Rpc3RhbmNlICsgZGlzdGFuY2VcCiAgICAgICAgICAgICAgICBkaXN0YW5jZV9jb3VudCA9IGRpc3RhbmNlX2NvdW50ICsgMVwKICAgICAgICAgICAgICAgIHByaW50KFwiRGlzdGFuY2UgYmV0d2VlbiBCZWF0IFwiIC4uIHByZXZpb3VzX2JlYXQgLi4gXCIgYW5kIEJlYXQgXCIgLi4gY3VycmVudF9iZWF0IC4uIFwiOlwiLCBkaXN0YW5jZSwgXCJzYW1wbGVzXCIpXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXAogICAgZW5kXApcCiAgICAtLSBDYWxjdWxhdGUgYW5kIHByaW50IHRoZSBhdmVyYWdlIGRpc3RhbmNlXAogICAgaWYgZGlzdGFuY2VfY291bnQgPiAwIHRoZW5cCiAgICAgICAgbG9jYWwgYXZlcmFnZV9kaXN0YW5jZSA9IHRvdGFsX2Rpc3RhbmNlIC8gZGlzdGFuY2VfY291bnRcCiAgICAgICAgcHJpbnQoXCJBdmVyYWdlIGRpc3RhbmNlIGJldHdlZW4gYmVhdHMgKGV4Y2x1ZGluZyB0aGUgZmlyc3QgQmVhdCA0KTpcIiwgYXZlcmFnZV9kaXN0YW5jZSwgXCJzYW1wbGVzXCIpXAogICAgbnVtID0gNDgwMDAvYXZlcmFnZV9kaXN0YW5jZSAqIDYwXAogIHByaW50IChudW0pXApcCiAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkVzdGltYXRlIFRlbXBvXCIsIG51bSwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgIHByaW50KG1kOnJ1bigpKVwKICAgIG1kID0gbmlsXAogICAgY29sbGVjdGdhcmJhZ2UoKVwKXApcCiAgICAtLSBzZXQgYSB0ZW1wbyBtYXBcCiAgICBsb2NhbCB0bSA9IFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgIGlmIGR1ciA9PSB0cnVlIHRoZW5cCiAgICB0bTpzZXRfdGVtcG8oVGVtcG9yYWwuVGVtcG8obnVtLCBudW0sIDQpLCBzdClcCiAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbygxMjAsIDEyMCwgNCksIGV0KVwKICAgZWxzZVwKXAogICAgdHAgPSBUZW1wb3JhbC50aW1lcG9zX3QgKFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSAoKSAqIDApXApcClwKICAgICB0bTpzZXRfdGVtcG8oVGVtcG9yYWwuVGVtcG8obnVtLCBudW0sIDQpLCB0cClcClwKICAgICBlbmRcClwKICAgIFNlc3Npb246YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kKFwiQ2hhbmdlIFRlbXBvIE1hcFwiKVwKICAgIFRlbXBvcmFsLlRlbXBvTWFwLnVwZGF0ZSh0bSlcCiAgICBpZiBub3QgU2Vzc2lvbjphYm9ydF9lbXB0eV9yZXZlcnNpYmxlX2NvbW1hbmQoKSB0aGVuXAogICAgICAgIFNlc3Npb246Y29tbWl0X3JldmVyc2libGVfY29tbWFuZChuaWwpXAogICAgZW5kXApcCiAgICB0bSA9IG5pbFwKXAogICAgLS0gQWJvcnQgRWRpdCBleGFtcGxlXAogICAgLS0gYWZ0ZXIgZXZlcnkgY2FsbCB0byBUZW1wb3JhbC5UZW1wb01hcC53cml0ZV9jb3B5KClcCiAgICAtLSB0aGVyZSBtdXN0IGJlIGEgbWF0Y2hpbmcgY2FsbCB0b1wKICAgIC0tIFRlbXBvcmFsLlRlbXBvTWFwLnVwZGF0ZSgpIG9yIFRlbXBvcmFsLlRlbXBvTWFwLmFib3J0X3VwZGF0ZSgpXAogICAgVGVtcG9yYWwuVGVtcG9NYXAud3JpdGVfY29weSgpXAogICAgVGVtcG9yYWwuVGVtcG9NYXAuYWJvcnRfdXBkYXRlKClcCiAgICBlbHNlXAogICAgICAgIHByaW50KFwiTm8gZGlzdGFuY2VzIGNhbGN1bGF0ZWQuXCIpXApcCiAgICAgICAgLS0gbG9jYWwgY29tbWFuZCA9IFwiYnBtYmluIFwiIC4uIHF1b3RlZGZpbGVwYXRoXApcCiAgICAgICAgbG9jYWwgY29tbWFuZCA9IFwic294ICBcIiAuLnF1b3RlZGZpbGVwYXRoLi4gXCIgLXQgcmF3IC1yIDQ4MDAwICAtZSBmbG9hdCAtYyAxIC0gfCBicG1cIlwKXApvcy5leGVjdXRlKGNvbW1hbmQpXApcClwKLS0gT3BlbiB0aGUgZmlsZSBpbiB3cml0ZSBtb2RlXApcClwKXAogICBsb2NhbCBoYW5kbGUgPSBpby5wb3Blbihjb21tYW5kKVwKICAgIGxvY2FsIGZpcnN0cmVzdWx0ID0gaGFuZGxlOnJlYWQoXCIqYVwiKVwKICAgIGhhbmRsZTpjbG9zZSgpXApcCiAgICBwcmludChmaXJzdHJlc3VsdClcClwKXAogICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJFc3RpbWF0ZSBUZW1wb1wiLCBmaXJzdHJlc3VsdCwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgIHByaW50KG1kOnJ1bigpKVwKICAgIG1kID0gbmlsXAogICAgY29sbGVjdGdhcmJhZ2UoKVwKLS0gQ29udmVydCB0aGUgY29udGVudCB0byBhIG51bWJlciBhbmQgc3RvcmUgaXQgaW4gYSB2YXJpYWJsZVwKICAgIGxvY2FsIG51bSA9IHRvbnVtYmVyKGZpcnN0cmVzdWx0KVwKXApcCiAgICAtLSBzZXQgYSB0ZW1wbyBtYXBcCiAgICBsb2NhbCB0bSA9IFRlbXBvcmFsLlRlbXBvTWFwLndyaXRlX2NvcHkoKVwKICAgIGlmIGR1ciA9PSB0cnVlIHRoZW5cCiAgICB0bTpzZXRfdGVtcG8oVGVtcG9yYWwuVGVtcG8obnVtLCBudW0sIDQpLCBzdClcCiAgIHRtOnNldF90ZW1wbyhUZW1wb3JhbC5UZW1wbygxMjAsIDEyMCwgNCksIGV0KVwKICAgZWxzZVwKXAogICAgdHAgPSBUZW1wb3JhbC50aW1lcG9zX3QgKFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSAoKSAqIDApXApcClwKICAgICB0bTpzZXRfdGVtcG8oVGVtcG9yYWwuVGVtcG8obnVtLCBudW0sIDQpLCB0cClcClwKICAgICBlbmRcClwKICAgIFNlc3Npb246YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kKFwiQ2hhbmdlIFRlbXBvIE1hcFwiKVwKICAgIFRlbXBvcmFsLlRlbXBvTWFwLnVwZGF0ZSh0bSlcCiAgICBpZiBub3QgU2Vzc2lvbjphYm9ydF9lbXB0eV9yZXZlcnNpYmxlX2NvbW1hbmQoKSB0aGVuXAogICAgICAgIFNlc3Npb246Y29tbWl0X3JldmVyc2libGVfY29tbWFuZChuaWwpXAogICAgZW5kXApcCiAgICB0bSA9IG5pbFwKXAogICAgLS0gQWJvcnQgRWRpdCBleGFtcGxlXAogICAgLS0gYWZ0ZXIgZXZlcnkgY2FsbCB0byBUZW1wb3JhbC5UZW1wb01hcC53cml0ZV9jb3B5KClcCiAgICAtLSB0aGVyZSBtdXN0IGJlIGEgbWF0Y2hpbmcgY2FsbCB0b1wKICAgIC0tIFRlbXBvcmFsLlRlbXBvTWFwLnVwZGF0ZSgpIG9yIFRlbXBvcmFsLlRlbXBvTWFwLmFib3J0X3VwZGF0ZSgpXAogICAgVGVtcG9yYWwuVGVtcG9NYXAud3JpdGVfY29weSgpXAogICAgVGVtcG9yYWwuVGVtcG9NYXAuYWJvcnRfdXBkYXRlKClcClwKXApcCiAgICBlbmRcClwKICAgIC0tIGxvY2FsIGNvbW1hbmQgPSBcInNveCAgXCIgLi5xdW90ZWRmaWxlcGF0aC4uIFwiIC10IHJhdyAtciA0ODAwMCAgLWUgZmxvYXQgLWMgMSAtIHwgYnBtXCJcClwKXApcClwKXApcClwKZW5kXApcClwKXApcClwKZW5kIGVuZFwKXApcClwKXApcClwKXApcClwKXApcClwKXApcClwKXApcCiIgIHNjcmlwdHNbNl1bImMiXSA9IHRydWUgc2NyaXB0c1s2XVsibiJdID0gIlRlbXBvIC0gRXN0aW1hdGUgIGFuZCBzZXQgdGVtcG8iICBzY3JpcHRzWzZdWyJhIl0gPSB7fSBzY3JpcHRzWzZdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2ptYW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvdGVtcG8ubHVhIiAgIHNjcmlwdHNbNl1bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXApcMFwwXDBKXDFcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwKXDBcMFwwSlwxXDBcMFwxXDEnJlwyXDBcMEtcMIBcMItAXDFcMIpAQICKQECBilwwwYHLgFwwXDDKwEGDykBChIrAgIKKgEGFa0CAXDCGwEJcMIdcMENcMcFcMFwxXDBcMFwxgFwwpICAXDHMQENcMeSAXDBcMeJAXDBcMFwzMFwwXDCAJlwwgFwwXDdBwFwxXDMxQEJcMlwzMEBcMIBcOMBDh1wzMFwwXDCAXDhcMESHXDZBRFwwXDEygURcMiSBXDBcMUHBXDRcMIdcMUVcMoxBRVwzpIFcMFwxjIFFXDOkXDFcMVwxXDMwwFw2gE3BwVwyjMLFXDSkglwwXDGMXDJGXDWkglwwXDGiXDJcMFwwXDMwwFw0gIbCQlwwh0JGXDXBglw2XDBcMcNcNlwwRsNCXDBHXDPHXDZHQ8dcNobDQlwwh4NHXDeHw0dcN6SCgFwyxlwySFwwXDEyQ0NcNSRcM1wwXDHkQlwwXDCEXDJcMFwwxkJIXDDkQoBcMCZcMIBcMFwzMFwwXDCAXDhAXDKRqUFcMFwwKkL4XDEyN1/AwVwyXDMwgFw0gIbBQlwwh0FGXDPBgVw2XDBcMcJcOFwwRsJCXDBHXDLHXDRHQsdcNIbCQlwwh4JHXDWHwkdcNaSBgFwyxlwxSFwwXDEyQkNcMyRcMlwwXDHkQVwwXDCEXDFcMFwwxkFIXDDkQYBcMCZcMIBcMIaBSFwwjFwxSVwzpIFcMFwxxlwxSFwwXDBcMlwwXDPkQVwwXDHGgUhcMMxByVwzQcJcNFww5IGAXDHMgclcM+SBXDBcMczByVwz5IFcMFwxXDBcMoBcM0aCSFwwTFwyylw0ZIJcMFwxhlwySFwwwFwygFw0pEJcMFwxhoJIXDCMQkpcNaSCXDBcMc2Cglw0XDZcM0hcMEBcM4BcNSRDXDBcMVwxg1wKXDBAXDNcMFw0gYNcClwwXDI5g1wzXDZsXDNcMFwwXDhAg5VGw0pcMIBcM1wwXDNkg1wwXDFiXDNcMFwwXDMwwFwyM4CGXDNIXDDAXDOAXDakQ1wwXDGAXDOAXDbGw0JcMMdDxlw3XDGEXDZcMEBcNFwwXDeGxEJcMIdcNEdcOYdER1w5xsRCXDDHhMdcOcfEx1w55IOAXDJcNlw0SFwwTETDXDdkXDRcMFwxJERcMFwwxFwzXDBcMFw2REhcMCREgFwwXDZcNEtcMEBcNFwwXDckhFwwXDFGREtcMEeEy1w4R8TLXDhkhIBcMIaEQ1wwXDMxwENcOVwzMIBcNICMXDTMXDhcNkVLXDBcN0VMXApAXDVcMFw4gFw1XDBcOMGFXDEyXDAkhVwwXDJAXDWAXDSkRFwwXDKMXDTMXDhcNkVLXDBcN0VMXApBxVwxMlwwgcVcMTJcMMGFXDEyXDAkhVwwXDJAXDWAXDWkRFwwXDJcMzBcMFw0gIZES1wwh0RNXDnGhE1cMMzEzVw55IRcMFwxz8TEXDmkhFwwXDFcOIBcNJqMXDTMXDhcNkVLXDBcN0VMXApAXDVcMFw4gFw1XDBcOMGFXDEyXDAkhVwwXDJGXDVNXDCkRFwwXDKGhE1cMIxcNE5cOVwxRVwxNFwwpESAXDGGREtcMIeES1w5h4ROXDnAXDSAXDikRFwwXDGGhE1cMIzETlw5pIRcMFwxokRcMFwwXDMwwFwwgIaETVwwjFw0T1w5XDRcNVwwXDCkRIBcMURcNFwwXDCGREtcMIeES1w5h8RLXDmkRIBcMIZES1wwh4RLXDmHRE9cOaREgFwwXDMwQFGAhlwzSFwwwYNcMTVcMKRDXDBcMYZDRFwwjINEXDekg1wwXDHGw09cMMdcM9BcN8dD0Fw3XDGEXDE2XDBGhE1cMEzEzVw4ZFw0XDBcMeSDXDBcMFwxMVw0XDBcMEtcNFwwXDCHXDRFXDeMREVcOaSEXDBcMYyERVw5pFw0XDFcMVwzMFwwXDmAjMXFXAqkhVwwXDHMXDVGXDEx5IVcMFwx4kVcMFwwnoVcN4DMXDXJXArkhVwwXDFcMTFcNlwwXDBcClw0hlwxMcxcNclcCuSFXDBcMVwxMVw2XDBcMEpcNIZcMTHsRVwwXDBcOMCFocxcNdFcN+SFXDBcMcxF0VwxMUGGXDE3XDCBhlwxMlww5EVcMFwyzMXRXDdMXDZSXDExZIZcMFwxgUZcMThcMMbGUFww5EWAXDLGxVBcMFwxMlw20Vw3JIZcMFwxXDEyhlJcMTIkXDZcMFwx5EVcMFwwzMXSXDfkRVwwXDGexf9cMTI3qURcMFwwKlw19lwxMjeDXDRcMFwwwURcMThcMFwxRVwxOFwwRlw1U1wwgFw1XDBcOGRcNVwxXDFcMzBAXDmAhlw2SFwwwUZcMTlcMFwwXDdcMFwxMqRGgFwxgUZcMlww3Fw2gFwxMlwxh1wxOVwwqFw2XDeAh0eHXDEyh8dTXDE1zofTXDE0x8eHXDEyx8fTXDE1XDMxgExcMTVcMzDAXDCAokRcMFwwXDMwQFwwgINcNIBcMFwzMEBcNIBcN0iHXDEyXDdcOFRcMTZOiNNcMTRHSIhcMTJHXDjUXDE2XDE0SFw4XDE2zVw0iFw5XDEzhVNcCkZcOEhcMIFIXDIwXDDAXDiAXDE1XDGJXDIwXDBAXDlcMFwxNYHJXDIwXDCdiFw5XDE3wFw4XDBcMTZcMVw5XDIxXDBkSFwwXDKnRvhcMTI3aYVcMFww6sX1XDEyNyBcMIWkXDMwXDBcMjWAUlw1hVw5hlw1SFwwwUVcMjFcMFwwXDaAXApBXDZcMjFcMKRFXDBcMpJFhauPXDVWXDExXDiAXDWrhlw1SFwwxoVVXDCkRVwwXDGGxUJcMIdFRlwxMcGFXDZcMFw2hlVcMEbGQlwwR1w2x1wxMkdGx1wxMobGQlwwh4ZHXDEzh8ZHXDEzpIWAXDLGXDVIXDBcMTJGQ1wxMSRcNlwwXDHkRVwwXDCEXDVcMFwwxkVIXDDkRYBcMMZFS1wwx4XLXDExx8XLXDEx5IWAXDBcNoZDXDBcMzHAQ1wxMlwzMIBcNIBcMTJcNsxcMTGGRktcMIdGTFwxM8aGVVwwXDaHVVwwQYdcMTJcMKSGXDBcMsBcNoBcNCRGXDBcMlwxMlw2zFwxMYZGS1wwh0ZMXDEzwcZcMTJcMFwxx1wxMlwwQYdcMTJcMKSGXDBcMsBcNoBcNSRGXDBcMlwzMFwwXDSAXDZGS1wwXDdGTVwxMkaGTVwwTMbNXDEyZIZcMFwxT0bSXDEyJIZcMFwxXDhcMFw2mlwxMlw2zFwxMYZGS1wwh0ZMXDEzxoZVXDBcNodVXDBBh1wxMlwwpIZcMFwyxlw2TVwwJEZcMFwyXDaGTVwwXDEyXDZOXDEygUZcMTRcMCRGgFwxXDZGS1wwXDeGS1wxMlw3hk5cMTJAXDaAXDExJEZcMFwxXDaGTVwwXDEyxk5cMTIkhlwwXDFcIkZcMFwwXDMwwFwwgFw2hk1cMFwxMlw2T1wxMoRcNlwwXDAkRoBcMcRcNVwwXDBcNkZLXDBcN4ZLXDEyXDfGS1wxMiRGgFwwXDZGS1wwXDeGS1wxMlw3Rk9cMTIkRoBcMN6DXDI4gEZcNUhcMIFFXDIyXDBkRVwwXDFBhVwyMlwwgFw1XDBcNsHFXDIyXDBdxYVcCoZcNVdcMIdFV1wxMcBcNYBcCqRFXDBcMYaFV1wwh8VXXDExwFw1gFwKpIVcMFwxzFw1WFwxMUFGXDI0XDDkhYBcMVwxMoZYXDExJEZcMFwxXDZcNkhcMEBcNoBcMTEkRlwwXDFcNsZCXDBcN0ZGXDEyQYZcNlwwgFw2gFwxMcbGQlwwx1w2x1wxM8dGx1wxM1w2x0JcMFw3h0dcMTRcN8dHXDE0JIaAXDJGXDZIXDCMRkNcMTKkXDZcMFwxZEZcMFwwXDRcNlwwXDBGRkhcMGRGgFwwRsZYXDCAXDaAXDExZIZcMFwxhkZLXDCHhktcMTOHxktcMTOkhoBcMMaGQ1wwXDMxwMNcMTNcMzCAXDSAzFw2TFwxM0ZHS1wwR0fMXDE0gFw3gFwxMsBcN4BcMTJcMYhcMTJcMGSHXDBcMoBcN4BcNORGXDBcMsxcNkxcMTNGR0tcMEdHzFwxNIHHXDEyXDDBx1wxMlwwXDGIXDEyXDBkh1wwXDKAXDeAXDXkRlwwXDJcMzBcMFw0gMZGS1wwx0bNXDEzXDaHTVwwXDEyx01cMTQkh1wwXDFcMTVHUlwxNOSGXDBcMVw4wFw2msxcNkxcMTNGR0tcMEdHzFwxNIBcN4BcMTLAXDeAXDEyXDGIXDEyXDBkh1wwXDKGXDdNXDDkRlwwXDLGhk1cMMxcNs5cMTNBR1wxNFww5EaAXDHGRktcMMeGy1wxM8eGzlwxM1wwXDdcMFwxM+RGXDBcMcaGTVwwzMbOXDEz5IZcMFwx4kZcMFwwXDMwwFwwgMaGTVwwzFw2z1wxM0RcN1wwXDDkRoBcMYRcNlwwXDDGRktcMMeGy1wxM8fGy1wxM+RGgFwwxkZLXDDHhstcMTPHRs9cMTPkRoBcMN7D/1wxMjcmXDCAXDBkXDBcMFwwXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcMjRDaG9vc2UgaG93IHRvIHNldCB0ZW1wb1w0XDd2YWx1ZXNcNFwyOVNldCB0ZW1wbyBmb3IgZW50aXJlIHByb2plY3RcMTlcMVwwXDBcMFwwXDBcMFwwXDQnU2V0IHRlbXBvIGZvciBsZW5ndGggb2YgdGhlIGF1ZGlvIGxvb3BcMTlcMlwwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFwKTHVhRGlhbG9nXDRcN0RpYWxvZ1w0XDRydW5cNFw0ZHVyXDFcMVwxXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDhyZWdpb25zXDRcMTFyZWdpb25saXN0XDRcNWl0ZXJcNFwxNXRvX2F1ZGlvcmVnaW9uXDRcNmlzbmlsXDRcOE1lc3NhZ2VcNFwxNUVzdGltYXRlIFRlbXBvXDIwK1RoZSBzZWxlY3RlZCByZWdpb24gaXMgbm90IGFuIGF1ZGlvIHJlZ2lvblw0XDEyTWVzc2FnZVR5cGVcNFw1SW5mb1w0XDExQnV0dG9uVHlwZVw0XDZDbG9zZVw0XDZwcmludFw0XDE1Y29sbGVjdGdhcmJhZ2VcNFwxM2F1ZGlvX3JlZ2lvblw0JVBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvblw0XDVuYW1lXDRcN3NvdXJjZVw0XDE0dG9fZmlsZXNvdXJjZVw0XDVwYXRoXDRcOXBvc2l0aW9uXDRcN2xlbmd0aFw0XDJcIlw0XDExZXh0cmFjdEJQTVw0XDl0b251bWJlclw0XDlUZW1wb3JhbFw0XDlUZW1wb01hcFw0XDExd3JpdGVfY29weVw0XApzZXRfdGVtcG9cNFw2VGVtcG9cMTlcNFwwXDBcMFwwXDBcMFwwXDE5eFwwXDBcMFwwXDBcMFwwXDRcM3RwXDRcCnRpbWVwb3NfdFw0XDhTZXNzaW9uXDRcMjBub21pbmFsX3NhbXBsZV9yYXRlXDRcMjViZWdpbl9yZXZlcnNpYmxlX2NvbW1hbmRcNFwxN0NoYW5nZSBUZW1wbyBNYXBcNFw3dXBkYXRlXDRcMzFhYm9ydF9lbXB0eV9yZXZlcnNpYmxlX2NvbW1hbmRcNFwyNmNvbW1pdF9yZXZlcnNpYmxlX2NvbW1hbmRcNFwxM2Fib3J0X3VwZGF0ZVw0XDI3QlBNIG5vdCBmb3VuZCBpbiBmaWxlbmFtZS5cNFw3QVJET1VSXDRcN0x1YUFQSVw0XDVWYW1wXDQnbGliYXJkb3VydmFtcHBsdWdpbnM6cW0tYmFyYmVhdHRyYWNrZXJcNFw5Y2FsbGJhY2tcNFw3cGx1Z2luXDRcMTNzZXRQYXJhbWV0ZXJcNFwxNEJlYXRzIFBlciBCYXJcNFw4YW5hbHl6ZVw0XDEydG9fcmVhZGFibGVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcMjFnZXRSZW1haW5pbmdGZWF0dXJlc1w0XDZyZXNldFw0XDZwYWlyc1w0I0Rpc3RhbmNlIGJldHdlZW4gYmVhdHMgZm9yIHJlZ2lvbjpcMTlcMVwwXDBcMFwwXDBcMFwwXDRcNWJlYXRcNFw0cG9zXDRcMjNEaXN0YW5jZSBiZXR3ZWVuIEJlYXQgXDRcMTEgYW5kIEJlYXQgXDRcMjpcNFw4c2FtcGxlc1wyMD1BdmVyYWdlIGRpc3RhbmNlIGJldHdlZW4gYmVhdHMgKGV4Y2x1ZGluZyB0aGUgZmlyc3QgQmVhdCA0KTpcNFw0bnVtXDE5gLtcMFwwXDBcMFwwXDBcMTk8XDBcMFwwXDBcMFwwXDBcNFwyNU5vIGRpc3RhbmNlcyBjYWxjdWxhdGVkLlw0XDZzb3ggIFw0KCAtdCByYXcgLXIgNDgwMDAgIC1lIGZsb2F0IC1jIDEgLSB8IGJwbVw0XDNvc1w0XDhleGVjdXRlXDRcM2lvXDRcNnBvcGVuXDRcNXJlYWRcNFwzKmFcNFw2Y2xvc2VcNFw5dG9udW1iZXJcMVwwXDBcMFwwXDBcMlwwXDBcMFwwUVwwXDBcMFdcMFwwXDBcMVwwXDZcMTdcMFwwXDBGXDBAXDBHQMBcMIBcMFwwXDDBgFwwXDBcMcFcMFwwZIBcMFwyYkBcMFwwXDMwgFwxgIZcMEBcMIdAQFwxwFwwXDBcMFwxXDFcMVwwQcFcMFwwpIBcMFwyQFwwXDBcMWZcMFwwXDEmXDCAXDBcNVwwXDBcMFw0XDdzdHJpbmdcNFw2bWF0Y2hcNFwzMSglZCVkPyVkPylbLV9dPyVzKltiQl1bcFBdW21NXVwxOVwxXDBcMFwwXDBcMFwwXDBcNFwyNltiQl1bcFBdW21NXSVzKltfLV0/KCVkKylcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwnVwwXDBcMLJcMFwwXDBcMVwwXDEyPlwwXDBcMExcMEBcMGSAXDBcMUdAwFwwYlwwXDBcMFwzMIBcNoCMgMBcMKRcMFwxXDFcMzBAXDWAh8HAXDKiXDFcMFwwXDMwgFw0gIZcMUFcMIdBQVwzh4FBXDPHwcFcMlwxXDJcMlwwpIGAXDHGXDFAXDDHQcJcM1w1XDJcMFwxXDEygkJcNCSCXDBcMVw2XDKCXDBLglwwXDBKgoGFhkJDXDDHgsNcMqSCXDBcMUqCXDKG5EGAXDGpQFwwXDAqwflcMTI3jFwwQFwwpIBcMFwxh8BDXDGiXDBcMFwwXDMwQFw1gMyAQFwx5FwwXDFcMVwzMFwwXDSAx8FAXDPiXDFcMFwwXDMwQFwzgMZcMUFcMMdBwVwzx4HBXDNcN8JBXDNBXDJcMlww5IGAXDFcNlwyQFwwXDdCQlw0RVwyXDBcMUyCwlw0ZIJcMFwxRkKCXDGAXDKAXDMkQoBcMelAXDBcMGpcMftcMTI3w1wwXDBcMOZcMFwwXDEmXDCAXDBcMTZcMFwwXDBcNFw2dGFibGVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcNWl0ZXJcNFwxM2hhc1RpbWVzdGFtcFw0XDVWYW1wXDRcOVJlYWxUaW1lXDRcMTVyZWFsVGltZTJGcmFtZVw0XAp0aW1lc3RhbXBcMTmAu1wwXDBcMFwwXDBcMFw0XDdpbnNlcnRcNFw1bmFtZVw0XDRwb3NcNFw1YmVhdFw0XDl0b251bWJlclw0XDZsYWJlbFwxOVwxXDBcMFwwXDBcMFwwXDBcNFwwXDBcMFwwXDBcMVwxNlwxXDIxXDFcMTdcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgIHNjcmlwdHNbN10gPSB7fSBzY3JpcHRzWzddWyJzIl0gPSAiYXJkb3VyIHtcCiBbXCJ0eXBlXCJdID0gXCJFZGl0b3JBY3Rpb25cIixcCiBuYW1lID0gXCJLZXkgLSBHZXQgdGhlIGtleSBvZiBhbiBhdWRpbyBsb29wXCIsXAogYXV0aG9yID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKIGRlc2NyaXB0aW9uID0gW1tcCkVzdGltYXRlcyB0aGUga2V5IG9mIGFuIGF1ZGlvIGxvb3AgZm9yIHRoZSBwdXJwb3NlIG9mIGF1dG90dW5lIGFuZCBzZXR0aW5nIHRoZSBrZXkgZm9yIHRoZSBwcm9qZWN0IHNvIG90aGVyIGF1ZGlvIGxvb3BzIGNhbiBmb2xsb3cgaWYgcmVxdWVzdGVkIGJ5IHRoZSB1c2VyXApdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcCiAgICAgICAtLSBHZXQgdGhlIHVzZXIgY29uZmlnIGRpcmVjdG9yeVwKbG9jYWwgdXNlcl9jb25maWdfZGlyZWN0b3J5ID0gQVJET1VSLnVzZXJfY29uZmlnX2RpcmVjdG9yeSg4KVwKXAotLSBDb25zdHJ1Y3QgdGhlIGZ1bGwgcGF0aCB0byB0aGUga2V5LnR4dCBmaWxlXApsb2NhbCBrZXlfZmlsZV9wYXRoID0gdXNlcl9jb25maWdfZGlyZWN0b3J5IC4uIFwiL2tleS50eHRcIlwKXAotLSBSZWFkIHRoZSBjb250ZW50cyBvZiB0aGUga2V5LnR4dCBmaWxlXApsb2NhbCBmaWxlID0gaW8ub3BlbihrZXlfZmlsZV9wYXRoLCBcInJcIikgLS0gT3BlbiB0aGUgZmlsZSBpbiByZWFkIG1vZGVcCmxvY2FsIGZpbGVfY29udGVudCA9IFwiTm8ga2V5IHNldFwiIC0tIERlZmF1bHQgdmFsdWUgaWYgdGhlIGZpbGUgY2Fubm90IGJlIHJlYWRcClwKaWYgZmlsZSB0aGVuXAogICAgZmlsZV9jb250ZW50ID0gZmlsZTpyZWFkKFwiKmFcIikgLS0gUmVhZCB0aGUgZW50aXJlIGNvbnRlbnQgb2YgdGhlIGZpbGVcCiAgICBmaWxlOmNsb3NlKCkgLS0gQ2xvc2UgdGhlIGZpbGVcCmVsc2VcCiAgICBwcmludChcIldhcm5pbmc6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHJlYWRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCmVuZFwKXAotLSBQcmVwYXJlIHRoZSBkaWFsb2cgb3B0aW9uIHdpdGggdGhlIGZpbGUgY29udGVudFwKbG9jYWwgY3VycmVudF9rZXlfb3B0aW9uID0gXCJTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleTogXCIgLi4gZmlsZV9jb250ZW50XAogICAgICAgIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uKClcCiAgICAgICAgbG9jYWwgY291bnQgPSAwXAogICAgICAgIGxvY2FsIGF1ZGlvX3JlZ2lvblwKXAogICAgICAgIGZvciByIGluIHNlbC5yZWdpb25zOnJlZ2lvbmxpc3QoKTppdGVyKCkgZG9cCiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxXAogICAgICAgICAgICBpZiByOnRvX2F1ZGlvcmVnaW9uKCk6aXNuaWwoKSB0aGVuXAogICAgICAgICAgICAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkdldCBLZXlcIiwgXCJUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb24uIFRoZSAgcHJvamVjdCBrZXkgaXMgY3VycmVudGx5IHNldCB0byBcIi4uZmlsZV9jb250ZW50LCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuSW5mbywgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpXAogICAgICAgICAgICAgICAgcHJpbnQobWQ6cnVuKCkpXAogICAgICAgICAgICAgICAgbWQgPSBuaWxcCiAgICAgICAgICAgICAgICBjb2xsZWN0Z2FyYmFnZSgpXAogICAgICAgICAgICAgICAgcmV0dXJuXAogICAgICAgICAgICBlbHNlXAogICAgICAgICAgICAgICAgYXVkaW9fcmVnaW9uID0gclwKICAgICAgICAgICAgZW5kXAogICAgICAgIGVuZFwKXAogICAgICAgIGlmIGNvdW50IH49IDEgdGhlblwKICAgICAgICAgICAgbG9jYWwgbWQgPSBMdWFEaWFsb2cuTWVzc2FnZShcIkdldCBLZXlcIiwgXCJQbGVhc2Ugc2VsZWN0IGV4YWN0bHkgMSBhdWRpbyByZWdpb24uIFRoZSBwcm9qZWN0IGtleSBpcyBjdXJyZW50bHkgc2V0IHRvIFwiLi5maWxlX2NvbnRlbnQsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICAgICAgICAgIHByaW50KG1kOnJ1bigpKVwKICAgICAgICAgICAgbWQgPSBuaWxcCiAgICAgICAgICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICAgICAgICAgIHJldHVyblwKICAgICAgICBlbmRcClwKICAgIGxvY2FsIHJuID0gYXVkaW9fcmVnaW9uOm5hbWUoKVwKICAgIGxvY2FsIHNvdXJjZSA9IGF1ZGlvX3JlZ2lvbjpzb3VyY2UoMCk6dG9fZmlsZXNvdXJjZSgpOnBhdGgoKVwKICAgIHByaW50KHNvdXJjZSlcCiAgICBsb2NhbCBmaWxlcGF0aCA9IHNvdXJjZVwKXAogICAgbG9jYWwgcXVvdGVkZmlsZXBhdGggPSAnXCInIC4uIGZpbGVwYXRoIC4uICdcIidcClwKICAgIC0tIFBhdHRlcm4gdG8gY2FwdHVyZSB0aGUga2V5IGFmdGVyIFwia2V5X1wiXAogICAgbG9jYWwgZmtleSA9IHJuOm1hdGNoKFwia2V5XyhbQS1HXVsjYl0/bT8pXCIpXApcCiAgICBpZiBma2V5IHRoZW5cCiAgICAgICAgcHJpbnQoXCJFeHRyYWN0ZWQga2V5OlwiLCBma2V5KVwKXAogICAgICAgIGlmIGZrZXk6ZmluZChcIm0kXCIpIHRoZW5cCiAgICAgICAgICAgIGZrZXkgPSBma2V5IC4uIFwiIG1pbm9yXCJcCiAgICAgICAgZWxzZVwKICAgICAgICAgICAgZmtleSA9IGZrZXkgLi4gXCIgbWFqb3JcIlwKICAgICAgICBlbmRcCiAgICAgICAgcHJpbnQoXCJFeHRyYWN0ZWQga2V5OlwiLCBma2V5KVwKXAogICAgICAgIGxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICAgICAgICAgICAge1wKICAgICAgICAgICAgICAgIHR5cGUgPSBcImRyb3Bkb3duXCIsIGtleSA9IFwidGFyZ2V0X2tleVwiLCB0aXRsZSA9IFwiRXN0aW1hdGVkIGtleSBvZiBsb29wOiBcIiAuLiBma2V5IC4uIFwiIFdvdWxkIHlvdSBsaWtlIHRvIHNldCB0aGlzIGFzIHRoZSBwcm9qZWN0IGtleT9cIiwgdmFsdWVzID0ge1wKICAgICAgICAgICAgICAgICAgICBbXCJEbyBub3Qgc2V0IHByb2plY3Qga2V5XCJdID0gMSwgW1wiU2V0IHRoZSBrZXkgb2YgdGhlIHByb2plY3RcIl0gPSAyXAogICAgICAgICAgICAgICAgfSxcCiAgICAgICAgICAgICAgICBkZWZhdWx0ID0gXCJEbyBub3Qgc2V0IHByb2plY3Qga2V5XCJcCiAgICAgICAgICAgIH1cCiAgICAgICAgfVwKXAogICAgICAgIGxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyhcIkVzdGltYXRlIEtleVwiLCBkaWFsb2dfb3B0aW9ucylcCiAgICAgICAgbG9jYWwgcnYgPSBvZDpydW4oKVwKXAogICAgICAgIGlmIHJ2IGFuZCBydltcInRhcmdldF9rZXlcIl0gPT0gMiB0aGVuXAogICAgICAgICAgICBwcmludChcIlNldHRpbmcga2V5IG9mIHByb2plY3RcIilcClwKICAgICAgICAgICAgbG9jYWwgdXNlcl9jb25maWdfZGlyZWN0b3J5ID0gQVJET1VSLnVzZXJfY29uZmlnX2RpcmVjdG9yeSg4KVwKICAgICAgICAgICAgbG9jYWwga2V5X2ZpbGVfcGF0aCA9IHVzZXJfY29uZmlnX2RpcmVjdG9yeSAuLiBcIi9rZXkudHh0XCJcClwKICAgICAgICAgICAgbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJ3XCIpXAogICAgICAgICAgICBpZiBmaWxlIHRoZW5cCiAgICAgICAgICAgICAgICBmaWxlOndyaXRlKGZrZXkgLi4gXCJcXG5cIilcCiAgICAgICAgICAgICAgICBmaWxlOmNsb3NlKClcCiAgICAgICAgICAgICAgICBwcmludChcIkZpbGUgY2xlYXJlZCBhbmQgZGF0YSB3cml0dGVuIHRvIFwiIC4uIGtleV9maWxlX3BhdGggLi4gXCIgc3VjY2Vzc2Z1bGx5LlwiKVwKICAgICAgICAgICAgZWxzZVwKICAgICAgICAgICAgICAgIHByaW50KFwiRXJyb3I6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHdyaXRpbmcgYXQgXCIgLi4ga2V5X2ZpbGVfcGF0aClcCiAgICAgICAgICAgIGVuZFwKICAgICAgICBlbmRcCiAgICBlbHNlXAogICAgICAgIHByaW50KFwiS2V5IG5vdCBmb3VuZCBpbiBmaWxlbmFtZS5cIilcCiAgICAgICAgbG9jYWwgY29tbWFuZCA9IFwia2V5IFwiIC4uIHF1b3RlZGZpbGVwYXRoXApcCiAgICAgICAgb3MuZXhlY3V0ZShjb21tYW5kKVwKICAgICAgICBsb2NhbCBoYW5kbGUgPSBpby5wb3Blbihjb21tYW5kKVwKICAgICAgICBsb2NhbCBmaXJzdHJlc3VsdCA9IGhhbmRsZTpyZWFkKFwiKmFcIilcCiAgICAgICAgaGFuZGxlOmNsb3NlKClcClwKICAgICAgICBwcmludChmaXJzdHJlc3VsdClcClwKICAgICAgICAtLSBFeHRyYWN0IHRoZSBrZXkgYW5kIHNjYWxlXAogICAgICAgIGxvY2FsIGRrZXksIHNjYWxlID0gc3RyaW5nLm1hdGNoKGZpcnN0cmVzdWx0LCBcIlRoZSBrZXkgb2YgdGhlIHNvbmcgaXMgKFtBLUcjXSspICglYSspXCIpXAogICAgICAgIHByaW50KGRrZXkpXApcCiAgICAgICAgaWYgc2NhbGUgPT0gXCJtaW5vclwiIHRoZW5cCiAgICAgICAgICAgIGRrZXkgPSBka2V5IC4uIFwibVwiXAogICAgICAgIGVuZFwKXAogICAgICAgIHByaW50KFwiS2V5OiBcIiAuLiBka2V5KVwKICAgICAgICBwcmludChcIlNjYWxlOiBcIiAuLiBzY2FsZSlcClwKICAgICAgICBsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAgICAgICAgICAgIHtcCiAgICAgICAgICAgICAgICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcInRhcmdldF9rZXlcIiwgdGl0bGUgPSBcIkVzdGltYXRlZCBrZXkgb2YgbG9vcDogXCIgLi4gZGtleSAuLiBcIiBcIiAuLiBzY2FsZSAuLiBcIiBXb3VsZCB5b3UgbGlrZSB0byBzZXQgdGhpcyBhcyB0aGUgcHJvamVjdCBrZXk/XCIsIHZhbHVlcyA9IHtcCiAgICAgICAgICAgICAgICAgICAgW1wiRG8gbm90IHNldCBwcm9qZWN0IGtleVwiXSA9IDEsIFtcIlNldCB0aGUga2V5IG9mIHRoZSBwcm9qZWN0XCJdID0gMlwKICAgICAgICAgICAgICAgIH0sXAogICAgICAgICAgICAgICAgZGVmYXVsdCA9IFwiRG8gbm90IHNldCBwcm9qZWN0IGtleVwiXAogICAgICAgICAgICB9XAogICAgICAgIH1cClwKICAgICAgICBsb2NhbCBvZCA9IEx1YURpYWxvZy5EaWFsb2coXCJFc3RpbWF0ZSBLZXlcIiwgZGlhbG9nX29wdGlvbnMpXAogICAgICAgIGxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKICAgICAgICBpZiBydiBhbmQgcnZbXCJ0YXJnZXRfa2V5XCJdID09IDIgdGhlblwKICAgICAgICAgICAgcHJpbnQoXCJTZXR0aW5nIGtleSBvZiBwcm9qZWN0XCIpXApcCiAgICAgICAgICAgIGxvY2FsIHVzZXJfY29uZmlnX2RpcmVjdG9yeSA9IEFSRE9VUi51c2VyX2NvbmZpZ19kaXJlY3RvcnkoOClcCiAgICAgICAgICAgIGxvY2FsIGtleV9maWxlX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIva2V5LnR4dFwiXApcCiAgICAgICAgICAgIGxvY2FsIGZpbGUgPSBpby5vcGVuKGtleV9maWxlX3BhdGgsIFwid1wiKVwKICAgICAgICAgICAgaWYgZmlsZSB0aGVuXAogICAgICAgICAgICAgICAgZmlsZTp3cml0ZShka2V5IC4uIFwiIFwiIC4uIHNjYWxlIC4uIFwiXFxuXCIpXAogICAgICAgICAgICAgICAgZmlsZTpjbG9zZSgpXAogICAgICAgICAgICAgICAgcHJpbnQoXCJGaWxlIGNsZWFyZWQgYW5kIGRhdGEgd3JpdHRlbiB0byBcIiAuLiBrZXlfZmlsZV9wYXRoIC4uIFwiIHN1Y2Nlc3NmdWxseS5cIilcCiAgICAgICAgICAgIGVsc2VcCiAgICAgICAgICAgICAgICBwcmludChcIkVycm9yOiBDb3VsZCBub3Qgb3BlbiBmaWxlIGZvciB3cml0aW5nIGF0IFwiIC4uIGtleV9maWxlX3BhdGgpXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXAogICAgZW5kXAplbmQgZW5kXAoiICBzY3JpcHRzWzddWyJjIl0gPSB0cnVlIHNjcmlwdHNbN11bIm4iXSA9ICJLZXkgLSBHZXQgdGhlIGtleSBvZiBhbiBhdWRpbyBsb29wIiAgc2NyaXB0c1s3XVsiYSJdID0ge30gc2NyaXB0c1s3XVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMva2V5Lmx1YSIgICBzY3JpcHRzWzddWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwmVwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMJlcMFwwXDBcMVwxXDMxO1wxXDBcMEZcMEBcMEdAwFwwgYBcMFwwZIBcMFwxgFwwgFwwwcBcMFwwncBcMFwxxlwwQVwwx0DBXDFcMFwxXDBcMUGBXDFcMOSAgFwxXDHBXDFcMOJcMFwwXDBcMzCAXDGATFwxwlwxwUFcMlwwZIGAXDFcMFwxgFwyTIHCXDFkQVwwXDFcMzBcMFwxgEbBQlwwgVwxXDNcMMBcMVwwXDGdwVwxXDNkQVwwXDFBQVwzXDCAXDFcMFwyXYGBXDKGgUNcMIzBQ1wzpIFcMFwxwVwxXDRcMFw0XDJcMFwwR0JEXDNMgsRcNGSCXDBcMUzCxFw0ZFwyXDFcMVwzMEBcN4DNXDHFXDNMQ0VcNmSDXDBcMUyDxVw2ZINcMFwxYlwzXDBcMFwzMEBcNYBGw0VcMEdcM8ZcNoFDXDZcMMGDXDZcMFwwXDRcMFwy3VwzhFw3XDbERVwwXDfERlw4XDdcNEdcOEbERVwwR0THXDhHhMdcOGSDgFwyhsNCXDDMw8dcNuRcM1wwXDGkQ1wwXDBEXDNcMFwwhlwzSFwwpEOAXDAmXDCAXDBcMzBcMFwwgFwwXDJcMFw2aUJcMFww6sL3XDEyN19cMMVcM1wzMFwwXDWARsJFXDBHXDLGXDSBQlw2XDDBQlw4XDBcMFwzXDBcMt1cMoNcNVw2w0VcMFw3w0ZcNlw3XDNHXDZGw0VcMEdDx1w2R4PHXDZkgoBcMobCQlwwzMLHXDTkXDJcMFwxpEJcMFwwRFwyXDBcMIZcMkhcMKRCgFwwJlwwgFwwTIJIXDRkglwwXDGMwkhcNFwxXDNcNFwwpIKAXDGMXDJJXDWkglwwXDGMQklcNaSCXDBcMcbCQlwwXDBcM1wwXDXkQlwwXDHAXDJcMFw1XDGDXDlcMEBcM4BcNYGDXDlcMFwyOYNcM1w2TMPJXDTBXDNcClwwZIOAXDFiXDNcMFwwXDMwwFwyMICGw0JcMMFDXApcMFwwXDSAXDakQ4BcMYyDylw2XDHEXApcMKSDgFwxolwzXDBcMFwzMMBcMICAXDOAXDbBXDNcMTFcMF3DXDNcN1wzMIBcMICAXDOAXDbBQ1wxMVwwXcNcM1w3hsNCXDDBQ1wKXDBcMFw0gFw2pEOAXDGLXDOAXDDLQ1wxXDDKw0uXykNMmFwxxFwxMlwwQFw0gFw2gVw0XDEzXDBcMjmEXDRcOMpcM1w0mVwxMYRcMFwwXApcNEWbXApcNM6bylwzhJrKg82cq0OAXDDGw0VcMMeDzlw3XDHEXDE0XDBAXDRcMFw35IOAXDFcMTLEx1w3JIRcMFwxXCJcNFwwXDBcMzDAJYBHRExcOFwzMVwwzlw4XDMwXDAlgEbEQlwwgVw0XDE1XDBkRFwwXDFGXDRAXDBHRMBcOIGEXDBcMGSEXDBcMYBcNIBcOMHEXDBcMJ3EXDRcOcZcNEFcMMdEwVw5XDBcNVwwXDlBRVwxNVww5ISAXDHiXDRcMFwwXDMwQFwzgFwxMoXPXDmAXDWAXDbBxVwxNVwwncVcNVwxMSRFgFwxXDEyhcJcOSRFXDBcMVw2xUJcMEFcNVwxNlwwgFw1XDBcOcFFXDE2XDBdxYVcCiRFXDBcMVwzMEBcMjmAXDbFQlwwQYVcMTZcMIBcNVwwXDldhYVcCiRFXDBcMVwzMMBcMjeAhsNCXDDBw1wxNlwwpENcMFwxgVwzXDE3XDDAXDNcMFw2ncNcM1w3xkNRXDDHg9FcN1wwXDRcMFw35ENcMFwxxlwzQVwwx8PRXDdcMFw0XDBcN+SDXDBcMVwxMlw0wlw3gURcMlwwJISAXDFMhMJcN2REXDBcMUbEQlwwgFw0XDBcOGREXDBcMUZcNFJcMEfEyVw4gFw0XDBcOMFEXDE4XDBkxIBcMcbEQlwwXDBcNYBcOOREXDBcMVwzMYBSXDlcMzCAXDCAwFw0gFw4XDHFXDE4XDBdXDSFXDnGxEJcMFwxXDVcMTlcMEBcNYBcOFwyOUVcNVwK5ERcMFwxxsRCXDBcMUVcMTlcMEBcNVwwXDlcMjlFXDVcCuREXDBcMctcNIBcMFwxMUVcMVwwXArFS5dcCkVMmEHFXDEyXDCAXDWAXDjBhVwxOVwwXDBcNlwwXDlBXDZcMTNcMF1FhlwKXApFXDWZS4VcMFwwSlw1RZtKXDXOm1wKRYWaXAqFzZzrRIBcMFw2xUVcMFw3hU5cCkHFXDE0XDCAXDWAXDkkhYBcMUzFR1wKZIVcMFwxYlw1XDBcMFwzMFwwXAqAh0XMXApcMzFcME5cMTFcMzBAXDmAhsVCXDDBXDVcMTVcMKRFXDBcMYZcNUBcMIdFQFwxMcGFXDBcMKSFXDBcMcBcNVwwXDExXDHGXDBcMN1cNYZcMTFcNlw2QVwwXDdGQVwxMkBcNoBcMTGBRlwxNVwwJIaAXDFcIlw2XDBcMFwzMMBcM4BMhk9cMTLAXDaAXDhcMYdcMTlcMEBcN1wwXDmBx1wxNVww3YaHXDEzZEaAXDFMhkJcMTJkRlwwXDFGxkJcMIFcNlwxNlwwwFw2gFwxMVwxR1wxNlwwnVw2XDdcMTNkRlwwXDFcMzBcMFwxgEbGQlwwgYZcMTZcMMBcNoBcMTGdxlw2XDEzZEZcMFwxJlwwgFwwT1wwXDBcMFw0XDdBUkRPVVJcNFwyMnVzZXJfY29uZmlnX2RpcmVjdG9yeVwxOVw4XDBcMFwwXDBcMFwwXDBcNFw5L2tleS50eHRcNFwzaW9cNFw1b3Blblw0XDJyXDRcMTFObyBrZXkgc2V0XDRcNXJlYWRcNFwzKmFcNFw2Y2xvc2VcNFw2cHJpbnRcMjAtV2FybmluZzogQ291bGQgbm90IG9wZW4gZmlsZSBmb3IgcmVhZGluZyBhdCBcNFwyOVNldCB0byBjdXJyZW50IHByb2plY3Qga2V5OiBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDhyZWdpb25zXDRcMTFyZWdpb25saXN0XDRcNWl0ZXJcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMTV0b19hdWRpb3JlZ2lvblw0XDZpc25pbFw0XApMdWFEaWFsb2dcNFw4TWVzc2FnZVw0XDhHZXQgS2V5XDIwUlRoZSBzZWxlY3RlZCByZWdpb24gaXMgbm90IGFuIGF1ZGlvIHJlZ2lvbi4gVGhlICBwcm9qZWN0IGtleSBpcyBjdXJyZW50bHkgc2V0IHRvIFw0XDEyTWVzc2FnZVR5cGVcNFw1SW5mb1w0XDExQnV0dG9uVHlwZVw0XDZDbG9zZVw0XDRydW5cNFwxNWNvbGxlY3RnYXJiYWdlXDIwS1BsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvbi4gVGhlIHByb2plY3Qga2V5IGlzIGN1cnJlbnRseSBzZXQgdG8gXDRcNW5hbWVcNFw3c291cmNlXDRcMTR0b19maWxlc291cmNlXDRcNXBhdGhcNFwyXCJcNFw2bWF0Y2hcNFwxOWtleV8oW0EtR11bI2JdP20/KVw0XDE1RXh0cmFjdGVkIGtleTpcNFw1ZmluZFw0XDNtJFw0XDcgbWlub3JcNFw3IG1ham9yXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcMTF0YXJnZXRfa2V5XDRcNnRpdGxlXDRcMjRFc3RpbWF0ZWQga2V5IG9mIGxvb3A6IFwwMjAwIFdvdWxkIHlvdSBsaWtlIHRvIHNldCB0aGlzIGFzIHRoZSBwcm9qZWN0IGtleT9cNFw3dmFsdWVzXDRcMjNEbyBub3Qgc2V0IHByb2plY3Qga2V5XDRcMjdTZXQgdGhlIGtleSBvZiB0aGUgcHJvamVjdFwxOVwyXDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFwxM0VzdGltYXRlIEtleVw0XDIzU2V0dGluZyBrZXkgb2YgcHJvamVjdFw0XDJ3XDRcNndyaXRlXDRcMlwKXDRcIkZpbGUgY2xlYXJlZCBhbmQgZGF0YSB3cml0dGVuIHRvIFw0XDE1IHN1Y2Nlc3NmdWxseS5cMjArRXJyb3I6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHdyaXRpbmcgYXQgXDRcMjdLZXkgbm90IGZvdW5kIGluIGZpbGVuYW1lLlw0XDVrZXkgXDRcM29zXDRcOGV4ZWN1dGVcNFw2cG9wZW5cNFw3c3RyaW5nXDQnVGhlIGtleSBvZiB0aGUgc29uZyBpcyAoW0EtRyNdKykgKCVhKylcNFw2bWlub3JcNFwybVw0XDZLZXk6IFw0XDhTY2FsZTogXDRcMiBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgIHNjcmlwdHNbOF0gPSB7fSBzY3JpcHRzWzhdWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSAgICA9IFwiRWRpdG9yQWN0aW9uXCIsXApcOW5hbWUgICAgICAgID0gXCJWb2NhbHMgLSBDaGFuZ2UgVm9jYWwgUGx1Z2lucy9QcmVzZXRzIGZvciBBdWRpbyBUcmFja1wiLFwKXDlsaWNlbnNlICAgICA9IFwiTUlUXCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKXDlkZXNjcmlwdGlvbiA9IFtbQ2hhbmdlcyBwbHVnaW5zL3ByZXNldHMgZm9yIHZvY2FscyAgYmFzZWQgb24gaXMgc2VsZWN0ZWQgZnJvbSAgYSBkaWFsb2cgbWVudSBdXVwKfVwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoKVwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcClwKICAtLSBDaGVjayBpZiBubyB0cmFjayBpcyBzZWxlY3RlZFwKICBpZiBzZWw6ZW1wdHkoKSBvciBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOmVtcHR5KCkgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLk9LKTpydW4oKVwKICAgIHJldHVyblwKICBlbmRcClwKICAtLSBDaGVjayBpZiBtb3JlIHRoYW4gb25lIHRyYWNrIGlzIHNlbGVjdGVkXAogIGlmIHNlbC50cmFja3M6cm91dGVsaXN0KCk6c2l6ZSgpID4gMSB0aGVuXAogICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIk1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuT0spOnJ1bigpXAogICAgcmV0dXJuXAogIGVuZFwKYXVkaW9UcmFja0ZvdW5kID0gZmFsc2UgLS0gRmxhZyB0byBjaGVjayBpZiBhbnkgYXVkaW8gdHJhY2sgaXMgc2VsZWN0ZWRcClwKICAgIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrL2J1c1wKICAgIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0KCk6aXRlcigpIGRvXAogICAgICBpZiBub3Qgcjp0b190cmFjaygpOmlzbmlsKCkgYW5kIG5vdCByOnRvX3RyYWNrKCk6dG9fYXVkaW9fdHJhY2soKTppc25pbCgpIHRoZW5cCiAgICAgICBhdWRpb1RyYWNrRm91bmQgPSB0cnVlXAogICAgICAgcHJpbnQoXCJpcyBhbiBhdWRpbyB0cmFja1wiKVwKICAgICAgZW5kXAogICAgZW5kXApcCiAgICAgICBpZiAgYXVkaW9UcmFja0ZvdW5kID09IGZhbHNlIHRoZW5cCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyBhdWRpbyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhbiBhdWRpbyB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKICAgIGVuZFwKXApcCmxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcImRyb3Bkb3duXCIsIHRpdGxlID0gXCJDaG9vc2UgVm9jYWwgUHJlc2V0XCIsIHZhbHVlcyA9XAogICB7XAogICAgW1wiQ2hvb3NlIFZvY2FsIFByZXNldFwiXSA9IDEsIFtcIkNsYXNzaWNcIl0gPSAyLFtcIkJyaWdodFwiXSA9IDMsIFtcIkRhbmNlXCJdID0gNCwgW1wiQ29tcHJlc3NlZFwiXSA9IDUsIFtcIlRlbGVwaG9uZVwiXSA9IDYsXAogICAgW1wiTmF0dXJhbFwiXSA9IDcsIFtcIkVkZ2VcIl0gPTgsIFtcIkZ1enogVm9jYWxzXCJdID0gOSwgW1wiVHViZSBWb2NhbHNcIl0gPSAxMCxbXCJEZWVwZXIgVm9jYWxzXCJdID0gMTEsIFtcIlJvYm90IFZvY2Fsc1wiXSA9IDEyXApcCiAgIH0sXAogICBkZWZhdWx0ID0gXCJDaG9vc2UgVm9jYWwgUHJlc2V0XCJcCiAgfVwKIH1cClwKIGxvY2FsIG9kID0gTHVhRGlhbG9nLkRpYWxvZyAoXCJDaG9vc2UgVm9jYWwgUHJlc2V0XCIsIGRpYWxvZ19vcHRpb25zKVwKIGxvY2FsIHJ2ID0gb2Q6cnVuKClcClwKIC0tIFVzbmcgcHJlc2V0cyB0byBzYXZlIHNldHRpbmdzIGZvciBhdXRvdHVuZSB3aGVuIHN3aXRjaGluZyB2b2NhbHNcClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKXAogIGxvY2FsIHRyYWNrbmFtZSA9ICByOm5hbWUoKVwKXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgbG9jYWwgcHJvYyA9IHI6bnRoX3BsdWdpbiAoMCkgLS0gZm9yIGV2ZXJ5IHBsdWdpblwKXDlcOVw5aWYgcHJvYzppc25pbCAoKSB0aGVuIGJyZWFrIGVuZFwKXDlcOVw5bG9jYWwgcGkgPSBwcm9jOnRvX2luc2VydCAoKVwKXDlcOXByZXNldCA9IHBpOnBsdWdpbigwKTpsYXN0X3ByZXNldCgpXApcOVw5cHJpbnQgKHByZXNldClcClwKXDlcOWxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUodHJhY2tuYW1lKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XAotLWxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY2xhc3NpYy0yXCIpXApcClwKcHJvYzpzYXZlX3ByZXNldChcInRlbXBcIilcClwKZW5kIGVuZCBlbmRcClwKbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDphY3RpdmUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kXApcClwKLS0gRnVuY3Rpb24gdG8gY2xlYXIgb3V0IGFsbCBwbHVnaW5zIGFuZCBuYW1lIHRoZSB0cmFja1wKXApmdW5jdGlvbiBhcHBseV9wcmVzZXRfdG9fdHJhY2tzKHByZXNldF9uYW1lKVwKICAgIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAogICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2svYnVzXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgICAgICBsb2NhbCBwbHVncyA9IEFSRE9VUi5Qcm9jZXNzb3JMaXN0KCk7IC0tIGNyZWF0ZSBhIFBsdWdpbkxpc3RcCiAgICAgICAgbG9jYWwgaSA9IDA7XAogICAgICAgIHJlcGVhdCAtLSBpdGVyYXRlIG92ZXIgYWxsIHBsdWdpbnMvcHJvY2Vzc29yc1wKICAgICAgICAgICAgbG9jYWwgcHJvYyA9IHI6bnRoX3Byb2Nlc3NvciAoaSlcCiAgICAgICAgICAgIGlmIG5vdCBwcm9jOmlzbmlsICgpIHRoZW5cCiAgICAgICAgICAgICAgICAtLSBhcHBlbmQgcGx1Z2luIHRvIGxpc3RcCiAgICAgICAgICAgICAgICBwbHVnczpwdXNoX2JhY2socHJvYylcCiAgICAgICAgICAgIGVuZFwKICAgICAgICAgICAgaSA9IGkgKyAxXAogICAgICAgIHVudGlsIHByb2M6aXNuaWwgKClcClwKICAgICAgICByOnJlbW92ZV9wcm9jZXNzb3JzIChwbHVncywgbmlsKVwKICAgICAgICByOnNldF9uYW1lKHByZXNldF9uYW1lLCBuaWwpXAogICAgZW5kXAplbmRcClwKLS0gRXhhbXBsZSB1c2FnZTpcClwKXApcCi0tIENyZWF0ZSBhIGZ1bmN0aW9uIHRvIGFkZCBwbHVnaW5zXApcCmZ1bmN0aW9uIGFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKHBsdWdpbl9uYW1lLCBwbHVnaW5fdHlwZSwgcG9zaXRpb24pXAogICAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKICAgIGlmIG5vdCBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpOmVtcHR5KCkgYW5kIG5vdCBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpLnRyYWNrczpyb3V0ZWxpc3QoKTplbXB0eSgpIHRoZW5cCiAgICAgICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgICAgICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgICAgICAgIGxvY2FsIHByb2MgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIHBsdWdpbl90eXBlLCBcIlwiKVwKICAgICAgICAgICAgYXNzZXJ0KG5vdCBwcm9jOmlzbmlsKCkpXAogICAgICAgICAgICByOmFkZF9wcm9jZXNzb3JfYnlfaW5kZXgocHJvYywgcG9zaXRpb24sIG5pbCwgdHJ1ZSlcCiAgICAgICAgZW5kXAogICAgZW5kXAplbmRcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDIgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwiY2xhc3NpY1wiKVwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNsYXNzaWNcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjbGFzc2ljXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigxKTp0b19pbnNlcnQoKTpwbHVnaW4oMSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY2xhc3NpY1wiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNsYXNzaWNcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjbGFzc2ljXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNsYXNzaWNcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjbGFzc2ljLTJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gVGFwZSBEZWxheSBTaW11bGF0aW9uXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiVGFwZSBEZWxheSBTaW11bGF0aW9uXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNsYXNzaWNcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjbGFzc2ljXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEd4UmV2ZXJiLVN0ZXJlb1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkd4UmV2ZXJiLVN0ZXJlb1wiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDUpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjbGFzc2ljXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY2xhc3NpY1wiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKLS0gKioqIEVuZCBvZiBjbGFzc2ljIHZvY2FscyAqKioqXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMyB0aGVuXApcCmFwcGx5X3ByZXNldF90b190cmFja3MoXCJicmlnaHRcIilcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIng0Mi1BdXRvdHVuZSAoc2NhbGVzKVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDApIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJicmlnaHRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiYnJpZ2h0XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigxKTp0b19pbnNlcnQoKTpwbHVnaW4oMSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiYnJpZ2h0XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEFDRSBDb21wcmVzc29yXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIENvbXByZXNzb3JcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAyKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiYnJpZ2h0XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiYnJpZ2h0XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQ2FsZiBFeGNpdGVyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImJyaWdodFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMyk6dG9faW5zZXJ0KCk6cGx1Z2luKDMpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImJyaWdodFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJUQVAgRGVFc3NlclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MQURTUEEsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJicmlnaHRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJicmlnaHRcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gR3hSZXZlcmItU3RlcmVvXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImJyaWdodFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNSk6dG9faW5zZXJ0KCk6cGx1Z2luKDUpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImJyaWdodC0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXAotLSAqKiogRW5kIG9mIGJyaWdodCB2b2NhbHMgKioqKlwKZW5kXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDQgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwiZGFuY2VcIilcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIng0Mi1BdXRvdHVuZSAoc2NhbGVzKVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDApIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkYW5jZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkYW5jZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRhbmNlXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEFDRSBDb21wcmVzc29yXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIENvbXByZXNzb3JcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAyKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkYW5jZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkNhbGYgRXhjaXRlclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkYW5jZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMyk6dG9faW5zZXJ0KCk6cGx1Z2luKDMpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRhbmNlXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBSZXZlcmJcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA0KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkYW5jZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBHeFJldmVyYi1TdGVyZW9cClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJHeENob3J1cy1TdGVyZW9cIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA1KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGFuY2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDUpOnRvX2luc2VydCgpOnBsdWdpbig1KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkYW5jZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDYpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkYW5jZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNik6dG9faW5zZXJ0KCk6cGx1Z2luKDYpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRhbmNlLTJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXApcCi0tICoqKiBFbmQgb2YgZGFuY2Ugdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA1IHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcImNvbXByZXNzZWRcIilcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIng0Mi1BdXRvdHVuZSAoc2NhbGVzKVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDApIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjb21wcmVzc2VkXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcCi0tIENsYXNzaWMgVm9jYWxzXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNvbXByZXNzZWRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjb21wcmVzc2VkXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEFDRSBDb21wcmVzc29yXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIENvbXByZXNzb3JcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAyKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiY29tcHJlc3NlZFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImNvbXByZXNzZWRcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJjb21wcmVzc2VkXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiY29tcHJlc3NlZC0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkNvbWIgU3BsaXR0ZXJcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCA0KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiY29tcHJlc3NlZFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNCk6dG9faW5zZXJ0KCk6cGx1Z2luKDQpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImNvbXByZXNzZWRcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gR3hSZXZlcmItU3RlcmVvXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiR3hDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNvbXByZXNzZWRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDUpOnRvX2luc2VydCgpOnBsdWdpbig1KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjb21wcmVzc2VkXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImNvbXByZXNzZWRcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDYpOnRvX2luc2VydCgpOnBsdWdpbig2KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJjb21wcmVzc2VkLTJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXApcCi0tICoqKiBFbmQgb2YgY29tcHJlc3NlZCB2b2NhbHMgKioqKlwKZW5kXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDYgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwidGVsZXBob25lXCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwidGVsZXBob25lXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcCi0tIENsYXNzaWMgVm9jYWxzXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInRlbGVwaG9uZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbGVwaG9uZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInRlbGVwaG9uZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbGVwaG9uZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIlRBUCBTY2FsaW5nIExpbWl0ZXJcIiwgQVJET1VSLlBsdWdpblR5cGUuTEFEU1BBLCAzKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwidGVsZXBob25lXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVsZXBob25lXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIlJhdGF0b3VpbGxlXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInRlbGVwaG9uZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNCk6dG9faW5zZXJ0KCk6cGx1Z2luKDQpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbGVwaG9uZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIFJldmVyYlwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDUpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0ZWxlcGhvbmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDUpOnRvX2luc2VydCgpOnBsdWdpbig1KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZWxlcGhvbmVcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXApcClwKXApcClwKXAotLSAqKiogRW5kIG9mIHRlbGVwaG9uZSB2b2NhbHMgKioqKlwKZW5kXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDcgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwibmF0dXJhbFwiKVwKXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwieDQyLUF1dG90dW5lIChzY2FsZXMpXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcIm5hdHVyYWxcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwibmF0dXJhbFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcIm5hdHVyYWxcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKLS0gQUNFIENvbXByZXNzb3JcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgQ29tcHJlc3NvclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJuYXR1cmFsXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwibmF0dXJhbFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDIpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJuYXR1cmFsXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwibmF0dXJhbC0yXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKLS0gKioqIEVuZCBvZiBuYXR1cmFsIHZvY2FscyAqKioqXAplbmRcClwKaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gOCB0aGVuXApcCmFwcGx5X3ByZXNldF90b190cmFja3MoXCJlZGdlXCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZWRnZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJlZGdlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigxKTp0b19pbnNlcnQoKTpwbHVnaW4oMSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZWRnZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImVkZ2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJlZGdlXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQ2FsZiBFeGNpdGVyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImVkZ2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJlZGdlXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImVkZ2VcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJlZGdlLTJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKXAotLSAqKiogRW5kIG9mIG5hdHVyYWwgdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSA5IHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcImZ1enpcIilcClwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIng0Mi1BdXRvdHVuZSAoc2NhbGVzKVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDApIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJmdXp6XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcCi0tIENsYXNzaWMgVm9jYWxzXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImZ1enpcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJmdXp6XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCi0tIEFDRSBDb21wcmVzc29yXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIENvbXByZXNzb3JcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAyKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZnV6elwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImZ1enpcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJNREEgT3ZlcmRyaXZlXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImZ1enpcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJmdXp6XCIpXApcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcClwKXAotLSAqKiogRW5kIG9mIG5hdHVyYWwgdm9jYWxzICoqKipcCmVuZFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAxMCB0aGVuXApcCmFwcGx5X3ByZXNldF90b190cmFja3MoXCJ0dWJlXCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwidHViZVwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMCk6dG9faW5zZXJ0KCk6cGx1Z2luKDApXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInRlbXBcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKIHByb2M6cmVtb3ZlX3ByZXNldChcInRlbXBcIilcClwKIGlmIGFjdGl2ZSA9PSBmYWxzZSB0aGVuXApcCiBsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDApXAogICAgICBhY3RpdmUgPSAgb2xkOmRlYWN0aXZhdGUoKVwKcHJpbnQgKGFjdGl2ZSlcCiAgICAtLSAgYXNzZXJ0IChub3QgbmV3OmlzbmlsKCkpXApcCmVuZCBlbmQgZW5kIGVuZFwKXAotLSBDbGFzc2ljIFZvY2Fsc1wKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBFUVwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDEpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0dWJlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigxKTp0b19pbnNlcnQoKTpwbHVnaW4oMSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidHViZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInR1YmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDIpOnRvX2luc2VydCgpOnBsdWdpbigyKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0dWJlXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInR1YmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0dWJlIDJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJaYW1UdWJlXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNCkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInR1YmVcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDQpOnRvX2luc2VydCgpOnBsdWdpbig0KVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0dWJlXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIFJldmVyYlwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDUpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJ0dWJlXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidHViZVwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXApcCi0tICoqKiBFbmQgb2YgbmF0dXJhbCB2b2NhbHMgKioqKlwKZW5kXAogaWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gMTEgdGhlblwKXAphcHBseV9wcmVzZXRfdG9fdHJhY2tzKFwiZGVlcGVyXCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGVlcGVyXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigwKTp0b19pbnNlcnQoKTpwbHVnaW4oMClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwidGVtcFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAogcHJvYzpyZW1vdmVfcHJlc2V0KFwidGVtcFwiKVwKXAogaWYgYWN0aXZlID09IGZhbHNlIHRoZW5cClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXAppZiBub3Qgc2VsOmVtcHR5ICgpIGFuZCBub3Qgc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6ZW1wdHkgKCkgIHRoZW5cCiAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2tcCiAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QgKCk6aXRlciAoKSBkb1wKICAgIGlmIG5vdCByOnRvX3RyYWNrICgpOmlzbmlsICgpIHRoZW5cCiAgICBvbGQgPSByOm50aF9wbHVnaW4oMClcCiAgICAgIGFjdGl2ZSA9ICBvbGQ6ZGVhY3RpdmF0ZSgpXApwcmludCAoYWN0aXZlKVwKICAgIC0tICBhc3NlcnQgKG5vdCBuZXc6aXNuaWwoKSlcClwKZW5kIGVuZCBlbmQgZW5kXApcCi0tIENsYXNzaWMgVm9jYWxzXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRlZXBlclwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMSk6dG9faW5zZXJ0KCk6cGx1Z2luKDEpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRlZXBlclwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRlZXBlclwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oMik6dG9faW5zZXJ0KCk6cGx1Z2luKDIpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRlZXBlclwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIlJ1YmJlciBCYW5kIE1vbm8gUGl0Y2ggU2hpZnRlclwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MQURTUEEsIDMpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJkZWVwZXJcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDMpOnRvX2luc2VydCgpOnBsdWdpbigzKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJkZWVwZXJcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJUQVAgQ2hvcnVzL0ZsYW5nZXJcIiwgQVJET1VSLlBsdWdpblR5cGUuTEFEU1BBLCA0KSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwiZGVlcGVyXCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig0KTp0b19pbnNlcnQoKTpwbHVnaW4oNClcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwiZGVlcGVyXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiQUNFIEVRXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgNSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcImRlZXBlclwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNSk6dG9faW5zZXJ0KCk6cGx1Z2luKDUpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcImRlZXBlciAyXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcClwKXApcCi0tICoqKiBFbmQgb2YgbmF0dXJhbCB2b2NhbHMgKioqKlwKZW5kXApcCmlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDEyIHRoZW5cClwKYXBwbHlfcHJlc2V0X3RvX3RyYWNrcyhcInJvYm90XCIpXApcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJ4NDItQXV0b3R1bmUgKHNjYWxlcylcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAwKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwicm9ib3RcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDApOnRvX2luc2VydCgpOnBsdWdpbigwKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJ0ZW1wXCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCiBwcm9jOnJlbW92ZV9wcmVzZXQoXCJ0ZW1wXCIpXApcCiBpZiBhY3RpdmUgPT0gZmFsc2UgdGhlblwKXAogbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcCmlmIG5vdCBzZWw6ZW1wdHkgKCkgYW5kIG5vdCBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTplbXB0eSAoKSAgdGhlblwKICAtLSBmb3IgZWFjaCBzZWxlY3RlZCB0cmFja1wKICBmb3IgciBpbiBzZWwudHJhY2tzOnJvdXRlbGlzdCAoKTppdGVyICgpIGRvXAogICAgaWYgbm90IHI6dG9fdHJhY2sgKCk6aXNuaWwgKCkgdGhlblwKICAgIG9sZCA9IHI6bnRoX3BsdWdpbigwKVwKICAgICAgYWN0aXZlID0gIG9sZDpkZWFjdGl2YXRlKClcCnByaW50IChhY3RpdmUpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKXAplbmQgZW5kIGVuZCBlbmRcClwKLS0gQ2xhc3NpYyBWb2NhbHNcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJBQ0UgRVFcIiwgQVJET1VSLlBsdWdpblR5cGUuTFYyLCAxKSAtLWZpcnN0IEVRIG9mIHRoZSBjaGFpblwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKFwicm9ib3RcIik6dG9fdHJhY2soKTpudGhfcGx1Z2luKDEpOnRvX2luc2VydCgpOnBsdWdpbigxKVwKXAotLSBHZXQgdGhlIHByZXNldFwKbG9jYWwgcHJlc2V0ID0gcHJvYzpwcmVzZXRfYnlfbGFiZWwoXCJyb2JvdFwiKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAotLSBBQ0UgQ29tcHJlc3NvclwKXAphZGRfcGx1Z2luX3RvX3NlbGVjdGVkX3RyYWNrcyhcIkFDRSBDb21wcmVzc29yXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMikgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwicm9ib3RcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJMRk8gUGhhc2VyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgMykgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigzKTp0b19pbnNlcnQoKTpwbHVnaW4oMylcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwicm9ib3RcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKYWRkX3BsdWdpbl90b19zZWxlY3RlZF90cmFja3MoXCJNREEgUmluZ01vZFwiLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIDQpIC0tZmlyc3QgRVEgb2YgdGhlIGNoYWluXApcCmxvY2FsIHByb2MgPSBTZXNzaW9uOnJvdXRlX2J5X25hbWUoXCJyb2JvdFwiKTp0b190cmFjaygpOm50aF9wbHVnaW4oNCk6dG9faW5zZXJ0KCk6cGx1Z2luKDQpXApcCi0tIEdldCB0aGUgcHJlc2V0XApsb2NhbCBwcmVzZXQgPSBwcm9jOnByZXNldF9ieV9sYWJlbChcInJvYm90XCIpXApcCi0tIExvYWQgdGhlIHByZXNldFwKcHJvYzpsb2FkX3ByZXNldChwcmVzZXQpXApcCmFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzKFwiVEFQIENob3J1cy9GbGFuZ2VyXCIsIEFSRE9VUi5QbHVnaW5UeXBlLkxBRFNQQSwgNSkgLS1maXJzdCBFUSBvZiB0aGUgY2hhaW5cClwKbG9jYWwgcHJvYyA9IFNlc3Npb246cm91dGVfYnlfbmFtZShcInJvYm90XCIpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbig1KTp0b19pbnNlcnQoKTpwbHVnaW4oNSlcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKFwicm9ib3RcIilcClwKLS0gTG9hZCB0aGUgcHJlc2V0XApwcm9jOmxvYWRfcHJlc2V0KHByZXNldClcClwKZW5kXApcClwKXApcClwKXApcClwKXApcClwKZW5kIGVuZFwKIiAgc2NyaXB0c1s4XVsiYyJdID0gdHJ1ZSBzY3JpcHRzWzhdWyJuIl0gPSAiVm9jYWxzIC0gQ2hhbmdlIFZvY2FsIFBsdWdpbnMvUHJlc2V0cyBmb3IgQXVkaW8gVHJhY2siICBzY3JpcHRzWzhdWyJhIl0gPSB7fSBzY3JpcHRzWzhdWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy92b2NhbHMubHVhIiAgIHNjcmlwdHNbOF1bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDlcMFwwXDBiXDRcMFwwXDBcMFwyXDNcMFwwXDAsXDBcMFwwJlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFw5XDBcMFwwYlw0XDBcMFwwXDBcMjPSXDlcMFwwXDZcMEBcMFwxMkBAXDAkgFwwXDFMgEBcMGSAXDBcMWJAXDBcMFwzMIBcMYBHwEBcMExcMMFcMGSAXDBcMUyAwFwwZIBcMFwxYlwwXDBcMFwzMEBcM4BGQEFcMEeAwVwwgcBcMVwwwVwwXDJcMFw2QUFcMFw3QUJcMlw3wUFcMkZBQVwwR4HCXDJHwcJcMmSAgFwyTFwww1wwZEBcMFwxJlwwgFwwR8BAXDBMXDDBXDBkgFwwXDFMQMNcMGSAXDBcMSBAXDCHXDMwQFwzgEZAQVwwR4DBXDCBwFwxXDDBwFwzXDBcNkFBXDBcN0FCXDJcN8FBXDJGQUFcMEeBwlwyR8HCXDJkgIBcMkxcMMNcMGRAXDBcMSZcMIBcMFw4QESIR8BAXDBMXDDBXDBkgFwwXDFMgMRcMGRcMFwxXDFcMzBAXDSATMFEXDJkgVwwXDFMXDHFXDJkgVwwXDFiQVwwXDBcMzDAXDKATMFEXDJkgVwwXDFMQcVcMmSBXDBcMUxcMcVcMmSBXDBcMWJBXDBcMFwzMMBcMIBcOIBFiEbBRVwwgVwxXDZcMGRBXDBcMWlAXDBcMOrA+lwxMjdGXDBEXDBcMzFAxFwwXDMwQFwzgEZAQVwwR4DBXDCBwFwxXDDBQFw2XDBcNkFBXDBcN0FCXDJcN8FBXDJGQUFcMEeBwlwyR4HGXDJkgIBcMkxcMMNcMGRAXDBcMSZcMIBcMEtcMIBcMItAXDFcMIpcMMeNilwwx46KwEePy1wwXDNcMMqAw4/KgMiQylwwyZHKgMmSylwwypPKgMqUylwwy5XKgMuWylwwzJfKgMyYylwwzZnKgM2aisBcMJCKwMeba0CAXDCGQEFcMIdcME5cMcHAXDdcMFwwXDGAXDCkgIBcMcxcMENcMeSAXDBcMVw2XDFAXDBcMTJBQFwyJIFcMFwxTIFAXDJkgVwwXDFiQVwwXDBcMzBAXDE0gEfBQFwyTFwxwVwyZIFcMFwxTIHAXDJkgVwwXDFiQVwwXDBcMzCAXDEygEfBQFwyTFwxwVwyZIFcMFwxTIHEXDJkXDFcMVwxXDMwgFwKgExCTlw0ZIJcMFwxjMJEXDSkglwwXDGMXDJFXDWkglwwXDGiQlwwXDBcMzCAXDiAjIJOXDRcMcNcMTRcMKSCgFwxzFwyRVw15IJcMFwx4kJcMFwwXDMwQFw3gMxcMk9cNeSCXDBcMVwxMoPPXDWBw1wxNFwwJIOAXDFcMTLDT1w2JINcMFwxXDhcMIOeXDbDRVwwRkNPXDAkQ1wwXDFcNlwzUFwwXDEyQ1BcNoBcM4BcNCSDgFwxXDEyw0RcNiSDXDBcMVwxMoNOXDaBw1wxNFwwJIOAXDFcMTJcM09cNiSDXDBcMVwxMoNPXDaBw1wxNFwwJIOAXDFMg1BcNsHDXDE2XDBkQ4BcMWlBXDBcMOqB9FwxMjdGXDFAXDBMQcBcMmSBXDBcMYyBwFwypIFcMFwxokFcMFwwXDMwwFw3gIfBwFwyjFwxQVwzpIFcMFwxjIFAXDOkgVwwXDGiQVwwXDBcMzBcMFw2gIfBwFwyjFwxQVwzpIFcMFwxjIFEXDOkXDFcMVwxXDMwXDBcNICMwsRcNKSCXDBcMYxcMkVcNaSCXDBcMaJCXDBcMFwzMIBcMoCMgs5cNFwxw1wxNFwwpIKAXDFcOIBcMqKGXDJRXDCMQlFcNaSCXDBcMVw4gIKihsJFXDDGQlFcMKRCXDBcMalBXDBcMCpcMvtcMTI3rFwxXDBcMFw4gFwxo6xBXDBcMFw4gIGj4lwwXDBcMFwzMFwwMDA1gIdcMcdcMVwzMYBIXDNcMzBANICGgVFcMMFcMVwxOFwwpEFcMFwxhsFRXDDBQVwxOFwwXDaCUlwwXDfCUlw0XDdcMlNcNEFCXDE5XDCkQVwwXDKGgVNcMIxBUFwzXDFcMlwxOFwwpIGAXDGMwURcM6SBXDBcMYyBTlwzXDFCXDE5XDCkgYBcMYxcMU9cM6SBXDBcMYyBT1wzXDFCXDE5XDCkgYBcMczBU1wzQcJcMTZcMOSBgFwxXDEyXDJUXDOAXDKAXDMkQoBcMVwxMkJUXDOBwlwxNlwwJEKAXDFcNkJRXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMgtRcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTMPUXDZkg1wwXDFiQ1wwXDBcMzCAXDKATINOXDbBQ1wxOVwwZIOAXDFcOEBcM6JGXDNRXDBMXDPVXDZkg1wwXDFcOECDokbDRVwwhkNRXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2wlFcMEFCXDIxXDCGglJcMIfCUlw1h1wyU1w1wYJcMjFcMCRCXDBcMlw2glNcMFwxMkJQXDSBXDJcMThcMCSCgFwxXDEywkRcNCSCXDBcMVwxMoJOXDSBglwyMVwwJIKAXDFcMTJcMk9cNCSCXDBcMVwxMoJPXDSBglwyMVwwJIKAXDFMwlNcNMFcMlwxOFwwZIKAXDGMXDJUXDRcMFwzgFw0pEKAXDGGwlFcMMHCXDIxXDBcNoNSXDBcN8NSXDZcN1wzU1w2QYNcOFwwpEJcMFwyhoJTXDCMQlBcNVwxXDNcMThcMKSCgFwxjMJEXDWkglwwXDGMgk5cNVwxg1w4XDCkgoBcMYxcMk9cNaSCXDBcMYyCT1w1XDGDXDhcMKSCgFwxzMJTXDVBXDNcMThcMOSCgFwxXDEyXDNUXDWAXDOAXDUkQ4BcMVw2w1FcMEFDXDIxXDCGg1JcMIfDUlw3h1wzU1w3wVwzXDlcMCRDXDBcMlw2g1NcMFwxMkNQXDaBXDNcMThcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMoNOXDaBXDNcOVwwJIOAXDFcMTJcM09cNiSDXDBcMVwxMoNPXDaBXDNcOVwwJIOAXDFMw1NcNsFcM1wyMlwwZIOAXDGMXDNUXDZcMFw0gFw2pEOAXDGGw1FcMMFDXDIyXDBcNoRSXDBcN8RSXDhcN1w0U1w4QYRcOVwwpENcMFwyhoNTXDCMQ1BcN1wxXDRcMThcMKSDgFwxjMNEXDekg1wwXDGMg05cN1wxhFw5XDCkg4BcMYxcM09cN6SDXDBcMYyDT1w3XDGEXDlcMKSDgFwxzMNTXDdBXDRcMThcMOSDgFwxXDEyXDRUXDeAXDSAXDckRIBcMVw2xFFcMEGEXDIyXDCGhFJcMIfEUlw5h1w0U1w5wVw0XApcMCREXDBcMlw2hFNcMFwxMkRQXDiBXDRcMThcMCSEgFwxXDEyxERcOCSEXDBcMVwxMoROXDiBXDRcClwwJISAXDFcMTJcNE9cOCSEXDBcMVwxMoRPXDiBXDRcClwwJISAXDFMxFNcOMFcNFwxOFwwZISAXDGMXDRUXDhcMFw1gFw4pESAXDHiXDBcMFwwXDMwXDAwMDWAh1wxx1wxXDMxXDBJXDNcMzBANICGgVFcMMHBXDIyXDCkQVwwXDGGwVFcMMFBXDE4XDBcNoJSXDBcN8JSXDRcN1wyU1w0QUJcMTlcMKRBXDBcMoaBU1wwjEFQXDNcMcJcMjJcMKSBgFwxjMFEXDOkgVwwXDGMgU5cM1wxQlwxOVwwpIGAXDGMXDFPXDOkgVwwXDGMgU9cM1wxQlwxOVwwpIGAXDHMwVNcM0HCXDE2XDDkgYBcMVwxMlwyVFwzgFwygFwzJEKAXDFcMTJCVFwzgcJcMTZcMCRCgFwxXDZCUVwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTILUXDRkXDJcMVwxXDMwXDBcNIBMw0RcNmSDXDBcMUzD1Fw2ZINcMFwxYkNcMFwwXDMwgFwygEyDTlw2wUNcMTlcMGSDgFwxXDhAXDOiRlwzUVwwTFwz1Vw2ZINcMFwxXDhAg6JGw0VcMIZDUVwwZENcMFwxaUJcMFww6lwy+1wxMjdcNsJRXDBBQlwyMVwwhoJSXDCHwlJcNYdcMlNcNcGCXDIxXDAkQlwwXDJcNoJTXDBcMTJCUFw0gcJcMjJcMCSCgFwxXDEywkRcNCSCXDBcMVwxMoJOXDSBglwyMVwwJIKAXDFcMTJcMk9cNCSCXDBcMVwxMoJPXDSBglwyMVwwJIKAXDFMwlNcNMHCXDIyXDBkgoBcMYxcMlRcNFwwXDOAXDSkQoBcMYbCUVwwwcJcMjFcMFw2g1JcMFw3w1JcNlw3XDNTXDZBg1w4XDCkQlwwXDKGglNcMIxCUFw1XDHDXDIyXDCkgoBcMYzCRFw1pIJcMFwxjIJOXDVcMYNcOFwwpIKAXDGMXDJPXDWkglwwXDGMgk9cNVwxg1w4XDCkgoBcMczCU1w1QcNcMjJcMOSCgFwxXDEyXDNUXDWAXDOAXDUkQ4BcMVw2w1FcMEFcM1wyM1wwhoNSXDCHw1JcN4dcM1NcN8FcM1w5XDAkQ1wwXDJcNoNTXDBcMTJDUFw2gcNcMjJcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMoNOXDaBXDNcOVwwJIOAXDFcMTJcM09cNiSDXDBcMVwxMoNPXDaBXDNcOVwwJIOAXDFMw1NcNsHDXDIyXDBkg4BcMYxcM1RcNlwwXDSAXDakQ4BcMYbDUVwwwUNcMjNcMFw2hFJcMFw3xFJcOFw3hFdcOEGEXDlcMKRDXDBcMoaDU1wwjENQXDdcMcRcMjJcMKSDgFwxjMNEXDekg1wwXDGMg05cN1wxhFw5XDCkg4BcMYxcM09cN6SDXDBcMYyDT1w3XDGEXDlcMKSDgFwxzMNTXDdBxFwyMlww5IOAXDFcMTJcNFRcN4BcNIBcNyREgFwxXDbEUVwwQURcMjFcMIaEUlwwh8RSXDmHXDRTXDnBXDRcClwwJERcMFwyXDaEU1wwXDEyRFBcOIHEXDIyXDAkhIBcMVwxMsREXDgkhFwwXDFcMTKETlw4gVw0XApcMCSEgFwxXDEyXDRPXDgkhFwwXDFcMTKET1w4gVw0XApcMCSEgFwxTMRTXDjBxFwyM1wwZISAXDGMXDRUXDhcMFw1gFw4pESAXDHiXDBcMFwwXDMwwDuAh1wxx1wxXDMxgElcM1wzMFwwO4CGgVFcMMFcMVwyNFwwpEFcMFwxhsFRXDDBQVwxOFwwXDaCUlwwXDfCUlw0XDdcMlNcNEFCXDE5XDCkQVwwXDKGgVNcMIxBUFwzXDFcMlwyNFwwpIGAXDGMwURcM6SBXDBcMYyBTlwzXDFCXDE5XDCkgYBcMYxcMU9cM6SBXDBcMYyBT1wzXDFCXDE5XDCkgYBcMczBU1wzQcJcMTZcMOSBgFwxXDEyXDJUXDOAXDKAXDMkQoBcMVwxMkJUXDOBwlwxNlwwJEKAXDFcNkJRXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMgtRcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTMPUXDZkg1wwXDFiQ1wwXDBcMzCAXDKATINOXDbBQ1wxOVwwZIOAXDFcOEBcM6JGXDNRXDBMXDPVXDZkg1wwXDFcOECDokbDRVwwhkNRXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2wlFcMEFCXDIxXDCGglJcMIfCUlw1h1wyU1w1wYJcMjFcMCRCXDBcMlw2glNcMFwxMkJQXDSBXDJcMjRcMCSCgFwxXDEywkRcNCSCXDBcMVwxMoJOXDSBglwyMVwwJIKAXDFcMTJcMk9cNCSCXDBcMVwxMoJPXDSBglwyMVwwJIKAXDFMwlNcNMFcMlwyNFwwZIKAXDGMXDJUXDRcMFwzgFw0pEKAXDGGwlFcMMHCXDIxXDBcNoNSXDBcN8NSXDZcN1wzU1w2QYNcOFwwpEJcMFwyhoJTXDCMQlBcNVwxXDNcMjRcMKSCgFwxjMJEXDWkglwwXDGMgk5cNVwxg1w4XDCkgoBcMYxcMk9cNaSCXDBcMYyCT1w1XDGDXDhcMKSCgFwxzMJTXDVBXDNcMjRcMOSCgFwxXDEyXDNUXDWAXDOAXDUkQ4BcMVw2w1FcMEFcM1wyM1wwhoNSXDCHw1JcN4dcM1NcN8FcM1w5XDAkQ1wwXDJcNoNTXDBcMTJDUFw2gVwzXDI0XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTKDTlw2gVwzXDlcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gVwzXDlcMCSDgFwxTMNTXDbBXDNcMjRcMGSDgFwxjFwzVFw2XDBcNIBcNqRDgFwxhsNRXDDBQ1wyNFwwXDaEUlwwXDfEUlw4XDdcNFNcOEGEXDlcMKRDXDBcMoaDU1wwjENQXDdcMVw0XDI0XDCkg4BcMYzDRFw3pINcMFwxjINOXDdcMYRcOVwwpIOAXDGMXDNPXDekg1wwXDGMg09cN1wxhFw5XDCkg4BcMczDU1w3QVw0XDI0XDDkg4BcMVwxMlw0VFw3gFw0gFw3JESAXDFcNsRRXDBBhFwyNFwwhoRSXDCHxFJcOYdcNFNcOcFcNFwKXDAkRFwwXDJcNoRTXDBcMTJEUFw4gVw0XDI0XDAkhIBcMVwxMsREXDgkhFwwXDFcMTKETlw4gVw0XApcMCSEgFwxXDEyXDRPXDgkhFwwXDFcMTKET1w4gVw0XApcMCSEgFwxTMRTXDjBXDRcMjRcMGSEgFwxjFw0VFw4XDBcNYBcOKREgFwxhsRRXDDBRFwyMVwwXDaFUlwwXDfFUlwKXDdcNVNcCkGFXApcMKREXDBcMoaEU1wwjERQXDlcMVw1XDI0XDCkhIBcMYzERFw5pIRcMFwxjIROXDlcMYVcClwwpISAXDGMXDRPXDmkhFwwXDGMhE9cOVwxhVwKXDCkhIBcMczEU1w5QcVcMjRcMOSEgFwxXDEyXDVUXDmAXDWAXDkkRYBcMeJcMFwwXDBcMzDAO4CHXDHHXDFcMzFcMEpcM1wzMFwwO4CGgVFcMMFcMVwyNVwwpEFcMFwxhsFRXDDBQVwxOFwwXDaCUlwwXDfCUlw0XDdcMlNcNEFCXDE5XDCkQVwwXDKGgVNcMIxBUFwzXDFcMlwyNVwwpIGAXDGMwURcM6SBXDBcMYyBTlwzXDFCXDE5XDCkgYBcMYxcMU9cM6SBXDBcMYyBT1wzXDFCXDE5XDCkgYBcMczBU1wzQcJcMTZcMOSBgFwxXDEyXDJUXDOAXDKAXDMkQoBcMVwxMkJUXDOBwlwxNlwwJEKAXDFcNkJRXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMgtRcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTMPUXDZkg1wwXDFiQ1wwXDBcMzCAXDKATINOXDbBQ1wxOVwwZIOAXDFcOEBcM6JGXDNRXDBMXDPVXDZkg1wwXDFcOECDokbDRVwwhkNRXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2wlFcMEFCXDIxXDCGglJcMIfCUlw1h1wyU1w1wYJcMjFcMCRCXDBcMlw2glNcMFwxMkJQXDSBXDJcMjVcMCSCgFwxXDEywkRcNCSCXDBcMVwxMoJOXDSBglwyMVwwJIKAXDFcMTJcMk9cNCSCXDBcMVwxMoJPXDSBglwyMVwwJIKAXDFMwlNcNMFcMlwyNVwwZIKAXDGMXDJUXDRcMFwzgFw0pEKAXDGGwlFcMMHCXDIxXDBcNoNSXDBcN8NSXDZcN1wzU1w2QYNcOFwwpEJcMFwyhoJTXDCMQlBcNVwxXDNcMjVcMKSCgFwxjMJEXDWkglwwXDGMgk5cNVwxg1w4XDCkgoBcMYxcMk9cNaSCXDBcMYyCT1w1XDGDXDhcMKSCgFwxzMJTXDVBXDNcMjVcMOSCgFwxXDEyXDNUXDWAXDOAXDUkQ4BcMVw2w1FcMEHDXDIxXDCGg1JcMIfDUlw3h1wzU1w3wVwzXDlcMCRDXDBcMlw2g1NcMFwxMkNQXDaBXDNcMjVcMCSDgFwxXDEyw0RcNiSDXDBcMVwxMoNOXDaBXDNcOVwwJIOAXDFcMTJcM09cNiSDXDBcMVwxMoNPXDaBXDNcOVwwJIOAXDFMw1NcNsFDXDI1XDBkg4BcMYxcM1RcNlwwXDSAXDakQ4BcMYbDUVwwwYNcMjVcMFw2hFJcMFw3xFJcOFw3XDRTXDhBhFw5XDCkQ1wwXDKGg1NcMIxDUFw3XDFcNFwyNVwwpIOAXDGMw0RcN6SDXDBcMYyDTlw3XDGEXDlcMKSDgFwxjFwzT1w3pINcMFwxjINPXDdcMYRcOVwwpIOAXDHMw1NcN0FcNFwyNVww5IOAXDFcMTJcNFRcN4BcNIBcNyREgFwxXDbEUVwwQcRcMjVcMIaEUlwwh8RSXDmHXDRTXDnBXDRcClwwJERcMFwyXDaEU1wwXDEyRFBcOIFcNFwyNVwwJISAXDFcMTLERFw4JIRcMFwxXDEyhE5cOIFcNFwKXDAkhIBcMVwxMlw0T1w4JIRcMFwxXDEyhE9cOIFcNFwKXDAkhIBcMUzEU1w4wVw0XDI1XDBkhIBcMYxcNFRcOFwwXDWAXDikRIBcMYbEUVwwwURcMjFcMFw2hVJcMFw3xVJcClw3XDVTXApBhVwKXDCkRFwwXDKGhFNcMIxEUFw5XDFcNVwyNVwwpISAXDGMxERcOaSEXDBcMYyETlw5XDGFXApcMKSEgFwxjFw0T1w5pIRcMFwxjIRPXDlcMYVcClwwpISAXDHMxFNcOUFFXDI1XDDkhIBcMVwxMlw1VFw5gFw1gFw5JEWAXDHiXDBcMFwwXDMwXDAwMDWAh1wxx1wxXDMxgEpcM1wzMEA0gIaBUVwwwVwxXDI2XDCkQVwwXDGGwVFcMMFBXDE4XDBcNoJSXDBcN8JSXDRcN1wyU1w0QUJcMTlcMKRBXDBcMoaBU1wwjEFQXDNcMVwyXDI2XDCkgYBcMYzBRFwzpIFcMFwxjIFOXDNcMUJcMTlcMKSBgFwxjFwxT1wzpIFcMFwxjIFPXDNcMUJcMTlcMKSBgFwxzMFTXDNBwlwxNlww5IGAXDFcMTJcMlRcM4BcMoBcMyRCgFwxXDEyQlRcM4HCXDE2XDAkQoBcMVw2QlFcMFwzMUBEXDRcMzCAXDmAXDZcMkBcMFwxMkJAXDQkglwwXDFMgkBcNGSCXDBcMWJCXDBcMFwzMMBcN4BHwkBcNExcMsFcNGSCXDBcMUyCwFw0ZIJcMFwxYkJcMFwwXDMwXDBcNoBHwkBcNExcMsFcNGSCXDBcMUyC1Fw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMw9RcNmSDXDBcMWJDXDBcMFwzMIBcMoBMg05cNsFDXDE5XDBkg4BcMVw4QFwzokZcM1FcMExcM9VcNmSDXDBcMVw4QIOiRsNFXDCGQ1FcMGRDXDBcMWlCXDBcMOpcMvtcMTI3XDbCUVwwQUJcMjFcMIaCUlwwh8JSXDWHXDJTXDXBglwyMVwwJEJcMFwyXDaCU1wwXDEyQlBcNIFcMlwyNlwwJIKAXDFcMTLCRFw0JIJcMFwxXDEygk5cNIGCXDIxXDAkgoBcMVwxMlwyT1w0JIJcMFwxXDEygk9cNIGCXDIxXDAkgoBcMUzCU1w0wVwyXDI2XDBkgoBcMYxcMlRcNFwwXDOAXDSkQoBcMYbCUVwwwcJcMjFcMFw2g1JcMFw3w1JcNlw3XDNTXDZBg1w4XDCkQlwwXDKGglNcMIxCUFw1XDFcM1wyNlwwpIKAXDGMwkRcNaSCXDBcMYyCTlw1XDGDXDhcMKSCgFwxjFwyT1w1pIJcMFwxjIJPXDVcMYNcOFwwpIKAXDHMwlNcNUFcM1wyNlww5IKAXDFcMTJcM1RcNYBcM4BcNSRDgFwxXDbDUVwwQUNcMjZcMIaDUlwwh8NSXDeHg1dcN8FcM1w5XDAkQ1wwXDJcNoNTXDBcMTJDUFw2gVwzXDI2XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTKDTlw2gVwzXDlcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gVwzXDlcMCSDgFwxTMNTXDbBXDNcMjZcMGSDgFwxjFwzVFw2XDBcNIBcNqRDgFwxhsNRXDDBg1wyNlwwXDaEUlwwXDfEUlw4XDdcNFNcOEGEXDlcMKRDXDBcMoaDU1wwjENQXDdcMVw0XDI2XDCkg4BcMYzDRFw3pINcMFwxjINOXDdcMYRcOVwwpIOAXDGMXDNPXDekg1wwXDGMg09cN1wxhFw5XDCkg4BcMczDU1w3QVw0XDI2XDDkg4BcMVwxMlw0VFw3gFw0gFw3JESAXDFcNsRRXDBBRFwyNFwwhoRSXDCHxFJcOYdcNFNcOcFcNFwKXDAkRFwwXDJcNoRTXDBcMTJEUFw4gVw0XDI2XDAkhIBcMVwxMsREXDgkhFwwXDFcMTKETlw4gVw0XApcMCSEgFwxXDEyXDRPXDgkhFwwXDFcMTKET1w4gVw0XApcMCSEgFwxTMRTXDjBXDRcMjZcMGSEgFwxjFw0VFw4XDBcNYBcOKREgFwx4lwwXDBcMFwzMIAngIdcMcdcMVwzMVwwS1wzXDMwwCaAhoFRXDDBwVwyNlwwpEFcMFwxhsFRXDDBQVwxOFwwXDaCUlwwXDfCUlw0XDdcMlNcNEFCXDE5XDCkQVwwXDKGgVNcMIxBUFwzXDHCXDI2XDCkgYBcMYzBRFwzpIFcMFwxjIFOXDNcMUJcMTlcMKSBgFwxjFwxT1wzpIFcMFwxjIFPXDNcMUJcMTlcMKSBgFwxzMFTXDNBwlwxNlww5IGAXDFcMTJcMlRcM4BcMoBcMyRCgFwxXDEyQlRcM4HCXDE2XDAkQoBcMVw2QlFcMFwzMUBEXDRcMzCAXDmAXDZcMkBcMFwxMkJAXDQkglwwXDFMgkBcNGSCXDBcMWJCXDBcMFwzMMBcN4BHwkBcNExcMsFcNGSCXDBcMUyCwFw0ZIJcMFwxYkJcMFwwXDMwXDBcNoBHwkBcNExcMsFcNGSCXDBcMUyC1Fw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMw9RcNmSDXDBcMWJDXDBcMFwzMIBcMoBMg05cNsFDXDE5XDBkg4BcMVw4QFwzokZcM1FcMExcM9VcNmSDXDBcMVw4QIOiRsNFXDCGQ1FcMGRDXDBcMWlCXDBcMOpcMvtcMTI3XDbCUVwwQUJcMjFcMIaCUlwwh8JSXDWHXDJTXDXBglwyMVwwJEJcMFwyXDaCU1wwXDEyQlBcNIHCXDI2XDAkgoBcMVwxMsJEXDQkglwwXDFcMTKCTlw0gYJcMjFcMCSCgFwxXDEyXDJPXDQkglwwXDFcMTKCT1w0gYJcMjFcMCSCgFwxTMJTXDTBwlwyNlwwZIKAXDGMXDJUXDRcMFwzgFw0pEKAXDGGwlFcMMHCXDIxXDBcNoNSXDBcN8NSXDZcN1wzU1w2QYNcOFwwpEJcMFwyhoJTXDCMQlBcNVwxw1wyNlwwpIKAXDGMwkRcNaSCXDBcMYyCTlw1XDGDXDhcMKSCgFwxjFwyT1w1pIJcMFwxjIJPXDVcMYNcOFwwpIKAXDHMwlNcNUHDXDI2XDDkgoBcMVwxMlwzVFw1gFwzgFw1JEOAXDFcNsNRXDBBQ1wyMVwwhoNSXDCHw1JcN4dcM1NcN8GDXDhcMCRDXDBcMlw2g1NcMFwxMkNQXDaBw1wyNlwwJIOAXDFcMTLDRFw2JINcMFwxXDEyg05cNoGDXDhcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gYNcOFwwJIOAXDFMw1NcNsFcM1wyN1wwZIOAXDGMXDNUXDZcMFw0gFw2pEOAXDHiXDBcMFwwXDMwQC6Ah1wxx1wxXDMxgEtcM1wzMIAtgIaBUVwwwUFcMjdcMKRBXDBcMYbBUVwwwUFcMThcMFw2glJcMFw3wlJcNFw3XDJTXDRBQlwxOVwwpEFcMFwyhoFTXDCMQVBcM1wxQlwyN1wwpIGAXDGMwURcM6SBXDBcMYyBTlwzXDFCXDE5XDCkgYBcMYxcMU9cM6SBXDBcMYyBT1wzXDFCXDE5XDCkgYBcMczBU1wzQcJcMTZcMOSBgFwxXDEyXDJUXDOAXDKAXDMkQoBcMVwxMkJUXDOBwlwxNlwwJEKAXDFcNkJRXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMgtRcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTMPUXDZkg1wwXDFiQ1wwXDBcMzCAXDKATINOXDbBQ1wxOVwwZIOAXDFcOEBcM6JGXDNRXDBMXDPVXDZkg1wwXDFcOECDokbDRVwwhkNRXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2wlFcMEFCXDIxXDCGglJcMIfCUlw1h1wyU1w1wYJcMjFcMCRCXDBcMlw2glNcMFwxMkJQXDSBQlwyN1wwJIKAXDFcMTLCRFw0JIJcMFwxXDEygk5cNIGCXDIxXDAkgoBcMVwxMlwyT1w0JIJcMFwxXDEygk9cNIGCXDIxXDAkgoBcMUzCU1w0wUJcMjdcMGSCgFwxjFwyVFw0XDBcM4BcNKRCgFwxhsJRXDDBwlwyMVwwXDaDUlwwXDfDUlw2XDdcM1NcNkGDXDhcMKRCXDBcMoaCU1wwjEJQXDVcMUNcMjdcMKSCgFwxjMJEXDWkglwwXDGMgk5cNVwxg1w4XDCkgoBcMYxcMk9cNaSCXDBcMYyCT1w1XDGDXDhcMKSCgFwxzMJTXDVBQ1wyN1ww5IKAXDFcMTJcM1RcNYBcM4BcNSRDgFwxXDbDUVwwQVwzXDIzXDCGg1JcMIfDUlw3h1wzU1w3wVwzXDlcMCRDXDBcMlw2g1NcMFwxMkNQXDaBQ1wyN1wwJIOAXDFcMTLDRFw2JINcMFwxXDEyg05cNoFcM1w5XDAkg4BcMVwxMlwzT1w2JINcMFwxXDEyg09cNoFcM1w5XDAkg4BcMUzDU1w2wUNcMjdcMGSDgFwxjFwzVFw2XDBcNIBcNqRDgFwxhsNRXDDBQ1wyMVwwXDaEUlwwXDfEUlw4XDdcNFNcOEGEXDlcMKRDXDBcMoaDU1wwjENQXDdcMURcMjdcMKSDgFwxjMNEXDekg1wwXDGMg05cN1wxhFw5XDCkg4BcMYxcM09cN6SDXDBcMYyDT1w3XDGEXDlcMKSDgFwxzMNTXDdBhFwyN1ww5IOAXDFcMTJcNFRcN4BcNIBcNyREgFwx4lwwXDBcMFwzMIAngIdcMcdcMVwzMVwwTFwzXDMwwCaAhoFRXDDBwVwyN1wwpEFcMFwxhsFRXDDBQVwxOFwwXDaCUlwwXDfCUlw0XDdcMlNcNEFCXDE5XDCkQVwwXDKGgVNcMIxBUFwzXDHCXDI3XDCkgYBcMYzBRFwzpIFcMFwxjIFOXDNcMUJcMTlcMKSBgFwxjFwxT1wzpIFcMFwxjIFPXDNcMUJcMTlcMKSBgFwxzMFTXDNBwlwxNlww5IGAXDFcMTJcMlRcM4BcMoBcMyRCgFwxXDEyQlRcM4HCXDE2XDAkQoBcMVw2QlFcMFwzMUBEXDRcMzCAXDmAXDZcMkBcMFwxMkJAXDQkglwwXDFMgkBcNGSCXDBcMWJCXDBcMFwzMMBcN4BHwkBcNExcMsFcNGSCXDBcMUyCwFw0ZIJcMFwxYkJcMFwwXDMwXDBcNoBHwkBcNExcMsFcNGSCXDBcMUyC1Fw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMw9RcNmSDXDBcMWJDXDBcMFwzMIBcMoBMg05cNsFDXDE5XDBkg4BcMVw4QFwzokZcM1FcMExcM9VcNmSDXDBcMVw4QIOiRsNFXDCGQ1FcMGRDXDBcMWlCXDBcMOpcMvtcMTI3XDbCUVwwQUJcMjFcMIaCUlwwh8JSXDWHXDJTXDXBglwyMVwwJEJcMFwyXDaCU1wwXDEyQlBcNIHCXDI3XDAkgoBcMVwxMsJEXDQkglwwXDFcMTKCTlw0gYJcMjFcMCSCgFwxXDEyXDJPXDQkglwwXDFcMTKCT1w0gYJcMjFcMCSCgFwxTMJTXDTBwlwyN1wwZIKAXDGMXDJUXDRcMFwzgFw0pEKAXDGGwlFcMMHCXDIxXDBcNoNSXDBcN8NSXDZcN1wzU1w2QYNcOFwwpEJcMFwyhoJTXDCMQlBcNVwxw1wyN1wwpIKAXDGMwkRcNaSCXDBcMYyCTlw1XDGDXDhcMKSCgFwxjFwyT1w1pIJcMFwxjIJPXDVcMYNcOFwwpIKAXDHMwlNcNUHDXDI3XDDkgoBcMVwxMlwzVFw1gFwzgFw1JEOAXDFcNsNRXDBBXDNcMjhcMIaDUlwwh8NSXDeHXDNTXDfBXDNcOVwwJENcMFwyXDaDU1wwXDEyQ1BcNoHDXDI3XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTKDTlw2gVwzXDlcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gVwzXDlcMCSDgFwxTMNTXDbBw1wyN1wwZIOAXDGMXDNUXDZcMFw0gFw2pEOAXDHiXDBcMFwwXDMwXDAwMDWAh1wxx1wxXDMxgExcM1wzMEA0gIaBUVwwwUFcMjhcMKRBXDBcMYbBUVwwwUFcMThcMFw2glJcMFw3wlJcNFw3XDJTXDRBQlwxOVwwpEFcMFwyhoFTXDCMQVBcM1wxQlwyOFwwpIGAXDGMwURcM6SBXDBcMYyBTlwzXDFCXDE5XDCkgYBcMYxcMU9cM6SBXDBcMYyBT1wzXDFCXDE5XDCkgYBcMczBU1wzQcJcMTZcMOSBgFwxXDEyXDJUXDOAXDKAXDMkQoBcMVwxMkJUXDOBwlwxNlwwJEKAXDFcNkJRXDBcMzFARFw0XDMwgFw5gFw2XDJAXDBcMTJCQFw0JIJcMFwxTIJAXDRkglwwXDFiQlwwXDBcMzDAXDeAR8JAXDRMXDLBXDRkglwwXDFMgsBcNGSCXDBcMWJCXDBcMFwzMFwwXDaAR8JAXDRMXDLBXDRkglwwXDFMgtRcNGRcMlwxXDFcMzBcMFw0gEzDRFw2ZINcMFwxTMPUXDZkg1wwXDFiQ1wwXDBcMzCAXDKATINOXDbBQ1wxOVwwZIOAXDFcOEBcM6JGXDNRXDBMXDPVXDZkg1wwXDFcOECDokbDRVwwhkNRXDBkQ1wwXDFpQlwwXDDqXDL7XDEyN1w2wlFcMEFCXDIxXDCGglJcMIfCUlw1h1wyU1w1wYJcMjFcMCRCXDBcMlw2glNcMFwxMkJQXDSBQlwyOFwwJIKAXDFcMTLCRFw0JIJcMFwxXDEygk5cNIGCXDIxXDAkgoBcMVwxMlwyT1w0JIJcMFwxXDEygk9cNIGCXDIxXDAkgoBcMUzCU1w0wUJcMjhcMGSCgFwxjFwyVFw0XDBcM4BcNKRCgFwxhsJRXDDBwlwyMVwwXDaDUlwwXDfDUlw2XDdcM1NcNkGDXDhcMKRCXDBcMoaCU1wwjEJQXDVcMUNcMjhcMKSCgFwxjMJEXDWkglwwXDGMgk5cNVwxg1w4XDCkgoBcMYxcMk9cNaSCXDBcMYyCT1w1XDGDXDhcMKSCgFwxzMJTXDVBQ1wyOFww5IKAXDFcMTJcM1RcNYBcM4BcNSRDgFwxXDbDUVwwQUNcMjFcMIaDUlwwh8NSXDeHXDNTXDfBXDNcOVwwJENcMFwyXDaDU1wwXDEyQ1BcNoFDXDI4XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTKDTlw2gVwzXDlcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gVwzXDlcMCSDgFwxTMNTXDbBg1wyOFwwZIOAXDGMXDNUXDZcMFw0gFw2pEOAXDGGw1FcMMHDXDI4XDBcNoRSXDBcN8RSXDhcN1w0U1w4QYRcOVwwpENcMFwyhoNTXDCMQ1BcN1wxRFwyOFwwpIOAXDGMw0RcN6SDXDBcMYyDTlw3XDGEXDlcMKSDgFwxjFwzT1w3pINcMFwxjINPXDdcMYRcOVwwpIOAXDHMw1NcN0FEXDI4XDDkg4BcMVwxMlw0VFw3gFw0gFw3JESAXDFcNsRRXDBBRFwyNFwwhoRSXDCHxFJcOYdcNFNcOcFcNFwKXDAkRFwwXDJcNoRTXDBcMTJEUFw4gURcMjhcMCSEgFwxXDEyxERcOCSEXDBcMVwxMoROXDiBXDRcClwwJISAXDFcMTJcNE9cOCSEXDBcMVwxMoRPXDiBXDRcClwwJISAXDFMxFNcOMFEXDI4XDBkhIBcMYxcNFRcOFwwXDWAXDikRIBcMeJcMFwwXDBcMzBcMDAwNYCHXDHHXDFcMzFcME1cM1wzMEA0gIaBUVwwwVwxXDI5XDCkQVwwXDGGwVFcMMFBXDE4XDBcNoJSXDBcN8JSXDRcN1wyU1w0QUJcMTlcMKRBXDBcMoaBU1wwjEFQXDNcMVwyXDI5XDCkgYBcMYzBRFwzpIFcMFwxjIFOXDNcMUJcMTlcMKSBgFwxjFwxT1wzpIFcMFwxjIFPXDNcMUJcMTlcMKSBgFwxzMFTXDNBwlwxNlww5IGAXDFcMTJcMlRcM4BcMoBcMyRCgFwxXDEyQlRcM4HCXDE2XDAkQoBcMVw2QlFcMFwzMUBEXDRcMzCAXDmAXDZcMkBcMFwxMkJAXDQkglwwXDFMgkBcNGSCXDBcMWJCXDBcMFwzMMBcN4BHwkBcNExcMsFcNGSCXDBcMUyCwFw0ZIJcMFwxYkJcMFwwXDMwXDBcNoBHwkBcNExcMsFcNGSCXDBcMUyC1Fw0ZFwyXDFcMVwzMFwwXDSATMNEXDZkg1wwXDFMw9RcNmSDXDBcMWJDXDBcMFwzMIBcMoBMg05cNsFDXDE5XDBkg4BcMVw4QFwzokZcM1FcMExcM9VcNmSDXDBcMVw4QIOiRsNFXDCGQ1FcMGRDXDBcMWlCXDBcMOpcMvtcMTI3XDbCUVwwQUJcMjFcMIaCUlwwh8JSXDWHXDJTXDXBglwyMVwwJEJcMFwyXDaCU1wwXDEyQlBcNIFcMlwyOVwwJIKAXDFcMTLCRFw0JIJcMFwxXDEygk5cNIGCXDIxXDAkgoBcMVwxMlwyT1w0JIJcMFwxXDEygk9cNIGCXDIxXDAkgoBcMUzCU1w0wVwyXDI5XDBkgoBcMYxcMlRcNFwwXDOAXDSkQoBcMYbCUVwwwcJcMjFcMFw2g1JcMFw3w1JcNlw3XDNTXDZBg1w4XDCkQlwwXDKGglNcMIxCUFw1XDFcM1wyOVwwpIKAXDGMwkRcNaSCXDBcMYyCTlw1XDGDXDhcMKSCgFwxjFwyT1w1pIJcMFwxjIJPXDVcMYNcOFwwpIKAXDHMwlNcNUFcM1wyOVww5IKAXDFcMTJcM1RcNYBcM4BcNSRDgFwxXDbDUVwwQUNcMjlcMIaDUlwwh8NSXDeHg1dcN8FcM1w5XDAkQ1wwXDJcNoNTXDBcMTJDUFw2gVwzXDI5XDAkg4BcMVwxMsNEXDYkg1wwXDFcMTKDTlw2gVwzXDlcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gVwzXDlcMCSDgFwxTMNTXDbBXDNcMjlcMGSDgFwxjFwzVFw2XDBcNIBcNqRDgFwxhsNRXDDBg1wyOVwwXDaEUlwwXDfEUlw4XDeEV1w4QYRcOVwwpENcMFwyhoNTXDCMQ1BcN1wxXDRcMjlcMKSDgFwxjMNEXDekg1wwXDGMg05cN1wxhFw5XDCkg4BcMYxcM09cN6SDXDBcMYyDT1w3XDGEXDlcMKSDgFwxzMNTXDdBXDRcMjlcMOSDgFwxXDEyXDRUXDeAXDSAXDckRIBcMVw2xFFcMEFEXDIxXDCGhFJcMIfEUlw5h1w0U1w5wVw0XApcMCREXDBcMlw2hFNcMFwxMkRQXDiBXDRcMjlcMCSEgFwxXDEyxERcOCSEXDBcMVwxMoROXDiBXDRcClwwJISAXDFcMTJcNE9cOCSEXDBcMVwxMoRPXDiBXDRcClwwJISAXDFMxFNcOMHEXDI5XDBkhIBcMYxcNFRcOFwwXDWAXDikRIBcMeJcMFwwXDBcMzBcMDAwNYCHXDHHXDFcMzGATVwzXDMwQDSAhoFRXDDBXDFcMzBcMKRBXDBcMYbBUVwwwUFcMThcMFw2glJcMFw3wlJcNFw3XDJTXDRBQlwxOVwwpEFcMFwyhoFTXDCMQVBcM1wxXDJcMzBcMKSBgFwxjMFEXDOkgVwwXDGMgU5cM1wxQlwxOVwwpIGAXDGMXDFPXDOkgVwwXDGMgU9cM1wxQlwxOVwwpIGAXDHMwVNcM0HCXDE2XDDkgYBcMVwxMlwyVFwzgFwygFwzJEKAXDFcMTJCVFwzgcJcMTZcMCRCgFwxXDZCUVwwXDMxQERcNFwzMIBcOYBcNlwyQFwwXDEyQkBcNCSCXDBcMUyCQFw0ZIJcMFwxYkJcMFwwXDMwwFw3gEfCQFw0TFwywVw0ZIJcMFwxTILAXDRkglwwXDFiQlwwXDBcMzBcMFw2gEfCQFw0TFwywVw0ZIJcMFwxTILUXDRkXDJcMVwxXDMwXDBcNIBMw0RcNmSDXDBcMUzD1Fw2ZINcMFwxYkNcMFwwXDMwgFwygEyDTlw2wUNcMTlcMGSDgFwxXDhAXDOiRlwzUVwwTFwz1Vw2ZINcMFwxXDhAg6JGw0VcMIZDUVwwZENcMFwxaUJcMFww6lwy+1wxMjdcNsJRXDBBQlwyMVwwhoJSXDCHwlJcNYdcMlNcNcGCXDIxXDAkQlwwXDJcNoJTXDBcMTJCUFw0gVwyXDMwXDAkgoBcMVwxMsJEXDQkglwwXDFcMTKCTlw0gYJcMjFcMCSCgFwxXDEyXDJPXDQkglwwXDFcMTKCT1w0gYJcMjFcMCSCgFwxTMJTXDTBXDJcMzBcMGSCgFwxjFwyVFw0XDBcM4BcNKRCgFwxhsJRXDDBwlwyMVwwXDaDUlwwXDfDUlw2XDdcM1NcNkGDXDhcMKRCXDBcMoaCU1wwjEJQXDVcMVwzXDMwXDCkgoBcMYzCRFw1pIJcMFwxjIJOXDVcMYNcOFwwpIKAXDGMXDJPXDWkglwwXDGMgk9cNVwxg1w4XDCkgoBcMczCU1w1QVwzXDMwXDDkgoBcMVwxMlwzVFw1gFwzgFw1JEOAXDFcNsNRXDBBQ1wzMFwwhoNSXDCHw1JcN4dcM1NcN8FcM1w5XDAkQ1wwXDJcNoNTXDBcMTJDUFw2gVwzXDMwXDAkg4BcMVwxMsNEXDYkg1wwXDFcMTKDTlw2gVwzXDlcMCSDgFwxXDEyXDNPXDYkg1wwXDFcMTKDT1w2gVwzXDlcMCSDgFwxTMNTXDbBXDNcMzBcMGSDgFwxjFwzVFw2XDBcNIBcNqRDgFwxhsNRXDDBg1wzMFwwXDaEUlwwXDfEUlw4XDdcNFNcOEGEXDlcMKRDXDBcMoaDU1wwjENQXDdcMVw0XDMwXDCkg4BcMYzDRFw3pINcMFwxjINOXDdcMYRcOVwwpIOAXDGMXDNPXDekg1wwXDGMg09cN1wxhFw5XDCkg4BcMczDU1w3QVw0XDMwXDDkg4BcMVwxMlw0VFw3gFw0gFw3JESAXDFcNsRRXDBBhFwyOVwwhoRSXDCHxFJcOYeEV1w5wVw0XApcMCREXDBcMlw2hFNcMFwxMkRQXDiBXDRcMzBcMCSEgFwxXDEyxERcOCSEXDBcMVwxMoROXDiBXDRcClwwJISAXDFcMTJcNE9cOCSEXDBcMVwxMoRPXDiBXDRcClwwJISAXDFMxFNcOMFcNFwzMFwwZISAXDGMXDRUXDhcMFw1gFw4pESAXDEmXDCAXDB7XDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblw0XDZlbXB0eVw0XDd0cmFja3NcNFwKcm91dGVsaXN0XDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcNkVycm9yXDAyMDZObyB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBhIHRyYWNrIHRvIGNvbnRpbnVlLlw0XDEyTWVzc2FnZVR5cGVcNFwxMUJ1dHRvblR5cGVcNFwzT0tcNFw0cnVuXDRcNXNpemVcMTlcMVwwXDBcMFwwXDBcMFwwXDIwSE1vcmUgdGhhbiBvbmUgdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3Qgb25seSBvbmUgdHJhY2sgdG8gY29udGludWUuXDRcMTZhdWRpb1RyYWNrRm91bmRcMVwwXDRcNWl0ZXJcNFw5dG9fdHJhY2tcNFw2aXNuaWxcNFwxNXRvX2F1ZGlvX3RyYWNrXDFcMVw0XDZwcmludFw0XDE4aXMgYW4gYXVkaW8gdHJhY2tcMDIwN05vIGF1ZGlvIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGFuIGF1ZGlvIHRyYWNrLlw0XDZDbG9zZVw0XDV0eXBlXDRcOWRyb3Bkb3duXDRcNGtleVw0XDZ0aXRsZVw0XDIwQ2hvb3NlIFZvY2FsIFByZXNldFw0XDd2YWx1ZXNcNFw4Q2xhc3NpY1wxOVwyXDBcMFwwXDBcMFwwXDBcNFw3QnJpZ2h0XDE5XDNcMFwwXDBcMFwwXDBcMFw0XDZEYW5jZVwxOVw0XDBcMFwwXDBcMFwwXDBcNFwxMUNvbXByZXNzZWRcMTlcNVwwXDBcMFwwXDBcMFwwXDRcClRlbGVwaG9uZVwxOVw2XDBcMFwwXDBcMFwwXDBcNFw4TmF0dXJhbFwxOVw3XDBcMFwwXDBcMFwwXDBcNFw1RWRnZVwxOVw4XDBcMFwwXDBcMFwwXDBcNFwxMkZ1enogVm9jYWxzXDE5XDlcMFwwXDBcMFwwXDBcMFw0XDEyVHViZSBWb2NhbHNcMTlcClwwXDBcMFwwXDBcMFwwXDRcMTREZWVwZXIgVm9jYWxzXDE5XDExXDBcMFwwXDBcMFwwXDBcNFwxM1JvYm90IFZvY2Fsc1wxOVwxMlwwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFw3RGlhbG9nXDRcNW5hbWVcNFwxMW50aF9wbHVnaW5cMTlcMFwwXDBcMFwwXDBcMFwwXDRcCnRvX2luc2VydFw0XDdwcmVzZXRcNFw3cGx1Z2luXDRcMTJsYXN0X3ByZXNldFw0XDhTZXNzaW9uXDRcMTRyb3V0ZV9ieV9uYW1lXDRcMTJzYXZlX3ByZXNldFw0XDV0ZW1wXDRcNG9sZFw0XDdhY3RpdmVcNFwyM2FwcGx5X3ByZXNldF90b190cmFja3NcNFwzMGFkZF9wbHVnaW5fdG9fc2VsZWN0ZWRfdHJhY2tzXDRcOGNsYXNzaWNcNFwyMng0Mi1BdXRvdHVuZSAoc2NhbGVzKVw0XDdBUkRPVVJcNFwxMVBsdWdpblR5cGVcNFw0TFYyXDE5XDBcMFwwXDBcMFwwXDBcMFw0XDhTZXNzaW9uXDRcMTZwcmVzZXRfYnlfbGFiZWxcNFwxMmxvYWRfcHJlc2V0XDRcMTRyZW1vdmVfcHJlc2V0XDRcNWl0ZXJcNFw2aXNuaWxcNFwxMWRlYWN0aXZhdGVcNFw3QUNFIEVRXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE1QUNFIENvbXByZXNzb3JcNFwKY2xhc3NpYy0yXDRcMjJUYXBlIERlbGF5IFNpbXVsYXRpb25cNFwxNkd4UmV2ZXJiLVN0ZXJlb1w0XDdicmlnaHRcNFwxM0NhbGYgRXhjaXRlclw0XDEyVEFQIERlRXNzZXJcNFw3TEFEU1BBXDRcOWJyaWdodC0yXDRcNmRhbmNlXDRcMTFBQ0UgUmV2ZXJiXDRcMTZHeENob3J1cy1TdGVyZW9cNFw4ZGFuY2UtMlw0XDExY29tcHJlc3NlZFw0XDEzY29tcHJlc3NlZC0yXDRcMTRDb21iIFNwbGl0dGVyXDRcMTNHeENvbXByZXNzb3JcNFwKdGVsZXBob25lXDRcMjBUQVAgU2NhbGluZyBMaW1pdGVyXDRcMTJSYXRhdG91aWxsZVw0XDhuYXR1cmFsXDRcCm5hdHVyYWwtMlw0XDVlZGdlXDRcN2VkZ2UtMlw0XDVmdXp6XDRcMTRNREEgT3ZlcmRyaXZlXDRcNXR1YmVcNFw3dHViZSAyXDRcOFphbVR1YmVcNFw3ZGVlcGVyXDRcMzFSdWJiZXIgQmFuZCBNb25vIFBpdGNoIFNoaWZ0ZXJcNFwxOVRBUCBDaG9ydXMvRmxhbmdlclw0XDlkZWVwZXIgMlw0XDZyb2JvdFw0XDExTEZPIFBoYXNlclw0XDEyTURBIFJpbmdNb2RcMVwwXDBcMFwwXDBcMlwwXDBcMFwwYFwwXDBcMHJcMFwwXDBcMVwwXDEyJ1wwXDBcMEZcMEBcMExAwFwwZIBcMFwxh4DAXDCMwEBcMaSAXDBcMYxcMEFcMaRcMFwxXDFcMzCAXDaAhkFBXDCHgUFcM6SBgFwwwcFcMVwwXDEyXDLCXDKAXDKAXDMkgoBcMUxCQlw0ZIJcMFwxYkJcMFwwXDMwgFwwgEyCQlwzwFwyXDBcNGRCgFwxzcHCXDNMQkJcNGSCXDBcMWJcMlwwXDBcMzBcMPxcMTI3XDEyXDLDXDKAXDJcMFwzxFwyXDBcMCRCXDBcMlwxMkLDXDKAXDJcMFwwxFwyXDBcMCRCXDBcMqlAXDBcMCqB+FwxMjcmXDCAXDBcMTRcMFwwXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFw1aXRlclw0XDdBUkRPVVJcNFwxNFByb2Nlc3Nvckxpc3RcMTlcMFwwXDBcMFwwXDBcMFwwXDRcMTRudGhfcHJvY2Vzc29yXDRcNmlzbmlsXDRcCnB1c2hfYmFja1wxOVwxXDBcMFwwXDBcMFwwXDBcNFwxOHJlbW92ZV9wcm9jZXNzb3JzXDRcOXNldF9uYW1lXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMHpcMFwwXDCEXDBcMFwwXDNcMFwwMTUwXDBcMFwwxlwwQFwwzEDAXDHkgFwwXDFcNlwxQFwwXDEyQUBcMiSBXDBcMVwxMoFAXDIkgVwwXDFcIkFcMFwwXDMwXDBcOYBcNlwxQFwwXDEyQUBcMiSBXDBcMVw3wUBcMlwxMlwxQVwyJIFcMFwxXDEygUBcMiSBXDBcMVwiQVwwXDBcMzCAXDaAXDfBwFwxXDEyXDFBXDIkgVwwXDFcMTJBQVwyJFwxXDFcMVwzMIBcNIBcNoJBXDBcN8JBXDRcN1wyQlw0RkJCXDCAXDJcMFwwwFwygFwwXDGDXDJcMCSCgFwyRsJCXDCMXDJDXDSkglwwXDGbXDJcMFw1ZEJcMFwxTELDXDPAXDJcMFw0XDBcM1wwXDFEXDNcMFwwg1wzgFwwZEJcMFwzKUFcMFwwqoH6XDEyNyZcMIBcMFwxNFwwXDBcMFw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cNFw2ZW1wdHlcNFw3dHJhY2tzXDRcCnJvdXRlbGlzdFw0XDVpdGVyXDRcN0FSRE9VUlw0XDdMdWFBUElcNFwxMW5ld19wbHVnaW5cNFw4U2Vzc2lvblw0XDFcNFw3YXNzZXJ0XDRcNmlzbmlsXDRcMjNhZGRfcHJvY2Vzc29yX2J5X2luZGV4XDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiICBzY3JpcHRzWzldID0ge30gc2NyaXB0c1s5XVsicyJdID0gImFyZG91ciB7XApcOVtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKXDluYW1lID0gXCJQb2x5cGhvbmljIEF1ZGlvIHRvIE1JRElcIixcClw5bGljZW5zZSAgICAgPSBcIk1JVFwiLFwKXDlhdXRob3IgICAgICA9IFwiQXJkb3VyIFRlYW1cIixcCmRlc2NyaXB0aW9uID0gW1tcCkFuYWx5emUgYXVkaW8gZnJvbSB0aGUgc2VsZWN0ZWQgYXVkaW8gcmVnaW9uIHRvIGEgc2VsZWN0ZWQgTUlESSByZWdpb24uXApcCkEgTUlESSByZWdpb24gb24gdGhlIHRhcmdldCB0cmFjayB3aWxsIGhhdmUgdG8gYmUgY3JlYXRlZCBmaXJzdCAodXNlIHRoZSBwZW4gdG9vbCkuXApcClRoaXMgc2NyaXB0IHVzZXMgdGhlIFBvbHlwaG9uaWMgVHJhbnNjcmlwdGlvbiBWQU1QIHBsdWdpbiBmcm9tIFF1ZWVuIE1hcnkgVW5pdiwgTG9uZG9uLlwKVGhlIHBsdWdpbiB3b3JrcyBiZXN0IGF0IDQ0LjFLSHogaW5wdXQgc2FtcGxlIHJhdGUsIGFuZCBpcyB0dW5lZCBmb3IgcGlhbm8gYW5kIGd1aXRhciBtdXNpYy4gVmVsb2NpdHkgaXMgbm90IGVzdGltYXRlZC5cCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uICgpXApcOWxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcOWxvY2FsIHNyID0gU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpXApcOWxvY2FsIHRtID0gVGVtcG9yYWwuVGVtcG9NYXAucmVhZCAoKVwKXDlsb2NhbCB2YW1wID0gQVJET1VSLkx1YUFQSS5WYW1wIChcImxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLXRyYW5zY3JpcHRpb25cIiwgc3IpXApcOWxvY2FsIG1pZGlfcmVnaW9uID0gbmlsXApcOWxvY2FsIGF1ZGlvX3JlZ2lvbnMgPSB7fVwKXDlsb2NhbCBzdGFydF90aW1lID0gU2Vzc2lvbjpjdXJyZW50X2VuZF9zYW1wbGUgKClcClw5bG9jYWwgZW5kX3RpbWUgPSBTZXNzaW9uOmN1cnJlbnRfc3RhcnRfc2FtcGxlICgpXApcOWxvY2FsIG1heF9wb3MgPSAwXApcOWxvY2FsIGN1cl9wb3MgPSAwXApcOWZvciByIGluIHNlbC5yZWdpb25zOnJlZ2lvbmxpc3QgKCk6aXRlciAoKSBkb1wKXDlcOWxvY2FsIGFyID0gcjp0b19hdWRpb3JlZ2lvbigpXApcOVw5aWYgbm90IGFyOmlzbmlsKCkgdGhlblwKXDlcOVw5bG9jYWwgc3QgPSByOnBvc2l0aW9uKCk6c2FtcGxlcygpXApcOVw5XDlsb2NhbCBsbiA9IHI6bGVuZ3RoKCk6c2FtcGxlcygpXApcOVw5XDlsb2NhbCBldCA9IHN0ICsgbG47XApcOVw5XDlpZiBzdCA8IHN0YXJ0X3RpbWUgdGhlblwKXDlcOVw5XDlzdGFydF90aW1lID0gc3RcClw5XDlcOWVuZFwKXDlcOVw5aWYgZXQgPiBlbmRfdGltZSB0aGVuXApcOVw5XDlcOWVuZF90aW1lID0gZXRcClw5XDlcOWVuZFwKXDlcOVw5dGFibGUuaW5zZXJ0KGF1ZGlvX3JlZ2lvbnMsIGFyKVwKXDlcOVw5bWF4X3BvcyA9IG1heF9wb3MgKyBhcjp0b19yZWFkYWJsZSAoKTpyZWFkYWJsZV9sZW5ndGggKClcClw5XDllbHNlXApcOVw5XDltaWRpX3JlZ2lvbiA9IHI6dG9fbWlkaXJlZ2lvbigpXApcOVw5ZW5kXApcOWVuZFwKXApcOWlmICNhdWRpb19yZWdpb25zID09IDAgdGhlblwKXDlcOUx1YURpYWxvZy5NZXNzYWdlIChcIlBvbHlwaG9uaWMgQXVkaW8gdG8gTUlESVwiLCBcIk5vIHNvdXJjZSBhdWRpbyByZWdpb24ocykgc2VsZWN0ZWQuXFxuQXQgbGVhc3Qgb25lIGF1ZGlvLXJlZ2lvbiB0byBiZSBhbmFseXplZCBuZWVkIHRvIGJlIHNlbGVjdGVkLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4gKClcClw5XDlyZXR1cm5cClw5ZW5kXApcOWlmIG5vdCBtaWRpX3JlZ2lvbiB0aGVuXApcOVw5THVhRGlhbG9nLk1lc3NhZ2UgKFwiUG9seXBob25pYyBBdWRpbyB0byBNSURJXCIsIFwiTm8gdGFyZ2V0IE1JREkgcmVnaW9uIHNlbGVjdGVkLlxcbkEgTUlESSByZWdpb24sIGlkZWFsbHkgZW1wdHksIGFuZCBleHRlbmRpbmcgYmV5b25kIHRoZSBzZWxlY3RlZCBhdWRpby1yZWdpb24ocykgbmVlZHMgdG8gYmUgc2VsZWN0ZWQuXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5FcnJvciwgTHVhRGlhbG9nLkJ1dHRvblR5cGUuQ2xvc2UpOnJ1biAoKVwKXDlcOXJldHVyblwKXDllbmRcClwKXDltaWRpX3JlZ2lvbjpzZXRfaW5pdGlhbF9wb3NpdGlvbiAoVGVtcG9yYWwudGltZXBvc190IChzdGFydF90aW1lKSlcClw5bWlkaV9yZWdpb246c2V0X2xlbmd0aCAoVGVtcG9yYWwudGltZWNudF90IChlbmRfdGltZSAtIHN0YXJ0X3RpbWUpKVwKXApcOWxvY2FsIHBkaWFsb2cgPSBMdWFEaWFsb2cuUHJvZ3Jlc3NXaW5kb3cgKFwiQXVkaW8gdG8gTUlESVwiLCB0cnVlKVwKXDlmdW5jdGlvbiBwcm9ncmVzcyAoXywgcG9zKVwKXDlcOXJldHVybiBwZGlhbG9nOnByb2dyZXNzICgoY3VyX3BvcyArIHBvcykgLyBtYXhfcG9zLCBcIkFuYWx5emluZ1wiKVwKXDllbmRcClwKXDlmb3IgaSxhciBpbiBwYWlycyhhdWRpb19yZWdpb25zKSBkb1wKXDlcOWxvY2FsIGFfb2ZmID0gYXI6cG9zaXRpb24gKClcClw5XDlsb2NhbCBiX29mZiA9IHRtOnF1YXJ0ZXJzX2F0IChtaWRpX3JlZ2lvbjpwb3NpdGlvbiAoKSk7XApcClw5XDl2YW1wOmFuYWx5emUgKGFyOnRvX3JlYWRhYmxlICgpLCAwLCBwcm9ncmVzcylcClwKXDlcOWlmIHBkaWFsb2c6Y2FuY2VsZWQgKCkgdGhlblwKXDlcOVw5Z290byBvdXRcClw5XDllbmRcClwKXDlcOWN1cl9wb3MgPSBjdXJfcG9zICsgYXI6dG9fcmVhZGFibGUgKCk6cmVhZGFibGVfbGVuZ3RoICgpXApcOVw5cGRpYWxvZzpwcm9ncmVzcyAoY3VyX3BvcyAvIG1heF9wb3MsIFwiR2VuZXJhdGluZyBNSURJXCIpXApcClw5XDlsb2NhbCBmbCA9IHZhbXA6cGx1Z2luICgpOmdldFJlbWFpbmluZ0ZlYXR1cmVzICgpOmF0ICgwKVwKXDlcOWlmIGZsIGFuZCBmbDpzaXplKCkgPiAwIHRoZW5cClw5XDlcOWxvY2FsIG1tID0gbWlkaV9yZWdpb246bWlkaV9zb3VyY2UoMCk6bW9kZWwoKVwKXDlcOVw5bG9jYWwgbWlkaV9jb21tYW5kID0gbW06bmV3X25vdGVfZGlmZl9jb21tYW5kIChcIkF1ZGlvMk1pZGlcIilcClw5XDlcOWZvciBmIGluIGZsOml0ZXIgKCkgZG9cClw5XDlcOVw5bG9jYWwgZnQgPSBUZW1wb3JhbC50aW1lY250X3QgKFZhbXAuUmVhbFRpbWUucmVhbFRpbWUyRnJhbWUgKGYudGltZXN0YW1wLCBzcikpXApcOVw5XDlcOWxvY2FsIGZkID0gVGVtcG9yYWwudGltZWNudF90IChWYW1wLlJlYWxUaW1lLnJlYWxUaW1lMkZyYW1lIChmLmR1cmF0aW9uLCBzcikpXApcOVw5XDlcOWxvY2FsIGZuID0gZi52YWx1ZXM6YXQgKDApXApcClw5XDlcOVw5bG9jYWwgYnMgPSB0bTpxdWFydGVyc19hdCAoYV9vZmYgKyBmdCwgMClcClw5XDlcOVw5bG9jYWwgYmUgPSB0bTpxdWFydGVyc19hdCAoYV9vZmYgKyBmdCArIGZkLCAwKVwKXDlcOVw5XDlwcmludCAoXCJOXCIsIGJzLCBiZSwgZm4gKyAxKVwKXApcOVw5XDlcOWxvY2FsIHBvcyA9IGJzIC0gYl9vZmZcClw5XDlcOVw5bG9jYWwgbGVuID0gYmUgLSBic1wKXDlcOVw5XDlsb2NhbCBub3RlID0gQVJET1VSLkx1YUFQSS5uZXdfbm90ZXB0ciAoMSwgcG9zLCBsZW4sIGZuICsgMSwgMHg3ZilcClw5XDlcOVw5bWlkaV9jb21tYW5kOmFkZCAobm90ZSlcClw5XDlcOWVuZFwKXDlcOVw5bW06YXBwbHlfY29tbWFuZCAoU2Vzc2lvbiwgbWlkaV9jb21tYW5kKVwKXDlcOWVuZFwKXDlcOS0tIHJlc2V0IHRoZSBwbHVnaW4gKHByZXBhcmUgZm9yIG5leHQgaXRlcmF0aW9uKVwKXDlcOXZhbXA6cmVzZXQgKClcClw5ZW5kXApcClw5OjpvdXQ6OlwKXDlwZGlhbG9nOmRvbmUgKCk7XAplbmQgZW5kXApcCmZ1bmN0aW9uIGljb24gKHBhcmFtcykgcmV0dXJuIGZ1bmN0aW9uIChjdHgsIHdpZHRoLCBoZWlnaHQsIGZnKVwKXDlsb2NhbCB0eHQgPSBDYWlyby5QYW5nb0xheW91dCAoY3R4LCBcIkFyZG91ck1vbm8gXCIuLiBtYXRoLmNlaWwod2lkdGggKiAuNykgLi4gXCJweFwiKVwKXDl0eHQ6c2V0X3RleHQgKFwiXFx1ezI2Njl9XCIpIC0tIHF1YXJ0ZXIgbm90ZSBzeW1ib2wgVVRGOFwKXDlsb2NhbCB0dywgdGggPSB0eHQ6Z2V0X3BpeGVsX3NpemUgKClcClw5Y3R4OnNldF9zb3VyY2VfcmdiYSAoQVJET1VSLkx1YUFQSS5jb2xvcl90b19yZ2JhIChmZykpXApcOWN0eDptb3ZlX3RvICguNSAqICh3aWR0aCAtIHR3KSwgLjUgKiAoaGVpZ2h0IC0gdGgpKVwKXDl0eHQ6c2hvd19pbl9jYWlyb19jb250ZXh0IChjdHgpXAplbmQgZW5kXAoiICBzY3JpcHRzWzldWyJjIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMGhcMFwwXDBvXDBcMFwwXDFcMFwyXDNcMFwwXDBsXDBcMFwwZlwwXDBcMSZcMIBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMGhcMFwwXDBvXDBcMFwwXDRcMFwxMSFcMFwwXDBcNlwxQFwwXDdBQFwyQFwxXDBcMIGBXDBcMMbBQFwwx1wxwVwzXDE1QsFcMOSBXDBcMVwxglwxXDCdXDFcMlwzJIGAXDFMwUFcMsFcMVwyXDBkQYBcMUxBQlwyZMFcMFwxzIFCXDBGwkJcMEdcMsNcNEdCw1w0gFwygFwxZFwyXDBcMeRBXDBcMMyBQ1wwTkKBXDBPQoKHjoJcMVwxj4KCh+RBXDBcMsxcMURcMkBcMlwwXDDkQYBcMSZcMIBcMFwxN1wwXDBcMFw0XDZDYWlyb1w0XDEyUGFuZ29MYXlvdXRcNFwxMkFyZG91ck1vbm8gXDRcNW1hdGhcNFw1Y2VpbFwzZmZmZmZm5j9cNFwzcHhcNFw5c2V0X3RleHRcNFw04pmpXDRcMTVnZXRfcGl4ZWxfc2l6ZVw0XDE2c2V0X3NvdXJjZV9yZ2JhXDRcN0FSRE9VUlw0XDdMdWFBUElcNFwxNGNvbG9yX3RvX3JnYmFcNFw4bW92ZV90b1wzXDBcMFwwXDBcMFww4D9cNFwyMnNob3dfaW5fY2Fpcm9fY29udGV4dFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzY3JpcHRzWzldWyJuIl0gPSAiUG9seXBob25pYyBBdWRpbyB0byBNSURJIiAgc2NyaXB0c1s5XVsiYSJdID0ge30gc2NyaXB0c1s5XVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvdXNyL3NoYXJlL2FyZG91cjgvc2NyaXB0cy92YW1wX2F1ZGlvX3RvX21pZGkubHVhIiAgIHNjcmlwdHNbOV1bImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE2XDBcMFwwZlwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMTZcMFwwXDBmXDBcMFwwXDBcMCbuXDBcMFwwXDZcMEBcMFwxMkBAXDAkgFwwXDFGgEBcMEzAwFwwZIBcMFwxhlwwQVwwh0BBXDGHgEFcMaSAgFwwxsBBXDDHXDDCXDHHQMJcMVwxgVwyXDBAXDGAXDDkgIBcMVw0XDFcMFwwS1wxXDBcMIaBQFwwjMFCXDOkgVwwXDHGgUBcMMxcMcNcM+SBXDBcMVwxQlwzXDBBQlwzXDCHgkNcMIzCQ1w1pIJcMFwxjFwyRFw1pFwyXDFcMVwzMIBcOICMQ8RcNqSDXDBcMcyDRFw35INcMFwx4kNcMFwwXDMwQFw2gMzDxFw25INcMFwxzFwzxVw35INcMFwxXDEyRMVcNiSEXDBcMVwxMlw0RVw4JIRcMFwxTVw0hFw3IICBXDdcMzBcMFwwgIBcMYBcNyBAhFwzXDMwXDBcMIDAXDGAXDiGhEVcMIfERVw5wFw0gFwyXDBcNVwwXDekRIBcMYxcNEZcN6SEXDBcMYxERlw5pIRcMFwxXDEzglw0XDRcMzCAXDCAzIPGXDbkg1wwXDFcMFwxgFw3qUJcMFwwKoP2XDEyN5xcMoBcMlwzMUBDXDVcMzBAXDOAhsJGXDCHXDJHXDXBQlw3XDBcMYNcN1wwRsNGXDBHw8dcNkdcM8hcNobDRlwwh0NIXDeHg0hcN6SCgFwyjMJIXDWkQlwwXDEmXDCAXDBcIkFcMFwwXDMwQFwzgIbCRlwwh1wyR1w1wUJcN1wwXDFcM1w5XDBGw0ZcMEfDx1w2R1wzyFw2hsNGXDCHQ0hcN4eDSFw3pIKAXDKMwkhcNaRCXDBcMSZcMIBcMIxCSVwyXDZcM0FcMFw3g0lcNkBcM1wwXDMkXDNcMFwxpEJcMFwwjMJJXDJcNlwzQVwwXDdcM0pcNk6DgVwzJFwzXDBcMaRCXDBcMIbCRlwwh0JKXDXBglwKXDBcM1wzgFwwpIKAXDHsXDJcMFwwXDjAgpXGXDJLXDBcMFwzgFwy5FwyXDFcMVwzMMBcMjaAXDEyxMRcNySEXDBcMUxES1wxzMREXDLkXDRcMFwxZIRcMFwwjITLXDFcMTJcNcZcNySFXDBcMUFFXDNcMIbFS1wwpESAXDKMXDRMXDWkhFwwXDGiRFwwXDBcMzBAXDIzgIxcNMZcN6SEXDBcMYxERlw5pIRcMFwxTYKEXDSMxEtcNVwxOFw1glw0QUVcMTJcMKREXDBcMoyEzFwxpIRcMFwxjMRMXDmkhFwwXDGMXDRNXDlcMUVcM1wwpISAXDGiXDRcMFwwXDMwwFwxN4DMRE1cOeSEXDBcMSDAhIZcMzDAXDE2gMyETVwyQUVcM1ww5ISAXDHMxM1cOeSEXDBcMVwxMlw1zlw5gUVcMTRcMCSFgFwxTFw1RFw5ZFw1XDFcMVwzMIBcMTKARlw2QVwwR1w2ylwxMoZGQlwwh4ZOXDEzh8ZOXDEzx1w2T1wxMlwwXDeAXDCkXDaAXDFkhlwwXDCGXDZBXDCHXDZKXDEzxkZCXDDHhs5cMTPHxs5cMTNcN0dPXDEyQFw3gFww5Fw2gFwxpIZcMFwwx4ZPXDEyzFw2zVwxM0FHXDNcMOSGgFwxXDEyR0tcMY1HXDZcOMFHXDNcMCSHXDBcMkxHS1wxzUdcNlw4zYeGXDE1XDFIXDNcMGSHXDBcMobHT1wwwVw3XDE2XDBcMFw4XDBcMTRAXDiAXDE0jUjQXDEzpEeAXDKOR1w0XDE0zlw3h1wxNFw2yEFcMFw3XDhCXDE2XDeIUFwxNkFIXDE2XDCAXDhcMFwxNcBcOIBcMTVcMTNJ0FwxM0HJXDE2XDAkiFwwXDNMXDhRXArAXDhcMFwxNmRIgFwxaUVcMFww6oXyXDEyN0xF0Vw5xoVAXDBcMFw2XDBcCmRFXDBcMsyE0Vwx5ERcMFwx6YJcMFwwakPkXDEyN8zCUVw15EJcMFwxJlwwgFwwSFwwXDBcMFw0XDdFZGl0b3JcNFwxNGdldF9zZWxlY3Rpb25cNFw4U2Vzc2lvblw0XDIwbm9taW5hbF9zYW1wbGVfcmF0ZVw0XDlUZW1wb3JhbFw0XDlUZW1wb01hcFw0XDVyZWFkXDRcN0FSRE9VUlw0XDdMdWFBUElcNFw1VmFtcFw0JmxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLXRyYW5zY3JpcHRpb25cNFwxOWN1cnJlbnRfZW5kX3NhbXBsZVw0XDIxY3VycmVudF9zdGFydF9zYW1wbGVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOHJlZ2lvbnNcNFwxMXJlZ2lvbmxpc3RcNFw1aXRlclw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFw5cG9zaXRpb25cNFw4c2FtcGxlc1w0XDdsZW5ndGhcNFw2dGFibGVcNFw3aW5zZXJ0XDRcMTJ0b19yZWFkYWJsZVw0XDE2cmVhZGFibGVfbGVuZ3RoXDRcMTR0b19taWRpcmVnaW9uXDRcCkx1YURpYWxvZ1w0XDhNZXNzYWdlXDRcMjVQb2x5cGhvbmljIEF1ZGlvIHRvIE1JRElcMjBiTm8gc291cmNlIGF1ZGlvIHJlZ2lvbihzKSBzZWxlY3RlZC5cCkF0IGxlYXN0IG9uZSBhdWRpby1yZWdpb24gdG8gYmUgYW5hbHl6ZWQgbmVlZCB0byBiZSBzZWxlY3RlZC5cNFwxMk1lc3NhZ2VUeXBlXDRcNkVycm9yXDRcMTFCdXR0b25UeXBlXDRcNkNsb3NlXDRcNHJ1blwyMIZObyB0YXJnZXQgTUlESSByZWdpb24gc2VsZWN0ZWQuXApBIE1JREkgcmVnaW9uLCBpZGVhbGx5IGVtcHR5LCBhbmQgZXh0ZW5kaW5nIGJleW9uZCB0aGUgc2VsZWN0ZWQgYXVkaW8tcmVnaW9uKHMpIG5lZWRzIHRvIGJlIHNlbGVjdGVkLlw0XDIxc2V0X2luaXRpYWxfcG9zaXRpb25cNFwKdGltZXBvc190XDRcMTFzZXRfbGVuZ3RoXDRcCnRpbWVjbnRfdFw0XDE1UHJvZ3Jlc3NXaW5kb3dcNFwxNEF1ZGlvIHRvIE1JRElcNFw5cHJvZ3Jlc3NcNFw2cGFpcnNcNFwxMnF1YXJ0ZXJzX2F0XDRcOGFuYWx5emVcNFw5cHJvZ3Jlc3NcNFw5Y2FuY2VsZWRcNFwxNkdlbmVyYXRpbmcgTUlESVw0XDdwbHVnaW5cNFwyMWdldFJlbWFpbmluZ0ZlYXR1cmVzXDRcM2F0XDRcNXNpemVcNFwxMm1pZGlfc291cmNlXDRcNm1vZGVsXDRcMjJuZXdfbm90ZV9kaWZmX2NvbW1hbmRcNFwxMUF1ZGlvMk1pZGlcNFw5UmVhbFRpbWVcNFwxNXJlYWxUaW1lMkZyYW1lXDRcCnRpbWVzdGFtcFw0XDlkdXJhdGlvblw0XDd2YWx1ZXNcNFw2cHJpbnRcNFwyTlwxOVwxXDBcMFwwXDBcMFwwXDBcNFwxMm5ld19ub3RlcHRyXDE5XDEyN1wwXDBcMFwwXDBcMFwwXDRcNGFkZFw0XDE0YXBwbHlfY29tbWFuZFw0XDZyZXNldFw0XDVkb25lXDFcMFwwXDBcMFwwXDFcMFwwXDBcMDtcMFwwXDA9XDBcMFwwXDJcMFw2XApcMFwwXDCFXDBcMFwwjFwwQFwxXDVcMYBcMFwxM0FcMFwyRVwxXDBcMVwxOEFcMVwyQUFcMFwwpVwwXDBcMqZcMFwwXDAmXDCAXDBcMlwwXDBcMFw0XDlwcm9ncmVzc1w0XApBbmFseXppbmdcM1wwXDBcMFwxXApcMVw5XDFcOFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiAgc2NyaXB0c1sxMF0gPSB7fSBzY3JpcHRzWzEwXVsicyJdID0gImFyZG91ciB7XAogICAgW1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXAogICAgbmFtZSA9IFwiUGl0Y2ggLSBBZGp1c3QgcGl0Y2ggb2YgYXVkaW8gbG9vcCBieSBrZXlcIixcCiAgICBhdXRob3IgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXAogICAgZGVzY3JpcHRpb24gPSBbW1wKVHJhbnNwb3NlcyB0aGUga2V5IG9mIGF1ZGlvIGxvb3BcCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkoKVwKICAgIHJldHVybiBmdW5jdGlvbihzaWduYWwsIC4uLilcClwKICAgIC0tIEdldCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgPSBBUkRPVVIudXNlcl9jb25maWdfZGlyZWN0b3J5KDgpXApcCi0tIENvbnN0cnVjdCB0aGUgZnVsbCBwYXRoIHRvIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGtleV9maWxlX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIva2V5LnR4dFwiXApcCi0tIFJlYWQgdGhlIGNvbnRlbnRzIG9mIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGZpbGUgPSBpby5vcGVuKGtleV9maWxlX3BhdGgsIFwiclwiKSAtLSBPcGVuIHRoZSBmaWxlIGluIHJlYWQgbW9kZVwKbG9jYWwgZmlsZV9jb250ZW50ID0gXCJObyBrZXkgc2V0XCIgLS0gRGVmYXVsdCB2YWx1ZSBpZiB0aGUgZmlsZSBjYW5ub3QgYmUgcmVhZFwKXAppZiBmaWxlIHRoZW5cCiAgICBmaWxlX2NvbnRlbnQgPSBmaWxlOnJlYWQoXCIqYVwiKSAtLSBSZWFkIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKSAtLSBDbG9zZSB0aGUgZmlsZVwKZWxzZVwKICAgIHByaW50KFwiV2FybmluZzogQ291bGQgbm90IG9wZW4gZmlsZSBmb3IgcmVhZGluZyBhdCBcIiAuLiBrZXlfZmlsZV9wYXRoKVwKZW5kXApcCi0tIFByZXBhcmUgdGhlIGRpYWxvZyBvcHRpb24gd2l0aCB0aGUgZmlsZSBjb250ZW50XApsb2NhbCBjdXJyZW50X2tleV9vcHRpb24gPSBcIlNldCB0byBjdXJyZW50IHByb2plY3Qga2V5OiBcIiAuLiBmaWxlX2NvbnRlbnRcCiAgICAgICAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24oKVwKICAgICAgICBsb2NhbCBjb3VudCA9IDBcCiAgICAgICAgbG9jYWwgYXVkaW9fcmVnaW9uXApcCiAgICAgICAgZm9yIHIgaW4gc2VsLnJlZ2lvbnM6cmVnaW9ubGlzdCgpOml0ZXIoKSBkb1wKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDFcCiAgICAgICAgICAgIGlmIHI6dG9fYXVkaW9yZWdpb24oKTppc25pbCgpIHRoZW5cCiAgICAgICAgICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiR2V0IEtleVwiLCBcIlRoZSBzZWxlY3RlZCByZWdpb24gaXMgbm90IGFuIGF1ZGlvIHJlZ2lvbi4gVGhlICBwcm9qZWN0IGtleSBpcyBjdXJyZW50bHkgc2V0IHRvIFwiLi5maWxlX2NvbnRlbnQsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICAgICAgICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgICAgICAgICBtZCA9IG5pbFwKICAgICAgICAgICAgICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICAgICAgICAgICAgICByZXR1cm5cCiAgICAgICAgICAgIGVsc2VcCiAgICAgICAgICAgICAgICBhdWRpb19yZWdpb24gPSByXAogICAgICAgICAgICBlbmRcCiAgICAgICAgZW5kXApcCiAgICAgICAgaWYgY291bnQgfj0gMSB0aGVuXAogICAgICAgICAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiR2V0IEtleVwiLCBcIlBsZWFzZSBzZWxlY3QgZXhhY3RseSAxIGF1ZGlvIHJlZ2lvbi4gVGhlIHByb2plY3Qga2V5IGlzIGN1cnJlbnRseSBzZXQgdG8gXCIuLmZpbGVfY29udGVudCwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgICAgICAgICAgcHJpbnQobWQ6cnVuKCkpXAogICAgICAgICAgICBtZCA9IG5pbFwKICAgICAgICAgICAgY29sbGVjdGdhcmJhZ2UoKVwKICAgICAgICAgICAgcmV0dXJuXAogICAgICAgIGVuZFwKXAogICAgICAgIGxvY2FsIHJuID0gYXVkaW9fcmVnaW9uOm5hbWUoKVwKICAgICAgICBsb2NhbCBzb3VyY2UgPSBhdWRpb19yZWdpb246c291cmNlKDApOnRvX2ZpbGVzb3VyY2UoKTpwYXRoKClcCiAgICAgICAgcHJpbnQoc291cmNlKVwKICAgICAgICBsb2NhbCBmaWxlcGF0aCA9IHNvdXJjZVwKICAgICAgICBsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXAogICAgICAgIC0tIEV4YW1wbGUgdXNhZ2U6XAogICAgICAtLSAgbG9jYWwgZmlsZW5hbWUgPSBxdW90ZWRmaWxlcGF0aFwKXAogICAgICAgIC0tIFBhdHRlcm4gdG8gY2FwdHVyZSB0aGUga2V5IGFmdGVyIFwia2V5X1wiXAogICAgbG9jYWwgZmtleSA9IHJuOm1hdGNoKFwia2V5XyhbQS1HXVsjYl0/bT8pXCIpXApcCiAgICBpZiBma2V5IHRoZW5cCiAgICAgICAgcHJpbnQoXCJFeHRyYWN0ZWQga2V5OlwiLCBma2V5KVwKXAogICAgICAgIGlmIGZrZXk6ZmluZChcIm0kXCIpIHRoZW5cCiAgICAgICAgICAgIGZrZXkgPSBma2V5IC4uIFwiIG1pbm9yXCJcCiAgICAgICAgZWxzZVwKICAgICAgICAgICAgZmtleSA9IGZrZXkgLi4gXCIgbWFqb3JcIlwKICAgICAgICBlbmRcClwKICAgICAgICBka2V5ID0gZmtleVwKICAgICAgICBwcmludChcIkV4dHJhY3RlZCBrZXkgZnJvbSBmaWxlOlwiLCBka2V5KVwKICAgICAgICBjbmFtZSA9IHRydWVcCiAgICAgICAgZWxzZVwKXApcCiAgICAgICAgICAgIGZpcnN0cmVzdWx0ID0gXCJLZXkgbm90IGZvdW5kLlwiXAogICAgICAgICAgICBsb2NhbCBjb21tYW5kID0gXCJrZXkgXCIgLi4gcXVvdGVkZmlsZXBhdGhcCiAgICAgICAgICAgIG9zLmV4ZWN1dGUoY29tbWFuZClcClwKICAgICAgICAgICAgLS0gT3BlbiB0aGUgZmlsZSBpbiB3cml0ZSBtb2RlXAogICAgICAgICAgICBsb2NhbCBoYW5kbGUgPSBpby5wb3Blbihjb21tYW5kKVwKICAgICAgICAgICAgZmlyc3RyZXN1bHQgPSBoYW5kbGU6cmVhZChcIiphXCIpXAogICAgICAgICAgICBoYW5kbGU6Y2xvc2UoKVwKICAgICAgICAgICAgcHJpbnQoZmlyc3RyZXN1bHQpXApcCi0tIEV4dHJhY3QgdGhlIGtleSBhbmQgc2NhbGVcCmxvY2FsIGRrZXksIHNjYWxlID0gc3RyaW5nLm1hdGNoKGZpcnN0cmVzdWx0LCBcIlRoZSBrZXkgb2YgdGhlIHNvbmcgaXMgKFtBLUcjXSspICglYSspXCIpXApcCi0tIElmIHRoZSBzY2FsZSBpcyBtaW5vciwgYXBwZW5kICdtJyB0byB0aGUga2V5XAotLSBFeHRyYWN0IHRoZSBrZXkgYW5kIHNjYWxlXApsb2NhbCBka2V5LCBzY2FsZSA9IHN0cmluZy5tYXRjaChmaXJzdHJlc3VsdCwgXCJUaGUga2V5IG9mIHRoZSBzb25nIGlzIChbQS1HYiNdKykgKCVhKylcIilcClwKLS0gSWYgdGhlIHNjYWxlIGlzIG1pbm9yLCBhcHBlbmQgJ20nIHRvIHRoZSBrZXlcCmlmIHNjYWxlID09IFwibWlub3JcIiB0aGVuXAogICAgZGtleSA9IGRrZXkgLi4gXCJtXCJcCmVuZFwKXApwcmludChcIktleTogXCIgLi4gZGtleSlcCnByaW50KFwiU2NhbGU6IFwiIC4uIHNjYWxlKVwKXAplbmRcClwKXApcCi0tIEdldCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgPSBBUkRPVVIudXNlcl9jb25maWdfZGlyZWN0b3J5KDgpXApcCi0tIENvbnN0cnVjdCB0aGUgZnVsbCBwYXRoIHRvIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGtleV9maWxlX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIva2V5LnR4dFwiXApcCi0tIFJlYWQgdGhlIGNvbnRlbnRzIG9mIHRoZSBrZXkudHh0IGZpbGVcCmxvY2FsIGZpbGUgPSBpby5vcGVuKGtleV9maWxlX3BhdGgsIFwiclwiKSAtLSBPcGVuIHRoZSBmaWxlIGluIHJlYWQgbW9kZVwKbG9jYWwgZmlsZV9jb250ZW50ID0gXCJObyBrZXkgc2V0XCIgLS0gRGVmYXVsdCB2YWx1ZSBpZiB0aGUgZmlsZSBjYW5ub3QgYmUgcmVhZFwKXAppZiBmaWxlIHRoZW5cCiAgICBmaWxlX2NvbnRlbnQgPSBmaWxlOnJlYWQoXCIqYVwiKSAtLSBSZWFkIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZmlsZVwKICAgIGZpbGU6Y2xvc2UoKSAtLSBDbG9zZSB0aGUgZmlsZVwKZWxzZVwKICAgIHByaW50KFwiV2FybmluZzogQ291bGQgbm90IG9wZW4gZmlsZSBmb3IgcmVhZGluZyBhdCBcIiAuLiBrZXlfZmlsZV9wYXRoKVwKZW5kXApcCi0tIFByZXBhcmUgdGhlIGRpYWxvZyBvcHRpb24gd2l0aCB0aGUgZmlsZSBjb250ZW50XApsb2NhbCBjdXJyZW50X2tleV9vcHRpb24gPSBcIlNldCB0byBjdXJyZW50IHByb2plY3Qga2V5OiBcIiAuLiBmaWxlX2NvbnRlbnRcClwKaWYgY25hbWUgPT0gdHJ1ZSB0aGVuXApcCnNlbnRlbmNlID0gXCJFc3RpbWF0ZWQga2V5IG9mIGxvb3A6IFwiIC4uIGRrZXkgLi4gIFwiLiBDaG9vc2UgVGFyZ2V0IEtleSAoSGl0IENhbmNlbCBvciBzZWxlY3QgRG8gbm90IGNoYW5nZSBrZXkgdG8gbm90IGNoYW5nZSB0aGUga2V5KVwiXAplbHNlXApcCnNlbnRlbmNlID0gXCJFc3RpbWF0ZWQga2V5IG9mIGxvb3A6IFwiIC4uIGRrZXkgLi4gXCIgXCIgLi4gc2NhbGUgLi4gXCIuIENob29zZSBUYXJnZXQgS2V5IChIaXQgQ2FuY2VsIG9yIHNlbGVjdCBEbyBub3QgY2hhbmdlIGtleSB0byBub3QgY2hhbmdlIHRoZSBrZXkpXCJcClwKZW5kXApcCmxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICB7XAogICB0eXBlID0gXCJkcm9wZG93blwiLCBrZXkgPSBcInRhcmdldF9rZXlcIiwgdGl0bGUgPSBzZW50ZW5jZSwgdmFsdWVzID1cCiAgIHtcCiAgICBbXCJDXCJdID0gMSwgW1wiQyNcIl0gPSAyLCBbXCJEYlwiXSA9IDMsIFtcIkRcIl0gPSA0LCBbXCJEI1wiXSA9IDUsIFtcIkViXCJdID0gNixcCiAgICBbXCJFXCJdID0gNywgW1wiRlwiXSA9IDgsIFtcIkYjXCJdID0gOSwgW1wiR2JcIl0gPSAxMCwgW1wiR1wiXSA9IDExLCBbXCJHI1wiXSA9IDEyLCBbXCJBYlwiXSA9IDEzLFwKICAgIFtcIkFcIl0gPSAxNCwgW1wiQSNcIl0gPSAxNSwgW1wiQmJcIl0gPSAxNiwgW1wiQlwiXSA9IDE3LFwKICAgIFtcIkFtXCJdID0gMTgsIFtcIkEjbVwiXSA9IDE5LCBbXCJCYm1cIl0gPSAyMCwgW1wiQm1cIl0gPSAyMSwgW1wiQ21cIl0gPSAyMixcCiAgICBbXCJDI21cIl0gPSAyMywgW1wiRGJtXCJdID0gMjQsIFtcIkRtXCJdID0gMjUsIFtcIkQjbVwiXSA9IDI2LCBbXCJFYm1cIl0gPSAyNyxcCiAgICBbXCJFbVwiXSA9IDI4LCBbXCJGbVwiXSA9IDI5LCBbXCJGI21cIl0gPSAzMCwgW1wiR2JtXCJdID0gMzEsIFtcIkdtXCJdID0gMzIsIFtcIkcjbVwiXSA9IDMzLCBbXCJBYm1cIl0gPSAzNCxcCiAgICBbY3VycmVudF9rZXlfb3B0aW9uXSA9IDM1LCAtLSBBZGQgdGhlIGZpbGUgY29udGVudCBvcHRpb25cCiAgICBbXCJEbyBub3QgY2hhbmdlIGtleVwiXSA9IDM2IC0tIFVwZGF0ZSBpbmRleCBmb3IgXCJEbyBub3QgY2hhbmdlIGtleVwiIHRvIGF2b2lkIG92ZXJsYXBcCiAgIH0sXAogICBkZWZhdWx0ID0gY3VycmVudF9rZXlfb3B0aW9uIC0tIFNldCB0aGUgY3VycmVudCBrZXkgb3B0aW9uIGFzIHRoZSBkZWZhdWx0XAogIH1cCn1cClwKLS0gQ3JlYXRlIGFuZCBydW4gdGhlIGRpYWxvZ1wKbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nKFwiQ2hvb3NlIFRhcmdldCBLZXlcIiwgZGlhbG9nX29wdGlvbnMpXApsb2NhbCBydiA9IG9kOnJ1bigpXApcClwKLS0gQ3JlYXRlIGEgcmV2ZXJzZSBsb29rdXAgdGFibGUgdG8gbWFwIG51bWJlcnMgYmFjayB0byBtdXNpY2FsIGtleSBzdHJpbmdzXApsb2NhbCBudW1iZXJfdG9fa2V5ID0ge1wKICAgIFsxXSA9IFwiQ1wiLCBbMl0gPSBcIkMjXCIsIFszXSA9IFwiRGJcIiwgWzRdID0gXCJEXCIsIFs1XSA9IFwiRCNcIiwgWzZdID0gXCJFYlwiLFwKICAgIFs3XSA9IFwiRVwiLCBbOF0gPSBcIkZcIiwgWzldID0gXCJGI1wiLCBbMTBdID0gXCJHYlwiLCBbMTFdID0gXCJHXCIsIFsxMl0gPSBcIkcjXCIsIFsxM10gPSBcIkFiXCIsXAogICAgWzE0XSA9IFwiQVwiLCBbMTVdID0gXCJBI1wiLCBbMTZdID0gXCJCYlwiLCBbMTddID0gXCJCXCIsXAogICAgWzE4XSA9IFwiQW1cIiwgWzE5XSA9IFwiQSNtXCIsIFsyMF0gPSBcIkJibVwiLCBbMjFdID0gXCJCbVwiLCBbMjJdID0gXCJDbVwiLFwKICAgIFsyM10gPSBcIkMjbVwiLCBbMjRdID0gXCJEYm1cIiwgWzI1XSA9IFwiRG1cIiwgWzI2XSA9IFwiRCNtXCIsIFsyN10gPSBcIkVibVwiLFwKICAgIFsyOF0gPSBcIkVtXCIsIFsyOV0gPSBcIkZtXCIsIFszMF0gPSBcIkYjbVwiLCBbMzFdID0gXCJHYm1cIiwgWzMyXSA9IFwiR21cIiwgWzMzXSA9IFwiRyNtXCIsIFszNF0gPSBcIkFibVwiXAp9XApcCi0tIENoZWNrIHRoZSB1c2VyJ3Mgc2VsZWN0aW9uXAppZiBydiBhbmQgcnZbXCJ0YXJnZXRfa2V5XCJdID09IDM1IGFuZCBmaWxlX2NvbnRlbnQ6bWF0Y2goXCJObyBrZXkgc2V0XCIpIHRoZW5cCiAgICBwcmludChcIk5vIGtleSBpcyBzZXQgaW4gdGhlIGZpbGUuIEV4aXRpbmcgdGhlIHNjcmlwdC5cIilcCiAgICByZXR1cm4gLS0gRXhpdCB0aGUgc2NyaXB0XAplbmRcClwKaWYgcnYgYW5kIHJ2W1widGFyZ2V0X2tleVwiXSA9PSAzNSB0aGVuXAogICAgICAgbG9jYWwgZmlsZSA9IGlvLm9wZW4oa2V5X2ZpbGVfcGF0aCwgXCJyXCIpXAogICAgbG9jYWwgcGtleVwKXAogICAgaWYgZmlsZSB0aGVuXAogICAgICAgIC0tIFJlYWQgdGhlIGtleSBmcm9tIHRoZSBmaWxlIChhc3N1bWluZyB0aGUga2V5IGlzIG9uIHRoZSBmaXJzdCBsaW5lKVwKICAgICAgICBsb2NhbCBrZXlfd2l0aF9zdWZmaXggPSBmaWxlOnJlYWQoXCIqbFwiKVwKICAgICAgICBmaWxlOmNsb3NlKClcClwKICAgICAgICAtLSBNb2RpZnkgdGhlIHBhdHRlcm4gdG8gY2FwdHVyZSB0aGUga2V5IGFuZCBpbmNsdWRlIFwibVwiIGlmIGl0J3MgbWlub3JcCiAgICAgICAgcGtleSA9IGtleV93aXRoX3N1ZmZpeDptYXRjaChcIl4oJWEjP2I/bT8pXCIpXAogICAgZW5kXApcCiAgICAtLSBQcmludCB0aGUgZXh0cmFjdGVkIGtleSB0byB2ZXJpZnlcCiAgICBwcmludChcIkV4dHJhY3RlZCBLZXk6XCIsIHBrZXkpXApcCiAgICAtLSBQcmVwYXJlIGEgbG9va3VwIHRhYmxlIHRvIG1hdGNoIGtleXMgdG8gbnVtYmVyc1wKICAgIGxvY2FsIGtleV90b19udW1iZXIgPSB7XAogICAgICAgIFtcIkNcIl0gPSAxLCBbXCJDI1wiXSA9IDIsIFtcIkRiXCJdID0gMywgW1wiRFwiXSA9IDQsIFtcIkQjXCJdID0gNSwgW1wiRWJcIl0gPSA2LFwKICAgICAgICBbXCJFXCJdID0gNywgW1wiRlwiXSA9IDgsIFtcIkYjXCJdID0gOSwgW1wiR2JcIl0gPSAxMCwgW1wiR1wiXSA9IDExLCBbXCJHI1wiXSA9IDEyLCBbXCJBYlwiXSA9IDEzLFwKICAgICAgICBbXCJBXCJdID0gMTQsIFtcIkEjXCJdID0gMTUsIFtcIkJiXCJdID0gMTYsIFtcIkJcIl0gPSAxNyxcCiAgICAgICAgW1wiQW1cIl0gPSAxOCwgW1wiQSNtXCJdID0gMTksIFtcIkJibVwiXSA9IDIwLCBbXCJCbVwiXSA9IDIxLCBbXCJDbVwiXSA9IDIyLFwKICAgICAgICBbXCJDI21cIl0gPSAyMywgW1wiRGJtXCJdID0gMjQsIFtcIkRtXCJdID0gMjUsIFtcIkQjbVwiXSA9IDI2LCBbXCJFYm1cIl0gPSAyNyxcCiAgICAgICAgW1wiRW1cIl0gPSAyOCwgW1wiRm1cIl0gPSAyOSwgW1wiRiNtXCJdID0gMzAsIFtcIkdibVwiXSA9IDMxLCBbXCJHbVwiXSA9IDMyLCBbXCJHI21cIl0gPSAzMywgW1wiQWJtXCJdID0gMzRcCiAgICB9XApcCiAgICAtLSBMb29rIHVwIHRoZSBleHRyYWN0ZWQga2V5IGluIHRoZSB0YWJsZSB0byBnZXQgdGhlIG51bWJlclwKICAgIGxvY2FsIHNlbGVjdGVkX251bWJlciA9IGtleV90b19udW1iZXJbcGtleV1cClwKICAgIGlmIHNlbGVjdGVkX251bWJlciB0aGVuXAogICAgICAgIHByaW50KFwiTWF0Y2hlZCBLZXkgTnVtYmVyOlwiLCBzZWxlY3RlZF9udW1iZXIpXAogICAgICAgIC0tIFVzZSBgc2VsZWN0ZWRfbnVtYmVyYCBmb3IgeW91ciB0cmFuc3Bvc2l0aW9uIGxvZ2ljIG9yIGFueSBmdXJ0aGVyIHN0ZXBzXAogICAgZWxzZVwKICAgICAgICBwcmludChcIkVycm9yOiBUaGUgZXh0cmFjdGVkIGtleSBkb2VzIG5vdCBtYXRjaCBhbnkga25vd24ga2V5LlwiKVwKICAgIGVuZFwKXAogICAgLS0gTWFwIHRoZSBudW1lcmljIHZhbHVlIGJhY2sgdG8gdGhlIGNvcnJlc3BvbmRpbmcga2V5IHN0cmluZ1wKIHRhcmdldF9rZXkgPSBudW1iZXJfdG9fa2V5W3NlbGVjdGVkX251bWJlcl1cClwKLS0gRGVmaW5lIGEgbWFwcGluZyBvZiBtdXNpY2FsIGtleXMgdG8gdGhlaXIgY29ycmVzcG9uZGluZyBub3RlIHZhbHVlcyAoc2VtaXRvbmVzKVwKa2V5X3RvX3NlbWl0b25lID0ge1wKICAgIEMgPSAwLCBbXCJDI1wiXSA9IDEsIERiID0gMSwgRCA9IDIsIFtcIkQjXCJdID0gMywgRWIgPSAzLFwKICAgIEUgPSA0LCBGID0gNSwgW1wiRiNcIl0gPSA2LCBHYiA9IDYsIEcgPSA3LCBbXCJHI1wiXSA9IDgsIEFiID0gOCxcCiAgICBBID0gOSwgW1wiQSNcIl0gPSAxMCwgQmIgPSAxMCwgQiA9IDExLFwKICAgIEFtID0gOSwgW1wiQSNtXCJdID0gMTAsIEJibSA9IDEwLCBCbSA9IDExLCBDbSA9IDAsIFtcIkMjbVwiXSA9IDEsXAogICAgRGJtID0gMSwgRG0gPSAyLCBbXCJEI21cIl0gPSAzLCBFYm0gPSAzLCBFbSA9IDQsIEZtID0gNSxcCiAgICBbXCJGI21cIl0gPSA2LCBHYm0gPSA2LCBHbSA9IDcsIFtcIkcjbVwiXSA9IDgsIEFibSA9IDhcCn1cCmVuZFwKXApcClwKXAppZiBydiBhbmQgcnZbXCJ0YXJnZXRfa2V5XCJdIH49IDM1IHRoZW5cCiAgIC0tIEdldCB0aGUgc2VsZWN0ZWQgdGFyZ2V0IGtleSdzIG51bWVyaWMgdmFsdWUgZnJvbSB0aGUgZGlhbG9nXAogc2VsZWN0ZWRfbnVtYmVyID0gcnYudGFyZ2V0X2tleVwKIC0tIE1hcCB0aGUgbnVtZXJpYyB2YWx1ZSBiYWNrIHRvIHRoZSBjb3JyZXNwb25kaW5nIGtleSBzdHJpbmdcCiB0YXJnZXRfa2V5ID0gbnVtYmVyX3RvX2tleVtzZWxlY3RlZF9udW1iZXJdXApcCi0tIERlZmluZSBhIG1hcHBpbmcgb2YgbXVzaWNhbCBrZXlzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgbm90ZSB2YWx1ZXMgKHNlbWl0b25lcylcCmtleV90b19zZW1pdG9uZSA9IHtcCiAgICBDID0gMCwgW1wiQyNcIl0gPSAxLCBEYiA9IDEsIEQgPSAyLCBbXCJEI1wiXSA9IDMsIEViID0gMyxcCiAgICBFID0gNCwgRiA9IDUsIFtcIkYjXCJdID0gNiwgR2IgPSA2LCBHID0gNywgW1wiRyNcIl0gPSA4LCBBYiA9IDgsXAogICAgQSA9IDksIFtcIkEjXCJdID0gMTAsIEJiID0gMTAsIEIgPSAxMSxcCiAgICBBbSA9IDksIFtcIkEjbVwiXSA9IDEwLCBCYm0gPSAxMCwgQm0gPSAxMSwgQ20gPSAwLCBbXCJDI21cIl0gPSAxLFwKICAgIERibSA9IDEsIERtID0gMiwgW1wiRCNtXCJdID0gMywgRWJtID0gMywgRW0gPSA0LCBGbSA9IDUsXAogICAgW1wiRiNtXCJdID0gNiwgR2JtID0gNiwgR20gPSA3LCBbXCJHI21cIl0gPSA4LCBBYm0gPSA4XAp9XAplbmRcClwKXApcClwKXAotLSBFeGl0IGlmIGRpYWxvZyBpcyBjYW5jZWxlZCBvciBjbG9zZWRcCmlmIG5vdCBydiB0aGVuXAogICAgcHJpbnQoXCJEaWFsb2cgY2FuY2VsZWQgb3IgY2xvc2VkLlwiKVwKICAgIHJldHVyblwKXAplbmRcClwKXApcClwKXAotLSBQYXR0ZXJuIHRvIGNhcHR1cmUgb25seSB0aGUga2V5IHBhcnRcCmxvY2FsIGtleV9vbmx5ID0gZGtleTptYXRjaChcIl5bQS1HXVsjYl0/bT9cIilcClwKcHJpbnQoXCJLZXkgb25seTpcIiwga2V5X29ubHkpXAogZGV0ZWN0ZWRfa2V5ID0ga2V5X29ubHlcClwKIHByaW50KFwiZGV0ZWN0ZWQgaXMgXCIuLmtleV9vbmx5KVwKXApcClwKXAotLSBGdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIHNlbWl0b25lIHNoaWZ0IGJldHdlZW4gdHdvIGtleXNcCmZ1bmN0aW9uIHNlbWl0b25lX3NoaWZ0KGRldGVjdGVkX2tleSwgdGFyZ2V0X2tleSlcCiAgICAtLSBHZXQgdGhlIHNlbWl0b25lIHZhbHVlcyBmb3IgdGhlIGRldGVjdGVkIGFuZCB0YXJnZXQga2V5c1wKICAgICBkZXRlY3RlZF9zZW1pdG9uZSA9IGtleV90b19zZW1pdG9uZVtkZXRlY3RlZF9rZXldXAogICAgIHRhcmdldF9zZW1pdG9uZSA9IGtleV90b19zZW1pdG9uZVt0YXJnZXRfa2V5XVwKXAogICAgaWYgZGV0ZWN0ZWRfc2VtaXRvbmUgPT0gbmlsIG9yIHRhcmdldF9zZW1pdG9uZSA9PSBuaWwgdGhlblwKICAgICAgICBwcmludChcIkludmFsaWQga2V5LiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBrZXkuXCIpXAogICAgICAgIHJldHVyblwKICAgIGVuZFwKXAogICAgLS0gQ2FsY3VsYXRlIHRoZSBzZW1pdG9uZSBkaWZmZXJlbmNlXAogICAgIHNlbWl0b25lX2RpZmZlcmVuY2UgPSB0YXJnZXRfc2VtaXRvbmUgLSBkZXRlY3RlZF9zZW1pdG9uZVwKXAogICAgLS0gUHJpbnQgdGhlIHJlc3VsdFwKICAgIGlmIHNlbWl0b25lX2RpZmZlcmVuY2UgPiAwIHRoZW5cCiAgICAgICAgcHJpbnQoXCJHbyB1cCBcIiAuLiBzZW1pdG9uZV9kaWZmZXJlbmNlIC4uIFwiIHNlbWl0b25lKHMpIHRvIHJlYWNoIFwiIC4uIHRhcmdldF9rZXkgLi4gXCIuXCIpXAogICAgZWxzZWlmIHNlbWl0b25lX2RpZmZlcmVuY2UgPCAwIHRoZW5cCiAgICAgICAgcHJpbnQoXCJHbyBkb3duIFwiIC4uIG1hdGguYWJzKHNlbWl0b25lX2RpZmZlcmVuY2UpIC4uIFwiIHNlbWl0b25lKHMpIHRvIHJlYWNoIFwiIC4uIHRhcmdldF9rZXkgLi4gXCIuXCIpXAogICAgZWxzZVwKICAgICAgICBwcmludChcIlRoZSBkZXRlY3RlZCBrZXkgaXMgYWxyZWFkeSBpbiBcIiAuLiB0YXJnZXRfa2V5IC4uIFwiLlwiKVwKICAgIGVuZFwKZW5kXApcClw5aWYgY25hbWUgPT0gdHJ1ZSB0aGVuXApcClw5ZnVuY3Rpb24gZm9ybWF0S2V5KHRhcmdldF9rZXkpXAogICAgbG9jYWwgZm9ybWF0dGVkX2tleSA9IHRhcmdldF9rZXlcClwKICAgIC0tIENoZWNrIGlmIGZrZXkgaXMgbWFqb3IgYW5kIHJlbW92ZSBcIiBNYWpvclwiXAogICAgaWYgZm9ybWF0dGVkX2tleTptYXRjaChcIk1ham9yJFwiKSB0aGVuXAogICAgICAgIGZvcm1hdHRlZF9rZXkgPSBmb3JtYXR0ZWRfa2V5OmdzdWIoXCIgTWFqb3IkXCIsIFwiXCIpXAogICAgLS0gQ2hlY2sgaWYgZmtleSBpcyBtaW5vciBhbmQgcmVwbGFjZSBcIiBtaW5vclwiIHdpdGggXCJtXCJcCiAgICBlbHNlaWYgZm9ybWF0dGVkX2tleTptYXRjaChcIm1pbm9yJFwiKSB0aGVuXAogICAgICAgIGZvcm1hdHRlZF9rZXkgPSBmb3JtYXR0ZWRfa2V5OmdzdWIoXCIgbWlub3IkXCIsIFwibVwiKVwKICAgIGVuZFwKXAogICAgdGFyZ2V0X2tleSA9IChmb3JtYXRLZXkoZmtleSkpXApcCiAgICByZXR1cm4gZm9ybWF0dGVkX2tleVwKZW5kXApcCiAgcm4gPSBybjpnc3ViKFwia2V5X1wiIC4uIGZrZXk6bWF0Y2goXCIoW0EtR11bI2JdP20/KVwiKSwgXCJcIilcCiAgICBwcmludChcIkZpbGVuYW1lIGFmdGVyIHJlbW92aW5nIGtleSBwYXR0ZXJuOlwiLCBybilcCiAgICBhdWRpb19yZWdpb246c2V0X25hbWUocm4uLlwiLWtleV9cIi4udGFyZ2V0X2tleSlcCi0tZW5kXApcClwKXApzZW1pdG9uZV9zaGlmdChkZXRlY3RlZF9rZXksIHRhcmdldF9rZXkpXApcClwKXDktLSBoZWxwZXIgZnVuY3Rpb24gLS1cClw5LS0gdGhlcmUgaXMgY3VycmVudGx5IG5vIGRpcmVjdCB3YXkgdG8gZmluZCB0aGUgdHJhY2tcClw5LS0gY29ycmVzcG9uZGluZyB0byBhIFtzZWxlY3RlZF0gcmVnaW9uXApcOWZ1bmN0aW9uIGZpbmRfdHJhY2tfZm9yX3JlZ2lvbiAocmVnaW9uX2lkKVwKXDlcOWZvciByb3V0ZSBpbiBTZXNzaW9uOmdldF90cmFja3MgKCk6aXRlciAoKSBkb1wKXDlcOVw5bG9jYWwgdHJhY2sgPSByb3V0ZTp0b190cmFjayAoKVwKXDlcOVw5bG9jYWwgcGwgPSB0cmFjazpwbGF5bGlzdCAoKVwKXDlcOVw5aWYgbm90IHBsOnJlZ2lvbl9ieV9pZCAocmVnaW9uX2lkKTppc25pbCAoKSB0aGVuXApcOVw5XDlcOXJldHVybiB0cmFja1wKXDlcOVw5ZW5kXApcOVw5ZW5kXApcOVw5YXNzZXJ0ICgwKSAtLSBjYW4ndCBoYXBwZW4sIHJlZ2lvbiBtdXN0IGJlIGluIGEgcGxheWxpc3RcClw5ZW5kXApcClw5LS0gRnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSByYXRpbyBmb3IgY2hhbmdpbmcgcGl0Y2ggYnkgYSBudW1iZXIgb2Ygc2VtaXRvbmVzXApmdW5jdGlvbiBjYWxjdWxhdGVfcmF0aW8oc2VtaXRvbmVzKVwKICAgIC0tIFJhdGlvIGNhbGN1bGF0aW9uIGZvcm11bGE6IDJeKHNlbWl0b25lcyAvIDEyKVwKICAgIGxvY2FsIHJhdGlvID0gMl4oc2VtaXRvbmVzIC8gMTIpXAogICAgcmV0dXJuIHJhdGlvXAplbmRcClwKLS0gRXhhbXBsZSB1c2FnZVwKbG9jYWwgc2VtaXRvbmVzID0gc2VtaXRvbmVfZGlmZmVyZW5jZSAtLSBDaGFuZ2UgdGhpcyB2YWx1ZSB0byB0ZXN0IHdpdGggZGlmZmVyZW50IHNlbWl0b25lIHNoaWZ0c1wKcHJpbnQgKHNlbWl0b25lcylcCmxvY2FsIHJhdGlvID0gY2FsY3VsYXRlX3JhdGlvKHNlbWl0b25lcylcClwKXApcCi0tIFByaW50IHRoZSByZXN1bHRcCnByaW50KFwiRm9yIGEgc2hpZnQgb2YgXCIgLi4gc2VtaXRvbmVzIC4uIFwiIHNlbWl0b25lcywgdGhlIHJhdGlvIGlzOiBcIiAuLiByYXRpbylcClwKXApwcmludCh0eXBlKHJhdGlvKSlcClwKXApcOS0tIGdldCBFZGl0b3Igc2VsZWN0aW9uXApcOS0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6RWRpdG9yXApcOS0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6U2VsZWN0aW9uXApcOWxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcClw5LS0gSW5zdGFudGlhdGUgdGhlIFFNIEJhckJlYXQgVHJhY2tlclwKXDktLSBzZWUgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6THVhQVBJOlZhbXBcClw5LS0gaHR0cDovL3ZhbXAtcGx1Z2lucy5vcmcvcGx1Z2luLWRvYy9xbS12YW1wLXBsdWdpbnMuaHRtbCNxbS1iYXJiZWF0dHJhY2tlclwKXDlsb2NhbCB2YW1wID0gQVJET1VSLkx1YUFQSS5WYW1wIChcImxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLWJhcmJlYXR0cmFja2VyXCIsIFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSAoKSlcClwKXDktLSBwcmVwYXJlIHVuZG8gb3BlcmF0aW9uXApcOVNlc3Npb246YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kIChcIlJ1YmJlcmJhbmQgUmVnaW9uc1wiKVwKXApcOS0tIGZvciBlYWNoIHNlbGVjdGVkIHJlZ2lvblwKXDktLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0FyZG91clVJOlJlZ2lvblNlbGVjdGlvblwKXDlmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0ICgpOml0ZXIgKCkgZG9cClw5XDktLSBcInJcIiBpcy1hIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQVJET1VSOlJlZ2lvblwKXApcOVw5LS0gdGVzdCBpZiBpdCdzIGFuIGF1ZGlvIHJlZ2lvblwKXDlcOWxvY2FsIGFyID0gcjp0b19hdWRpb3JlZ2lvbiAoKVwKXDlcOWlmIGFyOmlzbmlsICgpIHRoZW5cClw5XDlcOWdvdG8gbmV4dFwKXDlcOWVuZFwKXApcOVw5LS0gY3JlYXRlIFJ1YmJlcmJhbmQgc3RyZXRjaGVyXApcOVw5bG9jYWwgcmIgPSBBUkRPVVIuTHVhQVBJLlJ1YmJlcmJhbmQgKGFyLCBmYWxzZSlcClwKXDlcOS0tIHRoZSBydWJiZXJiYW5kLWZpbHRlciBhbHNvIGltcGxlbWVudHMgdGhlIHJlYWRhYmxlIEFQSS5cClw5XDktLSBodHRwczovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6QXVkaW9SZWFkYWJsZVwKXDlcOS0tIFRoaXMgYWxsb3dzIHRvIHJlYWQgZnJvbSB0aGUgbWFzdGVyLXNvdXJjZSBvZiB0aGUgZ2l2ZW4gYXVkaW8tcmVnaW9uLlwKXDlcOS0tIEFueSBwcmlvciB0aW1lLXN0cmV0Y2ggb3IgcGl0Y2gtc2hpZnQgYXJlIGlnbm9yZWQgd2hlbiByZWFkaW5nLCBob3dldmVyXApcOVw5LS0gcHJvY2Vzc2luZyByZXRhaW5zIHRoZSBwcmV2aW91cyBzZXR0aW5nc1wKXDlcOWxvY2FsIG1heF9wb3MgPSByYjpyZWFkYWJsZSAoKTpyZWFkYWJsZV9sZW5ndGggKClcClwKXDlcOS0tIHByZXBhcmUgdGFibGUgdG8gaG9sZCBhbmFseXNpcyByZXN1bHRzXApcOVw5LS0gdGhlIGJlYXQtbWFwIGlzIGEgdGFibGUgaG9sZGluZyBhdWRpby1zYW1wbGUgcG9zaXRpb25zOlwKXDlcOS0tIFtmcm9tXSA9IHRvXApcOVw5bG9jYWwgYmVhdF9tYXAgPSB7fVwKXDlcOWxvY2FsIHByZXZfYmVhdCA9IDBcClwKXDlcOS0tIGNvbnN0cnVjdCBhIHByb2dyZXNzLWRpYWxvZyB3aXRoIGNhbmNlbCBidXR0b25cClw5XDlsb2NhbCBwZGlhbG9nID0gTHVhRGlhbG9nLlByb2dyZXNzV2luZG93IChcIlRyYW5zcG9zZSBBdWRpb1wiLCB0cnVlKVwKXDlcOS0tIHByb2dyZXNzIGRpYWxvZyBjYWxsYmFja3NcClw5XDlmdW5jdGlvbiB2YW1wX2NhbGxiYWNrIChfLCBwb3MpXApcOVw5XDlyZXR1cm4gcGRpYWxvZzpwcm9ncmVzcyAocG9zIC8gbWF4X3BvcywgXCJBbmFseXppbmdcIilcClw5XDllbmRcClw5XDlmdW5jdGlvbiByYl9wcm9ncmVzcyAoXywgcG9zKVwKXDlcOVw5cmV0dXJuIHBkaWFsb2c6cHJvZ3Jlc3MgKHBvcyAvIG1heF9wb3MsIFwiVHJhbnNwb3NpbmdcIilcClw5XDllbmRcClwKXDlcOS0tIHJ1biBWQU1QIHBsdWdpbiwgYW5hbHl6ZSB0aGUgZmlyc3QgY2hhbm5lbCBvZiB0aGUgYXVkaW8tcmVnaW9uXApcOVw5dmFtcDphbmFseXplIChyYjpyZWFkYWJsZSAoKSwgMCwgdmFtcF9jYWxsYmFjaylcClwKXDlcOS0tIGdldFJlbWFpbmluZ0ZlYXR1cmVzIHJldHVybnMgYSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI1ZhbXA6UGx1Z2luOkZlYXR1cmVTZXRcClw5XDktLSBnZXQgdGhlIGZpcnN0IG91dHB1dC4gaGVyZTogQmVhdHMsIGVzdGltYXRlZCBiZWF0IGxvY2F0aW9ucyAmIGJlYXQtbnVtYmVyXApcOVw5LS0gXCJmbFwiIGlzLWEgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNWYW1wOlBsdWdpbjpGZWF0dXJlTGlzdFwKXDlcOWxvY2FsIGZsID0gdmFtcDpwbHVnaW4gKCk6Z2V0UmVtYWluaW5nRmVhdHVyZXMgKCk6YXQgKDApXApcOVw5bG9jYWwgYmVhdGNvdW50ID0gMFwKXDlcOS0tIGl0ZXJhdGUgb3ZlciByZXR1cm5lZCBmZWF0dXJlc1wKXDlcOWZvciBmIGluIGZsOml0ZXIgKCkgZG9cClw5XDlcOS0tIFwiZlwiIGlzLWEgIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jVmFtcDpQbHVnaW46RmVhdHVyZVwKXDlcOVw5bG9jYWwgZm4gPSBWYW1wLlJlYWxUaW1lLnJlYWxUaW1lMkZyYW1lIChmLnRpbWVzdGFtcCwgU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpKVwKXDlcOVw5YmVhdF9tYXBbZm5dID0gZm4gLS0ga2VlcCBiZWF0cyAoMS80IG5vdGVzKSB1bmNoYW5nZWRcClw5XDlcOWlmIHByZXZfYmVhdCA+IDAgdGhlblwKXDlcOVw5XDktLSBtb3ZlIHRoZSBoYWxmIGJlYXRzICgxLzh0aCkgYmFja1wKXDlcOVw5XDlsb2NhbCBkaWZmID0gKGZuIC0gcHJldl9iZWF0KSAvIDJcClw5XDlcOVw5YmVhdF9tYXBbZm4gLSBkaWZmXSA9IGZuIC0gZGlmZiArIGRpZmYgLyAzIC0tIG1vZGVyYXRlIHN3aW5nIDI6MSAodHJpcGxldClcClw5XDlcOVw5LS1iZWF0X21hcFtmbiAtIGRpZmZdID0gZm4gLSBkaWZmICsgZGlmZiAvIDIgLS0gaGFyZCBzd2luZyAzOjEgKGRvdHRlZCA4dGgpXApcOVw5XDlcOWJlYXRjb3VudCA9IGJlYXRjb3VudCArIDFcClw5XDlcOWVuZFwKXDlcOVw5cHJldl9iZWF0ID0gZm5cClw5XDllbmRcClw5XDktLSByZXNldCB0aGUgcGx1Z2luIHN0YXRlIChwcmVwYXJlIGZvciBuZXh0IGl0ZXJhdGlvbilcClw5XDl2YW1wOnJlc2V0ICgpXApcClw5XDlpZiBwZGlhbG9nOmNhbmNlbGVkICgpIHRoZW4gZ290byBvdXQgZW5kXApcClw5XDktLSBza2lwIHJlZ2lvbnMgc2hvcnRlciB0aGFuIGEgYmFyXApcOVw5aWYgYmVhdGNvdW50IDwgOCB0aGVuXApcOVw5XDlwZGlhbG9nOmRvbmUgKClcClw5XDlcOWdvdG8gbmV4dFwKXDlcOWVuZFwKXApcOVw5LS0gY29uZmlndXJlIHJ1YmJlcmJhbmQgc3RyZXRjaCB0b29sXApcOVw5cmI6c2V0X3N0cmVjaF9hbmRfcGl0Y2ggKDEsIHJhdGlvKSAtLSBubyBvdmVyYWxsIHN0cmV0Y2hpbmcsIGJ1dCBwaXRjaCBzaGlmdGluZ1wKXDlcOS0tcmI6c2V0X21hcHBpbmcgKGJlYXRfbWFwKSAtLSBhcHBseSBiZWF0LW1hcCBmcm9tL3RvXApcClw5XDktLSBub3cgc3RyZXRjaCB0aGUgcmVnaW9uXApcOVw5bG9jYWwgbmFyID0gcmI6cHJvY2VzcyAocmJfcHJvZ3Jlc3MpXApcClw5XDlpZiBwZGlhbG9nOmNhbmNlbGVkICgpIHRoZW4gZ290byBvdXQgZW5kXApcClw5XDktLSBoaWRlIG1vZGFsIHByb2dyZXNzIGRpYWxvZyBhbmQgZGVzdHJveSBpdFwKXDlcOXBkaWFsb2c6ZG9uZSAoKVwKXDlcOXBkaWFsb2cgPSBuaWxcClwKXDlcOS0tIHJlcGxhY2UgcmVnaW9uXApcOVw5aWYgbm90IG5hcjppc25pbCAoKSB0aGVuXApcOVw5XDlwcmludCAoXCJuZXcgYXVkaW8gcmVnaW9uOiBcIiwgbmFyOm5hbWUgKCksIG5hcjpsZW5ndGggKCkpXApcOVw5XDlsb2NhbCB0cmFjayA9IGZpbmRfdHJhY2tfZm9yX3JlZ2lvbiAocjp0b19zdGF0ZWZ1bCAoKTppZCAoKSlcClw5XDlcOWxvY2FsIHBsYXlsaXN0ID0gdHJhY2s6cGxheWxpc3QgKClcClw5XDlcOXBsYXlsaXN0OnRvX3N0YXRlZnVsICgpOmNsZWFyX2NoYW5nZXMgKCkgLS0gcHJlcGFyZSB1bmRvXApcOVw5XDlwbGF5bGlzdDpyZW1vdmVfcmVnaW9uIChyKVwKXDlcOVw5cGxheWxpc3Q6YWRkX3JlZ2lvbiAobmFyLCByOnBvc2l0aW9uICgpLCAxLCBmYWxzZSlcClw5XDlcOS0tIGNyZWF0ZSBhIGRpZmYgb2YgdGhlIHBlcmZvcm1lZCB3b3JrLCBhZGQgaXQgdG8gdGhlIHNlc3Npb24ncyB1bmRvIHN0YWNrXApcOVw5XDktLSBhbmQgY2hlY2sgaWYgaXQgaXMgbm90IGVtcHR5XApcOVw5XDlTZXNzaW9uOmFkZF9zdGF0ZWZ1bF9kaWZmX2NvbW1hbmQgKHBsYXlsaXN0OnRvX3N0YXRlZnVsZGVzdHJ1Y3RpYmxlICgpKVwKXDlcOWVuZFwKXApcOVw5OjpuZXh0OjpcClw5ZW5kXApcClw5OjpvdXQ6OlwKXApcOS0tIGFsbCBkb25lLCBjb21taXQgdGhlIGNvbWJpbmVkIFVuZG8gT3BlcmF0aW9uXApcOWlmIG5vdCBTZXNzaW9uOmFib3J0X2VtcHR5X3JldmVyc2libGVfY29tbWFuZCAoKSB0aGVuXApcOVw5U2Vzc2lvbjpjb21taXRfcmV2ZXJzaWJsZV9jb21tYW5kIChuaWwpXApcOWVuZFwKXApcClwKZW5kXAogICAgZW5kIGVuZFwKIiAgc2NyaXB0c1sxMF1bImMiXSA9IHRydWUgc2NyaXB0c1sxMF1bIm4iXSA9ICJQaXRjaCAtIEFkanVzdCBwaXRjaCBvZiBhdWRpbyBsb29wIGJ5IGtleSIgIHNjcmlwdHNbMTBdWyJhIl0gPSB7fSBzY3JpcHRzWzEwXVsiYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qdXN0aW4vLmNvbmZpZy9hcmRvdXI4L3NjcmlwdHMvbmV3a2V5Lmx1YSIgICBzY3JpcHRzWzEwXVsiZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcClwwXDBcMOVcMVwwXDBcMFwwXDJcM1wwXDBcMCxcMFwwXDAmXDBcMFwxJlwwgFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMVwwXDBcMFwwXDExXDBcMFww5VwxXDBcMFwxXDAwMTHXXDJcMFwwRlwwQFwwR0DAXDCBgFwwXDBkgFwwXDGAXDCAXDDBwFwwXDCdwFwwXDHGXDBBXDDHQMFcMVwwXDFcMFwxQYFcMVww5ICAXDFcMcFcMVww4lwwXDBcMFwzMIBcMYBMXDHCXDHBQVwyXDBkgYBcMVwwXDGAXDJMgcJcMWRBXDBcMVwzMFwwXDGARsFCXDCBXDFcM1wwwFwxXDBcMZ3BXDFcM2RBXDBcMUFBXDNcMIBcMVwwXDJdgYFcMoaBQ1wwjMFDXDOkgVwwXDHBXDFcNFwwXDRcMlwwXDBHQkRcM0yCxFw0ZIJcMFwxTMLEXDRkXDJcMVwxXDMwQFw3gM1cMcVcM0xDRVw2ZINcMFwxTIPFXDZkg1wwXDFiXDNcMFwwXDMwQFw1gEbDRVwwR1wzxlw2gUNcNlwwwYNcNlwwXDBcNFwwXDLdXDOEXDdcNsRFXDBcN8RGXDhcN1w0R1w4RsRFXDBHRMdcOEeEx1w4ZIOAXDKGw0JcMMzDx1w25FwzXDBcMaRDXDBcMERcM1wwXDCGXDNIXDCkQ4BcMCZcMIBcMFwzMFwwXDCAXDBcMlwwXDZpQlwwXDDqwvdcMTI3X1wwxVwzXDMwXDBcNYBGwkVcMEdcMsZcNIFCXDZcMMFCXDhcMFwwXDNcMFwy3Vwyg1w1XDbDRVwwXDfDRlw2XDdcM0dcNkbDRVwwR0PHXDZHg8dcNmSCgFwyhsJCXDDMwsdcNORcMlwwXDGkQlwwXDBEXDJcMFwwhlwySFwwpEKAXDAmXDCAXDBMgkhcNGSCXDBcMYzCSFw0XDFcM1w0XDCkgoBcMYxcMklcNaSCXDBcMYxCSVw1pIJcMFwxxsJCXDBcMFwzXDBcNeRCXDBcMcBcMlwwXDVcMYNcOVwwQFwzgFw1gYNcOVwwXDI5g1wzXDZMw8lcNMFcM1wKXDBkg4BcMWJcM1wwXDBcMzCAXDWAhsNCXDDBQ1wKXDBcMFw0gFw2pEOAXDGMg8pcNlwxxFwKXDCkg4BcMaJcM1wwXDBcMzDAXDCAgFwzgFw2wVwzXDExXDBdw1wzXDdcMzCAXDCAgFwzgFw2wUNcMTFcMF3DXDNcN1w4QFwzl4bDQlwwwcNcMTFcMFw2hEtcMKRDgFwxXDhATJhcMzBAXDExgFw4wEyZgVwzXDEzXDDAXDNcMFw2ncNcM1w3xkNNXDDHg81cN1wwXDRcMFw35ENcMFwxxlwzQVwwx8PNXDdcMFw0XDBcN+SDXDBcMVwxMlw0wlw3gURcMlwwJISAXDFcOFwwXDSZXDEyhMJcNyREXDBcMVw2xEJcMEaETFwwJERcMFwxXDZcNE5cMFw3xElcOEaETFwwgURcMTRcMCTEgFwxhlw0Tlwwh8RJXDnGhExcMFwxhVwxNFwwpMSAXDFcMzHAzlw5XDMwgFwwgFwwXDVcMFw5QVw1XDE1XDCdRFw1XApcNsVCXDBBRVwxNVwwgFw1XDBcOV2FhVwKJEVcMFwxXDbFQlwwQYVcMTVcMIBcNYBcOV2FhVwKJEVcMFwxhlwzQFwwh0NAXDfBg1wwXDCkg1wwXDHAXDNcMFw3XDHEXDBcMN1cM4RcN1w2XDRBXDBcN0RBXDhAXDSAXDeBhFwxXDAkhIBcMUHEXDFcMFwiXDRcMFwwXDMwgFwxgIxcNEJcOFwxRVwyXDCkhIBcMUBcNFwwXDmMhEJcOKREXDBcMVwzMFwwXDGAhsRCXDDBXDRcM1wwXDBcNYBcN91cNIVcOaREXDBcMYFEXDNcMMBcNIBcOJ3EXDRcOcZcNExcMFwzMUDMXDlcMzBAXDGAwVw0XDE2XDBcNoVLXDBBRVwxNlww3USFXDlcOMCEn1wzMIBcMYDBXDRcMTZcMFw2hUtcMEGFXDE2XDCGxVBcMMFFXDE2XDDdxIVcOVw4wISfy1w0gFwwXDExRVwxXDBcCkVRolwKxVGjRsVPXDBcCkVcNaRLRVw2XDBKXDVFpUpcNdOlSoXTpkpcNdSnSoXUqEpcNdWpSoXVqkqFwKtKRVasSsVWrUpFV65KxVevSkVYsErFWLFKRVmySsVZs0pFWrRKxVq1SkVbtkrFW7dKRVxcuErFXFy5SkVdukrFXbtKRV68SsVevUpFX75KxV+/SkVgwErFYMFKRWHCSsVhw0pFYsRKxWLFSlw1Y1w5SoXjxlwKRYWkXAqFhMfrRIBcMFw2xUVcMFw3XDVkXApBRSRcMIBcNYBcOSSFgFwxTMVHXApkhVwwXDGLRVw2XDCKhVKKisVSpopFU6eKxVOoikVUqYrFVKqKRVWrisVVgYpcNdasioXWrYpcNdeuioXXr4pcNdiwioXYsYpcNdmyioXZs4pcNdq0ioXatYpcNdu2ioXbt4pcNdy4ioXcuYpcNd26ioXdu4pcNd68ioXevYpcNd++ioXfv4pcNeDAioXgwYpcNeHCioXhw4pcNeLEioXixWJcNVwwXDBcMzDAXDKAx8XRXApcMzFcMONcMTFcMzBcMFwygMzFyVw4QcZcMVww5IWAXDHiXDVcMFwwXDMwwFwwgMbFQlwwXDGGJFww5EVcMFwxJlwwgFwwYlw1XDBcMFwzMMBcMjaAx8XRXApcMzFcMONcMTFcMzBcMFwyNoDGXDVBXDDHRcFcMTFcMFw2gFw3QYZcMVww5IWAXDFcNFw2XDBcMOJcNVwwXDBcMzBcMFwygExcNsJcMTHBxiRcMGSGgFwxjIbCXDExpEZcMFwxjMbJXDEyXDFcNyVcMKSGgFwxXDBcNlwwXDEzRsZCXDCBRiVcMMBcNlwwXDEyZEaAXDFLRlw2XDBKXDZFpUpcNtOlSobTpkpcNtSnSobUqEpcNtWpSobVqkqGwKtKRlasSsZWrUpGV65KxlevSkZYsErGWLFKRlmySsZZs0pGWrRKxlq1SkZbtkrGW7dKRlxcuErGXFy5SkZdukrGXbtKRl68SsZevUpGX75Kxl+/SkZgwErGYMFKRmHCSsZhw0pGYsRKxmLFh1w2hlwxMqJcNlwwXDBcMzBcMFwxgMbGQlwwXDGHJVwwQFw3XDBcMTPkRoBcMVwzMIBcMIDGxkJcMFwxxyVcMORGXDBcMceGXDZcMTFcOMCGo8tGXDZcMMpcNkSlylw2xaXKXDbFpspcNtOnyobTqMqG06nKXDbUqsqG1KvKXDZVrMpcNlWtyoZVrsqGQK/KhkCwykZWscrGVrLKxlazykZXtMpGVrXKxla2ysZWt8pGV7jKXDZEucpcNkW6ylw2RbvKXDZTvMqGU73KhlO+ylw2VL/KhlTAylw2VcHKXDZVwsqGVcPKhkDEyoZAxVw4wFw2zGJcNVwwXDBcMzDAXAqAx8XRXApfXDDjXDExXDMwXDBcCoDHxdFcClw4wIXMxkVmXDDHxVw1XDExXDjAhaPLRVw2XDDKXDVEpcpcNcWlylw1xabKXDXTp8qF06jKhdOpylw11KrKhdSrylw1VazKXDVVrcqFVa7KhUCvyoVAsMpFVrHKxVayysVWs8pFV7TKRVa1ysVWtsrFVrfKRVe4ylw1RLnKXDVFuspcNUW7ylw1U7zKhVO9yoVTvspcNVS/yoVUwMpcNVXBylw1VcLKhVXDyoVAxMqFQMVcOMBcNcxiRVwwXDBcMzDAXDCAxsVCXDBcMYYmXDDkRVwwXDEmXDCAXDDGhUtcMMzFyVwxMUHGJlww5IWAXDFcNsZCXDBBXDYnXDCAXDaAXDExJEaAXDFcOMCFzlw2xkJcMEGGJ1wwgFw2gFwxMV2GhlwxMiRGXDBcMSxcNlwwXDBcOFwwhs9cNlw2TFwwXDMxQExcMTJcMzBANIAsRlwwXDBcOFwwXDbQXDEyRuhcNIGGKFwwzMboXDZBXDcpXDDkhoBcMZ3GXDZcMTPBRilcMCSGXDBcMkBcMlwwXDEyXDaGaVwwQcYpXDCAXDaAXDQkRoBcMVwxMlw2alw0gFw2gFw0wUYqXDBcNsdRXDCdXDZcN1wxMyRGgFwxXDbGZ1wwRkZnXDCGxlFcMCRGgFwxLIZcMFwwXDhcMFw21SzGXDBcMFw4XDCG1Vw2XDZrXDBGhmlcMIBcNlwwXDEyZEZcMFwxRsZqXDCAXDZcMFwxMmSGXDBcMYaGaVwwwUYrXDBcMFw3XDBcMTJBhytcMIBcN4BcMTLdhodcMTOkRlwwXDGGhmlcMMZcNlFcMFwwXDeAXDEy5Fw2XDBcMaRGXDBcMIaGQ1wwjMZDXDEzpIZcMFwxxlw2QFwwx8brXDEzx1w27FwxM1wxRyxcMEaHbFwwTMfsXDE0ZFw3XDBcMeSGXDBcMFw2h2xcMFwxMlw3bVwxNIFHLVwwJEeAXDFcN0dEXDEzXDEyh0RcMTQkh1wwXDFcMTKHbVwxNCRcN1wxXDFcMzBAIIBcMTJIxVwxNSSIXDBcMUzIbVwxNmSIXDBcMWJIXDBcMF7IXDMwgEZcOEBcMEfI61wxNkdcOO5cMTaAXDhcMFwxNsNcOFwwXDBkiIBcMYxI7lwxNqSIXDBcMYyIblwxN6SIXDBcMctcOFwwXDBcMckuXDBGyUVcMEdcOe9cMTiBSS9cMMNcOYBcMGSJgFwxrFw5XDFcMFw4gFw536xJXDFcMFw4gInfjFw58FwxM1wxMkruXDE2JIpcMFwxQcouXDCGim9cMKRJgFwyjEnwXDEzpIlcMFwxjIlwXDE5pIlcMFwxjMlwXDE5XDHKLlwwpImAXDHByS5cMFwxMoptXDE5JFwKXDFcMVwzMMBcNIBcNlwxMWxcMFw3XDExcVwyMlw3S3FcMjJHi/FcMjGGi2xcMIzLbFwyM6RcMTFcMFwxJItcMFwwylw4XDExXDIyIFwwid1cMzDAXDGATlwxMVw5XDIyUsvxXDIyjktcMTFcMjLOS1wxMVwyMlwxOIzTXDIyzVwxMYxcMjPKyFwxMVwyM81cOcVcMTlcMFw5XDBcMjIpSlwwXDCqSvpcMTI3XDEyXAryXDEzJEpcMFwxXDEySvJcMTgkilwwXDFcIkpcMFwwXshcMTSAIIDAXDE5XDMwgFwwgFwxMoryXDE4JEpcMFwxXlw4XDEzgFwxMsryXDE2gVwKXDVcMMBcCoBcMTIkSlwwXDJcMTJcCvNcMTaGym9cMCSKgFwxTEryXDE4ZIpcMFwxYkpcMFwwXshcCoBMivJcMThkSlwwXDFEXDlcMFwwTMptXDIwZIpcMFwxYkpcMFwwXohcOIBGimlcMIFKM1wwzIpIXDIw5IpcMFwxXDEyi3NcMjAkXDExXDBcMWRKXDBcMEaKalwwjMrzXDE1pIpcMFwxjFwKdFwyMaRcClwwXDFkilwwXDCMSvRcMjCkilwwXDHMynNcMjHkilwwXDHMivRcMjHkSlwwXDHMynRcMjFAXDExgFwxNeRKgFwxzFwKdVwyMUBcMTFcMFwyMIxL9VwxNaSLXDBcMcFcMTFcNVwwXDNcMTJcMFww5EpcMFwzxopsXDDMivVcMjFMy3VcMjFkXDExXDBcMeRKXDBcMF7I/1wxMjcpR1wwXDCqx95cMTI3XDaHbFwwXDEyXDd2XDE0JIdcMFwxXCJHXDBcMFwzMMBcMIBcNodsXDBcMTJHdlwxNIRcN1wwXDAkR4BcMSZcMIBcMNpcMFwwXDBcNFw3QVJET1VSXDRcMjJ1c2VyX2NvbmZpZ19kaXJlY3RvcnlcMTlcOFwwXDBcMFwwXDBcMFwwXDRcOS9rZXkudHh0XDRcM2lvXDRcNW9wZW5cNFwyclw0XDExTm8ga2V5IHNldFw0XDVyZWFkXDRcMyphXDRcNmNsb3NlXDRcNnByaW50XDIwLVdhcm5pbmc6IENvdWxkIG5vdCBvcGVuIGZpbGUgZm9yIHJlYWRpbmcgYXQgXDRcMjlTZXQgdG8gY3VycmVudCBwcm9qZWN0IGtleTogXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw4R2V0IEtleVwyMFJUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb24uIFRoZSAgcHJvamVjdCBrZXkgaXMgY3VycmVudGx5IHNldCB0byBcNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVwyMEtQbGVhc2Ugc2VsZWN0IGV4YWN0bHkgMSBhdWRpbyByZWdpb24uIFRoZSBwcm9qZWN0IGtleSBpcyBjdXJyZW50bHkgc2V0IHRvIFw0XDVuYW1lXDRcN3NvdXJjZVw0XDE0dG9fZmlsZXNvdXJjZVw0XDVwYXRoXDRcMlwiXDRcNm1hdGNoXDRcMTlrZXlfKFtBLUddWyNiXT9tPylcNFwxNUV4dHJhY3RlZCBrZXk6XDRcNWZpbmRcNFwzbSRcNFw3IG1pbm9yXDRcNyBtYWpvclw0XDVka2V5XDRcMjVFeHRyYWN0ZWQga2V5IGZyb20gZmlsZTpcNFw2Y25hbWVcMVwxXDRcMTJmaXJzdHJlc3VsdFw0XDE1S2V5IG5vdCBmb3VuZC5cNFw1a2V5IFw0XDNvc1w0XDhleGVjdXRlXDRcNnBvcGVuXDRcN3N0cmluZ1w0J1RoZSBrZXkgb2YgdGhlIHNvbmcgaXMgKFtBLUcjXSspICglYSspXDQoVGhlIGtleSBvZiB0aGUgc29uZyBpcyAoW0EtR2IjXSspICglYSspXDRcNm1pbm9yXDRcMm1cNFw2S2V5OiBcNFw4U2NhbGU6IFw0XDlzZW50ZW5jZVw0XDI0RXN0aW1hdGVkIGtleSBvZiBsb29wOiBcMjBTLiBDaG9vc2UgVGFyZ2V0IEtleSAoSGl0IENhbmNlbCBvciBzZWxlY3QgRG8gbm90IGNoYW5nZSBrZXkgdG8gbm90IGNoYW5nZSB0aGUga2V5KVw0XDIgXDRcNnNjYWxlXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcMTF0YXJnZXRfa2V5XDRcNnRpdGxlXDRcN3ZhbHVlc1w0XDJDXDRcM0MjXDE5XDJcMFwwXDBcMFwwXDBcMFw0XDNEYlwxOVwzXDBcMFwwXDBcMFwwXDBcNFwyRFwxOVw0XDBcMFwwXDBcMFwwXDBcNFwzRCNcMTlcNVwwXDBcMFwwXDBcMFwwXDRcM0ViXDE5XDZcMFwwXDBcMFwwXDBcMFw0XDJFXDE5XDdcMFwwXDBcMFwwXDBcMFw0XDJGXDRcM0YjXDE5XDlcMFwwXDBcMFwwXDBcMFw0XDNHYlwxOVwKXDBcMFwwXDBcMFwwXDBcNFwyR1wxOVwxMVwwXDBcMFwwXDBcMFwwXDRcM0cjXDE5XDEyXDBcMFwwXDBcMFwwXDBcNFwzQWJcMTlcMTNcMFwwXDBcMFwwXDBcMFw0XDJBXDE5XDE0XDBcMFwwXDBcMFwwXDBcNFwzQSNcMTlcMTVcMFwwXDBcMFwwXDBcMFw0XDNCYlwxOVwxNlwwXDBcMFwwXDBcMFwwXDRcMkJcMTlcMTdcMFwwXDBcMFwwXDBcMFw0XDNBbVwxOVwxOFwwXDBcMFwwXDBcMFwwXDRcNEEjbVwxOVwxOVwwXDBcMFwwXDBcMFwwXDRcNEJibVwxOVwyMFwwXDBcMFwwXDBcMFwwXDRcM0JtXDE5XDIxXDBcMFwwXDBcMFwwXDBcNFwzQ21cMTlcMjJcMFwwXDBcMFwwXDBcMFw0XDRDI21cMTlcMjNcMFwwXDBcMFwwXDBcMFw0XDREYm1cMTlcMjRcMFwwXDBcMFwwXDBcMFw0XDNEbVwxOVwyNVwwXDBcMFwwXDBcMFwwXDRcNEQjbVwxOVwyNlwwXDBcMFwwXDBcMFwwXDRcNEVibVwxOVwyN1wwXDBcMFwwXDBcMFwwXDRcM0VtXDE5XDI4XDBcMFwwXDBcMFwwXDBcNFwzRm1cMTlcMjlcMFwwXDBcMFwwXDBcMFw0XDRGI21cMTlcMzBcMFwwXDBcMFwwXDBcMFw0XDRHYm1cMTlcMzFcMFwwXDBcMFwwXDBcMFw0XDNHbVwxOSBcMFwwXDBcMFwwXDBcMFw0XDRHI21cMTkhXDBcMFwwXDBcMFwwXDBcNFw0QWJtXDE5XCJcMFwwXDBcMFwwXDBcMFwxOSNcMFwwXDBcMFwwXDBcMFw0XDE4RG8gbm90IGNoYW5nZSBrZXlcMTkkXDBcMFwwXDBcMFwwXDBcNFw4ZGVmYXVsdFw0XDdEaWFsb2dcNFwxOENob29zZSBUYXJnZXQgS2V5XDIwL05vIGtleSBpcyBzZXQgaW4gdGhlIGZpbGUuIEV4aXRpbmcgdGhlIHNjcmlwdC5cNFwzKmxcNFwxMl4oJWEjP2I/bT8pXDRcMTVFeHRyYWN0ZWQgS2V5Olw0XDIwTWF0Y2hlZCBLZXkgTnVtYmVyOlwwMjA3RXJyb3I6IFRoZSBleHRyYWN0ZWQga2V5IGRvZXMgbm90IG1hdGNoIGFueSBrbm93biBrZXkuXDRcMTZrZXlfdG9fc2VtaXRvbmVcNFwxNnNlbGVjdGVkX251bWJlclw0XDI3RGlhbG9nIGNhbmNlbGVkIG9yIGNsb3NlZC5cNFwxNF5bQS1HXVsjYl0/bT9cNFwKS2V5IG9ubHk6XDRcMTNkZXRlY3RlZF9rZXlcNFwxM2RldGVjdGVkIGlzIFw0XDE1c2VtaXRvbmVfc2hpZnRcNFwKZm9ybWF0S2V5XDRcNWdzdWJcNFw1a2V5X1w0XDZtYXRjaFw0XDE1KFtBLUddWyNiXT9tPylcNFwxXDRcNnByaW50XDQlRmlsZW5hbWUgYWZ0ZXIgcmVtb3Zpbmcga2V5IHBhdHRlcm46XDRcOXNldF9uYW1lXDRcNi1rZXlfXDRcMjJmaW5kX3RyYWNrX2Zvcl9yZWdpb25cNFwxNmNhbGN1bGF0ZV9yYXRpb1w0XDIwc2VtaXRvbmVfZGlmZmVyZW5jZVw0XDE2Rm9yIGEgc2hpZnQgb2YgXDRcMjcgc2VtaXRvbmVzLCB0aGUgcmF0aW8gaXM6IFw0XDdMdWFBUElcNFw1VmFtcFw0J2xpYmFyZG91cnZhbXBwbHVnaW5zOnFtLWJhcmJlYXR0cmFja2VyXDRcOFNlc3Npb25cNFwyMG5vbWluYWxfc2FtcGxlX3JhdGVcNFwyNWJlZ2luX3JldmVyc2libGVfY29tbWFuZFw0XDE5UnViYmVyYmFuZCBSZWdpb25zXDRcNWl0ZXJcNFw2aXNuaWxcNFwxMVJ1YmJlcmJhbmRcNFw5cmVhZGFibGVcNFwxNnJlYWRhYmxlX2xlbmd0aFwxOVwwXDBcMFwwXDBcMFwwXDBcNFwxNVByb2dyZXNzV2luZG93XDRcMTZUcmFuc3Bvc2UgQXVkaW9cNFwxNHZhbXBfY2FsbGJhY2tcNFwxMnJiX3Byb2dyZXNzXDRcOGFuYWx5emVcNFw3cGx1Z2luXDRcMjFnZXRSZW1haW5pbmdGZWF0dXJlc1w0XDNhdFw0XDlSZWFsVGltZVw0XDE1cmVhbFRpbWUyRnJhbWVcNFwKdGltZXN0YW1wXDE5XDJcMFwwXDBcMFwwXDBcMFw0XDZyZXNldFw0XDljYW5jZWxlZFw0XDVkb25lXDRcMjFzZXRfc3RyZWNoX2FuZF9waXRjaFw0XDhwcm9jZXNzXDRcMTluZXcgYXVkaW8gcmVnaW9uOiBcNFw3bGVuZ3RoXDRcMTJ0b19zdGF0ZWZ1bFw0XDNpZFw0XDlwbGF5bGlzdFw0XDE0Y2xlYXJfY2hhbmdlc1w0XDE0cmVtb3ZlX3JlZ2lvblw0XDExYWRkX3JlZ2lvblw0XDlwb3NpdGlvblw0XDI2YWRkX3N0YXRlZnVsX2RpZmZfY29tbWFuZFw0XDI0dG9fc3RhdGVmdWxkZXN0cnVjdGlibGVcNFwzMWFib3J0X2VtcHR5X3JldmVyc2libGVfY29tbWFuZFw0XDI2Y29tbWl0X3JldmVyc2libGVfY29tbWFuZFwxXDBcMFwwXDBcMFw2XDBcMFwwXDBcMjFcMVwwXDAqXDFcMFwwXDJcMFwwMDg2XDBcMFwwhkBAXDCHXDBcMFwxXDiAXDCAhkBAXDCHQFwwXDFcOIBcMIGGXDBAXDBfwEBcMVwzMIBcMICGgEBcMFwzMcBAXDFcMzDAXDCAhlwwQVwwwUBcMVwwpEBcMFwxJlwwgFwwhoBAXDDGXDBAXDCOwFwwXDFcOIBcMIOGgEFcMCCAgINcMzBcMFwygIZcMEFcMMFcMFwyXDBcNoFBXDBBQVwyXDCAXDGAXDDBgVwyXDDdwIFcMaRAXDBcMVwzMFwwXDWAhoBBXDAgwEFcMVwzMMBcMoCGXDBBXDDBwFwyXDBcNlwxQ1wwXDdBQ1wyRoFBXDAkgVwwXDFBQVwyXDCAXDGAXDDBgVwyXDDdwIFcMaRAXDBcMVwzMEBcMYCGXDBBXDDBgFwzXDBcMFwxgFwwQYFcMlww3UCBXDGkQFwwXDEmXDCAXDBcMTVcMFwwXDBcNFwxOGRldGVjdGVkX3NlbWl0b25lXDRcMTZrZXlfdG9fc2VtaXRvbmVcNFwxNnRhcmdldF9zZW1pdG9uZVwwXDRcNnByaW50XDQnSW52YWxpZCBrZXkuIFBsZWFzZSBlbnRlciBhIHZhbGlkIGtleS5cNFwyMHNlbWl0b25lX2RpZmZlcmVuY2VcMTlcMFwwXDBcMFwwXDBcMFwwXDRcN0dvIHVwIFw0XDIzIHNlbWl0b25lKHMpIHRvIHJlYWNoIFw0XDIuXDRcOUdvIGRvd24gXDRcNW1hdGhcNFw0YWJzXDQgVGhlIGRldGVjdGVkIGtleSBpcyBhbHJlYWR5IGluIFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAuXDFcMFwwPFwxXDBcMFwxXDBcNlwyOFwwXDBcMEBcMFwwXDCMXDDAXDBcMUFcMFwwpICAXDGiXDBcMFwwXDMwQFwxgIyAwFwwXDHBXDBcMEFcMVwxXDCkgFwwXDJAXDBcMFwxXDMwQFwygIxcMMBcMFwxQVwxXDCkgIBcMaJcMFwwXDBcMzBcMFwxgIyAwFwwXDGBXDFcMEHBXDFcMKSAXDBcMkBcMFwwXDGGXDBCXDDFXDCAXDCkgFwwXDFcMFwwXDBcMWZcMFwwXDEmXDCAXDBcOVwwXDBcMFw0XDZtYXRjaFw0XDdNYWpvciRcNFw1Z3N1Ylw0XDggTWFqb3IkXDRcMVw0XDdtaW5vciRcNFw4IG1pbm9yJFw0XDJtXDRcCmZvcm1hdEtleVwyXDBcMFwwXDBcMFwxXDEzXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMEtcMVwwXDBUXDFcMFwwXDFcMFwKXDI0XDBcMFwwRlwwQFwwTEDAXDBkgFwwXDFMgMBcMGRcMFwxXDFcMzDAXDKATMFAXDJkgVwwXDGMXDHBXDKkgVwwXDHMQUFcM0BcMlwwXDDkgYBcMcyBwVwz5IFcMFwx4kFcMFwwXDMwXDBcMIBmXDFcMFwxaUBcMFww6kD8XDEyN0bAQVwwgVwwXDJcMGRAXDBcMSZcMIBcMFw5XDBcMFwwXDRcOFNlc3Npb25cNFwxMWdldF90cmFja3NcNFw1aXRlclw0XDl0b190cmFja1w0XDlwbGF5bGlzdFw0XDEzcmVnaW9uX2J5X2lkXDRcNmlzbmlsXDRcN2Fzc2VydFwxOVwwXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwV1wxXDBcMFtcMVwwXDBcMVwwXDJcNFwwXDBcMFJcMEBcMFFAgIBmXDBcMFwxJlwwgFwwXDJcMFwwXDBcMTlcMTJcMFwwXDBcMFwwXDBcMFwxOVwyXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDCWXDFcMFwwmFwxXDBcMFwyXDBcNlw4XDBcMFwwhVwwXDBcMIxcMEBcMVw1XDGAXDBcMThcMYFcMEFBXDBcMKVcMFwwXDKmXDBcMFwwJlwwgFwwXDJcMFwwXDBcNFw5cHJvZ3Jlc3NcNFwKQW5hbHl6aW5nXDJcMFwwXDBcMSVcMVwiXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMJlcMVwwXDCbXDFcMFwwXDJcMFw2XDhcMFwwXDCFXDBcMFwwjFwwQFwxXDVcMYBcMFwxOFwxgVwwQUFcMFwwpVwwXDBcMqZcMFwwXDAmXDCAXDBcMlwwXDBcMFw0XDlwcm9ncmVzc1w0XDEyVHJhbnNwb3NpbmdcMlwwXDBcMFwxJVwxXCJcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgIHNjcmlwdHNbMTFdID0ge30gc2NyaXB0c1sxMV1bInMiXSA9ICJhcmRvdXIge1wKIFtcInR5cGVcIl0gPSBcIkVkaXRvckFjdGlvblwiLFwKIG5hbWUgPSBcIlNlc3Npb24gUGxheWVyIC0gQ2hhbmdlIEluc3RydW1lbnQgUGx1Z2luIGZvciBTZXNzaW9uIFBsYXllclwiLFwKIGF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKZGVzY3JpcHRpb24gPSBbW1wKUmVwbGFjZSBJbnN0cnVtZW50IFBsdWdpbiBvbiBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2tcCl1dXAp9XApcCmZ1bmN0aW9uIGZhY3RvcnkgKCkgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIC4uLilcClwKIGxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcCiAgLS0gQ2hlY2sgaWYgbm8gdHJhY2sgaXMgc2VsZWN0ZWRcCiAgaWYgc2VsOmVtcHR5KCkgb3Igc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTplbXB0eSgpIHRoZW5cCiAgICBMdWFEaWFsb2cuTWVzc2FnZShcIkVycm9yXCIsIFwiTm8gdHJhY2sgc2VsZWN0ZWQuIFBsZWFzZSBzZWxlY3QgYSB0cmFjayB0byBjb250aW51ZS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5PSyk6cnVuKClcCiAgICByZXR1cm5cCiAgZW5kXApcCiAgLS0gQ2hlY2sgaWYgbW9yZSB0aGFuIG9uZSB0cmFjayBpcyBzZWxlY3RlZFwKICBpZiBzZWwudHJhY2tzOnJvdXRlbGlzdCgpOnNpemUoKSA+IDEgdGhlblwKICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJNb3JlIHRoYW4gb25lIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IG9ubHkgb25lIHRyYWNrIHRvIGNvbnRpbnVlLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLk9LKTpydW4oKVwKICAgIHJldHVyblwKICBlbmRcClwKXAogICAgIG1pZGlUcmFja0ZvdW5kID0gZmFsc2UgLS0gRmxhZyB0byBjaGVjayBpZiBhbnkgTUlESSB0cmFjayBpcyBzZWxlY3RlZFwKXAogICAgLS0gZm9yIGVhY2ggc2VsZWN0ZWQgdHJhY2svYnVzXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cCiAgICAgIGlmIG5vdCByOnRvX3RyYWNrKCk6aXNuaWwoKSBhbmQgbm90IHI6dG9fdHJhY2soKTp0b19taWRpX3RyYWNrKCk6aXNuaWwoKSB0aGVuXAogICAgICAgbWlkaVRyYWNrRm91bmQgPSB0cnVlXAogICAgICAgcHJpbnQoXCJpcyBhIG1pZGkgdHJhY2tcIilcCiAgICAgIGVuZFwKICAgIGVuZFwKXAogICAgICAgaWYgIG1pZGlUcmFja0ZvdW5kID09IGZhbHNlIHRoZW5cCiAgICAgIEx1YURpYWxvZy5NZXNzYWdlKFwiRXJyb3JcIiwgXCJObyBNSURJIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgTUlESSB0cmFjay5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKICAgIGVuZFwKXAogICAtLSBmb3IgciBpbiBTZXNzaW9uOmdldF9yb3V0ZXMoKTppdGVyKCkgZG8gLS0gZm9yIGV2ZXJ5IHRyYWNrL2J1c1wKXAogICAgZm9yIHIgaW4gc2VsLnRyYWNrczpyb3V0ZWxpc3QoKTppdGVyKCkgZG9cClwKICAgIGxvY2FsIHByb2MgPSByOm50aF9wbHVnaW4oMCkgLS0gZm9yIGV2ZXJ5IHBsdWdpblwKICAgIGlmIHByb2M6aXNuaWwoKSB0aGVuIGJyZWFrIGVuZFwKICAgIGxvY2FsIHBpID0gcHJvYzp0b19pbnNlcnQoKVwKICAgIGxvY2FsIHBsdWdpbl9uYW1lID0gcGk6cGx1Z2luKDApOm5hbWUoKVwKICAgIGlmIHBsdWdpbl9uYW1lID09IFwiQXJwZWdnaWF0b3JcIiB0aGVuXApcCiAgICAgIHByaW50KFwidHJ1ZVwiKVwKICAgICAgZWxzZVwKICAgICAgICBwcmludCAocGx1Z2luX25hbWUpXAogICAgICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIlRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgbm90IGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2soTm8gQXJwZWdnaWF0b3IgZm91bmQgb3IgQXJwZWdnaWF0b3IgaW4gd3Jvbmcgb3JkZXIpLlwiLCBMdWFEaWFsb2cuTWVzc2FnZVR5cGUuRXJyb3IsIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKTpydW4oKVwKICAgICAgcmV0dXJuXApcCiAgICBlbmRcClwKICAgICAgIGxvY2FsIHByb2MyID0gcjpudGhfcGx1Z2luKDEpIC0tIGZvciBldmVyeSBwbHVnaW5cCiAgICBpZiBwcm9jMjppc25pbCgpIHRoZW4gYnJlYWsgZW5kXAogICAgbG9jYWwgcGkyID0gcHJvYzI6dG9faW5zZXJ0KClcCiAgICBsb2NhbCBwbHVnaW5fbmFtZTIgPSBwaTI6cGx1Z2luKDEpOm5hbWUoKVwKICAgIGlmIHBsdWdpbl9uYW1lMiA9PSBcIk1JREkgU3RydW1cIiB0aGVuXAogICAgICBwcmludChcInRydWVcIilcClwKICAgICAgZWxzZVwKICAgICAgTHVhRGlhbG9nLk1lc3NhZ2UoXCJFcnJvclwiLCBcIlRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdHJhY2sgaXMgbm90IGEgU2Vzc2lvbiBQbGF5ZXIgdHJhY2soTm8gTUlESSBTdHJ1bSBmb3VuZCBvciBNSURJIFN0cnVtIG5vdCBpbiBjb3JyZWN0IG9yZGVyKS5cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkVycm9yLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSk6cnVuKClcCiAgICAgIHJldHVyblwKXApcClwKICAgIGVuZFwKXAogZW5kXApcClwKXApsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAge1wKICAgdHlwZSA9IFwiZHJvcGRvd25cIiwga2V5ID0gXCJkcm9wZG93blwiLCB0aXRsZSA9IFwiQ2hvb3NlIEluc3RydW1lbnQgUGx1Z2luXCIsIHZhbHVlcyA9XAogICB7XAogICAgW1wiQ2hvb3NlIEluc3RydW1lbnQgUGx1Z2luXCJdID0gMSwgW1wiQUNFIEZsdWlkIFN5bnRoXCJdID0gMixcCiAgICBbXCJaeW5hZGRzdWJmeFwiXSA9IDMsXAogICAgW1wiU3VyZ2UgWFRcIl0gPSA0XApcCiAgIH0sXAogICBkZWZhdWx0ID0gXCJDaG9vc2UgSW5zdHJ1bWVudCBQbHVnaW5cIlwKICB9XAogfVwKXAogbG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBJbnN0cnVtZW50IFBsdWdpblwiLCBkaWFsb2dfb3B0aW9ucylcCiBsb2NhbCBydiA9IG9kOnJ1bigpXApcCiBsb2NhbCBwbHVnaW5fbmFtZSA9IG5pbFwKXAppZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAyIHRoZW5cClw5XDlwcmludChcIllvdSBDaG9zZSBBQ0UgRmx1aWQgU3ludGhcIilcClw5XDlwbHVnaW5fbmFtZSA9IFwiQUNFIEZsdWlkIFN5bnRoXCJcClw5XDlwcmVzZXRfbmFtZSA9IFwiZ21cIlwKXDlcOXRyYWNrX25hbWUgPSBcIkFDRSBGbHVpZCBTeW50aCBTZXNzaW9uXCJcClwKXDkgbmV3ID0gQVJET1VSLkx1YUFQSS5uZXdfcGx1Z2luKFNlc3Npb24sIHBsdWdpbl9uYW1lLCBBUkRPVVIuUGx1Z2luVHlwZS5MVjIsIFwiXCIpXApcOSBlbmRcClwKXApcClwKXAogXDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cClw5XDlwcmludChcIllvdSBDaG9zZSBaeW5BZGRTdWJGWFwiKVwKXDlcOXBsdWdpbl9uYW1lID0gXCJaeW5BZGRTdWJGWFwiXApcOVw5dHJhY2tfbmFtZSAgPSBcIlp5bkFkZFN1YkZYIFNlc3Npb25cIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLkxWMiwgXCJcIilcClw5IGVuZFwKXApcCiBcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IDQgdGhlblwKXDlcOXByaW50KFwiWW91IENob3NlIFN1cmdlIFhUXCIpXApcClw5XDlwbHVnaW5fbmFtZSA9IFwiU3VyZ2UgWFRcIlwKXDlcOXRyYWNrX25hbWUgPSBcIlN1cmdlIFhUIFNlc3Npb25cIlwKXApcOSBuZXcgPSBBUkRPVVIuTHVhQVBJLm5ld19wbHVnaW4oU2Vzc2lvbiwgcGx1Z2luX25hbWUsIEFSRE9VUi5QbHVnaW5UeXBlLlZTVDMsIFwiXCIpXApcOSBlbmRcClwKXApsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbiAoKVwKaWYgbm90IHNlbDplbXB0eSAoKSBhbmQgbm90IHNlbC50cmFja3M6cm91dGVsaXN0ICgpOmVtcHR5ICgpICB0aGVuXAogIC0tIGZvciBlYWNoIHNlbGVjdGVkIHRyYWNrXAogIGZvciByIGluIHNlbC50cmFja3M6cm91dGVsaXN0ICgpOml0ZXIgKCkgZG9cCiAgICBpZiBub3Qgcjp0b190cmFjayAoKTppc25pbCAoKSB0aGVuXAogICAgb2xkID0gcjpudGhfcGx1Z2luKDIpXAogICAgLS0gIGFzc2VydCAobm90IG5ldzppc25pbCgpKVwKICAgICAgcjpyZXBsYWNlX3Byb2Nlc3NvciAob2xkLCBuZXcsIG5pbClcCiAgICAgICAgcjpzZXRfbmFtZSh0cmFja19uYW1lLCBuaWwpXApcCiBpZiBwbHVnaW5fbmFtZSA9PSBcIkFDRSBGbHVpZCBTeW50aFwiIHRoZW5cClwKXApsb2NhbCBwcm9jID0gU2Vzc2lvbjpyb3V0ZV9ieV9uYW1lKHRyYWNrX25hbWUpOnRvX3RyYWNrKCk6bnRoX3BsdWdpbigyKTp0b19pbnNlcnQoKTpwbHVnaW4oMilcClwKLS0gR2V0IHRoZSBwcmVzZXRcCmxvY2FsIHByZXNldCA9IHByb2M6cHJlc2V0X2J5X2xhYmVsKHByZXNldF9uYW1lKVwKXAotLSBMb2FkIHRoZSBwcmVzZXRcCnByb2M6bG9hZF9wcmVzZXQocHJlc2V0KVwKXAplbmRcClwKXAogICAgZW5kXAogIGVuZFwKZW5kXApcClwKZW5kIGVuZFwKXApcClwKXApcClwKIiAgc2NyaXB0c1sxMV1bImMiXSA9IHRydWUgc2NyaXB0c1sxMV1bIm4iXSA9ICJTZXNzaW9uIFBsYXllciAtIENoYW5nZSBJbnN0cnVtZW50IFBsdWdpbiBmb3IgU2Vzc2lvbiBQbGF5ZXIiICBzY3JpcHRzWzExXVsiYSJdID0ge30gc2NyaXB0c1sxMV1bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL3Nlc3Npb25wbGF5ZXIubHVhIiAgIHNjcmlwdHNbMTFdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwnlwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMJ5cMFwwXDBcMVwxXDE3QVwxXDBcMEZcMEBcMExAwFwwZIBcMFwxjIDAXDCkgFwwXDGiQFwwXDBcMzCAXDGAh8DAXDCMXDBBXDGkgFwwXDGMgEBcMaSAXDBcMaJcMFwwXDBcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxXDFcMlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4fBQlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYxAQ1wxpIBcMFwxIIBcMIdcMzBAXDOAhkBBXDCHgEFcMcHAXDFcMFwxwVwzXDBGQUFcMEdBwlwyR8HBXDKGQUFcMIeBQlwzh8FCXDOkgIBcMoxcMENcMaRAXDBcMSZcMIBcMFw4QESIh8DAXDCMXDBBXDGkgFwwXDGMgERcMaRcMFwxXDFcMzBAXDSAjMHEXDKkgVwwXDGMXDFFXDOkgVwwXDGiQVwwXDBcMzDAXDKAjMHEXDKkgVwwXDGMQUVcM6SBXDBcMYxcMUVcM6SBXDBcMaJBXDBcMFwzMMBcMIBcOIBFiIbBRVwwwVwxXDZcMKRBXDBcMalAXDBcMCrB+lwxMjeGXDBEXDBcMzFARFwxXDMwQFwzgIZAQVwwh4BBXDHBwFwxXDBcMUFcNlwwRkFBXDBHQcJcMkfBwVwyhkFBXDCHgUJcM4eBRlwzpICAXDKMXDBDXDGkQFwwXDEmXDCAXDCHwMBcMIxcMEFcMaSAXDBcMYyARFwxpFwwXDFcMVwzMIBcMTeAjMHGXDJcMVwyXDdcMKSBgFwxzFwxRVwz5IFcMFwx4kFcMFwwXDMwQFwxNoDMQUdcM+SBXDBcMVwxMoLHXDOBXDJcN1wwJIKAXDFcMTLCR1w0JIJcMFwxXDMxXDBIXDRcMzDAXDCARsJFXDCBQlw4XDBkQlwwXDFcMzBcMFw0gEbCRVwwgFwyXDBcNGRCXDBcMUZCQVwwR4LBXDSBwlwxXDDBglw4XDBcNkNBXDBcN0NCXDZcN8NBXDZGQ0FcMEeDwlw2R4PGXDZkgoBcMkxcMsNcNGRCXDBcMSZcMIBcMEzCxlwywYJcM1wwZIKAXDGMXDLFXDSkglwwXDGiQlwwXDBcMzBcMFw3gIxCx1w0pIJcMFwxzIJHXDVBg1wzXDDkgoBcMczCx1w15IJcMFwxXDMxwMhcNVwzMMBcMIBcNsNFXDBBQ1w4XDAkQ1wwXDFcMzBAXDOAXDZDQVwwXDeDQVw2QcNcMVwwgVwzXDlcMMZDQVwwx0PCXDfHw8FcN1w2REFcMFw3hEJcOFw3hEZcOCSDgFwyXDEyXDNDXDYkQ1wwXDEmXDCAXDCpQFwwXDAqge1cMTI3i1wwgFwwy0BcMVwwyoDJksqAyZPKQEqUXDExXDFcMVwwXAqBw5RcClwxy5VcCoHLllwKXDHMl8pcMFwxlcpAypirQIBcMMZAQVwwx4DMXDFcMUFcClwwQFwxXDBcMeSAgFwxXDEyXDHDXDEkgVwwXDFEXDFcMFwwXCJcMVwwXDBcMzDAXDSAh4FJXDJcMzFcMEtcM1wzMFwwXDSAhsFFXDDBwVwxMlwwpEFcMFwxQcFcClwwXDhATZpcOMBNm4ZBTlwwh4FOXDOHwU5cM8ZcMU9cMFwwXDKAXDJGQk5cMEdCz1w0R4LPXDSBwlwxNVwwpIGAXDJcOIBcMZxcIlwxXDBcMFwzMIBcNICHgUlcMlwzMYBLXDNcMzDAXDOAhsFFXDDBXDFcMTZcMKRBXDBcMUFBXDE2XDBcOIBQm4ZBTlwwh4FOXDOHwU5cM8ZcMU9cMFwwXDKAXDJGQk5cMEdCz1w0R4LPXDSBwlwxNVwwpIGAXDJcOIBcMZxcIlwxXDBcMFwzMIBcNICHgUlcMlwzMVwwTFwzXDMwwFwzgIbBRVwwwcFcMTZcMKRBXDBcMUHBXDExXDBcOFwwUZuGQU5cMIeBTlwzh8FOXDPGXDFPXDBcMFwygFwyRkJOXDBHQs9cNEdC0Vw0gcJcMTVcMKSBgFwyXDiAXDGchlwxQFwwjEFAXDOkgVwwXDHMgUBcM+SBXDBcMeJBXDBcMFwzMMBcMTOAx8FAXDPMXDHBXDPkgVwwXDHMgcBcM+SBXDBcMeJBXDBcMFwzMFwwXDEygMfBQFwzzFwxwVwz5IFcMFwxzIHEXDPkXDFcMVwxXDMwXDBcCoDMwkRcNeSCXDBcMcxcMsVcNeSCXDBcMeJCXDBcMFwzMIBcOIDMwkZcNUFcM1wxMVww5IKAXDFcOMBcMqPMwlFcNUaDUVwwhlwzTlwwxFwzXDBcMORCgFwyzFwyUlw1RoNNXDCEXDNcMFww5EJcMFwyXDMxwMpcMlwzMMBcNIDGXDJPXDDMQtJcNUaDTVww5IKAXDHMwsRcNeSCXDBcMczCxlw1QVwzXDExXDDkgoBcMcxCx1w15IJcMFwxzILHXDVBXDNcMTFcMOSCgFwxXDEyg9JcNYZcM01cMCSDgFwxTMPSXDXAXDNcMFw2ZEOAXDHpQVwwXDBqXDL1XDEyNyZcMIBcMExcMFwwXDBcNFw3RWRpdG9yXDRcMTRnZXRfc2VsZWN0aW9uXDRcNmVtcHR5XDRcN3RyYWNrc1w0XApyb3V0ZWxpc3RcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFw2RXJyb3JcMDIwNk5vIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdHJhY2sgdG8gY29udGludWUuXDRcMTJNZXNzYWdlVHlwZVw0XDExQnV0dG9uVHlwZVw0XDNPS1w0XDRydW5cNFw1c2l6ZVwxOVwxXDBcMFwwXDBcMFwwXDBcMjBITW9yZSB0aGFuIG9uZSB0cmFjayBzZWxlY3RlZC4gUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSB0cmFjayB0byBjb250aW51ZS5cNFwxNW1pZGlUcmFja0ZvdW5kXDFcMFw0XDVpdGVyXDRcOXRvX3RyYWNrXDRcNmlzbmlsXDRcMTR0b19taWRpX3RyYWNrXDFcMVw0XDZwcmludFw0XDE2aXMgYSBtaWRpIHRyYWNrXDAyMDRObyBNSURJIHRyYWNrIHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgTUlESSB0cmFjay5cNFw2Q2xvc2VcNFwxMW50aF9wbHVnaW5cMTlcMFwwXDBcMFwwXDBcMFwwXDRcCnRvX2luc2VydFw0XDdwbHVnaW5cNFw1bmFtZVw0XDEyQXJwZWdnaWF0b3JcNFw1dHJ1ZVwyMHBUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRyYWNrIGlzIG5vdCBhIFNlc3Npb24gUGxheWVyIHRyYWNrKE5vIEFycGVnZ2lhdG9yIGZvdW5kIG9yIEFycGVnZ2lhdG9yIGluIHdyb25nIG9yZGVyKS5cNFwxMU1JREkgU3RydW1cMjB0VGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayBpcyBub3QgYSBTZXNzaW9uIFBsYXllciB0cmFjayhObyBNSURJIFN0cnVtIGZvdW5kIG9yIE1JREkgU3RydW0gbm90IGluIGNvcnJlY3Qgb3JkZXIpLlw0XDV0eXBlXDRcOWRyb3Bkb3duXDRcNGtleVw0XDZ0aXRsZVw0XDI1Q2hvb3NlIEluc3RydW1lbnQgUGx1Z2luXDRcN3ZhbHVlc1w0XDE2QUNFIEZsdWlkIFN5bnRoXDE5XDJcMFwwXDBcMFwwXDBcMFw0XDEyWnluYWRkc3ViZnhcMTlcM1wwXDBcMFwwXDBcMFwwXDRcOVN1cmdlIFhUXDE5XDRcMFwwXDBcMFwwXDBcMFw0XDhkZWZhdWx0XDRcN0RpYWxvZ1w0XDI2WW91IENob3NlIEFDRSBGbHVpZCBTeW50aFw0XDEycHJlc2V0X25hbWVcNFwzZ21cNFwxMXRyYWNrX25hbWVcNFwyNEFDRSBGbHVpZCBTeW50aCBTZXNzaW9uXDRcNG5ld1w0XDdBUkRPVVJcNFw3THVhQVBJXDRcMTFuZXdfcGx1Z2luXDRcOFNlc3Npb25cNFwxMVBsdWdpblR5cGVcNFw0TFYyXDRcMVw0XDIyWW91IENob3NlIFp5bkFkZFN1YkZYXDRcMTJaeW5BZGRTdWJGWFw0XDIwWnluQWRkU3ViRlggU2Vzc2lvblw0XDE5WW91IENob3NlIFN1cmdlIFhUXDRcMTdTdXJnZSBYVCBTZXNzaW9uXDRcNVZTVDNcNFw0b2xkXDRcMThyZXBsYWNlX3Byb2Nlc3Nvclw0XDlzZXRfbmFtZVw0XDE0cm91dGVfYnlfbmFtZVw0XDE2cHJlc2V0X2J5X2xhYmVsXDRcMTJsb2FkX3ByZXNldFwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiAgc2NyaXB0c1sxMl0gPSB7fSBzY3JpcHRzWzEyXVsicyJdID0gImFyZG91ciB7XAogW1widHlwZVwiXSA9IFwiRWRpdG9yQWN0aW9uXCIsXAogbmFtZSA9IFwiQlBNIGNoYW5nZSAtIEFkanVzdCAodGltZXN0cmV0Y2gpIHRlbXBvIG9mIGFuIGF1ZGlvXCIsXAogYXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXAogZGVzY3JpcHRpb24gPSBbW1wKQ2hhbmdlIHRoZSB0ZW1wbyBvZiBhdWRpbyBsb29wIGluIEJlYXRzIFBlciBNaW51dGUgKEJQTSkgYnkgdWlzbmcgZWl0aGVyIHByb2plY3QgdGVtcG8gb3IgZW50ZXJpbmcgYSB0ZW1wbyBtYW51YWxseVwKXV1cCn1cClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApsb2NhbCBzZWwgPSBFZGl0b3I6Z2V0X3NlbGVjdGlvbigpXApsb2NhbCBjb3VudCA9IDBcClwKXApmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0KCk6aXRlcigpIGRvXAogICAgY291bnQgPSBjb3VudCArIDFcCiAgICBpZiByOnRvX2F1ZGlvcmVnaW9uKCk6aXNuaWwoKSB0aGVuXAogICAgICAgIGxvY2FsIG1kID0gTHVhRGlhbG9nLk1lc3NhZ2UoXCJBZGp1c3QgVGVtcG9cIiwgXCJUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb25cIiwgTHVhRGlhbG9nLk1lc3NhZ2VUeXBlLkluZm8sIEx1YURpYWxvZy5CdXR0b25UeXBlLkNsb3NlKVwKICAgICAgICBwcmludChtZDpydW4oKSlcCiAgICAgICAgbWQgPSBuaWxcCiAgICAgICAgY29sbGVjdGdhcmJhZ2UoKVwKICAgICAgICByZXR1cm5cCiAgICBlbHNlXAogICAgICAgIGF1ZGlvX3JlZ2lvbiA9IHJcCiAgICBlbmRcCmVuZFwKXAppZiBjb3VudCB+PSAxIHRoZW5cCiAgICBsb2NhbCBtZCA9IEx1YURpYWxvZy5NZXNzYWdlKFwiQWRqdXN0IFRlbXBvXCIsIFwiUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXCIsIEx1YURpYWxvZy5NZXNzYWdlVHlwZS5JbmZvLCBMdWFEaWFsb2cuQnV0dG9uVHlwZS5DbG9zZSlcCiAgICBwcmludChtZDpydW4oKSlcCiAgICBtZCA9IG5pbFwKICAgIGNvbGxlY3RnYXJiYWdlKClcCiAgICByZXR1cm5cCmVuZFwKXApsb2NhbCBkaWFsb2dfb3B0aW9ucyA9IHtcCiAge1wKICAgdHlwZSA9IFwiZHJvcGRvd25cIiwga2V5ID0gXCJkcm9wZG93blwiLCB0aXRsZSA9IFwiQ2hvb3NlIGhvdyB5b3Ugd2FudCB0byBhZGp1c3QgQlBNXCIsIHZhbHVlcyA9XAogICB7XAogICAgW1wiQ2hvb3NlIGhvdyB0byBhZGp1c3QgQlBNXCJdID0gMSwgW1wiRnJvbSBwcm9qZWN0IHRlbXBvIChiZWdpbm5pbmcgb2YgdGltZWxpbmUpXCJdID0gMixcCiAgICBbXCJTZXQgeW91ciBCUE1cIl0gPSAzXApcClwKICAgfSxcCiAgIGRlZmF1bHQgPSBcIkNob29zZSBob3cgdG8gYWRqdXN0IEJQTVwiXAogIH1cCiB9XApcCiAgLS0gQ3JlYXRlIGFuZCBkaXNwbGF5IHRoZSBkaWFsb2dcCiAgIG9iID0gTHVhRGlhbG9nLkRpYWxvZyAoXCJCUE0gQ2hhbmdlXCIsIGRpYWxvZ19vcHRpb25zKVwKICAgYXYgPSBvYjpydW4oKSAgLS0gQ2FwdHVyZSB0aGUgdXNlciBpbnB1dFwKXAogIC0tIENoZWNrIGlmIHRoZSB1c2VyIHByZXNzZWQgY2FuY2VsXAogIGlmIG5vdCBhdiB0aGVuXAogICAgcmV0dXJuICAtLSBFeGl0IGlmIHRoZSB1c2VyIGNhbmNlbHMgdGhlIGRpYWxvZ1wKICBlbmRcClwKIGlmIGF2IGFuZCBhdltcImRyb3Bkb3duXCJdID09IDIgdGhlblwKXApcClw5IHRwID0gVGVtcG9yYWwudGltZXBvc190IChTZXNzaW9uOm5vbWluYWxfc2FtcGxlX3JhdGUgKCkgKiAxKVwKXDkgdG0gPSBUZW1wb3JhbC5UZW1wb01hcC5yZWFkICgpXApcClw5dGFyZ2V0X3RlbXBvID0gICh0bTpxdWFydGVyc19wZXJfbWludXRlX2F0ICh0cCkpXApcClw5cHJpbnQgKHRtOnF1YXJ0ZXJzX3Blcl9taW51dGVfYXQgKHRwKSlcClwKXDlwcmludCAodGFyZ2V0X3RlbXBvKVwKXApcClw5IGVuZFwKXApcOSBpZiBhdiBhbmQgYXZbXCJkcm9wZG93blwiXSA9PSAzIHRoZW5cClwKICAtLSBGdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgaW5wdXQgaXMgYSB2YWxpZCAyIG9yIDMgZGlnaXQgbnVtYmVyLCBhbGxvd2luZyBkZWNpbWFsc1wKICBsb2NhbCBmdW5jdGlvbiBpc192YWxpZF9udW1iZXIoaW5wdXQpXAogICAgLS0gQ29udmVydCBzdHJpbmcgdG8gbnVtYmVyXAogICAgbG9jYWwgbnVtID0gdG9udW1iZXIoaW5wdXQpXApcCiAgICAtLSBJZiB0aGUgY29udmVyc2lvbiBmYWlsZWQsIHJldHVybiBmYWxzZVwKICAgIGlmIG5vdCBudW0gdGhlblwKICAgICAgcmV0dXJuIGZhbHNlXAogICAgZW5kXApcCiAgICAtLSBFeHRyYWN0IHRoZSBwYXJ0IG9mIHRoZSBudW1iZXIgYmVmb3JlIHRoZSBkZWNpbWFsXAogICAgbG9jYWwgaW50ZWdlcl9wYXJ0ID0gaW5wdXQ6bWF0Y2goXCJeKCVkKylcIilcClwKICAgIC0tIEVuc3VyZSB0aGUgaW50ZWdlciBwYXJ0IGhhcyAyIG9yIDMgZGlnaXRzXAogICAgaWYgaW50ZWdlcl9wYXJ0IGFuZCAjaW50ZWdlcl9wYXJ0ID49IDIgYW5kICNpbnRlZ2VyX3BhcnQgPD0gMyB0aGVuXAogICAgICByZXR1cm4gdHJ1ZVwKICAgIGVsc2VcCiAgICAgIHJldHVybiBmYWxzZVwKICAgIGVuZFwKICBlbmRcClwKICAtLSBGdW5jdGlvbiB0byBjcmVhdGUgYW5kIHNob3cgdGhlIG1haW4gZGlhbG9nIGZvciB1c2VyIGlucHV0XAogIGxvY2FsIGZ1bmN0aW9uIHNob3dfbWFpbl9kaWFsb2coKVwKICAgIGxvY2FsIGRpYWxvZ19vcHRpb25zID0ge1wKICAgICAgeyB0eXBlID0gXCJlbnRyeVwiLCBrZXkgPSBcInRleHRcIiwgZGVmYXVsdCA9IFwiMTIwXCIsIHRpdGxlID0gXCJicG1cIiB9LFwKICAgIH1cCiAgICBsb2NhbCBvZCA9IEx1YURpYWxvZy5EaWFsb2cgKFwiQ2hhbmdlIHRlbXBvXCIsIGRpYWxvZ19vcHRpb25zKVwKICAgIGxvY2FsIHJ2ID0gb2Q6cnVuKClcCiAgICByZXR1cm4gcnYgIC0tIFJldHVybiB0aGUgZGlhbG9nIHJlc3VsdCAodGFibGUgb3IgbmlsKVwKICBlbmRcClwKICAtLSBGdW5jdGlvbiB0byBzaG93IGVycm9yIGRpYWxvZ1wKICBsb2NhbCBmdW5jdGlvbiBzaG93X2Vycm9yX2RpYWxvZygpXAogICAgbG9jYWwgZXJyb3JfZGlhbG9nX29wdGlvbnMgPSB7XAogICAgICB7IHR5cGUgPSBcImxhYmVsXCIsIHRpdGxlID0gXCJJbnZhbGlkIGlucHV0ISBQbGVhc2UgZW50ZXIgYSAyIG9yIDMgZGlnaXQgbnVtYmVyIChkZWNpbWFscyBhbGxvd2VkKS5cIiwgdGV4dCA9IFwiSW52YWxpZCBpbnB1dCEgUGxlYXNlIGVudGVyIGEgMiBvciAzIGRpZ2l0IG51bWJlciAoZGVjaW1hbHMgYWxsb3dlZCkuXCIgfSxcCiAgICB9XAogICAgbG9jYWwgZXJyb3JfZGlhbG9nID0gTHVhRGlhbG9nLkRpYWxvZyhcIkludmFsaWQgSW5wdXRcIiwgZXJyb3JfZGlhbG9nX29wdGlvbnMpXAogICAgZXJyb3JfZGlhbG9nOnJ1bigpICAtLSBEaXNwbGF5IHRoZSBlcnJvciBkaWFsb2dcCiAgICBlcnJvcl9kaWFsb2cgPSBuaWwgIC0tIENsZWFyIHRoZSBlcnJvciBkaWFsb2cgYWZ0ZXIgaXQgY2xvc2VzXAogIGVuZFwKXAogIC0tIEtlZXAgYXNraW5nIGZvciBpbnB1dCB1bnRpbCB2YWxpZCBvciBjYW5jZWwgaXMgcHJlc3NlZFwKICB3aGlsZSB0cnVlIGRvXAogICAgbG9jYWwgcnYgPSBzaG93X21haW5fZGlhbG9nKClcClwKICAgIC0tIEV4aXQgdGhlIHNjcmlwdCBpZiBcIkNhbmNlbFwiIGlzIHByZXNzZWQgKHJ2IGlzIG5pbClcCiAgICBpZiBydiA9PSBuaWwgdGhlblwKICAgICAgcHJpbnQoXCJEaWFsb2cgd2FzIGNhbmNlbGVkLiBFeGl0aW5nLlwiKVwKICAgICAgcmV0dXJuICAtLSBFeGl0IHRoZSBmdW5jdGlvblwKICAgIGVuZFwKXAogICAgIG51bWJlciA9IHJ2W1widGV4dFwiXVwKICAgICBwcmludCAobnVtYmVyKVwKXAogICAgaWYgaXNfdmFsaWRfbnVtYmVyKG51bWJlcikgdGhlblwKICAgICAgLS0gQ29udmVydCBzdHJpbmcgdG8gYSBudW1iZXIgZm9yIG1hdGhlbWF0aWNhbCBvcGVyYXRpb25zXAogICAgICBudW1lcmljX3ZhbHVlID0gdG9udW1iZXIobnVtYmVyKVwKICAgICAgIHRhcmdldF90ZW1wbyA9IG51bWVyaWNfdmFsdWVcClwKXApcCiAgICAgIGJyZWFrICAtLSBFeGl0IHRoZSBsb29wIHdoZW4gdmFsaWQgaW5wdXQgaXMgcmVjZWl2ZWRcCiAgICBlbHNlXAogICAgICBzaG93X2Vycm9yX2RpYWxvZygpICAtLSBTaG93IGVycm9yIGRpYWxvZyBpZiBpbnB1dCBpcyBpbnZhbGlkXAogICAgZW5kXAogIGVuZFwKICBlbmRcClwKICBwcmludCh0YXJnZXRfdGVtcG8pXApcCiAgbG9jYWwgcm4gPSBhdWRpb19yZWdpb246bmFtZSgpICAtLSBHZXQgdGhlIHJlZ2lvbiBuYW1lXApwcmludChybilcClwKIHNvdXJjZSA9IGF1ZGlvX3JlZ2lvbjpzb3VyY2UoMCk6dG9fZmlsZXNvdXJjZSgpOnBhdGgoKVwKIGZpbGVwYXRoID0gc291cmNlXApcClwKXApsb2NhbCBxdW90ZWRmaWxlcGF0aCA9ICdcIicgLi4gZmlsZXBhdGggLi4gJ1wiJ1wKXApcCi0tIEZ1bmN0aW9uIHRvIHJlbW92ZSB0aGUgQlBNIHBhdHRlcm4gZnJvbSB0aGUgcmVnaW9uIG5hbWVcCi0tIEZ1bmN0aW9uIHRvIGV4dHJhY3QgQlBNIHBhdHRlcm4gZnJvbSB0aGUgcmVnaW9uIG5hbWVcCmZ1bmN0aW9uIGV4dHJhY3RCUE0ocm4pXAogICAgbG9jYWwgYnBtID0gc3RyaW5nLm1hdGNoKHJuLCBcIiglZCVkPyVkPylbLV9dPyVzKltiQl1bcFBdW21NXVwiLCAxKVwKICAgIGlmIG5vdCBicG0gdGhlblwKICAgICAgICBicG0gPSBzdHJpbmcubWF0Y2gocm4sIFwiW2JCXVtwUF1bbU1dJXMqW18tXT8oJWQrKVwiLCAxKVwKICAgIGVuZFwKICAgIHJldHVybiBicG1cCmVuZFwKXAotLSBGdW5jdGlvbiB0byByZW1vdmUgdGhlIEJQTSBwYXR0ZXJuIGZyb20gdGhlIHJlZ2lvbiBuYW1lXApmdW5jdGlvbiByZW1vdmVCUE0ocm4pXAogICAgLS0gUmVtb3ZlIHRoZSBwYXR0ZXJucyBtYXRjaGluZyBCUE0gKGUuZy4sIFwiMTIwLWJwbVwiIG9yIFwiYnBtLTEyMFwiKVwKICAgIGxvY2FsIGNsZWFuZWRfbmFtZSA9IHJuOmdzdWIoXCIoJWQlZD8lZD8pWy1fXT8lcypbYkJdW3BQXVttTV1cIiwgXCJcIilcCiAgICBjbGVhbmVkX25hbWUgPSBjbGVhbmVkX25hbWU6Z3N1YihcIltiQl1bcFBdW21NXSVzKltfLV0/KCVkKylcIiwgXCJcIilcCiAgICAtLSBUcmltIGFueSBsZWFkaW5nL3RyYWlsaW5nIHNwYWNlc1wKICAgIGNsZWFuZWRfbmFtZSA9IGNsZWFuZWRfbmFtZTptYXRjaChcIl4lcyooLi0pJXMqJFwiKVwKICAgIHJldHVybiBjbGVhbmVkX25hbWVcCmVuZFwKXAotLSBFeGFtcGxlIHVzYWdlOlwKbG9jYWwgYnBtID0gZXh0cmFjdEJQTShybilcCmlmIGJwbSB0aGVuXAogICAgcHJpbnQoXCJCUE0gZm91bmQ6XCIsIGJwbSlcClwKICAgIGN1cnJlbnRfdGVtcG8gPSBicG1cClwKICAgIC0tIFJlbW92ZSBCUE0gZnJvbSB0aGUgcmVnaW9uIG5hbWVcCiAgICBsb2NhbCBuZXdfbmFtZSA9IHJlbW92ZUJQTShybilcCiAgICBwcmludChcIlJlbmFtaW5nIHJlZ2lvbiB0bzpcIiwgbmV3X25hbWUpXApcCiAgICAtLSBSZW5hbWUgdGhlIGF1ZGlvIHJlZ2lvblwKICAgIGF1ZGlvX3JlZ2lvbjpzZXRfbmFtZShuZXdfbmFtZSlcClwKXAplbHNlXAogICAgcHJpbnQoXCJObyBCUE0gZm91bmQgaW4gcmVnaW9uIG5hbWUuXCIpXApcCiAgLS0gcmF0aW8gLSBjdXJyZW50X3RlbXBvL3RhcmdldF90ZW1wb1wKXAogICAgIC0tIGdldCBFZGl0b3Igc2VsZWN0aW9uXAogICAgbG9jYWwgc2VsID0gRWRpdG9yOmdldF9zZWxlY3Rpb24gKClcClwKICAgIC0tIEluc3RhbnRpYXRlIHRoZSBRTSBCYXJCZWF0IFRyYWNrZXJcCiAgICBsb2NhbCB2YW1wID0gQVJET1VSLkx1YUFQSS5WYW1wKFwibGliYXJkb3VydmFtcHBsdWdpbnM6cW0tYmFyYmVhdHRyYWNrZXJcIiwgU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlKCkpXApcCiAgICAtLSBwcmVwYXJlIHRhYmxlcyB0byBob2xkIHJlc3VsdHNcCiAgICBsb2NhbCBiZWF0cyA9IHt9XAogICAgbG9jYWwgYmFycyA9IHt9XApcCiAgICAtLSBmb3IgZWFjaCBzZWxlY3RlZCByZWdpb25cCiAgICBmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0ICgpOml0ZXIgKCkgZG9cCiAgICAgICAgbG9jYWwgYXIgPSByOnRvX2F1ZGlvcmVnaW9uICgpXAogICAgICAgIGlmIGFyOmlzbmlsICgpIHRoZW5cCiAgICAgICAgICAgIGdvdG8gbmV4dFwKICAgICAgICBlbmRcClwKICAgICAgICBiZWF0c1tyOm5hbWUgKCldID0ge31cCiAgICAgICAgYmFyc1tyOm5hbWUgKCldID0ge31cClwKICAgICAgICAtLSBjYWxsYmFjayB0byBoYW5kbGUgVmFtcC1QbHVnaW4gYW5hbHlzaXMgcmVzdWx0c1wKICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayAoZmVhdHMpXAogICAgICAgICAgICBsb2NhbCBmbCA9IGZlYXRzOnRhYmxlKClbMF1cCiAgICAgICAgICAgIGlmIGZsIHRoZW5cCiAgICAgICAgICAgICAgICBmb3IgZiBpbiBmbDppdGVyICgpIGRvXAogICAgICAgICAgICAgICAgICAgIGlmIGYuaGFzVGltZXN0YW1wIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGZuID0gVmFtcC5SZWFsVGltZS5yZWFsVGltZTJGcmFtZShmLnRpbWVzdGFtcCwgNDgwMDApXAogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoYmVhdHNbcjpuYW1lICgpXSwge3BvcyA9IGZuLCBiZWF0ID0gdG9udW1iZXIoZi5sYWJlbCl9KVwKICAgICAgICAgICAgICAgICAgICBlbmRcCiAgICAgICAgICAgICAgICBlbmRcCiAgICAgICAgICAgIGVuZFwKXAogICAgICAgICAgICBsb2NhbCBmbCA9IGZlYXRzOnRhYmxlKClbMV1cCiAgICAgICAgICAgIGlmIGZsIHRoZW5cCiAgICAgICAgICAgICAgICBmb3IgZiBpbiBmbDppdGVyICgpIGRvXAogICAgICAgICAgICAgICAgICAgIGlmIGYuaGFzVGltZXN0YW1wIHRoZW5cCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGZuID0gVmFtcC5SZWFsVGltZS5yZWFsVGltZTJGcmFtZShmLnRpbWVzdGFtcCwgNDgwMDApXAogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoYmFyc1tyOm5hbWUgKCldLCBmbilcCiAgICAgICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICAgICAgZW5kXAogICAgICAgICAgICBlbmRcCiAgICAgICAgICAgIHJldHVybiBmYWxzZSAtLSBjb250aW51ZSwgZG9uJ3QgY2FuY2VsXAogICAgICAgIGVuZFwKXAogICAgICAgIHZhbXA6cGx1Z2luKCk6c2V0UGFyYW1ldGVyKFwiQmVhdHMgUGVyIEJhclwiLCA0KVwKXAogICAgICAgIHZhbXA6YW5hbHl6ZShhcjp0b19yZWFkYWJsZSgpLCAwLCBjYWxsYmFjaylcCiAgICAgICAgY2FsbGJhY2sodmFtcDpwbHVnaW4oKTpnZXRSZW1haW5pbmdGZWF0dXJlcygpKVwKICAgICAgICB2YW1wOnJlc2V0KClcCiAgICAgICAgOjpuZXh0OjpcCiAgICBlbmRcClwKICAgIC0tIENhbGN1bGF0ZSBkaXN0YW5jZXMgYmV0d2VlbiBiZWF0cywgaWdub3JpbmcgdGhlIGZpcnN0IEJlYXQgNCwgYW5kIHRoZW4gYXZlcmFnZVwKICAgIGxvY2FsIGZpcnN0X2JlYXRfNF9za2lwcGVkID0gZmFsc2VcCiAgICBsb2NhbCB0b3RhbF9kaXN0YW5jZSA9IDBcCiAgICBsb2NhbCBkaXN0YW5jZV9jb3VudCA9IDBcClwKICAgIGZvciBuLCBvIGluIHBhaXJzKGJlYXRzKSBkb1wKICAgICAgICBwcmludChcIkRpc3RhbmNlIGJldHdlZW4gYmVhdHMgZm9yIHJlZ2lvbjpcIiwgbilcClwKICAgICAgICAtLSBJdGVyYXRlIG92ZXIgdGhlIGJlYXRzXAogICAgICAgIGZvciBpID0gMiwgI28gZG9cCiAgICAgICAgICAgIGxvY2FsIGN1cnJlbnRfYmVhdCA9IG9baV1bJ2JlYXQnXVwKICAgICAgICAgICAgbG9jYWwgcHJldmlvdXNfYmVhdCA9IG9baS0xXVsnYmVhdCddXApcCiAgICAgICAgICAgIC0tIFNraXAgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgQmVhdCA0XAogICAgICAgICAgICBpZiBjdXJyZW50X2JlYXQgPT0gNCBhbmQgbm90IGZpcnN0X2JlYXRfNF9za2lwcGVkIHRoZW5cCiAgICAgICAgICAgICAgICBmaXJzdF9iZWF0XzRfc2tpcHBlZCA9IHRydWVcCiAgICAgICAgICAgIGVsc2VcCiAgICAgICAgICAgICAgICBsb2NhbCBkaXN0YW5jZSA9IG9baV1bJ3BvcyddIC0gb1tpLTFdWydwb3MnXVwKICAgICAgICAgICAgICAgIHRvdGFsX2Rpc3RhbmNlID0gdG90YWxfZGlzdGFuY2UgKyBkaXN0YW5jZVwKICAgICAgICAgICAgICAgIGRpc3RhbmNlX2NvdW50ID0gZGlzdGFuY2VfY291bnQgKyAxXAogICAgICAgICAgICAgICAgcHJpbnQoXCJEaXN0YW5jZSBiZXR3ZWVuIEJlYXQgXCIgLi4gcHJldmlvdXNfYmVhdCAuLiBcIiBhbmQgQmVhdCBcIiAuLiBjdXJyZW50X2JlYXQgLi4gXCI6XCIsIGRpc3RhbmNlLCBcInNhbXBsZXNcIilcCiAgICAgICAgICAgIGVuZFwKICAgICAgICBlbmRcCiAgICBlbmRcClwKICAgIC0tIENhbGN1bGF0ZSBhbmQgcHJpbnQgdGhlIGF2ZXJhZ2UgZGlzdGFuY2VcCiAgICBpZiBkaXN0YW5jZV9jb3VudCA+IDAgdGhlblwKICAgICAgICBsb2NhbCBhdmVyYWdlX2Rpc3RhbmNlID0gdG90YWxfZGlzdGFuY2UgLyBkaXN0YW5jZV9jb3VudFwKICAgICAgICBwcmludChcIkF2ZXJhZ2UgZGlzdGFuY2UgYmV0d2VlbiBiZWF0cyAoZXhjbHVkaW5nIHRoZSBmaXJzdCBCZWF0IDQpOlwiLCBhdmVyYWdlX2Rpc3RhbmNlLCBcInNhbXBsZXNcIilcCiAgICBjdXJyZW50X3RlbXBvID0gNDgwMDAvYXZlcmFnZV9kaXN0YW5jZSAqIDYwXAogIHByaW50IChjdXJyZW50X3RlbXBvKVwKXAogICAgZWxzZVwKICAgICAgICBwcmludChcIk5vIGRpc3RhbmNlcyBjYWxjdWxhdGVkLlwiKVwKXAogICAgICAgIC0tIGxvY2FsIGNvbW1hbmQgPSBcImJwbWJpbiBcIiAuLiBxdW90ZWRmaWxlcGF0aFwKXAogICAgICAgIGxvY2FsIGNvbW1hbmQgPSBcInNveCAgXCIgLi5xdW90ZWRmaWxlcGF0aC4uIFwiIC10IHJhdyAtciA0ODAwMCAgLWUgZmxvYXQgLWMgMSAtIHwgYnBtXCJcClwKb3MuZXhlY3V0ZShjb21tYW5kKVwKXApcCi0tIE9wZW4gdGhlIGZpbGUgaW4gd3JpdGUgbW9kZVwKXApcClwKICAgbG9jYWwgaGFuZGxlID0gaW8ucG9wZW4oY29tbWFuZClcCiAgICBsb2NhbCBmaXJzdHJlc3VsdCA9IGhhbmRsZTpyZWFkKFwiKmFcIilcCiAgICBoYW5kbGU6Y2xvc2UoKVwKXAogICAgcHJpbnQoZmlyc3RyZXN1bHQpXApcCiAgICAtLSBDb252ZXJ0IHRoZSBjb250ZW50IHRvIGEgbnVtYmVyIGFuZCBzdG9yZSBpdCBpbiBhIHZhcmlhYmxlXAogICAgIGN1cnJlbnRfdGVtcG8gPSB0b251bWJlcihmaXJzdHJlc3VsdClcClwKICAgIGVuZFwKZW5kXApcClwKXApcClwKXApcClwKICAgICAtLSBoZWxwZXIgZnVuY3Rpb24gLS1cClw5LS0gdGhlcmUgaXMgY3VycmVudGx5IG5vIGRpcmVjdCB3YXkgdG8gZmluZCB0aGUgdHJhY2tcClw5LS0gY29ycmVzcG9uZGluZyB0byBhIFtzZWxlY3RlZF0gcmVnaW9uXApcOWZ1bmN0aW9uIGZpbmRfdHJhY2tfZm9yX3JlZ2lvbiAocmVnaW9uX2lkKVwKXDlcOWZvciByb3V0ZSBpbiBTZXNzaW9uOmdldF90cmFja3MgKCk6aXRlciAoKSBkb1wKXDlcOVw5bG9jYWwgdHJhY2sgPSByb3V0ZTp0b190cmFjayAoKVwKXDlcOVw5bG9jYWwgcGwgPSB0cmFjazpwbGF5bGlzdCAoKVwKXDlcOVw5aWYgbm90IHBsOnJlZ2lvbl9ieV9pZCAocmVnaW9uX2lkKTppc25pbCAoKSB0aGVuXApcOVw5XDlcOXJldHVybiB0cmFja1wKXDlcOVw5ZW5kXApcOVw5ZW5kXApcOVw5YXNzZXJ0ICgwKSAtLSBjYW4ndCBoYXBwZW4sIHJlZ2lvbiBtdXN0IGJlIGluIGEgcGxheWxpc3RcClw5ZW5kXApcClw5cHJpbnQgKFwiYmxhbmsgaXMgXCIuLmN1cnJlbnRfdGVtcG8pXApcClw5YnBtc2hpZnQgPSBjdXJyZW50X3RlbXBvL3RhcmdldF90ZW1wb1wKXApcOXByaW50KGJwbXNoaWZ0KVwKXApcClwKXApcOS0tIGdldCBFZGl0b3Igc2VsZWN0aW9uXApcOS0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6RWRpdG9yXApcOS0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQXJkb3VyVUk6U2VsZWN0aW9uXApcOWxvY2FsIHNlbCA9IEVkaXRvcjpnZXRfc2VsZWN0aW9uICgpXApcClw5LS0gSW5zdGFudGlhdGUgdGhlIFFNIEJhckJlYXQgVHJhY2tlclwKXDktLSBzZWUgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6THVhQVBJOlZhbXBcClw5LS0gaHR0cDovL3ZhbXAtcGx1Z2lucy5vcmcvcGx1Z2luLWRvYy9xbS12YW1wLXBsdWdpbnMuaHRtbCNxbS1iYXJiZWF0dHJhY2tlclwKXDlsb2NhbCB2YW1wID0gQVJET1VSLkx1YUFQSS5WYW1wIChcImxpYmFyZG91cnZhbXBwbHVnaW5zOnFtLWJhcmJlYXR0cmFja2VyXCIsIFNlc3Npb246bm9taW5hbF9zYW1wbGVfcmF0ZSAoKSlcClwKXDktLSBwcmVwYXJlIHVuZG8gb3BlcmF0aW9uXApcOVNlc3Npb246YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kIChcIlJ1YmJlcmJhbmQgUmVnaW9uc1wiKVwKXApcOS0tIGZvciBlYWNoIHNlbGVjdGVkIHJlZ2lvblwKXDktLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0FyZG91clVJOlJlZ2lvblNlbGVjdGlvblwKXDlmb3IgciBpbiBzZWwucmVnaW9uczpyZWdpb25saXN0ICgpOml0ZXIgKCkgZG9cClw5XDktLSBcInJcIiBpcy1hIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQVJET1VSOlJlZ2lvblwKXApcOVw5LS0gdGVzdCBpZiBpdCdzIGFuIGF1ZGlvIHJlZ2lvblwKXDlcOWxvY2FsIGFyID0gcjp0b19hdWRpb3JlZ2lvbiAoKVwKXDlcOWlmIGFyOmlzbmlsICgpIHRoZW5cClw5XDlcOWdvdG8gbmV4dFwKXDlcOWVuZFwKXApcOVw5LS0gY3JlYXRlIFJ1YmJlcmJhbmQgc3RyZXRjaGVyXApcOVw5bG9jYWwgcmIgPSBBUkRPVVIuTHVhQVBJLlJ1YmJlcmJhbmQgKGFyLCBmYWxzZSlcClwKXDlcOS0tIHRoZSBydWJiZXJiYW5kLWZpbHRlciBhbHNvIGltcGxlbWVudHMgdGhlIHJlYWRhYmxlIEFQSS5cClw5XDktLSBodHRwczovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNBUkRPVVI6QXVkaW9SZWFkYWJsZVwKXDlcOS0tIFRoaXMgYWxsb3dzIHRvIHJlYWQgZnJvbSB0aGUgbWFzdGVyLXNvdXJjZSBvZiB0aGUgZ2l2ZW4gYXVkaW8tcmVnaW9uLlwKXDlcOS0tIEFueSBwcmlvciB0aW1lLXN0cmV0Y2ggb3IgcGl0Y2gtc2hpZnQgYXJlIGlnbm9yZWQgd2hlbiByZWFkaW5nLCBob3dldmVyXApcOVw5LS0gcHJvY2Vzc2luZyByZXRhaW5zIHRoZSBwcmV2aW91cyBzZXR0aW5nc1wKXDlcOWxvY2FsIG1heF9wb3MgPSByYjpyZWFkYWJsZSAoKTpyZWFkYWJsZV9sZW5ndGggKClcClwKXDlcOS0tIHByZXBhcmUgdGFibGUgdG8gaG9sZCBhbmFseXNpcyByZXN1bHRzXApcOVw5LS0gdGhlIGJlYXQtbWFwIGlzIGEgdGFibGUgaG9sZGluZyBhdWRpby1zYW1wbGUgcG9zaXRpb25zOlwKXDlcOS0tIFtmcm9tXSA9IHRvXApcOVw5bG9jYWwgYmVhdF9tYXAgPSB7fVwKXDlcOWxvY2FsIHByZXZfYmVhdCA9IDBcClwKXDlcOS0tIGNvbnN0cnVjdCBhIHByb2dyZXNzLWRpYWxvZyB3aXRoIGNhbmNlbCBidXR0b25cClw5XDlsb2NhbCBwZGlhbG9nID0gTHVhRGlhbG9nLlByb2dyZXNzV2luZG93IChcIlJ1YmJlcmJhbmRcIiwgdHJ1ZSlcClw5XDktLSBwcm9ncmVzcyBkaWFsb2cgY2FsbGJhY2tzXApcOVw5ZnVuY3Rpb24gdmFtcF9jYWxsYmFjayAoXywgcG9zKVwKXDlcOVw5cmV0dXJuIHBkaWFsb2c6cHJvZ3Jlc3MgKHBvcyAvIG1heF9wb3MsIFwiQW5hbHl6aW5nXCIpXApcOVw5ZW5kXApcOVw5ZnVuY3Rpb24gcmJfcHJvZ3Jlc3MgKF8sIHBvcylcClw5XDlcOXJldHVybiBwZGlhbG9nOnByb2dyZXNzIChwb3MgLyBtYXhfcG9zLCBcIlN0cmV0Y2hpbmdcIilcClw5XDllbmRcClwKXDlcOS0tIHJ1biBWQU1QIHBsdWdpbiwgYW5hbHl6ZSB0aGUgZmlyc3QgY2hhbm5lbCBvZiB0aGUgYXVkaW8tcmVnaW9uXApcOVw5dmFtcDphbmFseXplIChyYjpyZWFkYWJsZSAoKSwgMCwgdmFtcF9jYWxsYmFjaylcClwKXDlcOS0tIGdldFJlbWFpbmluZ0ZlYXR1cmVzIHJldHVybnMgYSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI1ZhbXA6UGx1Z2luOkZlYXR1cmVTZXRcClw5XDktLSBnZXQgdGhlIGZpcnN0IG91dHB1dC4gaGVyZTogQmVhdHMsIGVzdGltYXRlZCBiZWF0IGxvY2F0aW9ucyAmIGJlYXQtbnVtYmVyXApcOVw5LS0gXCJmbFwiIGlzLWEgaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNWYW1wOlBsdWdpbjpGZWF0dXJlTGlzdFwKXDlcOWxvY2FsIGZsID0gdmFtcDpwbHVnaW4gKCk6Z2V0UmVtYWluaW5nRmVhdHVyZXMgKCk6YXQgKDApXApcOVw5bG9jYWwgYmVhdGNvdW50ID0gMFwKXDlcOS0tIGl0ZXJhdGUgb3ZlciByZXR1cm5lZCBmZWF0dXJlc1wKXDlcOWZvciBmIGluIGZsOml0ZXIgKCkgZG9cClw5XDlcOS0tIFwiZlwiIGlzLWEgIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jVmFtcDpQbHVnaW46RmVhdHVyZVwKXDlcOVw5bG9jYWwgZm4gPSBWYW1wLlJlYWxUaW1lLnJlYWxUaW1lMkZyYW1lIChmLnRpbWVzdGFtcCwgU2Vzc2lvbjpub21pbmFsX3NhbXBsZV9yYXRlICgpKVwKXDlcOVw5YmVhdF9tYXBbZm5dID0gZm4gLS0ga2VlcCBiZWF0cyAoMS80IG5vdGVzKSB1bmNoYW5nZWRcClw5XDlcOWlmIHByZXZfYmVhdCA+IDAgdGhlblwKXDlcOVw5XDktLSBtb3ZlIHRoZSBoYWxmIGJlYXRzICgxLzh0aCkgYmFja1wKXDlcOVw5XDlsb2NhbCBkaWZmID0gKGZuIC0gcHJldl9iZWF0KSAvIDJcClw5XDlcOVw5YmVhdF9tYXBbZm4gLSBkaWZmXSA9IGZuIC0gZGlmZiArIGRpZmYgLyAzIC0tIG1vZGVyYXRlIHN3aW5nIDI6MSAodHJpcGxldClcClw5XDlcOVw5LS1iZWF0X21hcFtmbiAtIGRpZmZdID0gZm4gLSBkaWZmICsgZGlmZiAvIDIgLS0gaGFyZCBzd2luZyAzOjEgKGRvdHRlZCA4dGgpXApcOVw5XDlcOWJlYXRjb3VudCA9IGJlYXRjb3VudCArIDFcClw5XDlcOWVuZFwKXDlcOVw5cHJldl9iZWF0ID0gZm5cClw5XDllbmRcClw5XDktLSByZXNldCB0aGUgcGx1Z2luIHN0YXRlIChwcmVwYXJlIGZvciBuZXh0IGl0ZXJhdGlvbilcClw5XDl2YW1wOnJlc2V0ICgpXApcClw5XDlpZiBwZGlhbG9nOmNhbmNlbGVkICgpIHRoZW4gZ290byBvdXQgZW5kXApcClw5XDktLSBza2lwIHJlZ2lvbnMgc2hvcnRlciB0aGFuIGEgYmFyXApcOVw5aWYgYmVhdGNvdW50IDwgOCB0aGVuXApcOVw5XDlwZGlhbG9nOmRvbmUgKClcClw5XDlcOWdvdG8gbmV4dFwKXDlcOWVuZFwKXApcOVw5LS0gY29uZmlndXJlIHJ1YmJlcmJhbmQgc3RyZXRjaCB0b29sXApcOVw5cmI6c2V0X3N0cmVjaF9hbmRfcGl0Y2ggKGJwbXNoaWZ0LCAxKSAtLSBubyBvdmVyYWxsIHN0cmV0Y2hpbmcsIG5vIHBpdGNoLXNoaWZ0XApcOVw5LS1yYjpzZXRfbWFwcGluZyAoYmVhdF9tYXApIC0tIGFwcGx5IGJlYXQtbWFwIGZyb20vdG9cClwKXDlcOS0tIG5vdyBzdHJldGNoIHRoZSByZWdpb25cClw5XDlsb2NhbCBuYXIgPSByYjpwcm9jZXNzIChyYl9wcm9ncmVzcylcClwKXDlcOWlmIHBkaWFsb2c6Y2FuY2VsZWQgKCkgdGhlbiBnb3RvIG91dCBlbmRcClwKXDlcOS0tIGhpZGUgbW9kYWwgcHJvZ3Jlc3MgZGlhbG9nIGFuZCBkZXN0cm95IGl0XApcOVw5cGRpYWxvZzpkb25lICgpXApcOVw5cGRpYWxvZyA9IG5pbFwKXApcOVw5LS0gcmVwbGFjZSByZWdpb25cClw5XDlpZiBub3QgbmFyOmlzbmlsICgpIHRoZW5cClw5XDlcOXByaW50IChcIm5ldyBhdWRpbyByZWdpb246IFwiLCBuYXI6bmFtZSAoKSwgbmFyOmxlbmd0aCAoKSlcClw5XDlcOWxvY2FsIHRyYWNrID0gZmluZF90cmFja19mb3JfcmVnaW9uIChyOnRvX3N0YXRlZnVsICgpOmlkICgpKVwKXDlcOVw5bG9jYWwgcGxheWxpc3QgPSB0cmFjazpwbGF5bGlzdCAoKVwKXDlcOVw5cGxheWxpc3Q6dG9fc3RhdGVmdWwgKCk6Y2xlYXJfY2hhbmdlcyAoKSAtLSBwcmVwYXJlIHVuZG9cClw5XDlcOXBsYXlsaXN0OnJlbW92ZV9yZWdpb24gKHIpXApcOVw5XDlwbGF5bGlzdDphZGRfcmVnaW9uIChuYXIsIHI6cG9zaXRpb24gKCksIDEsIGZhbHNlKVwKXDlcOVw5LS0gY3JlYXRlIGEgZGlmZiBvZiB0aGUgcGVyZm9ybWVkIHdvcmssIGFkZCBpdCB0byB0aGUgc2Vzc2lvbidzIHVuZG8gc3RhY2tcClw5XDlcOS0tIGFuZCBjaGVjayBpZiBpdCBpcyBub3QgZW1wdHlcClw5XDlcOVNlc3Npb246YWRkX3N0YXRlZnVsX2RpZmZfY29tbWFuZCAocGxheWxpc3Q6dG9fc3RhdGVmdWxkZXN0cnVjdGlibGUgKCkpXApcOVw5ZW5kXApcClw5XDk6Om5leHQ6OlwKXDllbmRcClwKXDk6Om91dDo6XApcClw5LS0gYWxsIGRvbmUsIGNvbW1pdCB0aGUgY29tYmluZWQgVW5kbyBPcGVyYXRpb25cClw5aWYgbm90IFNlc3Npb246YWJvcnRfZW1wdHlfcmV2ZXJzaWJsZV9jb21tYW5kICgpIHRoZW5cClw5XDlTZXNzaW9uOmNvbW1pdF9yZXZlcnNpYmxlX2NvbW1hbmQgKG5pbClcClw5ZW5kXApcCmVuZCBlbmRcClwKIiAgc2NyaXB0c1sxMl1bImMiXSA9IHRydWUgc2NyaXB0c1sxMl1bIm4iXSA9ICJCUE0gY2hhbmdlIC0gQWRqdXN0ICh0aW1lc3RyZXRjaCkgdGVtcG8gb2YgYW4gYXVkaW8iICBzY3JpcHRzWzEyXVsiYSJdID0ge30gc2NyaXB0c1sxMl1bImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvam1hbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9icG1jaGFuZ2UubHVhIiAgIHNjcmlwdHNbMTJdWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwKXDBcMFwwyFwxXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcClwwXDBcMMhcMVwwXDBcMVwxIFwyNlwyXDBcMEZcMEBcMExAwFwwZIBcMFwxgYBcMFwwx8DAXDDMXDDBXDHkgFwwXDHMQMFcMeRcMFwxXDFcMzDAXDaAjYBBXDHMwUFcM+SBXDBcMcxcMcJcM+SBXDBcMeJcMVwwXDBcMzDAXDSAxkFCXDDHgcJcM1wxwlwyXDBBXDJcM1wwhkJCXDCHQkNcNYeCQ1w1xkJCXDDHwsNcNcdcMsRcNeSBgFwyXDZCRFwwTILEXDNkXDJcMFwxJEJcMFwwxFwxXDBcMFw2wkRcMCRCgFwwJlwwgFwwXDMwXDBcMIBcOIBcMYrpQFwwXDBqQfhcMTI3X4BBXDFcMzCAXDSAxkBCXDDHgMJcMVwxwVwyXDBBQVw1XDCGQUJcMIdBQ1wzh4FDXDPGQUJcMMfBw1wzx1wxxFwz5ICAXDJcNkFEXDBMgcRcMWRcMVwwXDEkQVwwXDDEXDBcMFwwXDbBRFwwJEGAXDAmXDCAXDDLXDCAXDBcMTFBXDFcMFwKwUWLXArBRYxcCoHGjEvBXDBcMEqBQY5KgceOSlwxyI9cCkGBjVwKXDHHkOtAgFwwXDZBQlwwXDfBSFwyQVwxXDlcMIBcMYBcMSSBgFwxXDhcMFwxkVw2gUhcMFwxMoFEXDIkgVwwXDFcOFwwgZJcNkFJXDBcIkFcMFwwXDMwXDBcMIAmXDCAXDBcNkFJXDBcIlwxXDBcMFwzMIBcN4BcNkFJXDBcN8FFXDJcMzGAR1wyXDMwgFw2gFw2wUlcMFw3XDFKXDJGQUpcMEyBylwyZIFcMFwxT4HBXDIkgVwwXDFcOFwwXDGTXDbBSVwwXDdcMUtcMlw3QUtcMiSBgFwwXDhcMIGVXDbBSlwwXDEywUtcMoaBSVwwJIGAXDFcOFwwXDGXXDZBRFwwRsFKXDBMwctcMsaBSVwwZFwxgFwxJEFcMFwwXDZBRFwwRoFLXDAkQVwwXDFcNkFJXDBcIlwxXDBcMFwzMMBcOIBcNkFJXDBcN8FFXDJcMzFcMEhcMlwzMMBcN4AsXDFcMFwwbEFcMFwwrIFcMFwwwFwxgFwy5IGAXDBcMzFcMMxcM1wzMMBcMIBcNkJEXDBBQlwxMlwwJEJcMFwxJlwwgFwwXDfCzFwzXDhcMFwymVw2QkRcMEaCTFwwJEJcMFwxXDBcMlwwXDJGgkxcMCSCXDBcMVwiXDJcMFwwXDMwwFwxgFw2Qk1cMEaCTFwwJIJcMFwxXDhcMFwymlw2XDJNXDBcOFwwXDKXXDMwwFwwgFwzMED5XDEyN1wwXDJcMFwzJEKAXDBcMzCA+FwxMjdcNkFEXDBGgUtcMCRBXDBcMVw2XDFFXDBcMTKBTVwyJIFcMFwxRkFEXDCAXDFcMFwyZEFcMFwxRlwxRVwwTMHNXDLBgVwwXDBkgYBcMUxcMc5cMmSBXDBcMUxBzlwyZIFcMFwxXDhAgZtGwU1cMFw4QFwxnUHBXDE0XDCGgU5cMMHBXDE0XDBdwYFcMqzBXDBcMFw4gFwxnqxcMVwxXDBcOICBnoZcMU9cMMBcMVwwXDKkgVwwXDGiXDFcMFwwXDMwXDBcNIDGQURcMFwxglwxNVwwQFwyXDBcM+RBgFwxXDiAgZ/GQU9cMFwwXDJcMFwy5IFcMFwxXDZCRFwwQVwyXDE2XDCAXDKAXDMkQoBcMVw2XDJFXDBcMTJCUFw0gFwygFwzJEKAXDFcMzCAJYDGQURcMFwxglwxNlww5EFcMFwxxlwxQFwwzEHAXDPkgVwwXDFcNsJQXDBcN1wyUVw0XDdCUVw0QYJcMTdcMIZCSlwwjIJKXDWkXDJcMFwxJIJcMFwwS1wyXDBcMItcMlwwXDDHwsBcM8xcMsFcNeSCXDBcMcxCwVw15FwyXDFcMVwzMFwwXDmAzMNBXDfkg1wwXDFcMTJcNMJcNySEXDBcMVwiRFwwXDDeg1w3gFwxMoRNXDckhFwwXDFLXDRcMFwwSkJcNFw4XDEyhE1cNySEXDBcMUtcNFwwXDCKQlw0XDgsRFwxXDBcOFwwhKNcMTJcNFJcNCSEXDBcMVwxMkRSXDiBhFwxOFwwwcRcMThcMCREXDBcMlwxMlw0U1w0jETTXDekhFwwXDHBhFwxOVwwXDbFUVwwJESAXDJcNsRRXDBMXDRSXDRkhFwwXDFMxNNcOGRcNFwwXDEkRFwwXDBcMTJcNFRcNCREXDBcMd7D/1wxMjfpQlwwXDBqXDP2XDEyN8NcMlwwXDBcMYNcMTlcMEGDXDE5XDCGQ1RcMMBcM4BcNKRcM1wxXDFcMzBAXDmAxkREXDBcMYVcMjBcMEBcNYBcOOREgFwxwcRcMjBcMFwyOFw1XDBcOUFcNVwyMVww6Fw0XDeAx4VcNVw5x0XVXDExXDE0XDZVXDExXDdcNlw2XDlcN0ZVXDEyXDMxwNJcMTFcMzDAXDCA4kJcMFwwXDMwQFwwgMNcMoBcMFwzMEBcNIBHhlw1XDlHhtVcMTKOXDZVXDExh4ZcNlw5h4ZVXDEzToaGXDEyXDEzQ1w2XDZNXDPVXDaGRkRcMMHGXDIxXDBcMFw3XDBcMTJBXDdcMjJcMIBcN4BcMTHBR1wyMlww3caHXDEzXDBcN4BcMTJBh1wyMlwwpEZcMFwy50T4XDEyN6mDXDBcMCrE9VwxMjcgQFwzp1wzMFwwXDOAkkNcM1w2xkNEXDBcMcRcMjJcMEBcNFwwXDeBhFwyMlww5ENcMFwy0oNcM67PQ9dcN1w4wIOfxkNEXDBcNsRPXDDkQ1wwXDFcMzDCXDaAhkNEXDDBg1wyM1wwpENcMFwxgcNcMjNcMMBcM4BcMlwxXDRcMjRcMJ1cM1w0XDfGQ1hcMMeD2Fw3XDBcNFwwXDfkQ1wwXDHGw1hcMMdcM9lcN1wwXDRcMFw35INcMFwxXDEyRMtcN4FEXDI1XDAkhIBcMUyE2Vw3ZERcMFwxRkREXDCAXDRcMFw4ZERcMFwxRsRZXDCAXDRcMFw4ZIRcMFwxXDhAhJ9cMzDC/1wxMjfsgVwxXDBcOMBcMbTGQURcMFwxQlwyNlwwRsJPXDBcMjlCXDJcNORBXDBcMcbBT1wwXDaCS1ww0lwxglwzXDjAXDG1xkFEXDBcNoJaXDDkQVwwXDHGXDFAXDDMQcBcM+SBXDBcMVw2wlBcMFw3XDJRXDRcN8JaXDRBglwxN1wwhlwyW1wwjIJKXDWkXDJcMFwxJIJcMFwwRlwyW1wwTELbXDTBglwyN1wwZEKAXDFHwsBcM0xcMsFcNGSCXDBcMUzC21w0ZFwyXDFcMVwzMEAggEzDQVw2ZINcMFwxjFwz3Fw2pINcMFwxokNcMFwwnsNcMzCAhsNQXDCHXDNRXDeHQ1xcXDfAXDOAXDZcM1w0XDBcMKSDgFwxzINcXFw35INcMFwxzMPcXDfkg1wwXDFcMTFcNFwwXDBBXDRcMjlcMIZEXVwwh4RdXDnBRFwyOFwwXDNcNYBcMKSEgFwx7MRcMVwwXDjAhLvsXDRcMlwwXDjAXDS8zFw0U1w0TIVcXFw3ZIVcMFwxgVw1XDI5XDDGxV1cMOREgFwyzFw0Ulw05IRcMFwxzMTTXDnkhFwwXDHMRN5cOUFcNVwyOVww5ISAXDFcMVw1XDI5XDBMxdtcOWRcNVwxXDFcMzDAXDSARsZaXDBHht5cMTJHxt5cMTKHXDZfXDEyxlw2W1wwzIbKXDEz5Fw2XDBcMWSGXDBcMFwKRIZcMTIgQFw0ulwzMMBcMYCORoRcMTKSxlRcMTPOhoZcMTJcMTSHhlwxMlJHX1wxM1wxM0dcN1wxNFwKXDSHXDEzXDEzXDVVXApAXDSAXDEyaUVcMFww6kX6XDEyN0xcNVRcNGRFXDBcMUyFX1w5ZIVcMFwxYkVcMFwwnsNcMTSAIMBfXApcMzCAXDCATFw1YFw5ZEVcMFwxnlwzXDEzgExFYFw3xoVaXDBcMVw2XDIxXDBkRVwwXDJMhWBcN8ZcNV5cMGSFgFwxjIVfXDmkhVwwXDGiRVwwXDCew1wKgIxcNWBcOaRFXDBcMYRcNFwwXDCMXDXcXAqkhVwwXDGiRVwwXDCeg1w4gIZFRFwwwcUgXDBcMTJcNuFcCiSGXDBcMUxG4VwKZFw2XDBcMaRFXDBcMIZcNVpcMMyFYVw25IVcMFwxzMXhXDEx5Fw1XDBcMaSFXDBcMMxcNWJcMTHkhVwwXDFcMTKG4VwxMSSGXDBcMVwxMkZiXDEyJEZcMFwxXDEyhuJcMTGAXDZcMFw2JEaAXDFcMTLG4lwxMYBcNoBcCsxcNmNcNuSGXDBcMVwxXDdcMjFcMENcN1wwXDAkRlwwXDNcNlw2W1wwXDEyRmNcMTKMhuNcMTGkXDZcMFwxJEZcMFwwnsP/XDEyN2lCXDBcMOrC3lwxMjdGXDJbXDBMwuNcNGSCXDBcMWJCXDBcMFwzMMBcMIBGXDJbXDBMXDLkXDTEXDJcMFwwZEKAXDEmXDCAXDCRXDBcMFwwXDRcN0VkaXRvclw0XDE0Z2V0X3NlbGVjdGlvblwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4cmVnaW9uc1w0XDExcmVnaW9ubGlzdFw0XDVpdGVyXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDE1dG9fYXVkaW9yZWdpb25cNFw2aXNuaWxcNFwKTHVhRGlhbG9nXDRcOE1lc3NhZ2VcNFwxM0FkanVzdCBUZW1wb1wyMCtUaGUgc2VsZWN0ZWQgcmVnaW9uIGlzIG5vdCBhbiBhdWRpbyByZWdpb25cNFwxMk1lc3NhZ2VUeXBlXDRcNUluZm9cNFwxMUJ1dHRvblR5cGVcNFw2Q2xvc2VcNFw2cHJpbnRcNFw0cnVuXDRcMTVjb2xsZWN0Z2FyYmFnZVw0XDEzYXVkaW9fcmVnaW9uXDQlUGxlYXNlIHNlbGVjdCBleGFjdGx5IDEgYXVkaW8gcmVnaW9uXDRcNXR5cGVcNFw5ZHJvcGRvd25cNFw0a2V5XDRcNnRpdGxlXDRcIkNob29zZSBob3cgeW91IHdhbnQgdG8gYWRqdXN0IEJQTVw0XDd2YWx1ZXNcNFwyNUNob29zZSBob3cgdG8gYWRqdXN0IEJQTVwyMCtGcm9tIHByb2plY3QgdGVtcG8gKGJlZ2lubmluZyBvZiB0aW1lbGluZSlcMTlcMlwwXDBcMFwwXDBcMFwwXDRcMTNTZXQgeW91ciBCUE1cMTlcM1wwXDBcMFwwXDBcMFwwXDRcOGRlZmF1bHRcNFwzb2JcNFw3RGlhbG9nXDRcMTFCUE0gQ2hhbmdlXDRcM2F2XDRcM3RwXDRcOVRlbXBvcmFsXDRcCnRpbWVwb3NfdFw0XDhTZXNzaW9uXDRcMjBub21pbmFsX3NhbXBsZV9yYXRlXDRcM3RtXDRcOVRlbXBvTWFwXDRcNXJlYWRcNFwxM3RhcmdldF90ZW1wb1w0XDIzcXVhcnRlcnNfcGVyX21pbnV0ZV9hdFwwXDRcMzBEaWFsb2cgd2FzIGNhbmNlbGVkLiBFeGl0aW5nLlw0XDdudW1iZXJcNFw1dGV4dFw0XDE0bnVtZXJpY192YWx1ZVw0XDl0b251bWJlclw0XDVuYW1lXDRcN3NvdXJjZVw0XDE0dG9fZmlsZXNvdXJjZVw0XDVwYXRoXDRcOWZpbGVwYXRoXDRcMlwiXDRcMTFleHRyYWN0QlBNXDRcCnJlbW92ZUJQTVw0XDExQlBNIGZvdW5kOlw0XDE0Y3VycmVudF90ZW1wb1w0XDIwUmVuYW1pbmcgcmVnaW9uIHRvOlw0XDlzZXRfbmFtZVw0XDI5Tm8gQlBNIGZvdW5kIGluIHJlZ2lvbiBuYW1lLlw0XDdBUkRPVVJcNFw3THVhQVBJXDRcNVZhbXBcNCdsaWJhcmRvdXJ2YW1wcGx1Z2luczpxbS1iYXJiZWF0dHJhY2tlclw0XDljYWxsYmFja1w0XDdwbHVnaW5cNFwxM3NldFBhcmFtZXRlclw0XDE0QmVhdHMgUGVyIEJhclwxOVw0XDBcMFwwXDBcMFwwXDBcNFw4YW5hbHl6ZVw0XDEydG9fcmVhZGFibGVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcMjFnZXRSZW1haW5pbmdGZWF0dXJlc1w0XDZyZXNldFw0XDZwYWlyc1w0I0Rpc3RhbmNlIGJldHdlZW4gYmVhdHMgZm9yIHJlZ2lvbjpcMTlcMlwwXDBcMFwwXDBcMFwwXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDViZWF0XDRcNHBvc1w0XDIzRGlzdGFuY2UgYmV0d2VlbiBCZWF0IFw0XDExIGFuZCBCZWF0IFw0XDI6XDRcOHNhbXBsZXNcMjA9QXZlcmFnZSBkaXN0YW5jZSBiZXR3ZWVuIGJlYXRzIChleGNsdWRpbmcgdGhlIGZpcnN0IEJlYXQgNCk6XDE5gLtcMFwwXDBcMFwwXDBcMTk8XDBcMFwwXDBcMFwwXDBcNFwyNU5vIGRpc3RhbmNlcyBjYWxjdWxhdGVkLlw0XDZzb3ggIFw0KCAtdCByYXcgLXIgNDgwMDAgIC1lIGZsb2F0IC1jIDEgLSB8IGJwbVw0XDNvc1w0XDhleGVjdXRlXDRcM2lvXDRcNnBvcGVuXDRcMyphXDRcNmNsb3NlXDRcOXRvbnVtYmVyXDRcMjJmaW5kX3RyYWNrX2Zvcl9yZWdpb25cNFwKYmxhbmsgaXMgXDRcOWJwbXNoaWZ0XDRcNVZhbXBcNFw4U2Vzc2lvblw0XDI1YmVnaW5fcmV2ZXJzaWJsZV9jb21tYW5kXDRcMTlSdWJiZXJiYW5kIFJlZ2lvbnNcNFw1aXRlclw0XDZpc25pbFw0XDExUnViYmVyYmFuZFw0XDlyZWFkYWJsZVw0XDE2cmVhZGFibGVfbGVuZ3RoXDE5XDBcMFwwXDBcMFwwXDBcMFw0XApMdWFEaWFsb2dcNFwxNVByb2dyZXNzV2luZG93XDRcMTR2YW1wX2NhbGxiYWNrXDRcMTJyYl9wcm9ncmVzc1w0XDNhdFw0XDlSZWFsVGltZVw0XDE1cmVhbFRpbWUyRnJhbWVcNFwKdGltZXN0YW1wXDE5XDNcMFwwXDBcMFwwXDBcMFw0XDljYW5jZWxlZFwxOVw4XDBcMFwwXDBcMFwwXDBcNFw1ZG9uZVw0XDIxc2V0X3N0cmVjaF9hbmRfcGl0Y2hcNFw4cHJvY2Vzc1w0XDE5bmV3IGF1ZGlvIHJlZ2lvbjogXDRcNW5hbWVcNFw3bGVuZ3RoXDRcMTJ0b19zdGF0ZWZ1bFw0XDNpZFw0XDlwbGF5bGlzdFw0XDE0Y2xlYXJfY2hhbmdlc1w0XDE0cmVtb3ZlX3JlZ2lvblw0XDExYWRkX3JlZ2lvblw0XDlwb3NpdGlvblw0XDI2YWRkX3N0YXRlZnVsX2RpZmZfY29tbWFuZFw0XDI0dG9fc3RhdGVmdWxkZXN0cnVjdGlibGVcNFwzMWFib3J0X2VtcHR5X3JldmVyc2libGVfY29tbWFuZFw0XDI2Y29tbWl0X3JldmVyc2libGVfY29tbWFuZFwxXDBcMFwwXDBcMFw5XDBcMFwwXDBNXDBcMFwwX1wwXDBcMFwxXDBcNVwyNFwwXDBcMEZcMEBcMIBcMFwwXDBkgFwwXDFiQFwwXDBcMzBAXDCAg1wwXDBcMKZcMFwwXDGMQEBcMFwxgVwwXDCkgIBcMaJcMFwwXDBcMzBcMFwygNxcMFwwXDEhwICBXDMwQFwxgNxcMFwwXDEhXDDBXDFcMzCAXDCAw1wwgFww5lwwXDBcMVwzMEBcMIDDXDBcMFww5lwwXDBcMSZcMIBcMFw1XDBcMFwwXDRcOXRvbnVtYmVyXDRcNm1hdGNoXDRcN14oJWQrKVwxOVwyXDBcMFwwXDBcMFwwXDBcMTlcM1wwXDBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMGJcMFwwXDBpXDBcMFwwXDBcMFw0XDE2XDBcMFwwXDExXDCAXDBLXDBcMVwwSkBAgErAQIFKQEGCSsBBgytAgFwwRlwwQlwwR0DCXDCBgFwyXDDAXDBcMFwwZICAXDGMwMJcMKSAXDBcMaZcMFwwXDEmXDCAXDBcMTJcMFwwXDBcNFw1dHlwZVw0XDZlbnRyeVw0XDRrZXlcNFw1dGV4dFw0XDhkZWZhdWx0XDRcMDA0MTIwXDRcNnRpdGxlXDRcNGJwbVw0XApMdWFEaWFsb2dcNFw3RGlhbG9nXDRcMTNDaGFuZ2UgdGVtcG9cNFw0cnVuXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMGxcMFwwXDBzXDBcMFwwXDBcMFw0XDE1XDBcMFwwXDExXDCAXDBLwFwwXDBKQECASsBAgUrAQIIrQIBcMEZAQVwwR4DBXDCBwFwxXDDAXDBcMFwwZICAXDGMXDDCXDCkQFwwXDFEXDBcMFwwJlwwgFwwXDlcMFwwXDBcNFw1dHlwZVw0XDZsYWJlbFw0XDZ0aXRsZVwyMEZJbnZhbGlkIGlucHV0ISBQbGVhc2UgZW50ZXIgYSAyIG9yIDMgZGlnaXQgbnVtYmVyIChkZWNpbWFscyBhbGxvd2VkKS5cNFw1dGV4dFw0XApMdWFEaWFsb2dcNFw3RGlhbG9nXDRcMTRJbnZhbGlkIElucHV0XDRcNHJ1blwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDCfXDBcMFwwpVwwXDBcMFwxXDBcNlwxN1wwXDBcMEZcMEBcMEdAwFwwgFwwXDBcMMGAXDBcMFwxwVwwXDBkgFwwXDJiQFwwXDBcMzCAXDGAhlwwQFwwh0BAXDHAXDBcMFwwXDFcMVwxXDBBwVwwXDCkgFwwXDJAXDBcMFwxZlwwXDBcMSZcMIBcMFw1XDBcMFwwXDRcN3N0cmluZ1w0XDZtYXRjaFw0XDMxKCVkJWQ/JWQ/KVstX10/JXMqW2JCXVtwUF1bbU1dXDE5XDFcMFwwXDBcMFwwXDBcMFw0XDI2W2JCXVtwUF1bbU1dJXMqW18tXT8oJWQrKVwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDCoXDBcMFwwr1wwXDBcMFwxXDBcNlwxNVwwXDBcMExcMEBcMMFAXDBcMFwxgVwwXDBkgFwwXDKMXDDAXDBcMcFcMFwwQYFcMFwwpIBcMFwyQFwwXDBcMYxcMMFcMFwxQVwxXDCkgIBcMUBcMFwwXDFmXDBcMFwxJlwwgFwwXDZcMFwwXDBcNFw1Z3N1Ylw0XDMxKCVkJWQ/JWQ/KVstX10/JXMqW2JCXVtwUF1bbU1dXDRcMVw0XDI2W2JCXVtwUF1bbU1dJXMqW18tXT8oJWQrKVw0XDZtYXRjaFw0XDEzXiVzKiguLSklcyokXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFww2lwwXDBcMO9cMFwwXDBcMVwwXDEyPlwwXDBcMExcMEBcMGSAXDBcMUdAwFwwYlwwXDBcMFwzMIBcNoCMgMBcMKRcMFwxXDFcMzBAXDWAh8HAXDKiXDFcMFwwXDMwgFw0gIZcMUFcMIdBQVwzh4FBXDPHwcFcMlwxXDJcMlwwpIGAXDHGXDFAXDDHQcJcM1w1XDJcMFwxXDEygkJcNCSCXDBcMVw2XDKCXDBLglwwXDBKgoGFhkJDXDDHgsNcMqSCXDBcMUqCXDKG5EGAXDGpQFwwXDAqwflcMTI3jFwwQFwwpIBcMFwxh8BDXDGiXDBcMFwwXDMwQFw1gMyAQFwx5FwwXDFcMVwzMFwwXDSAx8FAXDPiXDFcMFwwXDMwQFwzgMZcMUFcMMdBwVwzx4HBXDNcN8JBXDNBXDJcMlww5IGAXDFcNlwyQFwwXDdCQlw0RVwyXDBcMUyCwlw0ZIJcMFwxRkKCXDGAXDKAXDMkQoBcMelAXDBcMGpcMftcMTI3w1wwXDBcMOZcMFwwXDEmXDCAXDBcMTZcMFwwXDBcNFw2dGFibGVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcNWl0ZXJcNFwxM2hhc1RpbWVzdGFtcFw0XDVWYW1wXDRcOVJlYWxUaW1lXDRcMTVyZWFsVGltZTJGcmFtZVw0XAp0aW1lc3RhbXBcMTmAu1wwXDBcMFwwXDBcMFw0XDdpbnNlcnRcNFw1bmFtZVw0XDRwb3NcNFw1YmVhdFw0XDl0b251bWJlclw0XDZsYWJlbFwxOVwxXDBcMFwwXDBcMFwwXDBcNFwwXDBcMFwwXDBcMVw5XDFcMTRcMVwKXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMD1cMVwwXDBGXDFcMFwwXDFcMFwKXDI0XDBcMFwwRlwwQFwwTEDAXDBkgFwwXDFMgMBcMGRcMFwxXDFcMzDAXDKATMFAXDJkgVwwXDGMXDHBXDKkgVwwXDHMQUFcM0BcMlwwXDDkgYBcMcyBwVwz5IFcMFwx4kFcMFwwXDMwXDBcMIBmXDFcMFwxaUBcMFww6kD8XDEyN0bAQVwwgVwwXDJcMGRAXDBcMSZcMIBcMFw5XDBcMFwwXDRcOFNlc3Npb25cNFwxMWdldF90cmFja3NcNFw1aXRlclw0XDl0b190cmFja1w0XDlwbGF5bGlzdFw0XDEzcmVnaW9uX2J5X2lkXDRcNmlzbmlsXDRcN2Fzc2VydFwxOVwwXDBcMFwwXDBcMFwwXDBcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwfFwxXDBcMH5cMVwwXDBcMlwwXDZcOFwwXDBcMIVcMFwwXDCMXDBAXDFcNVwxgFwwXDE4XDGBXDBBQVwwXDClXDBcMFwyplwwXDBcMCZcMIBcMFwyXDBcMFwwXDRcOXByb2dyZXNzXDRcCkFuYWx5emluZ1wyXDBcMFwwXDFcMThcMVwxNVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMTI3XDFcMFwwgVwxXDBcMFwyXDBcNlw4XDBcMFwwhVwwXDBcMIxcMEBcMVw1XDGAXDBcMThcMYFcMEFBXDBcMKVcMFwwXDKmXDBcMFwwJlwwgFwwXDJcMFwwXDBcNFw5cHJvZ3Jlc3NcNFwxMVN0cmV0Y2hpbmdcMlwwXDBcMFwxXDE4XDFcMTVcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgIA==</ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="13055" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdICAgID0gXCJFZGl0b3JIb29rXCIsXApcOW5hbWUgICAgICAgID0gXCJhdXRvIHNhdmUgc25hcHNob3RcIixcClw5YXV0aG9yICAgICAgPSBcIkFyZG91ciBUZWFtXCIsXApcOWRlc2NyaXB0aW9uID0gXCJTYXZlIGEgc2Vzc2lvbi1zbmFwc2hvdCBwZXJpb2RpY2FsbHkgKGV2ZXJ5IG1pbnV0ZSkgbmFtZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgZGF0ZS10aW1lXCIsXAp9XApcCi0tIHN1YnNjcmliZSB0byBzaWduYWxzXAotLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0x1YVNpZ25hbC5MdWFTaWduYWxcCmZ1bmN0aW9uIHNpZ25hbHMgKClcClw5cmV0dXJuIEx1YVNpZ25hbC5TZXQoKTphZGQgKHtbTHVhU2lnbmFsLkx1YVRpbWVyU10gPSB0cnVlfSlcCmVuZFwKXAotLSBjcmVhdGUgY2FsbGJhY2sgZnVuY3Rpb25cCmZ1bmN0aW9uIGZhY3RvcnkgKClcClw5bG9jYWwgX2xhc3Rfc25hcHNob3RfdGltZSA9IDAgLS0gcGVyc2lzdGVudCB2YXJpYWJsZVwKXDlsb2NhbCBfc25hcHNob3RfaW50ZXJ2YWwgPSA2MCAqIDEgLS0gMTUgbWludXRlc1wKXApcOS0tIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIGludm9rZWQgd2hlbiBzaWduYWwgaXMgZW1pdHRlZCwgZXZlcnkgMTAwbXNcClw5cmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIHJlZiwgLi4uKVwKXApcOVw5bG9jYWwgbm93ID0gb3MudGltZSAoKTsgLS0gdW5peC10aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzBcClwKXDlcOS0tIHNraXAgaW5pdGlhbCBzYXZlIHdoZW4gc2NyaXB0IGlzIGxvYWRlZFwKXDlcOWlmIChfbGFzdF9zbmFwc2hvdF90aW1lID09IDApIHRoZW5cClw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3c7XApcOVw5ZW5kXApcClw5XDktLSBldmVyeSAxNSBtaW5zXApcOVw5aWYgKG5vdyA+IF9sYXN0X3NuYXBzaG90X3RpbWUgKyBfc25hcHNob3RfaW50ZXJ2YWwpIHRoZW5cClwKXDlcOVw5LS0gZG9uJ3Qgc2F2ZSB3aGlsZSByZWNvcmRpbmcsIG1heSBpbnRlcmZlcmUgd2l0aCByZWNvcmRpbmdcClw5XDlcOWlmIFNlc3Npb246YWN0aXZlbHlfcmVjb3JkaW5nKCkgdGhlblwKXDlcOVw5XDktLSBxdWV1ZSAzMCBzZWMgYWZ0ZXIgcmVjLXN0b3BcClw5XDlcOVw5X2xhc3Rfc25hcHNob3RfdGltZSA9IG5vdyAtIF9zbmFwc2hvdF9pbnRlcnZhbCArIDMwXApcOVw5XDlcOXJldHVyblwKXDlcOVw5ZW5kXApcClw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3dcClw5XDlcOS0tIGZvcm1hdCBkYXRlLXRpbWUgKGF2b2lkIGNvbG9uKVwKXDlcOVw5bG9jYWwgc25hcHNob3RfbmFtZSA9IG9zLmRhdGUgKFwiJVktJW0tJWQgJUguJU0uJVNcIiwgbm93KVwKXDlcOVw5LS0gc2F2ZSBzZXNzaW9uIC0tIGh0dHA6Ly9tYW51YWwuYXJkb3VyLm9yZy9sdWEtc2NyaXB0aW5nL2NsYXNzX3JlZmVyZW5jZS8jQVJET1VSOlNlc3Npb25cClw5XDlcOVNlc3Npb246c2F2ZV9zdGF0ZSAoXCJiYWNrdXAgXCIgLi4gc25hcHNob3RfbmFtZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSlcClw5XDllbmRcClwKXDllbmRcCmVuZFwKIiAgc1siZiJdID0gIlwyN0x1YVNcMFwyNZNcMTNcClwyNlwKXDRcOFw0XDhcOHhWXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCh3QFwxXDBcMTVcMFwwXDAvXDBcMFwwXDBcMFwzXDVcMFwwXDBcMVwwXDBcMEFAXDBcMKxcMFwwXDCmXDBcMFwxJlwwgFwwXDJcMFwwXDBcMTlcMFwwXDBcMFwwXDBcMFwwXDE5PFwwXDBcMFwwXDBcMFwwXDFcMFwwXDBcMFwwXDFcMFwwXDBcMFwyMFwwXDBcMC5cMFwwXDBcMlwxXAomXDBcMFwwhlwwQFwwh0BAXDGkgIBcMMVcMIBcMFwzMYDAXDFcMzBcMFwwgIlcMIBcMMVcMIBcMFw1XDFcMFwxzVwwgVwxIICAXDFcMzBcMFw2gMbAQFwwzFwwwVwx5IBcMFwx4lwwXDBcMFwzMFwwXDGAxVwwXDBcMc7AXDBcMc1AwVwxyVwwgFwwJlwwgFwwiVwwgFwwxlwwQFwwx4DBXDFcMcFcMVwwQFwxXDBcMeSAgFwxXDbBQFwwXDEyXDFCXDKBQVwyXDDAXDGAXDGdwVwxXDPDXDFcMFwwXDNcMlwwXDBDXDJcMFwwJEFcMFwzJlwwgFwwXApcMFwwXDBcNFwzb3NcNFw1dGltZVwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4U2Vzc2lvblw0XDE5YWN0aXZlbHlfcmVjb3JkaW5nXDE5XDMwXDBcMFwwXDBcMFwwXDBcNFw1ZGF0ZVw0XDE4JVktJW0tJWQgJUguJU0uJVNcNFwxMXNhdmVfc3RhdGVcNFw4YmFja3VwIFwzXDBcMFwwXDBcMFwxXDBcMVwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNbImEiXSA9IHt9IHNbImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2F1dG9zYXZlLmx1YSIgICBzWyJuIl0gPSAiYXV0byBzYXZlIHNuYXBzaG90IiAg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="13895" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000"></LuaCallback>
  </ActionHooks>
</UIScripts>

<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="1618" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbImEiXSA9IHt9IHNbImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL2F1dG9zYXZlLmx1YSIgICBzWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwxNVwwXDBcMDAwNFwwXDBcMFwwXDBcM1w1XDBcMFwwXDFcMFwwXDBBQFwwXDCsXDBcMFwwplwwXDBcMSZcMIBcMFwyXDBcMFwwXDE5XDBcMFwwXDBcMFwwXDBcMFwxOTxcMFwwXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMjFcMFwwXDAwMDNcMFwwXDBcMlwxXDAxMTRcMFwwXDCGXDBAXDCHQEBcMaSAgFwwxVwwgFwwXDMxgMBcMVwzMFwwXDCAiVwwgFwwxVwwgFwwXDVcMVwwXDHNXDCBXDEggIBcMVwzMIBcOYDGwEBcMMxcMMFcMeSAXDBcMeJcMFwwXDBcMzBcMFwxgMVcMFwwXDHOwFwwXDHNQMFcMclcMIBcMCZcMIBcMMbAQFwwzMDBXDHkgFwwXDFcOMBcMIPGgEFcMFwxXDFcMlww3VwwgVwxXDZcMUBcMFw3QUJcMkGBXDJcMIBcMYBcMV2BgVwyJEFcMFwxiVwwgFwwXDZcMUBcMFw3wUJcMkFcMVwzXDCAXDFcMFwxJIGAXDFGwUBcMExBw1wywFwxgFwxXDGCXDNcMEBcMlwwXDLdQYJcM1wzXDJcMFwwQ1wyXDBcMINcMlwwXDBkQVwwXDMmXDCAXDBcMTVcMFwwXDBcNFwzb3NcNFw1dGltZVwxOVwwXDBcMFwwXDBcMFwwXDBcNFw4U2Vzc2lvblw0XDE5YWN0aXZlbHlfcmVjb3JkaW5nXDE5XDMwXDBcMFwwXDBcMFwwXDBcNFw2c3BhdGhcNFw1cGF0aFw0XDkvYmFja3Vwc1w0XDhleGVjdXRlXDRcCm1rZGlyIC1wIFw0XDVkYXRlXDRcMTglWS0lbS0lZCAlSC4lTS4lU1w0XDExc2F2ZV9zdGF0ZVw0XDkvYmFja3VwIFwzXDBcMFwwXDBcMFwxXDBcMVwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIHNbInMiXSA9ICJhcmRvdXIge1wKIFtcInR5cGVcIl0gICAgPSBcIkVkaXRvckhvb2tcIixcCiBuYW1lICAgICAgICA9IFwiYXV0byBzYXZlIHNuYXBzaG90XCIsXAogYXV0aG9yICAgICAgPSBcIkFyZG91ciBUZWFtXCIsXAogZGVzY3JpcHRpb24gPSBcIlNhdmUgYSBzZXNzaW9uLXNuYXBzaG90IHBlcmlvZGljYWxseSAoZXZlcnkgbWludXRlKSBuYW1lZCBhZnRlciB0aGUgY3VycmVudCBkYXRlLXRpbWUgaW4gYSBzdWJmb2xkZXJcIixcCn1cClwKXAotLSBzdWJzY3JpYmUgdG8gc2lnbmFsc1wKZnVuY3Rpb24gc2lnbmFscyAoKVwKICByZXR1cm4gTHVhU2lnbmFsLlNldCgpOmFkZCAoe1tMdWFTaWduYWwuTHVhVGltZXJTXSA9IHRydWV9KVwKZW5kXApcCi0tIGNyZWF0ZSBjYWxsYmFjayBmdW5jdGlvblwKZnVuY3Rpb24gZmFjdG9yeSAoKVwKICBsb2NhbCBfbGFzdF9zbmFwc2hvdF90aW1lID0gMCAtLSBwZXJzaXN0ZW50IHZhcmlhYmxlXAogIGxvY2FsIF9zbmFwc2hvdF9pbnRlcnZhbCA9IDYwICogMSAtLSBpbnRlcnZhbCBpbiBzZWNvbmRzIChjdXJyZW50bHkgc2V0IHRvIDYwIHNlYylcClwKXApcCiAgcmV0dXJuIGZ1bmN0aW9uIChzaWduYWwsIHJlZiwgLi4uKVwKICAgIGxvY2FsIG5vdyA9IG9zLnRpbWUoKSAtLSB1bml4LXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MFwKXAogICAgLS0gc2tpcCBpbml0aWFsIHNhdmUgd2hlbiBzY3JpcHQgaXMgbG9hZGVkXAogICAgaWYgKF9sYXN0X3NuYXBzaG90X3RpbWUgPT0gMCkgdGhlblwKICAgICAgX2xhc3Rfc25hcHNob3RfdGltZSA9IG5vd1wKICAgIGVuZFwKXAogICAgaWYgKG5vdyA+IF9sYXN0X3NuYXBzaG90X3RpbWUgKyBfc25hcHNob3RfaW50ZXJ2YWwpIHRoZW5cCiAgICAgIC0tIGRvbid0IHNhdmUgd2hpbGUgcmVjb3JkaW5nLCBtYXkgaW50ZXJmZXJlIHdpdGggcmVjb3JkaW5nXAogICAgICBpZiBTZXNzaW9uOmFjdGl2ZWx5X3JlY29yZGluZygpIHRoZW5cCiAgICAgICAgLS0gcXVldWUgMzAgc2VjIGFmdGVyIHJlYy1zdG9wXAogICAgICAgIF9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3cgLSBfc25hcHNob3RfaW50ZXJ2YWwgKyAzMFwKICAgICAgICByZXR1cm5cCiAgICAgIGVuZFwKXAogICAgICAgc3BhdGggPSBTZXNzaW9uOnBhdGgoKVwKLS0gRGVmaW5lIHRoZSBiYWNrdXAgc3ViZm9sZGVyIG5hbWUgKHJlbGF0aXZlIHRvIHRoZSBzZXNzaW9uIGZvbGRlcilcCmxvY2FsIGJhY2t1cF9mb2xkZXIgPSBzcGF0aC4uXCIvYmFja3Vwc1wiXApcCi0tIENyZWF0ZSB0aGUgYmFja3VwIGZvbGRlciBpZiBpdCBkb2Vzbid0IGV4aXN0IChMaW51eC9tYWNPUyB2ZXJzaW9uOyBhZGp1c3QgZm9yIFdpbmRvd3MgaWYgbmVlZGVkKVwKb3MuZXhlY3V0ZShcIm1rZGlyIC1wIFwiIC4uIGJhY2t1cF9mb2xkZXIpXApcCiAgICAgIF9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3dcCiAgICAgIC0tIGZvcm1hdCBkYXRlLXRpbWUgKGF2b2lkIGNvbG9uKVwKICAgICAgbG9jYWwgc25hcHNob3RfbmFtZSA9IG9zLmRhdGUgKFwiJVktJW0tJWQgJUguJU0uJVNcIiwgbm93KVwKICAgICAgLS0gc2F2ZSBzZXNzaW9uIHNuYXBzaG90IHRvIHRoZSBiYWNrdXAgc3ViZm9sZGVyXAogICAgICBTZXNzaW9uOnNhdmVfc3RhdGUoYmFja3VwX2ZvbGRlciAuLiBcIi9iYWNrdXAgXCIgLi4gc25hcHNob3RfbmFtZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSlcCiAgICBlbmRcClwKICBlbmRcCmVuZFwKIiAgc1sibiJdID0gImF1dG8gc2F2ZSBzbmFwc2hvdCIgIA==</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="6461" name="Create key file" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbImEiXSA9IHt9IHNbImEiXVsieC1zY3JpcHQtb3JpZ2luIl0gPSAiL2hvbWUvanVzdGluLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL3dyaXRla2V5ZmlsZS5sdWEiICAgc1sibiJdID0gIkNyZWF0ZSBrZXkgZmlsZSIgIHNbInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdICAgID0gXCJFZGl0b3JIb29rXCIsXApcOW5hbWUgICAgICAgID0gXCJDcmVhdGUga2V5IGZpbGVcIixcClw5YXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApcOWRlc2NyaXB0aW9uID0gXCJDcmVhdGUgdGV4dCBmaWxlIHRvIHN0b3JlIHRoZSBwcm9qZWN0cyBjdXJyZW50IGtleSBmb3IgYXV0b3R1bmUgYW5kIHRyYW5zcG9zaXRpb25cIixcCn1cClwKXApcCmZ1bmN0aW9uIHNpZ25hbHMgKClcClw5cyA9IEx1YVNpZ25hbC5TZXQoKVwKXDlzOmFkZCAoe1tMdWFTaWduYWwuU2V0U2Vzc2lvbl0gPSB0cnVlfSlcClw5cmV0dXJuIHNcCmVuZFwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcClwKbG9jYWwgcGF0aCAgPSBTZXNzaW9uOnBhdGgoKVwKcHJpbnQocGF0aClcClwKbG9jYWwgZnVuY3Rpb24gZ2V0X2ZvbGRlcl9iaXJ0aF90aW1lKHBhdGgpXAogICAgbG9jYWwgY29tbWFuZCA9IFwic3RhdCAtYyAlVyBcIiAuLiBwYXRoXAogICAgbG9jYWwgaGFuZGxlID0gaW8ucG9wZW4oY29tbWFuZClcCiAgICBsb2NhbCByZXN1bHQgPSBoYW5kbGU6cmVhZChcIiphXCIpXAogICAgaGFuZGxlOmNsb3NlKClcCiAgICByZXR1cm4gdG9udW1iZXIocmVzdWx0KVwKZW5kXApcClwKbG9jYWwgZnVuY3Rpb24gZm9sZGVyX2NyZWF0ZWRfbGVzc190aGFuX21pbnV0ZV9hZ28ocGF0aClcCiAgICBsb2NhbCBmb2xkZXJfYmlydGhfdGltZSA9IGdldF9mb2xkZXJfYmlydGhfdGltZShwYXRoKVwKICAgIGlmIGZvbGRlcl9iaXJ0aF90aW1lIHRoZW5cCiAgICAgICAgbG9jYWwgY3VycmVudF90aW1lID0gb3MudGltZSgpXAogICAgICAgIGxvY2FsIGRpZmZlcmVuY2UgPSBjdXJyZW50X3RpbWUgLSBmb2xkZXJfYmlydGhfdGltZVwKICAgICAgICByZXR1cm4gZGlmZmVyZW5jZSA8IDYwICAtLSA2MCBzZWNvbmRzID0gMSBtaW51dGVcCiAgICBlbHNlXAogICAgICAgIHJldHVybiBmYWxzZSAgLS0gVW5hYmxlIHRvIGdldCB0aGUgYmlydGggdGltZVwKICAgIGVuZFwKZW5kXApsb2NhbCBpc19sZXNzX3RoYW5fbWludXRlX2FnbyA9IGZvbGRlcl9jcmVhdGVkX2xlc3NfdGhhbl9taW51dGVfYWdvKHBhdGgpXApcCmlmIGlzX2xlc3NfdGhhbl9taW51dGVfYWdvIHRoZW5cClwKa2V5Y29tbWFuZCA9IFwiL29wdC9Mb2dpY2FsQXJkb3VyL2tleXN0b3JlLnNoIFwiLi5wYXRoXApcCm9zLmV4ZWN1dGUoa2V5Y29tbWFuZClcCmVsc2VcClwKcHJpbnQoXCJTZXNzaW9uIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ29cIilcClwKZW5kXApcClwKXAplbmQgZW5kXAoiICBzWyJmIl0gPSAiXDI3THVhU1wwXDI1k1wxM1wKXDI2XApcNFw4XDRcOFw4eFZcMFwwXDBcMFwwXDBcMFwwXDBcMFwwKHdAXDFcMFwxNlwwXDBcMDAwOFwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMTZcMFwwXDAwMDhcMFwwXDBcMVwxXDdcMjZcMFwwXDBGXDBAXDBMQMBcMGSAXDBcMYaAQFwwwFwwgFwwpEBcMFwxrFwwXDBcMOxAXDBcMFwwXDGAXDFAXDGAXDAkgVwwXDFcIlwxXDBcMFwzMFwwXDKAQVwxXDFcMIBcMYBcMF2BgVwyXDhAgYFGQUFcMEeBwVwyhsFAXDBkQVwwXDFcMzCAXDCARoFAXDCBwVwxXDBkQVwwXDEmXDCAXDBcOFwwXDBcMFw0XDhTZXNzaW9uXDRcNXBhdGhcNFw2cHJpbnRcNFwxMWtleWNvbW1hbmRcNCAvb3B0L0xvZ2ljYWxBcmRvdXIva2V5c3RvcmUuc2ggXDRcM29zXDRcOGV4ZWN1dGVcMjArU2Vzc2lvbiBub3QgY3JlYXRlZCBsZXNzIHRoYW4gYSBtaW51dGUgYWdvXDFcMFwwXDBcMFwwXDJcMFwwXDBcMFwyMlwwXDBcMFwyOFwwXDBcMFwxXDBcNlwxN1wwXDBcMEFcMFwwXDCAXDBcMFwwXYCAXDCGQEBcMIeAQFwxwFwwgFwwpIBcMFwxzMBAXDFBXDFcMVww5ICAXDFcMTJBQVwxJEFcMFwxXDaBQVwwQFwxgFwxJVwxXDBcMSZcMVwwXDAmXDCAXDBcN1wwXDBcMFw0XDEyc3RhdCAtYyAlVyBcNFwzaW9cNFw2cG9wZW5cNFw1cmVhZFw0XDMqYVw0XDZjbG9zZVw0XDl0b251bWJlclwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMzFcMFwwXDAoXDBcMFwwXDFcMFw1XDE4XDBcMFwwRVwwXDBcMIBcMFwwXDBkgFwwXDFiXDBcMFwwXDMwQFwygIZcMMBcMIdAQFwxpICAXDDOQFwwXDFggMBcMVwzMFwwXDCAXDNBXDBcMFwzXDGAXDAmXDFcMFwxXDMwQFwwgINcMFwwXDCmXDBcMFwxJlwwgFwwXDNcMFwwXDBcNFwzb3NcNFw1dGltZVwxOTxcMFwwXDBcMFwwXDBcMFwyXDBcMFwwXDFcMlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="28095" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbInMiXSA9ICJhcmRvdXIge1wKXDlbXCJ0eXBlXCJdICAgID0gXCJFZGl0b3JIb29rXCIsXApcOW5hbWUgICAgICAgID0gXCJMb2FkIGd1aWRlZCBtZW51XCIsXApcOWF1dGhvciAgICAgID0gXCJKdXN0aW4gRWhybGljaG1hblwiLFwKXDlkZXNjcmlwdGlvbiA9IFwiUHJlc2VudCBhIG1lbnUgb24gbmV3IHNlc3Npb24gdG8gbG9hZCB1cCBkaWZmZXJlbnQgdHJhY2sgdGVtcGxhdGVzXCIsXAp9XApcClwKXApmdW5jdGlvbiBzaWduYWxzICgpXApcOXMgPSBMdWFTaWduYWwuU2V0KClcClw5czphZGQgKHtbTHVhU2lnbmFsLlNldFNlc3Npb25dID0gdHJ1ZX0pXApcOXJldHVybiBzXAplbmRcClwKZnVuY3Rpb24gZmFjdG9yeSAoKSByZXR1cm4gZnVuY3Rpb24gKHNpZ25hbCwgLi4uKVwKXApcCmxvY2FsIHBhdGggID0gU2Vzc2lvbjpwYXRoKClcCnByaW50KHBhdGgpXApcClwKbG9jYWwgZnVuY3Rpb24gZ2V0X2ZvbGRlcl9iaXJ0aF90aW1lKHBhdGgpXAogICAgbG9jYWwgY29tbWFuZCA9IFwic3RhdCAtYyAlVyBcIiAuLiBwYXRoXAogICAgbG9jYWwgaGFuZGxlID0gaW8ucG9wZW4oY29tbWFuZClcCiAgICBsb2NhbCByZXN1bHQgPSBoYW5kbGU6cmVhZChcIiphXCIpXAogICAgaGFuZGxlOmNsb3NlKClcCiAgICByZXR1cm4gdG9udW1iZXIocmVzdWx0KVwKZW5kXApcClwKbG9jYWwgZnVuY3Rpb24gZm9sZGVyX2NyZWF0ZWRfbGVzc190aGFuX21pbnV0ZV9hZ28ocGF0aClcCiAgICBsb2NhbCBmb2xkZXJfYmlydGhfdGltZSA9IGdldF9mb2xkZXJfYmlydGhfdGltZShwYXRoKVwKICAgIGlmIGZvbGRlcl9iaXJ0aF90aW1lIHRoZW5cCiAgICAgICAgbG9jYWwgY3VycmVudF90aW1lID0gb3MudGltZSgpXAogICAgICAgIGxvY2FsIGRpZmZlcmVuY2UgPSBjdXJyZW50X3RpbWUgLSBmb2xkZXJfYmlydGhfdGltZVwKICAgICAgICByZXR1cm4gZGlmZmVyZW5jZSA8IDYwICAtLSA2MCBzZWNvbmRzID0gMSBtaW51dGVcCiAgICBlbHNlXAogICAgICAgIHJldHVybiBmYWxzZSAgLS0gVW5hYmxlIHRvIGdldCB0aGUgYmlydGggdGltZVwKICAgIGVuZFwKZW5kXApcClwKXApsb2NhbCBpc19sZXNzX3RoYW5fbWludXRlX2FnbyA9IGZvbGRlcl9jcmVhdGVkX2xlc3NfdGhhbl9taW51dGVfYWdvKHBhdGgpXApcCmlmIGlzX2xlc3NfdGhhbl9taW51dGVfYWdvIHRoZW5cClwKIEVkaXRvcjphY2Nlc3NfYWN0aW9uKFwiTHVhQWN0aW9uXCIsIFwic2NyaXB0LTFcIilcClwKXApcClwKXApcClwKXApcCmVsc2VcCiAgICBwcmludChcIlRoZSBmb2xkZXIgd2FzIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ28uXCIpXAplbmRcClwKXApcClwKXApcClwKZW5kIGVuZFwKIiAgc1sibiJdID0gIkxvYWQgZ3VpZGVkIG1lbnUiICBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9zZXNzaW9udHJhY2subHVhIiAgIHNbImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE2XDBcMFwwRVwwXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMTZcMFwwXDBFXDBcMFwwXDFcMVw5XDIzXDBcMFwwRlwwQFwwTEDAXDBkgFwwXDGGgEBcMMBcMIBcMKRAXDBcMaxcMFwwXDDsQFwwXDBcMFwxgFwxQFwxgFwwJIFcMFwxXCJcMVwwXDBcMzBAXDGARsFAXDBMXDHBXDLBQVwxXDBcMYJcMVwwZEFcMFwyXDMwgFwwgEaBQFwwgcFcMVwwZEFcMFwxJlwwgFwwXDhcMFwwXDBcNFw4U2Vzc2lvblw0XDVwYXRoXDRcNnByaW50XDRcN0VkaXRvclw0XDE0YWNjZXNzX2FjdGlvblw0XApMdWFBY3Rpb25cNFw5c2NyaXB0LTFcMDIwM1RoZSBmb2xkZXIgd2FzIG5vdCBjcmVhdGVkIGxlc3MgdGhhbiBhIG1pbnV0ZSBhZ28uXDFcMFwwXDBcMFwwXDJcMFwwXDBcMFwyM1wwXDBcMFwyOVwwXDBcMFwxXDBcNlwxN1wwXDBcMEFcMFwwXDCAXDBcMFwwXYCAXDCGQEBcMIeAQFwxwFwwgFwwpIBcMFwxzMBAXDFBXDFcMVww5ICAXDFcMTJBQVwxJEFcMFwxXDaBQVwwQFwxgFwxJVwxXDBcMSZcMVwwXDAmXDCAXDBcN1wwXDBcMFw0XDEyc3RhdCAtYyAlVyBcNFwzaW9cNFw2cG9wZW5cNFw1cmVhZFw0XDMqYVw0XDZjbG9zZVw0XDl0b251bWJlclwxXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAgXDBcMFwwKVwwXDBcMFwxXDBcNVwxOFwwXDBcMEVcMFwwXDCAXDBcMFwwZIBcMFwxYlwwXDBcMFwzMEBcMoCGXDDAXDCHQEBcMaSAgFwwzkBcMFwxYIDAXDFcMzBcMFwwgFwzQVwwXDBcM1wxgFwwJlwxXDBcMVwzMEBcMICDXDBcMFwwplwwXDBcMSZcMIBcMFwzXDBcMFwwXDRcM29zXDRcNXRpbWVcMTk8XDBcMFwwXDBcMFwwXDBcMlwwXDBcMFwxXDJcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDAiIA==</LuaCallback>
  </ActionHooks>
</UIScripts>

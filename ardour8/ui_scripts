<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="9538" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000">cyA9IHt9IHNbImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE2XDBcMFww81wxXDBcMFwwXDBcMlwzXDBcMFwwLFwwXDBcMCZcMFwwXDEmXDCAXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMTZcMFwwXDDzXDFcMFwwXDFcMVwyMC9cM1wwXDBGXDBAXDBMQMBcMGSAXDBcMYaAQFwwwFwwgFwwpEBcMFwxrFwwXDBcMOxAXDBcMFwwXDGAXDFAXDGAXDAkgVwwXDFcIlwxXDBcMFwzMEDHgEaBQFwwgcFcMFwwZEFcMFwxS1wxgFwwi0FcMVwwikFBgopBQYOKXDHCg8tBXDFcMMrBQoVcMTGCXDNcMFwKgsOGXApcMsSHXAqCxIhcClwyxYlcCoLFilwKXDLGi1wKgsaMXApcMseNXAqCx45cClwyyI9cCoLIkFwKXDLJkVwKgsmSXApcMsqTylwxXDKGXDExwlwwXDBcCsJKlVwKQkuWXArCS5fKXDGClFwxMcJcMFwwXApCTJVcCoJMllwKwkyXylwxXDKYXDExglwwXDBLXDJcMlwwSsJNm0pCTpxKwk6dSkJPnkrCT59KQlCgSsJQoUpCUaJcCkKCmkuCXDBcMEpcMtKjSoLSpFwKQlwyo8pcMVwymorBgYSKXDHTpWtBgFwwhkFTXDCHgVNcM8HBXDE5XDCkgVwwXDHGgUBcMFwwXDJcMFwz5EFcMFwxwVwxXDIwXDBcMFwyXDBcM0FCXDIwXDCAXDKAXDNcMjmCXDJcNEaCQFwwgFwyXDBcNGRCXDBcMUaCVFwwR8LUXDSBXDJcMlwwwFwygFwyZIKAXDGMXDLVXDSkglwwXDGiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgMNcNVwzMIBcNIDGgkBcMFwxQ1wyMVww5EJcMFwxwFwyXDBcNFwxg1wyMVww3Vwyg1w1XDFDXDNcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFcMMRcNVwzMIBcNIDGgkBcMFwxXDNcMjNcMORCXDBcMcBcMlwwXDRcMUNcMjNcMN1cMoNcNVwxg1wyM1wwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMYDEXDVcMzCAXDSAxoJAXDBcMcNcMjNcMORCXDBcMcBcMlwwXDRcMVwzXDI0XDDdXDKDXDVcMUNcMjRcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzHAylw1XDMwgFw0gMaCQFwwXDGDXDI0XDDkQlwwXDHAXDJcMFw0XDHDXDI0XDDdXDKDXDVcMYNcMjRcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFAy1w1XDMwgFw0gMaCQFwwXDFcM1wyNVww5EJcMFwxwFwyXDBcNFwxQ1wyNVww3Vwyg1w1XDFcM1wyNVwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMcDLXDVcMzCAXDSAxoJAXDBcMYNcMjVcMORCXDBcMcBcMlwwXDRcMcNcMjVcMN1cMoNcNVwxg1wyNVwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMYDSXDVcMzCAXDSAxoJAXDBcMVwzXDI2XDDkQlwwXDHAXDJcMFw0XDFDXDI2XDDdXDKDXDVcMUNcMThcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFcMNJcNVwzMIBcNIDGgkBcMFwxg1wyNlww5EJcMFwxwFwyXDBcNFwxw1wyNlww3Vwyg1w1XDHDXDE3XDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxwM1cNVwzMIBcNIDGgkBcMFwxXDNcMjdcMORCXDBcMcBcMlwwXDRcMUNcMjdcMN1cMoNcNVwxg1wyN1wwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMUDOXDVcMzCAXDSAxoJAXDBcMcNcMjdcMORCXDBcMcBcMlwwXDRcMVwzXDI4XDDdXDKDXDVcMUNcMjhcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzHAzlw1XDMwgFw0gMaCQFwwXDGDXDI4XDDkQlwwXDHAXDJcMFw0XDHDXDI4XDDdXDKDXDVcMVwzXDI5XDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQM9cNVwzMIBcNIDGgkBcMFwxQ1wyOVww5EJcMFwxwFwyXDBcNFwxg1wyOVww3Vwyg1w1XDHDXDI5XDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxwM9cNVwzMIBcNIDGgkBcMFwxXDNcMzBcMORCXDBcMcBcMlwwXDRcMUNcMzBcMN1cMoNcNVwxg1wzMFwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMUDQXDVcMzCAXDSAxoJAXDBcMcNcMzBcMORCXDBcMcBcMlwwXDRcMVwzXDMxXDDdXDKDXDVcMUNcMzFcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFcMMVcNVwzMIBcNIDGgkBcMFwxg1wzMVww5EJcMFwxwFwyXDBcNFwxw1wzMVww3Vwyg1w1XDGDXDMxXDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxgMVcNVwzMIBcNIDGgkBcMFwxXDMgXDDkQlwwXDHAXDJcMFw0XDFDIFww3Vwyg1w1XDFcMyBcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFcMMZcNVwzMIBcNIDGgkBcMFwxw1w1XDDkQlwwXDHAXDJcMFw0XDGDIFww3Vwyg1w1XDHDXDVcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzGAxlw1XDMwgFw0gMaCQFwwXDHDIFww5EJcMFwxwFwyXDBcNFwxXDMhXDDdXDKDXDVcMcMgXDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxXDDHXDVcMzCAXDSAxoJAXDBcMUMhXDDkQlwwXDHAXDJcMFw0XDGDIVww3Vwyg1w1XDFDIVwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMYDHXDVcMzCAXDSAxoJAXDBcMcMhXDDkQlwwXDHAXDJcMFw0XDFcM1wiXDDdXDKDXDVcMcMhXDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxXDDIXDVcMzCAXDSAxoJAXDBcMcMhXDDkQlwwXDHAXDJcMFw0XDFDXCJcMN1cMoNcNVwxg1wiXDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDOiXDJcMFwwXDMwQFw1gMdCQVw1XDMxQMxcNVwzMIBcNIDGgkBcMFwxg1wyNFww5EJcMFwxwFwyXDBcNFwxw1wiXDDdXDKDXDVcMVwzI1wwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMYDMXDVcMzCAXDSAxoJAXDBcMVwzXDI1XDDkQlwwXDHAXDJcMFw0XDFDI1ww3Vwyg1w1XDGDI1wwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMcDMXDVcMzCAXDSAxoJAXDBcMYNcMjVcMORCXDBcMcBcMlwwXDRcMcMjXDDdXDKDXDVcMVwzJFwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMcDQXDVcMzCAXDSAxoJAXDBcMUMkXDDkQlwwXDHAXDJcMFw0XDGDJFww3Vwyg1w1XDFDJFwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMUDRXDVcMzCAXDSAxoJAXDBcMcMkXDDkQlwwXDHAXDJcMFw0XDFcMyVcMN1cMoNcNVwxwyRcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzGAyFw1XDMwgFw0gMaCQFwwXDFDJVww5EJcMFwxwFwyXDBcNFwxgyVcMN1cMoNcNVwxwyVcMEZcM0BcMEzD1Vw2wcNcMlwwXDZEU1wwXDdcNFZcOFw3RFZcOEBcNIBcNYBcNFwwXDbGRFNcMMeE1lw5x8TWXDlkQ4BcM6JcMlwwXDBcMzBAXDWAx0JBXDVcMzFcMMlcNVwzMIBcNIDGgkBcMFwxQyVcMORCXDBcMcBcMlwwXDRcMVwzJlww3Vwyg1w1XDFDJlwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNYDHQkFcNVwzMYDJXDVcMzCAXDSAxoJAXDBcMYMmXDDkQlwwXDHAXDJcMFw0XDHDJlww3Vwyg1w1XDGDJlwwRlwzQFwwTMPVXDbBw1wyXDBcNkRTXDBcN1w0Vlw4XDdEVlw4QFw0gFw1gFw0XDBcNsZEU1wwx4TWXDnHxNZcOWRDgFwzolwyXDBcMFwzMEBcNoDHQkFcNVwzMVwwylw1XDMwgFw1gMaCQFwwXDGDJlww5EJcMFwxwFwyXDBcNFwxXDMnXDDdXDKDXDVcMUMnXDBGXDNAXDBMw9VcNsHDXDJcMFw2RFNcMFw3XDRWXDhcN0RWXDhAXDSAXDWAXDRcMFw2xkRTXDDHhNZcOcfE1lw5ZEOAXDNcMzCAXDCARoFAXDCBgSdcMGRBXDBcMSZcMIBcMJ9cMFwwXDBcNFw4U2Vzc2lvblw0XDVwYXRoXDRcNnByaW50XDIwL1RoZSBmb2xkZXIgd2FzIGNyZWF0ZWQgbGVzcyB0aGFuIGEgbWludXRlIGFnby5cNFw1dHlwZVw0XDlkcm9wZG93blw0XDRrZXlcNFw2dGl0bGVcNFwxM0Nob29zZSBUcmFja1w0XDd2YWx1ZXNcNFwyMENob29zZSBhIHRyYWNrIFR5cGVcMTlcMVwwXDBcMFwwXDBcMFwwXDRcMTFEcnVtIFRyYWNrXDRcMTJSZWQgWmVwcGxpblw0XDNyelw0XDEyQmxhY2sgUGVhcmxcNFwzYnBcNFwxMUJsb25kZSBCb3BcNFwzYm9cNFwyM1N0YW5kYXJkIERydW1zIChzZml6eilcNFw0c3RkXDRcMjVTdGFuZGFyZCAyIERydW1zIChzZml6eilcNFw0c3QyXDRcMTdFbGVjdHJvbmljIERydW1zXDRcNGVsZFw0XDE5Um9vbSBEcnVtcyAoc2ZpenopXDRcNHJtZFw0XDIwUG93ZXIgRHJ1bXMgKHNmaXp6KVw0XDRwd2RcNFwyMERhbmNlIERydW1zIChzZml6eilcNFw0ZGFkXDRcMTlKYXp6IERydW1zIChzZml6eilcNFw0anpkXDRcMDIyODA4LzgwOSBEcnVtcyAoc2ZpenopXDRcMDA0ODA4XDIwLERydW1sYWJvb2ggKERydW0gcGx1Z2luIHdpdGggbXVsdGlwbGUga2l0cylcNFw0ZHJsXDRcMjBCcnVzaCBEcnVtcyAoc2ZpenopXDRcNGJyZFw0XDI0T3JjaGVzdHJhbCBQZXJjIChzZml6eilcNFw0b3JwXDRcMTFJbnN0cnVtZW50XDQkQUNFIEZsdWlkIChUcmFkaXRpb25hbCBJbnN0cnVtZW50cylcNFwzYWNcNCBaeW5hZGRzdWJmeCAoVHJhZGl0aW9uYWwgU3ludGgpXDRcM3phXDQnU3VyZ2UgWFQgKFN5bnRoIHdpdGggYSBMT1Qgb2YgcHJlc2V0cylcNFwzc3RcNFwxNVNlc3Npb24gUGxheWVyXDRcNGFjc1w0XDR6YXNcNFw0c3RzXDRcMTNSZWNvcmQgQXVkaW9cNFw3Vm9jYWxzXDRcOENsYXNzaWNcNFw0Y2x2XDRcN0JyaWdodFw0XDRicnZcNFwxMUNvbXByZXNzZWRcNFw0Y292XDRcClRlbGVwaG9uZVw0XDR0bHZcNFw2RGFuY2VcNFw0ZGF2XDRcOE5hdHVyYWxcNFw0bmF2XDRcNUVkZ2VcNFw0ZWR2XDRcNUZ1enpcNFw0Znp2XDRcMTVHdWl0YXIgb3IgQmFzc1w0XDlHdWl0YXJpeFw0XDNneFw0XDEyUmF0YXRvdWlsbGVcNFwzcmFcNFw4ZGVmYXVsdFw0XDIwQ2hvb3NlIGEgdHJhY2sgdHlwZVw0XDdBUkRPVVJcNFwyMnVzZXJfY29uZmlnX2RpcmVjdG9yeVwxOVw4XDBcMFwwXDBcMFwwXDBcNFwxNnJvdXRlX3RlbXBsYXRlc1w0XDIvXDRcCkx1YURpYWxvZ1w0XDdEaWFsb2dcNFw0cnVuXDRcMjJZb3UgY2hvc2UgUmVkIFplcHBsaW5cNFwyMi9yZWQgemVwcGxpbi50ZW1wbGF0ZVw0XDI0bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGVcNFwxN1ByZXNlbnRhdGlvbkluZm9cNFwKbWF4X29yZGVyXDRcMjBQbGF5bGlzdERpc3Bvc2l0aW9uXDRcMTJOZXdQbGF5bGlzdFw0XDIzWW91IHBpY2tlZCBCbGFjayBQZWFybFw0XDMwL0JsYWNrIFBlYXJsIERydW1raXQudGVtcGxhdGVcNFwyMUJsYWNrIFBlYXJsIERydW0gS2l0XDRcCmJsb25kIGJvcFw0XDI5L0Jsb25kZSBCb3AgRHJ1bWtpdC50ZW1wbGF0ZVw0XDE5QmxvbmRlIEJvcCBEcnVta2l0XDRcMTZBY2UgRmx1aWQgU3ludGhcNFwxNi9GbHVpZC50ZW1wbGF0ZVw0XDEyWnluYWRkc3ViZnhcNFwxNC96ZngudGVtcGxhdGVcNFw5U3VyZ2UgWFRcNFwxOS9TdXJnZSBYVC50ZW1wbGF0ZVw0XDROQU1cNFwyMi9SYXRhdG91aWxsZS50ZW1wbGF0ZVw0XDlHdXRpYXJpeFw0XDE5L0d1aXRhcml4LnRlbXBsYXRlXDRcMTVDbGFzc2ljIFZvY2Fsc1w0XDE4L2NsYXNzaWMudGVtcGxhdGVcNFw4Y2xhc3NpY1w0XDE0QnJpZ2h0IFZvY2Fsc1w0XDE3L2JyaWdodC50ZW1wbGF0ZVw0XDdicmlnaHRcNFwxOENvbXByZXNzZWQgVm9jYWxzXDRcMjEvY29tcHJlc3NlZC50ZW1wbGF0ZVw0XDExY29tcHJlc3NlZFw0XDE3dGVsZXBob25lIFZvY2Fsc1w0XDIwL3RlbGVwaG9uZS50ZW1wbGF0ZVw0XAp0ZWxlcGhvbmVcNFwxM0RhbmNlIFZvY2Fsc1w0XDE2L2RhbmNlLnRlbXBsYXRlXDRcNmRhbmNlXDRcMTVOYXR1cmFsIFZvY2Fsc1w0XDE4L25hdHVyYWwudGVtcGxhdGVcNFw4bmF0dXJhbFw0XDE1U3RhbmRhcmQgRHJ1bXNcNFwyNS9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVw0XDE3U3RhbmRhcmQgMiBEcnVtc1w0XDI3L1N0YW5kYXJkIDIgRHJ1bXMudGVtcGxhdGVcNFwyNy9FbGVjdHJvbmljIERydW1zLnRlbXBsYXRlXDRcMTFSb29tIERydW1zXDRcMjEvUm9vbSBEcnVtcy50ZW1wbGF0ZVw0XDEyUG93ZXIgRHJ1bXNcNFwyMi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVw0XDEyRGFuY2UgRHJ1bXNcNFwyMi9EYW5jZSBEcnVtcy50ZW1wbGF0ZVw0XDIxL0phenogRHJ1bXMudGVtcGxhdGVcNFwxMUphenogRHJ1bXNcNFwyMS9HTSBTZXNzaW9uLnRlbXBsYXRlXDRcMjRBY2UgRmx1aWQgU3ludGggU2Vzc2lvblw0XDIzL3phZnggc2Vzc2lvbi50ZW1wbGF0ZVw0XDIwWnluYWRkc3ViZnggU2Vzc2lvblw0XDI3L1N1cmdlIFhUIFNlc3Npb24udGVtcGxhdGVcNFwxN1N1cmdlIFhUIFNlc3Npb25cNFwxMkVkZ2UgVm9jYWxzXDRcMjIvRWRnZSBWb2NhbHMudGVtcGxhdGVcNFwxMkZ1enogVm9jYWxzXDRcMjIvRnV6eiBWb2NhbHMudGVtcGxhdGVcNFwKODA4IERydW1zXDRcMjAvODA4LWRydW1zLnRlbXBsYXRlXDRcMDE0ODA4LzgwOSBEcnVtc1w0XDIxL2RydW1sYWJvb2gudGVtcGxhdGVcNFwxMWRydW1sYWJvb2hcNFwxMkJydXNoIERydW1zXDRcMjIvQnJ1c2ggRHJ1bXMudGVtcGxhdGVcNFwyNi9PcmNoZXN0cmFsIFBlcmMudGVtcGxhdGVcNFwxNk9yY2hlc3RyYWwgUGVyY1wwMjAzVGhlIGZvbGRlciB3YXMgbm90IGNyZWF0ZWQgbGVzcyB0aGFuIGEgbWludXRlIGFnby5cMVwwXDBcMFwwXDBcMlwwXDBcMFwwXDIzXDBcMFwwXDI5XDBcMFwwXDFcMFw2XDE3XDBcMFwwQVwwXDBcMIBcMFwwXDBdgIBcMIZAQFwwh4BAXDHAXDCAXDCkgFwwXDHMwEBcMUFcMVwxXDDkgIBcMVwxMkFBXDEkQVwwXDFcNoFBXDBAXDGAXDElXDFcMFwxJlwxXDBcMCZcMIBcMFw3XDBcMFwwXDRcMTJzdGF0IC1jICVXIFw0XDNpb1w0XDZwb3Blblw0XDVyZWFkXDRcMyphXDRcNmNsb3NlXDRcOXRvbnVtYmVyXDFcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCBcMFwwXDApXDBcMFwwXDFcMFw1XDE4XDBcMFwwRVwwXDBcMIBcMFwwXDBkgFwwXDFiXDBcMFwwXDMwQFwygIZcMMBcMIdAQFwxpICAXDDOQFwwXDFggMBcMVwzMFwwXDCAXDNBXDBcMFwzXDGAXDAmXDFcMFwxXDMwQFwwgINcMFwwXDCmXDBcMFwxJlwwgFwwXDNcMFwwXDBcNFwzb3NcNFw1dGltZVwxOTxcMFwwXDBcMFwwXDBcMFwyXDBcMFwwXDFcMlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCIgc1sicyJdID0gImFyZG91ciB7XApcOVtcInR5cGVcIl0gICAgPSBcIkVkaXRvckhvb2tcIixcClw5bmFtZSAgICAgICAgPSBcIkxvYWQgZ3VpZGVkIG1lbnVcIixcClw5YXV0aG9yICAgICAgPSBcIkp1c3RpbiBFaHJsaWNobWFuXCIsXApcOWRlc2NyaXB0aW9uID0gXCJQcmVzZW50IGEgbWVudSBvbiBuZXcgc2Vzc2lvbiB0byBsb2FkIHVwIGRpZmZlcmVudCB0cmFjayB0ZW1wbGF0ZXNcIixcCn1cClwKXApcCmZ1bmN0aW9uIHNpZ25hbHMgKClcClw5cyA9IEx1YVNpZ25hbC5TZXQoKVwKXDlzOmFkZCAoe1tMdWFTaWduYWwuU2V0U2Vzc2lvbl0gPSB0cnVlfSlcClw5cmV0dXJuIHNcCmVuZFwKXApmdW5jdGlvbiBmYWN0b3J5ICgpIHJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCAuLi4pXApcClwKbG9jYWwgcGF0aCAgPSBTZXNzaW9uOnBhdGgoKVwKcHJpbnQocGF0aClcClwKXApsb2NhbCBmdW5jdGlvbiBnZXRfZm9sZGVyX2JpcnRoX3RpbWUocGF0aClcCiAgICBsb2NhbCBjb21tYW5kID0gXCJzdGF0IC1jICVXIFwiIC4uIHBhdGhcCiAgICBsb2NhbCBoYW5kbGUgPSBpby5wb3Blbihjb21tYW5kKVwKICAgIGxvY2FsIHJlc3VsdCA9IGhhbmRsZTpyZWFkKFwiKmFcIilcCiAgICBoYW5kbGU6Y2xvc2UoKVwKICAgIHJldHVybiB0b251bWJlcihyZXN1bHQpXAplbmRcClwKXApsb2NhbCBmdW5jdGlvbiBmb2xkZXJfY3JlYXRlZF9sZXNzX3RoYW5fbWludXRlX2FnbyhwYXRoKVwKICAgIGxvY2FsIGZvbGRlcl9iaXJ0aF90aW1lID0gZ2V0X2ZvbGRlcl9iaXJ0aF90aW1lKHBhdGgpXAogICAgaWYgZm9sZGVyX2JpcnRoX3RpbWUgdGhlblwKICAgICAgICBsb2NhbCBjdXJyZW50X3RpbWUgPSBvcy50aW1lKClcCiAgICAgICAgbG9jYWwgZGlmZmVyZW5jZSA9IGN1cnJlbnRfdGltZSAtIGZvbGRlcl9iaXJ0aF90aW1lXAogICAgICAgIHJldHVybiBkaWZmZXJlbmNlIDwgNjAgIC0tIDYwIHNlY29uZHMgPSAxIG1pbnV0ZVwKICAgIGVsc2VcCiAgICAgICAgcmV0dXJuIGZhbHNlICAtLSBVbmFibGUgdG8gZ2V0IHRoZSBiaXJ0aCB0aW1lXAogICAgZW5kXAplbmRcClwKXApcCmxvY2FsIGlzX2xlc3NfdGhhbl9taW51dGVfYWdvID0gZm9sZGVyX2NyZWF0ZWRfbGVzc190aGFuX21pbnV0ZV9hZ28ocGF0aClcClwKaWYgaXNfbGVzc190aGFuX21pbnV0ZV9hZ28gdGhlblwKICAgIHByaW50KFwiVGhlIGZvbGRlciB3YXMgY3JlYXRlZCBsZXNzIHRoYW4gYSBtaW51dGUgYWdvLlwiKVwKbG9jYWwgZGlhbG9nX29wdGlvbnMgPSB7XApcOVw5e1wKXDlcOVw5dHlwZSA9IFwiZHJvcGRvd25cIiwga2V5ID0gXCJkcm9wZG93blwiLCB0aXRsZSA9IFwiQ2hvb3NlIFRyYWNrXCIsIHZhbHVlcyA9XApcOVw5XDl7XApcOVw5XDlcOVtcIkNob29zZSBhIHRyYWNrIFR5cGVcIl0gPSAxLCBbXCJEcnVtIFRyYWNrXCJdID1cClwKXDlcOVw5XDl7XApcOVw5XDlcOVw5W1wiUmVkIFplcHBsaW5cIl0gPSBcInJ6XCIsIFtcIkJsYWNrIFBlYXJsXCJdID0gXCJicFwiLCBbXCJCbG9uZGUgQm9wXCJdID0gXCJib1wiLFtcIlN0YW5kYXJkIERydW1zIChzZml6eilcIl0gPSBcInN0ZFwiLCBbXCJTdGFuZGFyZCAyIERydW1zIChzZml6eilcIl0gPSBcInN0MlwiLFtcIkVsZWN0cm9uaWMgRHJ1bXNcIl0gPSBcImVsZFwiLCBbXCJSb29tIERydW1zIChzZml6eilcIl0gPSBcInJtZFwiLCAgIFtcIlBvd2VyIERydW1zIChzZml6eilcIl0gPSBcInB3ZFwiLCBbXCJEYW5jZSBEcnVtcyAoc2ZpenopXCJdID0gXCJkYWRcIixbXCJKYXp6IERydW1zIChzZml6eilcIl0gPSBcImp6ZFwiLCBbXCI4MDgvODA5IERydW1zIChzZml6eilcIl0gPSBcIjgwOFwiLCBcOVtcIkRydW1sYWJvb2ggKERydW0gcGx1Z2luIHdpdGggbXVsdGlwbGUga2l0cylcIl0gPSBcImRybFwiLFtcIkJydXNoIERydW1zIChzZml6eilcIl0gPSBcImJyZFwiLFtcIk9yY2hlc3RyYWwgUGVyYyAoc2ZpenopXCJdID0gXCJvcnBcIlwKXDlcOVw5XDl9LFtcIkluc3RydW1lbnRcIl0gPVwKXApcOVw5XDlcOXtcClw5XDlcOVw5XDlbXCJBQ0UgRmx1aWQgKFRyYWRpdGlvbmFsIEluc3RydW1lbnRzKVwiXSA9IFwiYWNcIiwgW1wiWnluYWRkc3ViZnggKFRyYWRpdGlvbmFsIFN5bnRoKVwiXSA9IFwiemFcIiwgW1wiU3VyZ2UgWFQgKFN5bnRoIHdpdGggYSBMT1Qgb2YgcHJlc2V0cylcIl0gPSBcInN0XCIgfSxcClw5XDlcOVw5XDlcOVtcIlNlc3Npb24gUGxheWVyXCJdID0ge1wKXDlcOVw5XDlcOVtcIkFDRSBGbHVpZCAoVHJhZGl0aW9uYWwgSW5zdHJ1bWVudHMpXCJdID0gXCJhY3NcIiwgW1wiWnluYWRkc3ViZnggKFRyYWRpdGlvbmFsIFN5bnRoKVwiXSA9IFwiemFzXCIsW1wiU3VyZ2UgWFQgKFN5bnRoIHdpdGggYSBMT1Qgb2YgcHJlc2V0cylcIl0gPSBcInN0c1wiXApcClw5XDlcOVw5fSxcClw5XDlcOVw5W1wiUmVjb3JkIEF1ZGlvXCJdID1cClwKXDlcOVw5XDl7XApcOVw5XDlcOVw5W1wiVm9jYWxzXCJdID0geyBbXCJDbGFzc2ljXCJdID0gXCJjbHZcIixbXCJCcmlnaHRcIl0gPSBcImJydlwiLCBbXCJDb21wcmVzc2VkXCJdID0gXCJjb3ZcIiwgW1wiVGVsZXBob25lXCJdID0gXCJ0bHZcIiwgW1wiRGFuY2VcIl0gPSBcImRhdlwiLCBbXCJOYXR1cmFsXCJdID0gXCJuYXZcIiwgW1wiRWRnZVwiXSA9ICBcImVkdlwiLFtcIkZ1enpcIl0gPSBcImZ6dlwifSxcClw5XDlcOVw5XDlbXCJHdWl0YXIgb3IgQmFzc1wiXSA9IHtcClw5XDlcOVw5XDlbXCJHdWl0YXJpeFwiXSA9IFwiZ3hcIiwgW1wiUmF0YXRvdWlsbGVcIl0gPSBcInJhXCJcClw5XDlcOVw5fSxcClw5XDlcOVw5fVwKXApcClw5XDlcOX0sXApcOVw5XDlkZWZhdWx0ID0gXCJDaG9vc2UgYSB0cmFjayB0eXBlXCJcClw5XDl9XApcOX1cClwKXDktLSBGZXRjaCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApsb2NhbCB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgPSBBUkRPVVIudXNlcl9jb25maWdfZGlyZWN0b3J5KDgpIC0tIGdldCB0aGUgY29uZmlnIGRpcmVjdG9yeSAodXNpbmcgdmVyc2lvbiA4KVwKXAotLSBQcmludCB0aGUgdXNlciBjb25maWcgZGlyZWN0b3J5XApwcmludCh1c2VyX2NvbmZpZ19kaXJlY3RvcnkpXApcClwKXApcClwKLS0gRGVmaW5lIHRoZSBzdWJkaXJlY3RvcnkgeW91IHdhbnQgdG8gY29uY2F0ZW5hdGVcCmxvY2FsIHN1YmRpciA9IFwicm91dGVfdGVtcGxhdGVzXCJcClwKLS0gQ29uY2F0ZW5hdGUgdGhlIGNvbmZpZyBkaXJlY3Rvcnkgd2l0aCB0aGUgc3ViZGlyZWN0b3J5XApsb2NhbCBmdWxsX3BhdGggPSB1c2VyX2NvbmZpZ19kaXJlY3RvcnkgLi4gXCIvXCIgLi4gc3ViZGlyXApcCi0tIFByaW50IHRoZSBmdWxsIHBhdGhcClwKXApwcmludCAoZnVsbF9wYXRoKVwKXApcClw5bG9jYWwgb2QgPSBMdWFEaWFsb2cuRGlhbG9nIChcIkNob29zZSBUcmFja1wiLCBkaWFsb2dfb3B0aW9ucylcClw5bG9jYWwgcnYgPSBvZDpydW4oKVwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicnpcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgY2hvc2UgUmVkIFplcHBsaW5cIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOS0tIGxvY2FsIHRlbXBsYXRlX3BhdGggPSBcIi9ob21lL2ptYW4vdGVtcGxhdGVzL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3JlZCB6ZXBwbGluLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJSZWQgWmVwcGxpblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYnBcIiB0aGVuXApcOVw5cHJpbnQoXCJZb3UgcGlja2VkIEJsYWNrIFBlYXJsXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9CbGFjayBQZWFybCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJCbGFjayBQZWFybCBEcnVtIEtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcClwKXApcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiYm9cIiB0aGVuXApcOVw5cHJpbnQoXCJibG9uZCBib3BcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOS0tbG9jYWwgdGVtcGxhdGVfcGF0aCA9IFwiL2hvbWUvam1hbi90ZW1wbGF0ZXMvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQmxvbmRlIEJvcCBEcnVta2l0LnRlbXBsYXRlXCJcClwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJsb25kZSBCb3AgRHJ1bWtpdFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJhY1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9GbHVpZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiQWNlIEZsdWlkIFN5bnRoXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInphXCIgdGhlblwKXDlcOXByaW50KFwiWnluYWRkc3ViZnhcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvemZ4LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJaeW5hZGRzdWJmeFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdFwiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gXCIvaG9tZS9qbWFuL3RlbXBsYXRlcy9TdXJnZSBYVC50ZW1wbGF0ZVwiXApcOVw5IGxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlN1cmdlIFhUXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicmFcIiB0aGVuXApcOVw5cHJpbnQoXCJOQU1cIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvUmF0YXRvdWlsbGUudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJhdGF0b3VpbGxlXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJneFwiIHRoZW5cClw5XDlwcmludChcIkd1dGlhcml4XCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5ICBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0d1aXRhcml4LnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJHdWl0YXJpeFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJjbHZcIiB0aGVuXApcOVw5cHJpbnQoXCJDbGFzc2ljIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvY2xhc3NpYy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiY2xhc3NpY1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJicnZcIiB0aGVuXApcOVw5cHJpbnQoXCJCcmlnaHQgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9icmlnaHQudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcImJyaWdodFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJjb3ZcIiB0aGVuXApcOVw5cHJpbnQoXCJDb21wcmVzc2VkIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvY29tcHJlc3NlZC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiY29tcHJlc3NlZFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInRsdlwiIHRoZW5cClw5XDlwcmludChcInRlbGVwaG9uZSBWb2NhbHNcIilcClwKXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3RlbGVwaG9uZS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwidGVsZXBob25lXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcClw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZGF2XCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9kYW5jZS50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiZGFuY2VcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJuYXZcIiB0aGVuXApcOVw5cHJpbnQoXCJOYXR1cmFsIFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvbmF0dXJhbC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwibmF0dXJhbFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwic3RkXCIgdGhlblwKXDlcOXByaW50KFwiU3RhbmRhcmQgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9TdGFuZGFyZCBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJzdDJcIiB0aGVuXApcOVw5cHJpbnQoXCJTdGFuZGFyZCAyIERydW1zXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3RhbmRhcmQgMiBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3RhbmRhcmQgMiBEcnVtc1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZWxkXCIgdGhlblwKXDlcOXByaW50KFwiRWxlY3Ryb25pYyBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL0VsZWN0cm9uaWMgRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkVsZWN0cm9uaWMgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClwKXDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicm1kXCIgdGhlblwKXDlcOXByaW50KFwiUm9vbSBEcnVtc1wiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL1Jvb20gRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIlJvb20gRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwicHdkXCIgdGhlblwKXDlcOXByaW50KFwiUG93ZXIgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9Qb3dlciBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiUG93ZXIgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiZGFkXCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9EYW5jZSBEcnVtcy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRGFuY2UgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwianpkXCIgdGhlblwKXDlcOXByaW50KFwiRGFuY2UgRHJ1bXNcIilcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9KYXp6IERydW1zLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJKYXp6IERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImFjc1wiIHRoZW5cClw5XDlwcmludChcIkFjZSBGbHVpZCBTeW50aFwiKVwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9HTSBTZXNzaW9uLnRlbXBsYXRlXCJcClwKXDlcOS0tIFJlcGxhY2UgXCJUcmFjayBOYW1lXCIgd2l0aCB0aGUgbmFtZSB5b3Ugd2FudCBmb3IgeW91ciBuZXcgdHJhY2tcClw5XDlsb2NhbCB0cmFja19uYW1lID0gXCJBY2UgRmx1aWQgU3ludGggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInphc1wiIHRoZW5cClw5XDlwcmludChcIlp5bmFkZHN1YmZ4XCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDlsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gZnVsbF9wYXRoIC4uIFwiL3phZnggc2Vzc2lvbi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiWnluYWRkc3ViZnggU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcInN0c1wiIHRoZW5cClw5XDlwcmludChcIlN1cmdlIFhUXCIpXApcOVw5LS0gUmVwbGFjZSB0aGUgcGF0aCBiZWxvdyB3aXRoIHRoZSBwYXRoIHRvIHlvdXIgdHJhY2sgdGVtcGxhdGVcClw5XDktLSBsb2NhbCB0ZW1wbGF0ZV9wYXRoID0gXCIvaG9tZS9qbWFuL3RlbXBsYXRlcy9TdXJnZSBYVC50ZW1wbGF0ZVwiXApcOVw5IGxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvU3VyZ2UgWFQgU2Vzc2lvbi50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiU3VyZ2UgWFQgU2Vzc2lvblwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImVkdlwiIHRoZW5cClw5XDlwcmludChcIkVkZ2UgVm9jYWxzXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9FZGdlIFZvY2Fscy50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiRWRnZSBWb2NhbHNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJmenZcIiB0aGVuXApcOVw5cHJpbnQoXCJGdXp6IFZvY2Fsc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvRnV6eiBWb2NhbHMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkZ1enogVm9jYWxzXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOWlmIHJ2IGFuZCBydltcImRyb3Bkb3duXCJdID09IFwiODA4XCIgdGhlblwKXDlcOXByaW50KFwiODA4IERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi84MDgtZHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIjgwOC84MDkgRHJ1bXNcIlwKXApcOVw5U2Vzc2lvbjpuZXdfcm91dGVfZnJvbV90ZW1wbGF0ZSAoMSwgQVJET1VSLlByZXNlbnRhdGlvbkluZm8ubWF4X29yZGVyLCB0ZW1wbGF0ZV9wYXRoLCB0cmFja19uYW1lLCBBUkRPVVIuUGxheWxpc3REaXNwb3NpdGlvbi5OZXdQbGF5bGlzdClcClw5ZW5kXApcClw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcImRybFwiIHRoZW5cClw5XDlwcmludChcIjgwOCBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvZHJ1bWxhYm9vaC50ZW1wbGF0ZVwiXApcClw5XDktLSBSZXBsYWNlIFwiVHJhY2sgTmFtZVwiIHdpdGggdGhlIG5hbWUgeW91IHdhbnQgZm9yIHlvdXIgbmV3IHRyYWNrXApcOVw5bG9jYWwgdHJhY2tfbmFtZSA9IFwiZHJ1bWxhYm9vaFwiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXDlcOVw5XDlcOVw5XDlcOVw5aWYgcnYgYW5kIHJ2W1wiZHJvcGRvd25cIl0gPT0gXCJicmRcIiB0aGVuXApcOVw5cHJpbnQoXCJCcnVzaCBEcnVtc1wiKVwKXApcClw5XDktLSBSZXBsYWNlIHRoZSBwYXRoIGJlbG93IHdpdGggdGhlIHBhdGggdG8geW91ciB0cmFjayB0ZW1wbGF0ZVwKXDlcOWxvY2FsIHRlbXBsYXRlX3BhdGggPSBmdWxsX3BhdGggLi4gXCIvQnJ1c2ggRHJ1bXMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIkJydXNoIERydW1zXCJcClwKXDlcOVNlc3Npb246bmV3X3JvdXRlX2Zyb21fdGVtcGxhdGUgKDEsIEFSRE9VUi5QcmVzZW50YXRpb25JbmZvLm1heF9vcmRlciwgdGVtcGxhdGVfcGF0aCwgdHJhY2tfbmFtZSwgQVJET1VSLlBsYXlsaXN0RGlzcG9zaXRpb24uTmV3UGxheWxpc3QpXApcOWVuZFwKXApcOVw5XDlcOVw5XDlcOVw5XDlpZiBydiBhbmQgcnZbXCJkcm9wZG93blwiXSA9PSBcIm9ycFwiIHRoZW5cClw5XDlwcmludChcIkJydXNoIERydW1zXCIpXApcClwKXDlcOS0tIFJlcGxhY2UgdGhlIHBhdGggYmVsb3cgd2l0aCB0aGUgcGF0aCB0byB5b3VyIHRyYWNrIHRlbXBsYXRlXApcOVw5bG9jYWwgdGVtcGxhdGVfcGF0aCA9IGZ1bGxfcGF0aCAuLiBcIi9PcmNoZXN0cmFsIFBlcmMudGVtcGxhdGVcIlwKXApcOVw5LS0gUmVwbGFjZSBcIlRyYWNrIE5hbWVcIiB3aXRoIHRoZSBuYW1lIHlvdSB3YW50IGZvciB5b3VyIG5ldyB0cmFja1wKXDlcOWxvY2FsIHRyYWNrX25hbWUgPSBcIk9yY2hlc3RyYWwgUGVyY1wiXApcClw5XDlTZXNzaW9uOm5ld19yb3V0ZV9mcm9tX3RlbXBsYXRlICgxLCBBUkRPVVIuUHJlc2VudGF0aW9uSW5mby5tYXhfb3JkZXIsIHRlbXBsYXRlX3BhdGgsIHRyYWNrX25hbWUsIEFSRE9VUi5QbGF5bGlzdERpc3Bvc2l0aW9uLk5ld1BsYXlsaXN0KVwKXDllbmRcClwKXApcClwKXAplbHNlXAogICAgcHJpbnQoXCJUaGUgZm9sZGVyIHdhcyBub3QgY3JlYXRlZCBsZXNzIHRoYW4gYSBtaW51dGUgYWdvLlwiKVwKZW5kXApcClwKXApcClwKXApcCmVuZCBlbmRcCiIgIHNbIm4iXSA9ICJMb2FkIGd1aWRlZCBtZW51IiAgc1siYSJdID0ge30gc1siYSJdWyJ4LXNjcmlwdC1vcmlnaW4iXSA9ICIvaG9tZS9qbWFuLy5jb25maWcvYXJkb3VyOC9zY3JpcHRzL3Nlc3Npb250cmFjay5sdWEiICAg</LuaCallback>
  </ActionHooks>
</UIScripts>

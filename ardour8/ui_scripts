<?xml version="1.0" encoding="UTF-8"?>
<UIScripts>
  <ActionScript lua="Lua 5.3"></ActionScript>
  <ActionHooks>
    <LuaCallback lua="Lua 5.3" id="13055" name="auto save snapshot" signals="00010000000000000000000000000000000000000000000000">cyA9IHt9IHNbIm4iXSA9ICJhdXRvIHNhdmUgc25hcHNob3QiICBzWyJzIl0gPSAiYXJkb3VyIHtcClw5W1widHlwZVwiXSAgICA9IFwiRWRpdG9ySG9va1wiLFwKXDluYW1lICAgICAgICA9IFwiYXV0byBzYXZlIHNuYXBzaG90XCIsXApcOWF1dGhvciAgICAgID0gXCJBcmRvdXIgVGVhbVwiLFwKXDlkZXNjcmlwdGlvbiA9IFwiU2F2ZSBhIHNlc3Npb24tc25hcHNob3QgcGVyaW9kaWNhbGx5IChldmVyeSBtaW51dGUpIG5hbWVkIGFmdGVyIHRoZSBjdXJyZW50IGRhdGUtdGltZVwiLFwKfVwKXAotLSBzdWJzY3JpYmUgdG8gc2lnbmFsc1wKLS0gaHR0cDovL21hbnVhbC5hcmRvdXIub3JnL2x1YS1zY3JpcHRpbmcvY2xhc3NfcmVmZXJlbmNlLyNMdWFTaWduYWwuTHVhU2lnbmFsXApmdW5jdGlvbiBzaWduYWxzICgpXApcOXJldHVybiBMdWFTaWduYWwuU2V0KCk6YWRkICh7W0x1YVNpZ25hbC5MdWFUaW1lclNdID0gdHJ1ZX0pXAplbmRcClwKLS0gY3JlYXRlIGNhbGxiYWNrIGZ1bmN0aW9uXApmdW5jdGlvbiBmYWN0b3J5ICgpXApcOWxvY2FsIF9sYXN0X3NuYXBzaG90X3RpbWUgPSAwIC0tIHBlcnNpc3RlbnQgdmFyaWFibGVcClw5bG9jYWwgX3NuYXBzaG90X2ludGVydmFsID0gNjAgKiAxIC0tIDE1IG1pbnV0ZXNcClwKXDktLSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBpbnZva2VkIHdoZW4gc2lnbmFsIGlzIGVtaXR0ZWQsIGV2ZXJ5IDEwMG1zXApcOXJldHVybiBmdW5jdGlvbiAoc2lnbmFsLCByZWYsIC4uLilcClwKXDlcOWxvY2FsIG5vdyA9IG9zLnRpbWUgKCk7IC0tIHVuaXgtdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwXApcClw5XDktLSBza2lwIGluaXRpYWwgc2F2ZSB3aGVuIHNjcmlwdCBpcyBsb2FkZWRcClw5XDlpZiAoX2xhc3Rfc25hcHNob3RfdGltZSA9PSAwKSB0aGVuXApcOVw5XDlfbGFzdF9zbmFwc2hvdF90aW1lID0gbm93O1wKXDlcOWVuZFwKXApcOVw5LS0gZXZlcnkgMTUgbWluc1wKXDlcOWlmIChub3cgPiBfbGFzdF9zbmFwc2hvdF90aW1lICsgX3NuYXBzaG90X2ludGVydmFsKSB0aGVuXApcClw5XDlcOS0tIGRvbid0IHNhdmUgd2hpbGUgcmVjb3JkaW5nLCBtYXkgaW50ZXJmZXJlIHdpdGggcmVjb3JkaW5nXApcOVw5XDlpZiBTZXNzaW9uOmFjdGl2ZWx5X3JlY29yZGluZygpIHRoZW5cClw5XDlcOVw5LS0gcXVldWUgMzAgc2VjIGFmdGVyIHJlYy1zdG9wXApcOVw5XDlcOV9sYXN0X3NuYXBzaG90X3RpbWUgPSBub3cgLSBfc25hcHNob3RfaW50ZXJ2YWwgKyAzMFwKXDlcOVw5XDlyZXR1cm5cClw5XDlcOWVuZFwKXApcOVw5XDlfbGFzdF9zbmFwc2hvdF90aW1lID0gbm93XApcOVw5XDktLSBmb3JtYXQgZGF0ZS10aW1lIChhdm9pZCBjb2xvbilcClw5XDlcOWxvY2FsIHNuYXBzaG90X25hbWUgPSBvcy5kYXRlIChcIiVZLSVtLSVkICVILiVNLiVTXCIsIG5vdylcClw5XDlcOS0tIHNhdmUgc2Vzc2lvbiAtLSBodHRwOi8vbWFudWFsLmFyZG91ci5vcmcvbHVhLXNjcmlwdGluZy9jbGFzc19yZWZlcmVuY2UvI0FSRE9VUjpTZXNzaW9uXApcOVw5XDlTZXNzaW9uOnNhdmVfc3RhdGUgKFwiYmFja3VwIFwiIC4uIHNuYXBzaG90X25hbWUsIGZhbHNlLCBmYWxzZSwgZmFsc2UpXApcOVw5ZW5kXApcClw5ZW5kXAplbmRcCiIgIHNbImYiXSA9ICJcMjdMdWFTXDBcMjWTXDEzXApcMjZcClw0XDhcNFw4XDh4VlwwXDBcMFwwXDBcMFwwXDBcMFwwXDAod0BcMVwwXDE1XDBcMFwwL1wwXDBcMFwwXDBcM1w1XDBcMFwwXDFcMFwwXDBBQFwwXDCsXDBcMFwwplwwXDBcMSZcMIBcMFwyXDBcMFwwXDE5XDBcMFwwXDBcMFwwXDBcMFwxOTxcMFwwXDBcMFwwXDBcMFwxXDBcMFwwXDBcMFwxXDBcMFwwXDBcMjBcMFwwXDAuXDBcMFwwXDJcMVwKJlwwXDBcMIZcMEBcMIdAQFwxpICAXDDFXDCAXDBcMzGAwFwxXDMwXDBcMICJXDCAXDDFXDCAXDBcNVwxXDBcMc1cMIFcMSCAgFwxXDMwXDBcNoDGwEBcMMxcMMFcMeSAXDBcMeJcMFwwXDBcMzBcMFwxgMVcMFwwXDHOwFwwXDHNQMFcMclcMIBcMCZcMIBcMIlcMIBcMMZcMEBcMMeAwVwxXDHBXDFcMEBcMVwwXDHkgIBcMVw2wUBcMFwxMlwxQlwygUFcMlwwwFwxgFwxncFcMVwzw1wxXDBcMFwzXDJcMFwwQ1wyXDBcMCRBXDBcMyZcMIBcMFwKXDBcMFwwXDRcM29zXDRcNXRpbWVcMTlcMFwwXDBcMFwwXDBcMFwwXDRcOFNlc3Npb25cNFwxOWFjdGl2ZWx5X3JlY29yZGluZ1wxOVwzMFwwXDBcMFwwXDBcMFwwXDRcNWRhdGVcNFwxOCVZLSVtLSVkICVILiVNLiVTXDRcMTFzYXZlX3N0YXRlXDRcOGJhY2t1cCBcM1wwXDBcMFwwXDBcMVwwXDFcMVwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiBzWyJhIl0gPSB7fSBzWyJhIl1bIngtc2NyaXB0LW9yaWdpbiJdID0gIi9ob21lL2p1c3Rpbi8uY29uZmlnL2FyZG91cjgvc2NyaXB0cy9hdXRvc2F2ZS5sdWEiICAg</LuaCallback>
    <LuaCallback lua="Lua 5.3" id="39916" name="Load guided menu" signals="01000000000000000000000000000000000000000000000000"></LuaCallback>
  </ActionHooks>
</UIScripts>
